
Firmware_Principal_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000188e8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  08018ab8  08018ab8  00028ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019034  08019034  00030198  2**0
                  CONTENTS
  4 .ARM          00000008  08019034  08019034  00029034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801903c  0801903c  00030198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801903c  0801903c  0002903c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019040  08019040  00029040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  08019044  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033d0  20000198  080191dc  00030198  2**2
                  ALLOC
 10 ._user_heap_stack 00011000  20003568  080191dc  00033568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030198  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fec0  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000069e3  00000000  00000000  00060088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002378  00000000  00000000  00066a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002058  00000000  00000000  00068de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ea60  00000000  00000000  0006ae40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035c9f  00000000  00000000  000998a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3f5c  00000000  00000000  000cf53f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c349b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009724  00000000  00000000  001c34ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000198 	.word	0x20000198
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08018aa0 	.word	0x08018aa0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000019c 	.word	0x2000019c
 800020c:	08018aa0 	.word	0x08018aa0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <FT_CAN_FilterConfig>:
#include "ft_can.h"

static void FT_CAN_ProcessData(FT_Data* FT_Data_Struct);

HAL_StatusTypeDef FT_CAN_FilterConfig(CAN_HandleTypeDef *hcan, uint16_t FT_Product, uint8_t filter_bank_position, uint32_t Filter_FIFO)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b090      	sub	sp, #64	; 0x40
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	460b      	mov	r3, r1
 80005c0:	817b      	strh	r3, [r7, #10]
 80005c2:	4613      	mov	r3, r2
 80005c4:	727b      	strb	r3, [r7, #9]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filter_id = FT_Product << 19, mask_id = 0x1FF80000;
 80005c6:	897b      	ldrh	r3, [r7, #10]
 80005c8:	04db      	lsls	r3, r3, #19
 80005ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <FT_CAN_FilterConfig+0x68>)
 80005ce:	63bb      	str	r3, [r7, #56]	; 0x38

	sFilterConfig.FilterBank = filter_bank_position;
 80005d0:	7a7b      	ldrb	r3, [r7, #9]
 80005d2:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005d4:	2300      	movs	r3, #0
 80005d6:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005d8:	2301      	movs	r3, #1
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 80005dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005de:	0b5b      	lsrs	r3, r3, #13
 80005e0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 80005e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005e4:	00db      	lsls	r3, r3, #3
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 80005ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005ec:	0b5b      	lsrs	r3, r3, #13
 80005ee:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 80005f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005f2:	00db      	lsls	r3, r3, #3
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterFIFOAssignment = Filter_FIFO;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterActivation = ENABLE;
 80005fc:	2301      	movs	r3, #1
 80005fe:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.SlaveStartFilterBank = 14 + filter_bank_position;
 8000600:	7a7b      	ldrb	r3, [r7, #9]
 8000602:	330e      	adds	r3, #14
 8000604:	637b      	str	r3, [r7, #52]	; 0x34

	return HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 8000606:	f107 0310 	add.w	r3, r7, #16
 800060a:	4619      	mov	r1, r3
 800060c:	68f8      	ldr	r0, [r7, #12]
 800060e:	f006 fff3 	bl	80075f8 <HAL_CAN_ConfigFilter>
 8000612:	4603      	mov	r3, r0
}
 8000614:	4618      	mov	r0, r3
 8000616:	3740      	adds	r7, #64	; 0x40
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	1ff80000 	.word	0x1ff80000

08000620 <FT_CAN_ReceiveData>:

void FT_CAN_ReceiveData(CAN_RxHeaderTypeDef* pRxHeader, uint8_t* pData, FT_Data* FT_Data_Struct)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
	uint8_t buffer[8];
	uint8_t DLC = pRxHeader->DLC;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	691b      	ldr	r3, [r3, #16]
 8000630:	77bb      	strb	r3, [r7, #30]
	uint32_t ExtId = pRxHeader->ExtId >> 19;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	0cdb      	lsrs	r3, r3, #19
 8000638:	61bb      	str	r3, [r7, #24]

	if(	   (ExtId != FT_Gear_Controller)
 800063a:	69bb      	ldr	r3, [r7, #24]
 800063c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000640:	d031      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Knock_Meter)
 8000642:	69bb      	ldr	r3, [r7, #24]
 8000644:	f240 1241 	movw	r2, #321	; 0x141
 8000648:	4293      	cmp	r3, r2
 800064a:	d02c      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Boost_Controller2)
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8000652:	d028      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Injector_Driver)
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 800065a:	d024      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_WBO2_Nano)
 800065c:	69bb      	ldr	r3, [r7, #24]
 800065e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8000662:	d020      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_WBO2_Slim)
 8000664:	69bb      	ldr	r3, [r7, #24]
 8000666:	f240 2241 	movw	r2, #577	; 0x241
 800066a:	4293      	cmp	r3, r2
 800066c:	d01b      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Alcohol_O2)
 800066e:	69bb      	ldr	r3, [r7, #24]
 8000670:	f240 2242 	movw	r2, #578	; 0x242
 8000674:	4293      	cmp	r3, r2
 8000676:	d016      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FTSpark)
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	f240 2243 	movw	r2, #579	; 0x243
 800067e:	4293      	cmp	r3, r2
 8000680:	d011      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Switchpad)
 8000682:	69bb      	ldr	r3, [r7, #24]
 8000684:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8000688:	d00d      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT500)
 800068a:	69bb      	ldr	r3, [r7, #24]
 800068c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000690:	d009      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Power_ECU)
 8000692:	69bb      	ldr	r3, [r7, #24]
 8000694:	f240 2281 	movw	r2, #641	; 0x281
 8000698:	4293      	cmp	r3, r2
 800069a:	d004      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (pRxHeader->IDE != CAN_ID_EXT))
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	2b04      	cmp	r3, #4
 80006a2:	f040 83c4 	bne.w	8000e2e <FT_CAN_ReceiveData+0x80e>
		return;

	ExtId = pRxHeader->ExtId;
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	61bb      	str	r3, [r7, #24]

	for(uint8_t i = 0; i < DLC; i++)
 80006ac:	2300      	movs	r3, #0
 80006ae:	77fb      	strb	r3, [r7, #31]
 80006b0:	e00b      	b.n	80006ca <FT_CAN_ReceiveData+0xaa>
		buffer[i] = pData[i];
 80006b2:	7ffb      	ldrb	r3, [r7, #31]
 80006b4:	68ba      	ldr	r2, [r7, #8]
 80006b6:	441a      	add	r2, r3
 80006b8:	7ffb      	ldrb	r3, [r7, #31]
 80006ba:	7812      	ldrb	r2, [r2, #0]
 80006bc:	3320      	adds	r3, #32
 80006be:	443b      	add	r3, r7
 80006c0:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(uint8_t i = 0; i < DLC; i++)
 80006c4:	7ffb      	ldrb	r3, [r7, #31]
 80006c6:	3301      	adds	r3, #1
 80006c8:	77fb      	strb	r3, [r7, #31]
 80006ca:	7ffa      	ldrb	r2, [r7, #31]
 80006cc:	7fbb      	ldrb	r3, [r7, #30]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d3ef      	bcc.n	80006b2 <FT_CAN_ReceiveData+0x92>

	if((((ExtId / 0x800) & 0x07) == 0x00))// || (((ExtId / 0x800) & 0x07) == 0x01))
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	0adb      	lsrs	r3, r3, #11
 80006d6:	f003 0307 	and.w	r3, r3, #7
 80006da:	2b00      	cmp	r3, #0
 80006dc:	f040 81d5 	bne.w	8000a8a <FT_CAN_ReceiveData+0x46a>
	{
		if((ExtId & 0xFFF) == 0x600)
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80006e6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80006ea:	d13c      	bne.n	8000766 <FT_CAN_ReceiveData+0x146>
		{
			FT_Data_Struct->tps  = buffer[0] << 8;
 80006ec:	7c3b      	ldrb	r3, [r7, #16]
 80006ee:	021b      	lsls	r3, r3, #8
 80006f0:	b21a      	sxth	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			FT_Data_Struct->tps |= buffer[1];
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 80006fe:	7c7b      	ldrb	r3, [r7, #17]
 8000700:	b21b      	sxth	r3, r3
 8000702:	4313      	orrs	r3, r2
 8000704:	b21a      	sxth	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			FT_Data_Struct->map  = buffer[2] << 8;
 800070c:	7cbb      	ldrb	r3, [r7, #18]
 800070e:	021b      	lsls	r3, r3, #8
 8000710:	b21a      	sxth	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->map |= buffer[3];
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f9b3 204a 	ldrsh.w	r2, [r3, #74]	; 0x4a
 800071e:	7cfb      	ldrb	r3, [r7, #19]
 8000720:	b21b      	sxth	r3, r3
 8000722:	4313      	orrs	r3, r2
 8000724:	b21a      	sxth	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->iat  = buffer[4] << 8;
 800072c:	7d3b      	ldrb	r3, [r7, #20]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	b21a      	sxth	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	87da      	strh	r2, [r3, #62]	; 0x3e
			FT_Data_Struct->iat |= buffer[5];
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
 800073c:	7d7b      	ldrb	r3, [r7, #21]
 800073e:	b21b      	sxth	r3, r3
 8000740:	4313      	orrs	r3, r2
 8000742:	b21a      	sxth	r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	87da      	strh	r2, [r3, #62]	; 0x3e
			FT_Data_Struct->ect  = buffer[6] << 8;
 8000748:	7dbb      	ldrb	r3, [r7, #22]
 800074a:	021b      	lsls	r3, r3, #8
 800074c:	b21a      	sxth	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	875a      	strh	r2, [r3, #58]	; 0x3a
			FT_Data_Struct->ect |= buffer[7];
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f9b3 203a 	ldrsh.w	r2, [r3, #58]	; 0x3a
 8000758:	7dfb      	ldrb	r3, [r7, #23]
 800075a:	b21b      	sxth	r3, r3
 800075c:	4313      	orrs	r3, r2
 800075e:	b21a      	sxth	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	875a      	strh	r2, [r3, #58]	; 0x3a

			return;
 8000764:	e366      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
		}

		else if((ExtId & 0xFFF) == 0x601)
 8000766:	69bb      	ldr	r3, [r7, #24]
 8000768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800076c:	f240 6201 	movw	r2, #1537	; 0x601
 8000770:	4293      	cmp	r3, r2
 8000772:	d13e      	bne.n	80007f2 <FT_CAN_ReceiveData+0x1d2>
		{
			FT_Data_Struct->oil_pressure  	  = buffer[0] << 8;
 8000774:	7c3b      	ldrb	r3, [r7, #16]
 8000776:	021b      	lsls	r3, r3, #8
 8000778:	b21a      	sxth	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->oil_pressure 	 |= buffer[1];
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f9b3 204c 	ldrsh.w	r2, [r3, #76]	; 0x4c
 8000786:	7c7b      	ldrb	r3, [r7, #17]
 8000788:	b21b      	sxth	r3, r3
 800078a:	4313      	orrs	r3, r2
 800078c:	b21a      	sxth	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->fuel_pressure 	  = buffer[2] << 8;
 8000794:	7cbb      	ldrb	r3, [r7, #18]
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	b21a      	sxth	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			FT_Data_Struct->fuel_pressure 	 |= buffer[3];
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
 80007a6:	7cfb      	ldrb	r3, [r7, #19]
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	4313      	orrs	r3, r2
 80007ac:	b21a      	sxth	r2, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			FT_Data_Struct->coolant_pressure  = buffer[4] << 8;
 80007b4:	7d3b      	ldrb	r3, [r7, #20]
 80007b6:	021b      	lsls	r3, r3, #8
 80007b8:	b21a      	sxth	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	879a      	strh	r2, [r3, #60]	; 0x3c
			FT_Data_Struct->coolant_pressure |= buffer[5];
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 80007c4:	7d7b      	ldrb	r3, [r7, #21]
 80007c6:	b21b      	sxth	r3, r3
 80007c8:	4313      	orrs	r3, r2
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	879a      	strh	r2, [r3, #60]	; 0x3c
			FT_Data_Struct->gear  			  = buffer[6] << 8;
 80007d0:	7dbb      	ldrb	r3, [r7, #22]
 80007d2:	021b      	lsls	r3, r3, #8
 80007d4:	b21a      	sxth	r2, r3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			FT_Data_Struct->gear 			 |= buffer[7];
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 80007e2:	7dfb      	ldrb	r3, [r7, #23]
 80007e4:	b21b      	sxth	r3, r3
 80007e6:	4313      	orrs	r3, r2
 80007e8:	b21a      	sxth	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

			return;
 80007f0:	e320      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
		}

		else if((ExtId & 0xFFF) == 0x602)
 80007f2:	69bb      	ldr	r3, [r7, #24]
 80007f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007f8:	f240 6202 	movw	r2, #1538	; 0x602
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d140      	bne.n	8000882 <FT_CAN_ReceiveData+0x262>
		{
			FT_Data_Struct->lambda  		 = buffer[0] << 8;
 8000800:	7c3b      	ldrb	r3, [r7, #16]
 8000802:	021b      	lsls	r3, r3, #8
 8000804:	b21a      	sxth	r2, r3
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->lambda 			|= buffer[1];
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8000812:	7c7b      	ldrb	r3, [r7, #17]
 8000814:	b21b      	sxth	r3, r3
 8000816:	4313      	orrs	r3, r2
 8000818:	b21a      	sxth	r2, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->rpm  			 = buffer[2] << 8;
 8000820:	7cbb      	ldrb	r3, [r7, #18]
 8000822:	021b      	lsls	r3, r3, #8
 8000824:	b21a      	sxth	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			FT_Data_Struct->rpm 			|= buffer[3];
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f9b3 2052 	ldrsh.w	r2, [r3, #82]	; 0x52
 8000832:	7cfb      	ldrb	r3, [r7, #19]
 8000834:	b21b      	sxth	r3, r3
 8000836:	4313      	orrs	r3, r2
 8000838:	b21a      	sxth	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			FT_Data_Struct->oil_temperature  = buffer[4] << 8;
 8000840:	7d3b      	ldrb	r3, [r7, #20]
 8000842:	021b      	lsls	r3, r3, #8
 8000844:	b21a      	sxth	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			FT_Data_Struct->oil_temperature |= buffer[5];
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	; 0x4e
 8000852:	7d7b      	ldrb	r3, [r7, #21]
 8000854:	b21b      	sxth	r3, r3
 8000856:	4313      	orrs	r3, r2
 8000858:	b21a      	sxth	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			FT_Data_Struct->pit_limiter  	 = buffer[6] << 8;
 8000860:	7dbb      	ldrb	r3, [r7, #22]
 8000862:	021b      	lsls	r3, r3, #8
 8000864:	b21a      	sxth	r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			FT_Data_Struct->pit_limiter 	|= buffer[7];
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 8000872:	7dfb      	ldrb	r3, [r7, #23]
 8000874:	b21b      	sxth	r3, r3
 8000876:	4313      	orrs	r3, r2
 8000878:	b21a      	sxth	r2, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 8000880:	e2d8      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
		}

		else if((ExtId & 0xFFF) == 0x603)
 8000882:	69bb      	ldr	r3, [r7, #24]
 8000884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000888:	f240 6203 	movw	r2, #1539	; 0x603
 800088c:	4293      	cmp	r3, r2
 800088e:	d140      	bne.n	8000912 <FT_CAN_ReceiveData+0x2f2>
		{
			FT_Data_Struct->wheel_speed_fr	 = buffer[0] << 8;
 8000890:	7c3b      	ldrb	r3, [r7, #16]
 8000892:	021b      	lsls	r3, r3, #8
 8000894:	b21a      	sxth	r2, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			FT_Data_Struct->wheel_speed_fr	|= buffer[1];
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	f9b3 2058 	ldrsh.w	r2, [r3, #88]	; 0x58
 80008a2:	7c7b      	ldrb	r3, [r7, #17]
 80008a4:	b21b      	sxth	r3, r3
 80008a6:	4313      	orrs	r3, r2
 80008a8:	b21a      	sxth	r2, r3
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			FT_Data_Struct->wheel_speed_fl	 = buffer[2] << 8;
 80008b0:	7cbb      	ldrb	r3, [r7, #18]
 80008b2:	021b      	lsls	r3, r3, #8
 80008b4:	b21a      	sxth	r2, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			FT_Data_Struct->wheel_speed_fl	|= buffer[3];
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	f9b3 2056 	ldrsh.w	r2, [r3, #86]	; 0x56
 80008c2:	7cfb      	ldrb	r3, [r7, #19]
 80008c4:	b21b      	sxth	r3, r3
 80008c6:	4313      	orrs	r3, r2
 80008c8:	b21a      	sxth	r2, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			FT_Data_Struct->wheel_speed_rr	 = buffer[4] << 8;
 80008d0:	7d3b      	ldrb	r3, [r7, #20]
 80008d2:	021b      	lsls	r3, r3, #8
 80008d4:	b21a      	sxth	r2, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
			FT_Data_Struct->wheel_speed_rr	|= buffer[5];
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f9b3 205c 	ldrsh.w	r2, [r3, #92]	; 0x5c
 80008e2:	7d7b      	ldrb	r3, [r7, #21]
 80008e4:	b21b      	sxth	r3, r3
 80008e6:	4313      	orrs	r3, r2
 80008e8:	b21a      	sxth	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
			FT_Data_Struct->wheel_speed_rl 	 = buffer[6] << 8;
 80008f0:	7dbb      	ldrb	r3, [r7, #22]
 80008f2:	021b      	lsls	r3, r3, #8
 80008f4:	b21a      	sxth	r2, r3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
			FT_Data_Struct->wheel_speed_rl 	|= buffer[7];
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	f9b3 205a 	ldrsh.w	r2, [r3, #90]	; 0x5a
 8000902:	7dfb      	ldrb	r3, [r7, #23]
 8000904:	b21b      	sxth	r3, r3
 8000906:	4313      	orrs	r3, r2
 8000908:	b21a      	sxth	r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

			return;
 8000910:	e290      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
		}

		else if((ExtId & 0xFFF) == 0x606)
 8000912:	69bb      	ldr	r3, [r7, #24]
 8000914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000918:	f240 6206 	movw	r2, #1542	; 0x606
 800091c:	4293      	cmp	r3, r2
 800091e:	d138      	bne.n	8000992 <FT_CAN_ReceiveData+0x372>
		{
			FT_Data_Struct->accel_long		 = buffer[0] << 8;
 8000920:	7c3b      	ldrb	r3, [r7, #16]
 8000922:	021b      	lsls	r3, r3, #8
 8000924:	b21a      	sxth	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	869a      	strh	r2, [r3, #52]	; 0x34
			FT_Data_Struct->accel_long		|= buffer[1];
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 8000930:	7c7b      	ldrb	r3, [r7, #17]
 8000932:	b21b      	sxth	r3, r3
 8000934:	4313      	orrs	r3, r2
 8000936:	b21a      	sxth	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	869a      	strh	r2, [r3, #52]	; 0x34
			FT_Data_Struct->accel_lat		 = buffer[2] << 8;
 800093c:	7cbb      	ldrb	r3, [r7, #18]
 800093e:	021b      	lsls	r3, r3, #8
 8000940:	b21a      	sxth	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	865a      	strh	r2, [r3, #50]	; 0x32
			FT_Data_Struct->accel_lat		|= buffer[3];
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	; 0x32
 800094c:	7cfb      	ldrb	r3, [r7, #19]
 800094e:	b21b      	sxth	r3, r3
 8000950:	4313      	orrs	r3, r2
 8000952:	b21a      	sxth	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	865a      	strh	r2, [r3, #50]	; 0x32
			FT_Data_Struct->angle_pitch	 = buffer[4] << 8;
 8000958:	7d3b      	ldrb	r3, [r7, #20]
 800095a:	021b      	lsls	r3, r3, #8
 800095c:	b21a      	sxth	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	86da      	strh	r2, [r3, #54]	; 0x36
			FT_Data_Struct->angle_pitch	|= buffer[5];
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	; 0x36
 8000968:	7d7b      	ldrb	r3, [r7, #21]
 800096a:	b21b      	sxth	r3, r3
 800096c:	4313      	orrs	r3, r2
 800096e:	b21a      	sxth	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	86da      	strh	r2, [r3, #54]	; 0x36
			FT_Data_Struct->angle_roll	 = buffer[6] << 8;
 8000974:	7dbb      	ldrb	r3, [r7, #22]
 8000976:	021b      	lsls	r3, r3, #8
 8000978:	b21a      	sxth	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	871a      	strh	r2, [r3, #56]	; 0x38
			FT_Data_Struct->angle_roll	|= buffer[7];
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	; 0x38
 8000984:	7dfb      	ldrb	r3, [r7, #23]
 8000986:	b21b      	sxth	r3, r3
 8000988:	4313      	orrs	r3, r2
 800098a:	b21a      	sxth	r2, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	871a      	strh	r2, [r3, #56]	; 0x38

			return;
 8000990:	e250      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
		}

		else if((ExtId & 0xFFF) == 0x607)
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000998:	f240 6207 	movw	r2, #1543	; 0x607
 800099c:	4293      	cmp	r3, r2
 800099e:	d120      	bne.n	80009e2 <FT_CAN_ReceiveData+0x3c2>
		{
			FT_Data_Struct->lambda_correction  = buffer[0] << 8;
 80009a0:	7c3b      	ldrb	r3, [r7, #16]
 80009a2:	021b      	lsls	r3, r3, #8
 80009a4:	b21a      	sxth	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->lambda_correction |= buffer[1];
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 80009b2:	7c7b      	ldrb	r3, [r7, #17]
 80009b4:	b21b      	sxth	r3, r3
 80009b6:	4313      	orrs	r3, r2
 80009b8:	b21a      	sxth	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->fuel_flow_total	   = buffer[2] << 8;
 80009c0:	7cbb      	ldrb	r3, [r7, #18]
 80009c2:	021b      	lsls	r3, r3, #8
 80009c4:	b21a      	sxth	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->fuel_flow_total	  |= buffer[3];
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
 80009d2:	7cfb      	ldrb	r3, [r7, #19]
 80009d4:	b21b      	sxth	r3, r3
 80009d6:	4313      	orrs	r3, r2
 80009d8:	b21a      	sxth	r2, r3
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

			return;
 80009e0:	e228      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
		}

#ifndef FT_CAN_FIXED
		else if((ExtId & 0xFF) == 0xFF)
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2bff      	cmp	r3, #255	; 0xff
 80009e8:	f040 8224 	bne.w	8000e34 <FT_CAN_ReceiveData+0x814>
		{
			FT_Data_Struct->data_id  	  = buffer[0] << 8;
 80009ec:	7c3b      	ldrb	r3, [r7, #16]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	021b      	lsls	r3, r3, #8
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
			FT_Data_Struct->data_id 	 |= buffer[1];
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000a00:	7c7b      	ldrb	r3, [r7, #17]
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	4313      	orrs	r3, r2
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
			FT_Data_Struct->data_content  = buffer[2] << 8;
 8000a0e:	7cbb      	ldrb	r3, [r7, #18]
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	021b      	lsls	r3, r3, #8
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
			FT_Data_Struct->data_content |= buffer[3];
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000a22:	7cfb      	ldrb	r3, [r7, #19]
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	4313      	orrs	r3, r2
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

			FT_CAN_ProcessData(FT_Data_Struct);
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f000 fa03 	bl	8000e3c <FT_CAN_ProcessData>

			if(DLC == 8)
 8000a36:	7fbb      	ldrb	r3, [r7, #30]
 8000a38:	2b08      	cmp	r3, #8
 8000a3a:	f040 81fa 	bne.w	8000e32 <FT_CAN_ReceiveData+0x812>
			{
				FT_Data_Struct->data_id  	  = buffer[4] << 8;
 8000a3e:	7d3b      	ldrb	r3, [r7, #20]
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	021b      	lsls	r3, r3, #8
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FT_Data_Struct->data_id 	 |= buffer[5];
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000a52:	7d7b      	ldrb	r3, [r7, #21]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	4313      	orrs	r3, r2
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FT_Data_Struct->data_content  = buffer[6] << 8;
 8000a60:	7dbb      	ldrb	r3, [r7, #22]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	021b      	lsls	r3, r3, #8
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
				FT_Data_Struct->data_content |= buffer[7];
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000a74:	7dfb      	ldrb	r3, [r7, #23]
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

				FT_CAN_ProcessData(FT_Data_Struct);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f000 f9da 	bl	8000e3c <FT_CAN_ProcessData>
			}

			return;
 8000a88:	e1d3      	b.n	8000e32 <FT_CAN_ReceiveData+0x812>
		}
	}

	else if((((ExtId / 0x800) & 0x07) == 0x02))// || ((((ExtId / 0x800) & 0x07) == 0x03)))
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	0adb      	lsrs	r3, r3, #11
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	f040 81ce 	bne.w	8000e34 <FT_CAN_ReceiveData+0x814>
	{
		if(buffer[0] == 0xFF)
 8000a98:	7c3b      	ldrb	r3, [r7, #16]
 8000a9a:	2bff      	cmp	r3, #255	; 0xff
 8000a9c:	d125      	bne.n	8000aea <FT_CAN_ReceiveData+0x4ca>
		{
			FT_Data_Struct->data_id  	  = buffer[1] << 8;
 8000a9e:	7c7b      	ldrb	r3, [r7, #17]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	021b      	lsls	r3, r3, #8
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
			FT_Data_Struct->data_id 	 |= buffer[2];
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000ab2:	7cbb      	ldrb	r3, [r7, #18]
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
			FT_Data_Struct->data_content  = buffer[3] << 8;
 8000ac0:	7cfb      	ldrb	r3, [r7, #19]
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	021b      	lsls	r3, r3, #8
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
			FT_Data_Struct->data_content |= buffer[4];
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000ad4:	7d3b      	ldrb	r3, [r7, #20]
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
			FT_CAN_ProcessData(FT_Data_Struct);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f000 f9aa 	bl	8000e3c <FT_CAN_ProcessData>

			return;
 8000ae8:	e1a4      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>

		//Segmented Messages
		else
		{
			//First Message
			if(buffer[0] == 0)
 8000aea:	7c3b      	ldrb	r3, [r7, #16]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d141      	bne.n	8000b74 <FT_CAN_ReceiveData+0x554>
			{
				FT_Data_Struct->data_length   = buffer[1] << 8;
 8000af0:	7c7b      	ldrb	r3, [r7, #17]
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	021b      	lsls	r3, r3, #8
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
				FT_Data_Struct->data_length  |= buffer[2];
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8000b04:	7cbb      	ldrb	r3, [r7, #18]
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

				FT_Data_Struct->data_id  	  = buffer[3] << 8;
 8000b12:	7cfb      	ldrb	r3, [r7, #19]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	021b      	lsls	r3, r3, #8
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FT_Data_Struct->data_id 	 |= buffer[4];
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000b26:	7d3b      	ldrb	r3, [r7, #20]
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FT_Data_Struct->data_content  = buffer[5] << 8;
 8000b34:	7d7b      	ldrb	r3, [r7, #21]
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	021b      	lsls	r3, r3, #8
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
				FT_Data_Struct->data_content |= buffer[6];
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000b48:	7dbb      	ldrb	r3, [r7, #22]
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
				FT_CAN_ProcessData(FT_Data_Struct);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f000 f970 	bl	8000e3c <FT_CAN_ProcessData>

				FT_Data_Struct->data_id = buffer[7] << 8;
 8000b5c:	7dfb      	ldrb	r3, [r7, #23]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FT_Data_Struct->data_last_seg = 0;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

				return;
 8000b72:	e15f      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
			}
			//Messages 1, 5, etc
			else if((buffer[0] % 4) == 1)
 8000b74:	7c3b      	ldrb	r3, [r7, #16]
 8000b76:	f003 0303 	and.w	r3, r3, #3
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d153      	bne.n	8000c28 <FT_CAN_ReceiveData+0x608>
			{
				if(buffer[0] == (FT_Data_Struct->data_last_seg + 1))
 8000b80:	7c3b      	ldrb	r3, [r7, #16]
 8000b82:	461a      	mov	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d11d      	bne.n	8000bcc <FT_CAN_ReceiveData+0x5ac>
				{
					FT_Data_Struct->data_id 	 |= buffer[1];
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000b96:	7c7b      	ldrb	r3, [r7, #17]
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_content  = buffer[2] << 8;
 8000ba4:	7cbb      	ldrb	r3, [r7, #18]
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	021b      	lsls	r3, r3, #8
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_Data_Struct->data_content |= buffer[3];
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000bb8:	7cfb      	ldrb	r3, [r7, #19]
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_CAN_ProcessData(FT_Data_Struct);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f000 f938 	bl	8000e3c <FT_CAN_ProcessData>
				}

				if(DLC == 8)
 8000bcc:	7fbb      	ldrb	r3, [r7, #30]
 8000bce:	2b08      	cmp	r3, #8
 8000bd0:	d124      	bne.n	8000c1c <FT_CAN_ReceiveData+0x5fc>
				{
					FT_Data_Struct->data_id  	  = buffer[4] << 8;
 8000bd2:	7d3b      	ldrb	r3, [r7, #20]
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	021b      	lsls	r3, r3, #8
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_id 	 |= buffer[5];
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000be6:	7d7b      	ldrb	r3, [r7, #21]
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	4313      	orrs	r3, r2
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_content  = buffer[6] << 8;
 8000bf4:	7dbb      	ldrb	r3, [r7, #22]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	021b      	lsls	r3, r3, #8
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_Data_Struct->data_content |= buffer[7];
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000c08:	7dfb      	ldrb	r3, [r7, #23]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_CAN_ProcessData(FT_Data_Struct);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f000 f910 	bl	8000e3c <FT_CAN_ProcessData>
				}

				FT_Data_Struct->data_last_seg = buffer[0];
 8000c1c:	7c3b      	ldrb	r3, [r7, #16]
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

				return;
 8000c26:	e105      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
			}
			//messages 2, 6, etc
			else if((buffer[0] % 4) == 2)
 8000c28:	7c3b      	ldrb	r3, [r7, #16]
 8000c2a:	f003 0303 	and.w	r3, r3, #3
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d145      	bne.n	8000cc0 <FT_CAN_ReceiveData+0x6a0>
			{
				FT_Data_Struct->data_id  	  = buffer[1] << 8;
 8000c34:	7c7b      	ldrb	r3, [r7, #17]
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	021b      	lsls	r3, r3, #8
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FT_Data_Struct->data_id 	 |= buffer[2];
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000c48:	7cbb      	ldrb	r3, [r7, #18]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FT_Data_Struct->data_content  = buffer[3] << 8;
 8000c56:	7cfb      	ldrb	r3, [r7, #19]
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	021b      	lsls	r3, r3, #8
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
				FT_Data_Struct->data_content |= buffer[4];
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000c6a:	7d3b      	ldrb	r3, [r7, #20]
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
				FT_CAN_ProcessData(FT_Data_Struct);
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f000 f8df 	bl	8000e3c <FT_CAN_ProcessData>

				if(DLC == 8)
 8000c7e:	7fbb      	ldrb	r3, [r7, #30]
 8000c80:	2b08      	cmp	r3, #8
 8000c82:	d117      	bne.n	8000cb4 <FT_CAN_ReceiveData+0x694>
				{
					FT_Data_Struct->data_id  	 = buffer[5] << 8;
 8000c84:	7d7b      	ldrb	r3, [r7, #21]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	021b      	lsls	r3, r3, #8
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_id 	|= buffer[6];
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000c98:	7dbb      	ldrb	r3, [r7, #22]
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_content = buffer[7] << 8;
 8000ca6:	7dfb      	ldrb	r3, [r7, #23]
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	021b      	lsls	r3, r3, #8
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
				}

				FT_Data_Struct->data_last_seg = buffer[0];
 8000cb4:	7c3b      	ldrb	r3, [r7, #16]
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

				return;
 8000cbe:	e0b9      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
			}
			//Messages 3, 7, etc
			else if((buffer[0] % 4) == 3)
 8000cc0:	7c3b      	ldrb	r3, [r7, #16]
 8000cc2:	f003 0303 	and.w	r3, r3, #3
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2b03      	cmp	r3, #3
 8000cca:	d156      	bne.n	8000d7a <FT_CAN_ReceiveData+0x75a>
			{
				if(buffer[0] == (FT_Data_Struct->data_last_seg + 1))
 8000ccc:	7c3b      	ldrb	r3, [r7, #16]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d10c      	bne.n	8000cf6 <FT_CAN_ReceiveData+0x6d6>
				{
					FT_Data_Struct->data_content |= buffer[1];
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000ce2:	7c7b      	ldrb	r3, [r7, #17]
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_CAN_ProcessData(FT_Data_Struct);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f000 f8a3 	bl	8000e3c <FT_CAN_ProcessData>
				}

				if(DLC >= 6)
 8000cf6:	7fbb      	ldrb	r3, [r7, #30]
 8000cf8:	2b05      	cmp	r3, #5
 8000cfa:	d924      	bls.n	8000d46 <FT_CAN_ReceiveData+0x726>
				{
					FT_Data_Struct->data_id  	  = buffer[2] << 8;
 8000cfc:	7cbb      	ldrb	r3, [r7, #18]
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	021b      	lsls	r3, r3, #8
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_id 	 |= buffer[3];
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000d10:	7cfb      	ldrb	r3, [r7, #19]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	4313      	orrs	r3, r2
 8000d16:	b29a      	uxth	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_content  = buffer[4] << 8;
 8000d1e:	7d3b      	ldrb	r3, [r7, #20]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	021b      	lsls	r3, r3, #8
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_Data_Struct->data_content |= buffer[5];
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000d32:	7d7b      	ldrb	r3, [r7, #21]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	4313      	orrs	r3, r2
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_CAN_ProcessData(FT_Data_Struct);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f000 f87b 	bl	8000e3c <FT_CAN_ProcessData>
				}

				if(DLC == 8)
 8000d46:	7fbb      	ldrb	r3, [r7, #30]
 8000d48:	2b08      	cmp	r3, #8
 8000d4a:	d110      	bne.n	8000d6e <FT_CAN_ReceiveData+0x74e>
				{
					FT_Data_Struct->data_id  = buffer[6] << 8;
 8000d4c:	7dbb      	ldrb	r3, [r7, #22]
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	021b      	lsls	r3, r3, #8
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_id |= buffer[7];
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000d60:	7dfb      	ldrb	r3, [r7, #23]
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	4313      	orrs	r3, r2
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				}

				FT_Data_Struct->data_last_seg = buffer[0];
 8000d6e:	7c3b      	ldrb	r3, [r7, #16]
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

				return;
 8000d78:	e05c      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
			}
			//Messages 4, 8, etc
			else if((buffer[0] % 4) == 0)
 8000d7a:	7c3b      	ldrb	r3, [r7, #16]
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d156      	bne.n	8000e34 <FT_CAN_ReceiveData+0x814>
			{
				if(buffer[0] == (FT_Data_Struct->data_last_seg + 1))
 8000d86:	7c3b      	ldrb	r3, [r7, #16]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000d90:	3301      	adds	r3, #1
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d113      	bne.n	8000dbe <FT_CAN_ReceiveData+0x79e>
				{
					FT_Data_Struct->data_content  = buffer[1] << 8;
 8000d96:	7c7b      	ldrb	r3, [r7, #17]
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	021b      	lsls	r3, r3, #8
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_Data_Struct->data_content |= buffer[2];
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000daa:	7cbb      	ldrb	r3, [r7, #18]
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	4313      	orrs	r3, r2
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_CAN_ProcessData(FT_Data_Struct);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f000 f83f 	bl	8000e3c <FT_CAN_ProcessData>
				}

				if(DLC >= 7)
 8000dbe:	7fbb      	ldrb	r3, [r7, #30]
 8000dc0:	2b06      	cmp	r3, #6
 8000dc2:	d924      	bls.n	8000e0e <FT_CAN_ReceiveData+0x7ee>
				{
					FT_Data_Struct->data_id  	  = buffer[3] << 8;
 8000dc4:	7cfb      	ldrb	r3, [r7, #19]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	021b      	lsls	r3, r3, #8
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_id 	 |= buffer[4];
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000dd8:	7d3b      	ldrb	r3, [r7, #20]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_content  = buffer[5] << 8;
 8000de6:	7d7b      	ldrb	r3, [r7, #21]
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	021b      	lsls	r3, r3, #8
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_Data_Struct->data_content |= buffer[6];
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000dfa:	7dbb      	ldrb	r3, [r7, #22]
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_CAN_ProcessData(FT_Data_Struct);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f000 f817 	bl	8000e3c <FT_CAN_ProcessData>
				}

				if(DLC == 8)
 8000e0e:	7fbb      	ldrb	r3, [r7, #30]
 8000e10:	2b08      	cmp	r3, #8
 8000e12:	d106      	bne.n	8000e22 <FT_CAN_ReceiveData+0x802>
					FT_Data_Struct->data_id	= buffer[7] << 8;
 8000e14:	7dfb      	ldrb	r3, [r7, #23]
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

				FT_Data_Struct->data_last_seg = buffer[0];
 8000e22:	7c3b      	ldrb	r3, [r7, #16]
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

				return;
 8000e2c:	e002      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
		return;
 8000e2e:	bf00      	nop
 8000e30:	e000      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
			return;
 8000e32:	bf00      	nop
			}
		}
#endif
	}
}
 8000e34:	3720      	adds	r7, #32
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <FT_CAN_ProcessData>:

#ifndef FT_CAN_FIXED

static void FT_CAN_ProcessData(FT_Data* FT_Data_Struct)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	uint16_t id = FT_Data_Struct->data_id;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8000e4a:	81fb      	strh	r3, [r7, #14]
	uint16_t data = FT_Data_Struct->data_content;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8000e52:	81bb      	strh	r3, [r7, #12]

	if((id & 0x1) == 0x1)
 8000e54:	89fb      	ldrh	r3, [r7, #14]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f040 8244 	bne.w	80012e8 <FT_CAN_ProcessData+0x4ac>
		return;


	switch(id >> 1)
 8000e60:	89fb      	ldrh	r3, [r7, #14]
 8000e62:	085b      	lsrs	r3, r3, #1
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	2b8d      	cmp	r3, #141	; 0x8d
 8000e68:	f300 8166 	bgt.w	8001138 <FT_CAN_ProcessData+0x2fc>
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	dc41      	bgt.n	8000ef4 <FT_CAN_ProcessData+0xb8>
 8000e70:	e233      	b.n	80012da <FT_CAN_ProcessData+0x49e>
 8000e72:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000e76:	2b1b      	cmp	r3, #27
 8000e78:	f200 822f 	bhi.w	80012da <FT_CAN_ProcessData+0x49e>
 8000e7c:	a201      	add	r2, pc, #4	; (adr r2, 8000e84 <FT_CAN_ProcessData+0x48>)
 8000e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e82:	bf00      	nop
 8000e84:	080012a9 	.word	0x080012a9
 8000e88:	080012db 	.word	0x080012db
 8000e8c:	080012db 	.word	0x080012db
 8000e90:	080012db 	.word	0x080012db
 8000e94:	080012db 	.word	0x080012db
 8000e98:	080012db 	.word	0x080012db
 8000e9c:	080012db 	.word	0x080012db
 8000ea0:	080012db 	.word	0x080012db
 8000ea4:	080012db 	.word	0x080012db
 8000ea8:	080012db 	.word	0x080012db
 8000eac:	080012db 	.word	0x080012db
 8000eb0:	080012db 	.word	0x080012db
 8000eb4:	080012db 	.word	0x080012db
 8000eb8:	080012db 	.word	0x080012db
 8000ebc:	080012db 	.word	0x080012db
 8000ec0:	080012db 	.word	0x080012db
 8000ec4:	080012db 	.word	0x080012db
 8000ec8:	080012db 	.word	0x080012db
 8000ecc:	080012b3 	.word	0x080012b3
 8000ed0:	080012db 	.word	0x080012db
 8000ed4:	080012db 	.word	0x080012db
 8000ed8:	080012db 	.word	0x080012db
 8000edc:	080012db 	.word	0x080012db
 8000ee0:	080012db 	.word	0x080012db
 8000ee4:	080011d5 	.word	0x080011d5
 8000ee8:	080012bd 	.word	0x080012bd
 8000eec:	080012c7 	.word	0x080012c7
 8000ef0:	080012d1 	.word	0x080012d1
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	2b8c      	cmp	r3, #140	; 0x8c
 8000ef8:	f200 81ef 	bhi.w	80012da <FT_CAN_ProcessData+0x49e>
 8000efc:	a201      	add	r2, pc, #4	; (adr r2, 8000f04 <FT_CAN_ProcessData+0xc8>)
 8000efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f02:	bf00      	nop
 8000f04:	0800114b 	.word	0x0800114b
 8000f08:	08001157 	.word	0x08001157
 8000f0c:	08001163 	.word	0x08001163
 8000f10:	0800116d 	.word	0x0800116d
 8000f14:	08001177 	.word	0x08001177
 8000f18:	08001183 	.word	0x08001183
 8000f1c:	0800118f 	.word	0x0800118f
 8000f20:	08001213 	.word	0x08001213
 8000f24:	0800121d 	.word	0x0800121d
 8000f28:	08001227 	.word	0x08001227
 8000f2c:	08001231 	.word	0x08001231
 8000f30:	080012db 	.word	0x080012db
 8000f34:	080012db 	.word	0x080012db
 8000f38:	080012db 	.word	0x080012db
 8000f3c:	080012db 	.word	0x080012db
 8000f40:	0800123b 	.word	0x0800123b
 8000f44:	08001199 	.word	0x08001199
 8000f48:	080012db 	.word	0x080012db
 8000f4c:	080012db 	.word	0x080012db
 8000f50:	080012db 	.word	0x080012db
 8000f54:	080012db 	.word	0x080012db
 8000f58:	080012db 	.word	0x080012db
 8000f5c:	080012db 	.word	0x080012db
 8000f60:	080012db 	.word	0x080012db
 8000f64:	080012db 	.word	0x080012db
 8000f68:	080012db 	.word	0x080012db
 8000f6c:	080012db 	.word	0x080012db
 8000f70:	080012db 	.word	0x080012db
 8000f74:	080012db 	.word	0x080012db
 8000f78:	080012db 	.word	0x080012db
 8000f7c:	080012db 	.word	0x080012db
 8000f80:	080012db 	.word	0x080012db
 8000f84:	080012db 	.word	0x080012db
 8000f88:	080012db 	.word	0x080012db
 8000f8c:	080012db 	.word	0x080012db
 8000f90:	080012db 	.word	0x080012db
 8000f94:	080012db 	.word	0x080012db
 8000f98:	080012db 	.word	0x080012db
 8000f9c:	080011a5 	.word	0x080011a5
 8000fa0:	080012db 	.word	0x080012db
 8000fa4:	080012db 	.word	0x080012db
 8000fa8:	080012db 	.word	0x080012db
 8000fac:	080012db 	.word	0x080012db
 8000fb0:	080012db 	.word	0x080012db
 8000fb4:	080012db 	.word	0x080012db
 8000fb8:	080012db 	.word	0x080012db
 8000fbc:	080012db 	.word	0x080012db
 8000fc0:	080012db 	.word	0x080012db
 8000fc4:	080012db 	.word	0x080012db
 8000fc8:	080012db 	.word	0x080012db
 8000fcc:	080012db 	.word	0x080012db
 8000fd0:	080012db 	.word	0x080012db
 8000fd4:	080012db 	.word	0x080012db
 8000fd8:	080012db 	.word	0x080012db
 8000fdc:	080012db 	.word	0x080012db
 8000fe0:	080012db 	.word	0x080012db
 8000fe4:	080012db 	.word	0x080012db
 8000fe8:	080012db 	.word	0x080012db
 8000fec:	080012db 	.word	0x080012db
 8000ff0:	080012db 	.word	0x080012db
 8000ff4:	080012db 	.word	0x080012db
 8000ff8:	080012db 	.word	0x080012db
 8000ffc:	080012db 	.word	0x080012db
 8001000:	080012db 	.word	0x080012db
 8001004:	080012db 	.word	0x080012db
 8001008:	080011b1 	.word	0x080011b1
 800100c:	080011e1 	.word	0x080011e1
 8001010:	080011eb 	.word	0x080011eb
 8001014:	080011f5 	.word	0x080011f5
 8001018:	080011ff 	.word	0x080011ff
 800101c:	08001209 	.word	0x08001209
 8001020:	08001245 	.word	0x08001245
 8001024:	0800124f 	.word	0x0800124f
 8001028:	08001259 	.word	0x08001259
 800102c:	08001263 	.word	0x08001263
 8001030:	0800126d 	.word	0x0800126d
 8001034:	08001277 	.word	0x08001277
 8001038:	08001281 	.word	0x08001281
 800103c:	0800128b 	.word	0x0800128b
 8001040:	08001295 	.word	0x08001295
 8001044:	0800129f 	.word	0x0800129f
 8001048:	080012db 	.word	0x080012db
 800104c:	080012db 	.word	0x080012db
 8001050:	080012db 	.word	0x080012db
 8001054:	080012db 	.word	0x080012db
 8001058:	080012db 	.word	0x080012db
 800105c:	080012db 	.word	0x080012db
 8001060:	080012db 	.word	0x080012db
 8001064:	080012db 	.word	0x080012db
 8001068:	080012db 	.word	0x080012db
 800106c:	080012db 	.word	0x080012db
 8001070:	080012db 	.word	0x080012db
 8001074:	080012db 	.word	0x080012db
 8001078:	080012db 	.word	0x080012db
 800107c:	080012db 	.word	0x080012db
 8001080:	080012db 	.word	0x080012db
 8001084:	080012db 	.word	0x080012db
 8001088:	080012db 	.word	0x080012db
 800108c:	080012db 	.word	0x080012db
 8001090:	080012db 	.word	0x080012db
 8001094:	080012db 	.word	0x080012db
 8001098:	080012db 	.word	0x080012db
 800109c:	080012db 	.word	0x080012db
 80010a0:	080012db 	.word	0x080012db
 80010a4:	080012db 	.word	0x080012db
 80010a8:	080012db 	.word	0x080012db
 80010ac:	080012db 	.word	0x080012db
 80010b0:	080012db 	.word	0x080012db
 80010b4:	080012db 	.word	0x080012db
 80010b8:	080012db 	.word	0x080012db
 80010bc:	080012db 	.word	0x080012db
 80010c0:	080012db 	.word	0x080012db
 80010c4:	080012db 	.word	0x080012db
 80010c8:	080012db 	.word	0x080012db
 80010cc:	080012db 	.word	0x080012db
 80010d0:	080012db 	.word	0x080012db
 80010d4:	080012db 	.word	0x080012db
 80010d8:	080012db 	.word	0x080012db
 80010dc:	080012db 	.word	0x080012db
 80010e0:	080012db 	.word	0x080012db
 80010e4:	080012db 	.word	0x080012db
 80010e8:	080012db 	.word	0x080012db
 80010ec:	080012db 	.word	0x080012db
 80010f0:	080012db 	.word	0x080012db
 80010f4:	080012db 	.word	0x080012db
 80010f8:	080012db 	.word	0x080012db
 80010fc:	080012db 	.word	0x080012db
 8001100:	080012db 	.word	0x080012db
 8001104:	080012db 	.word	0x080012db
 8001108:	080012db 	.word	0x080012db
 800110c:	080012db 	.word	0x080012db
 8001110:	080012db 	.word	0x080012db
 8001114:	080012db 	.word	0x080012db
 8001118:	080012db 	.word	0x080012db
 800111c:	080012db 	.word	0x080012db
 8001120:	080012db 	.word	0x080012db
 8001124:	080012db 	.word	0x080012db
 8001128:	080012db 	.word	0x080012db
 800112c:	080012db 	.word	0x080012db
 8001130:	080011bd 	.word	0x080011bd
 8001134:	080011c9 	.word	0x080011c9
 8001138:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800113c:	f280 80cd 	bge.w	80012da <FT_CAN_ProcessData+0x49e>
 8001140:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001144:	f6bf ae95 	bge.w	8000e72 <FT_CAN_ProcessData+0x36>
 8001148:	e0c7      	b.n	80012da <FT_CAN_ProcessData+0x49e>
	{
		case 0x0001: //TPS
			FT_Data_Struct->tps = data;
 800114a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			break;
 8001154:	e0c1      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x0002: //MAP
			FT_Data_Struct->map = data;
 8001156:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			break;
 8001160:	e0bb      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x0003: //IAT
			FT_Data_Struct->iat = data;
 8001162:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	87da      	strh	r2, [r3, #62]	; 0x3e
			break;
 800116a:	e0b6      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x0004: //ECT
			FT_Data_Struct->ect = data;
 800116c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	875a      	strh	r2, [r3, #58]	; 0x3a
			break;
 8001174:	e0b1      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x0005: //Oil Pressure
			FT_Data_Struct->oil_pressure = data;
 8001176:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			break;
 8001180:	e0ab      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x0006: //Fuel Pressure
			FT_Data_Struct->fuel_pressure = data;
 8001182:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			break;
 800118c:	e0a5      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x0007: //Coolant Pressure
			FT_Data_Struct->coolant_pressure = data;
 800118e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
 8001196:	e0a0      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x0011: //Gear
			FT_Data_Struct->gear = data;
 8001198:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			break;
 80011a2:	e09a      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x0027: //Exhaust Lambda
			FT_Data_Struct->lambda = data;
 80011a4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			break;
 80011ae:	e094      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x0042: //RPM
			FT_Data_Struct->rpm = data;
 80011b0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			break;
 80011ba:	e08e      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x008C: //Oil Temperature
			FT_Data_Struct->oil_temperature = data;
 80011bc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			break;
 80011c6:	e088      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x008D: //Pit Limit Switch
			FT_Data_Struct->pit_limiter = data;
 80011c8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			break;
 80011d2:	e082      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x0150: //Total Fuel Flow
			FT_Data_Struct->fuel_flow_total = data;
 80011d4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			break;
 80011de:	e07c      	b.n	80012da <FT_CAN_ProcessData+0x49e>
			break;
#endif

#ifdef FT_CAN_TIMING
		case 0x0043: //Injection Bank A Timing
			FT_Data_Struct->injection_bank_a_time = data;
 80011e0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	805a      	strh	r2, [r3, #2]
			break;
 80011e8:	e077      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x0044: //Injection Bank B Timing
			FT_Data_Struct->injection_bank_b_time = data;
 80011ea:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	809a      	strh	r2, [r3, #4]
			break;
 80011f2:	e072      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x0045: //Injection Bank A Duty Cycle
			FT_Data_Struct->injection_bank_a_duty_cycle = data;
 80011f4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	80da      	strh	r2, [r3, #6]
			break;
 80011fc:	e06d      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x0046: //Injection Bank B Duty Cycle
			FT_Data_Struct->injection_bank_b_duty_cycle = data;
 80011fe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	811a      	strh	r2, [r3, #8]
			break;
 8001206:	e068      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x0047: //Ignition Advance
			FT_Data_Struct->ignition_advance = data;
 8001208:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	801a      	strh	r2, [r3, #0]
			break;
 8001210:	e063      	b.n	80012da <FT_CAN_ProcessData+0x49e>
			break;
#endif

#ifdef FT_CAN_EXTRA
		case 0x0008: //Launch Mode
			FT_Data_Struct->launch_mode = data;
 8001212:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	841a      	strh	r2, [r3, #32]
			break;
 800121a:	e05e      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x0009: //Battery Voltage
			FT_Data_Struct->battery_voltage = data;
 800121c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	819a      	strh	r2, [r3, #12]
			break;
 8001224:	e059      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x000A: //Traction Speed
			FT_Data_Struct->traction_speed = data;
 8001226:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 800122e:	e054      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x000B: //Drag Speed
			FT_Data_Struct->drag_speed = data;
 8001230:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 8001238:	e04f      	b.n	80012da <FT_CAN_ProcessData+0x49e>
			break;
		case 0x000F: //Wheel Speed RR
//			FT_Data_Struct->wheel_speed_rr = data;
			break;
		case 0x0010: //Driveshaft RPM
			FT_Data_Struct->driveshaft_rpm = data;
 800123a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	831a      	strh	r2, [r3, #24]
			break;
 8001242:	e04a      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x0048: //2-Step
			FT_Data_Struct->two_step_signal = data;
 8001244:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 800124c:	e045      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x0049: //3-Step
			FT_Data_Struct->three_step_signal = data;
 800124e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	84da      	strh	r2, [r3, #38]	; 0x26
			break;
 8001256:	e040      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x004A: //Burnout
			FT_Data_Struct->burnout_signal = data;
 8001258:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	845a      	strh	r2, [r3, #34]	; 0x22
			break;
 8001260:	e03b      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x004B: //Fuel Cut
			FT_Data_Struct->fuel_cut = data;
 8001262:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	82da      	strh	r2, [r3, #22]
			break;
 800126a:	e036      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x004C: //Air Conditioning
			FT_Data_Struct->air_conditioning = data;
 800126c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	815a      	strh	r2, [r3, #10]
			break;
 8001274:	e031      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x004D: //ElectroFAN
			FT_Data_Struct->electro_fan = data;
 8001276:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	825a      	strh	r2, [r3, #18]
			break;
 800127e:	e02c      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x004E: //Gear Cut
			FT_Data_Struct->gear_cut = data;
 8001280:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	835a      	strh	r2, [r3, #26]
			break;
 8001288:	e027      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x004F: //Gear Retard
			FT_Data_Struct->gear_retard = data;
 800128a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	839a      	strh	r2, [r3, #28]
			break;
 8001292:	e022      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x0050: //Gear Sensor Voltage
			FT_Data_Struct->gear_sensor_voltage = data;
 8001294:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	83da      	strh	r2, [r3, #30]
			break;
 800129c:	e01d      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x0051: //Lambda Meter (Average)
			FT_Data_Struct->lambda_average = data;
 800129e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	829a      	strh	r2, [r3, #20]
			break;
 80012a6:	e018      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x0138: //Battery Temperature
			FT_Data_Struct->battery_temperature = data;
 80012a8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	81da      	strh	r2, [r3, #14]
			break;
 80012b0:	e013      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x014A: //Self Dial Time
			FT_Data_Struct->self_dial = data;
 80012b2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	861a      	strh	r2, [r3, #48]	; 0x30
			break;
 80012ba:	e00e      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x0151: //Brake Pressure
			FT_Data_Struct->brake_pressure = data;
 80012bc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	821a      	strh	r2, [r3, #16]
			break;
 80012c4:	e009      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x0152: //Generic Outputs State
			FT_Data_Struct->generic_outputs_state = data;
 80012c6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
 80012ce:	e004      	b.n	80012da <FT_CAN_ProcessData+0x49e>
		case 0x0153: //Day/Night State
			FT_Data_Struct->day_night_state = data;
 80012d0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
 80012d8:	bf00      	nop
	}
#endif

	FT_CAN_ProcessCustomData(id, data);
 80012da:	89ba      	ldrh	r2, [r7, #12]
 80012dc:	89fb      	ldrh	r3, [r7, #14]
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 f805 	bl	80012f0 <FT_CAN_ProcessCustomData>

	return;
 80012e6:	e000      	b.n	80012ea <FT_CAN_ProcessData+0x4ae>
		return;
 80012e8:	bf00      	nop
}
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <FT_CAN_ProcessCustomData>:

__weak void FT_CAN_ProcessCustomData(uint16_t id, uint16_t data)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	460a      	mov	r2, r1
 80012fa:	80fb      	strh	r3, [r7, #6]
 80012fc:	4613      	mov	r3, r2
 80012fe:	80bb      	strh	r3, [r7, #4]
	UNUSED(id);
	UNUSED(data);
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001310:	f005 fbbe 	bl	8006a90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001314:	f000 f8c8 	bl	80014a8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001318:	f000 f93c 	bl	8001594 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800131c:	f000 fba6 	bl	8001a6c <MX_GPIO_Init>
  MX_DMA_Init();
 8001320:	f000 fb7c 	bl	8001a1c <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8001324:	f000 fb22 	bl	800196c <MX_SDIO_SD_Init>
  MX_ADC1_Init();
 8001328:	f000 f95c 	bl	80015e4 <MX_ADC1_Init>
  MX_RTC_Init();
 800132c:	f000 faee 	bl	800190c <MX_RTC_Init>
  MX_FATFS_Init();
 8001330:	f00f fdd0 	bl	8010ed4 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001334:	f016 f9a6 	bl	8017684 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 8001338:	f000 f9ec 	bl	8001714 <MX_ADC2_Init>
  MX_CAN1_Init();
 800133c:	f000 fa82 	bl	8001844 <MX_CAN1_Init>
  MX_I2C1_Init();
 8001340:	f000 fab6 	bl	80018b0 <MX_I2C1_Init>
  MX_TIM7_Init();
 8001344:	f000 fb34 	bl	80019b0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  Principal_Init(&hcan1, &hi2c1, &htim7);
 8001348:	4a52      	ldr	r2, [pc, #328]	; (8001494 <main+0x188>)
 800134a:	4953      	ldr	r1, [pc, #332]	; (8001498 <main+0x18c>)
 800134c:	4853      	ldr	r0, [pc, #332]	; (800149c <main+0x190>)
 800134e:	f002 faa7 	bl	80038a0 <Principal_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Checks card detect pin level change for datalogger initialization or deinitialization
	  Principal_Card_Detection();
 8001352:	f004 fe5f 	bl	8006014 <Principal_Card_Detection>

	  //Starts saving data if conditions are met
	  Principal_Datalogger_Start();
 8001356:	f004 fcb3 	bl	8005cc0 <Principal_Datalogger_Start>

	  //Analog inputs 1-4 CAN message
	  if((accMsg[ANALOG_1_4] >= perMsg[ANALOG_1_4]) && (perMsg[ANALOG_1_4] != MSG_DISABLED))
 800135a:	4b51      	ldr	r3, [pc, #324]	; (80014a0 <main+0x194>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a51      	ldr	r2, [pc, #324]	; (80014a4 <main+0x198>)
 8001360:	8812      	ldrh	r2, [r2, #0]
 8001362:	4293      	cmp	r3, r2
 8001364:	d30e      	bcc.n	8001384 <main+0x78>
 8001366:	4b4f      	ldr	r3, [pc, #316]	; (80014a4 <main+0x198>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00a      	beq.n	8001384 <main+0x78>
	  {
		  accMsg[ANALOG_1_4] -= perMsg[ANALOG_1_4];
 800136e:	4b4c      	ldr	r3, [pc, #304]	; (80014a0 <main+0x194>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a4c      	ldr	r2, [pc, #304]	; (80014a4 <main+0x198>)
 8001374:	8812      	ldrh	r2, [r2, #0]
 8001376:	1a9b      	subs	r3, r3, r2
 8001378:	4a49      	ldr	r2, [pc, #292]	; (80014a0 <main+0x194>)
 800137a:	6013      	str	r3, [r2, #0]
		  Principal_Transmit_Msg(&hcan1, ANALOG_1_4);
 800137c:	2100      	movs	r1, #0
 800137e:	4847      	ldr	r0, [pc, #284]	; (800149c <main+0x190>)
 8001380:	f000 ffa6 	bl	80022d0 <Principal_Transmit_Msg>
	  }

	  //Analog inputs 5-8 CAN message
	  if((accMsg[ANALOG_5_8] >= perMsg[ANALOG_5_8]) && (perMsg[ANALOG_5_8] != MSG_DISABLED))
 8001384:	4b46      	ldr	r3, [pc, #280]	; (80014a0 <main+0x194>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	4a46      	ldr	r2, [pc, #280]	; (80014a4 <main+0x198>)
 800138a:	8852      	ldrh	r2, [r2, #2]
 800138c:	4293      	cmp	r3, r2
 800138e:	d30e      	bcc.n	80013ae <main+0xa2>
 8001390:	4b44      	ldr	r3, [pc, #272]	; (80014a4 <main+0x198>)
 8001392:	885b      	ldrh	r3, [r3, #2]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00a      	beq.n	80013ae <main+0xa2>
	  {
		  accMsg[ANALOG_5_8] -= perMsg[ANALOG_5_8];
 8001398:	4b41      	ldr	r3, [pc, #260]	; (80014a0 <main+0x194>)
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	4a41      	ldr	r2, [pc, #260]	; (80014a4 <main+0x198>)
 800139e:	8852      	ldrh	r2, [r2, #2]
 80013a0:	1a9b      	subs	r3, r3, r2
 80013a2:	4a3f      	ldr	r2, [pc, #252]	; (80014a0 <main+0x194>)
 80013a4:	6053      	str	r3, [r2, #4]
		  Principal_Transmit_Msg(&hcan1, ANALOG_5_8);
 80013a6:	2101      	movs	r1, #1
 80013a8:	483c      	ldr	r0, [pc, #240]	; (800149c <main+0x190>)
 80013aa:	f000 ff91 	bl	80022d0 <Principal_Transmit_Msg>
	  }

	  //Analog inputs 9-12 CAN message
	  if((accMsg[ANALOG_9_12] >= perMsg[ANALOG_9_12]) && (perMsg[ANALOG_9_12] != MSG_DISABLED))
 80013ae:	4b3c      	ldr	r3, [pc, #240]	; (80014a0 <main+0x194>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	4a3c      	ldr	r2, [pc, #240]	; (80014a4 <main+0x198>)
 80013b4:	8892      	ldrh	r2, [r2, #4]
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d30e      	bcc.n	80013d8 <main+0xcc>
 80013ba:	4b3a      	ldr	r3, [pc, #232]	; (80014a4 <main+0x198>)
 80013bc:	889b      	ldrh	r3, [r3, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00a      	beq.n	80013d8 <main+0xcc>
	  {
		  accMsg[ANALOG_9_12] -= perMsg[ANALOG_9_12];
 80013c2:	4b37      	ldr	r3, [pc, #220]	; (80014a0 <main+0x194>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	4a37      	ldr	r2, [pc, #220]	; (80014a4 <main+0x198>)
 80013c8:	8892      	ldrh	r2, [r2, #4]
 80013ca:	1a9b      	subs	r3, r3, r2
 80013cc:	4a34      	ldr	r2, [pc, #208]	; (80014a0 <main+0x194>)
 80013ce:	6093      	str	r3, [r2, #8]
		  Principal_Transmit_Msg(&hcan1, ANALOG_9_12);
 80013d0:	2102      	movs	r1, #2
 80013d2:	4832      	ldr	r0, [pc, #200]	; (800149c <main+0x190>)
 80013d4:	f000 ff7c 	bl	80022d0 <Principal_Transmit_Msg>
	  }

	  //RTC, both date and time
	  if((accMsg[RTC_MSG] >= perMsg[RTC_MSG]) && (perMsg[RTC_MSG] != MSG_DISABLED))
 80013d8:	4b31      	ldr	r3, [pc, #196]	; (80014a0 <main+0x194>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	4a31      	ldr	r2, [pc, #196]	; (80014a4 <main+0x198>)
 80013de:	88d2      	ldrh	r2, [r2, #6]
 80013e0:	4293      	cmp	r3, r2
 80013e2:	d30e      	bcc.n	8001402 <main+0xf6>
 80013e4:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <main+0x198>)
 80013e6:	88db      	ldrh	r3, [r3, #6]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d00a      	beq.n	8001402 <main+0xf6>
	  {
		  accMsg[RTC_MSG] -= perMsg[RTC_MSG];
 80013ec:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <main+0x194>)
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	4a2c      	ldr	r2, [pc, #176]	; (80014a4 <main+0x198>)
 80013f2:	88d2      	ldrh	r2, [r2, #6]
 80013f4:	1a9b      	subs	r3, r3, r2
 80013f6:	4a2a      	ldr	r2, [pc, #168]	; (80014a0 <main+0x194>)
 80013f8:	60d3      	str	r3, [r2, #12]
		  Principal_Transmit_Msg(&hcan1, RTC_MSG);
 80013fa:	2103      	movs	r1, #3
 80013fc:	4827      	ldr	r0, [pc, #156]	; (800149c <main+0x190>)
 80013fe:	f000 ff67 	bl	80022d0 <Principal_Transmit_Msg>
	  }

	  //Inputs and datalogger verify CAN message
	  if((accMsg[VERIFY_MSG] >= perMsg[VERIFY_MSG]) && (perMsg[VERIFY_MSG] != MSG_DISABLED))
 8001402:	4b27      	ldr	r3, [pc, #156]	; (80014a0 <main+0x194>)
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	4a27      	ldr	r2, [pc, #156]	; (80014a4 <main+0x198>)
 8001408:	8912      	ldrh	r2, [r2, #8]
 800140a:	4293      	cmp	r3, r2
 800140c:	d30e      	bcc.n	800142c <main+0x120>
 800140e:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <main+0x198>)
 8001410:	891b      	ldrh	r3, [r3, #8]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00a      	beq.n	800142c <main+0x120>
	  {
		  accMsg[VERIFY_MSG] -= perMsg[VERIFY_MSG];
 8001416:	4b22      	ldr	r3, [pc, #136]	; (80014a0 <main+0x194>)
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	4a22      	ldr	r2, [pc, #136]	; (80014a4 <main+0x198>)
 800141c:	8912      	ldrh	r2, [r2, #8]
 800141e:	1a9b      	subs	r3, r3, r2
 8001420:	4a1f      	ldr	r2, [pc, #124]	; (80014a0 <main+0x194>)
 8001422:	6113      	str	r3, [r2, #16]
		  Principal_Transmit_Msg(&hcan1, VERIFY_MSG);
 8001424:	2104      	movs	r1, #4
 8001426:	481d      	ldr	r0, [pc, #116]	; (800149c <main+0x190>)
 8001428:	f000 ff52 	bl	80022d0 <Principal_Transmit_Msg>
	  }

	  //ECU saved data (no transmission)
	  if((accMsg[ECU_SAVE] >= perMsg[ECU_SAVE]) && (perMsg[ECU_SAVE] != MSG_DISABLED))
 800142c:	4b1c      	ldr	r3, [pc, #112]	; (80014a0 <main+0x194>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	4a1c      	ldr	r2, [pc, #112]	; (80014a4 <main+0x198>)
 8001432:	8992      	ldrh	r2, [r2, #12]
 8001434:	4293      	cmp	r3, r2
 8001436:	d30e      	bcc.n	8001456 <main+0x14a>
 8001438:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <main+0x198>)
 800143a:	899b      	ldrh	r3, [r3, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00a      	beq.n	8001456 <main+0x14a>
	  {
		  accMsg[ECU_SAVE] -= perMsg[ECU_SAVE];
 8001440:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <main+0x194>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <main+0x198>)
 8001446:	8992      	ldrh	r2, [r2, #12]
 8001448:	1a9b      	subs	r3, r3, r2
 800144a:	4a15      	ldr	r2, [pc, #84]	; (80014a0 <main+0x194>)
 800144c:	6193      	str	r3, [r2, #24]
		  Principal_Transmit_Msg(&hcan1, ECU_SAVE);
 800144e:	2106      	movs	r1, #6
 8001450:	4812      	ldr	r0, [pc, #72]	; (800149c <main+0x190>)
 8001452:	f000 ff3d 	bl	80022d0 <Principal_Transmit_Msg>
	  }

	  //PDM saved data (no transmission)
	  if((accMsg[PDM_SAVE] >= perMsg[PDM_SAVE]) && (perMsg[PDM_SAVE] != MSG_DISABLED))
 8001456:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <main+0x194>)
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	4a12      	ldr	r2, [pc, #72]	; (80014a4 <main+0x198>)
 800145c:	89d2      	ldrh	r2, [r2, #14]
 800145e:	4293      	cmp	r3, r2
 8001460:	d30a      	bcc.n	8001478 <main+0x16c>
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <main+0x198>)
 8001464:	89db      	ldrh	r3, [r3, #14]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d006      	beq.n	8001478 <main+0x16c>
	  {
		  accMsg[PDM_SAVE] -= perMsg[PDM_SAVE];
 800146a:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <main+0x194>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	4a0d      	ldr	r2, [pc, #52]	; (80014a4 <main+0x198>)
 8001470:	89d2      	ldrh	r2, [r2, #14]
 8001472:	1a9b      	subs	r3, r3, r2
 8001474:	4a0a      	ldr	r2, [pc, #40]	; (80014a0 <main+0x194>)
 8001476:	61d3      	str	r3, [r2, #28]
//		  Principal_Transmit_Msg(&hcan1, PDM_SAVE);
	  }

	  if(accMsg[VERIFY_LEDS] >= MSG_FREQ_5HZ)
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <main+0x194>)
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	2bc7      	cmp	r3, #199	; 0xc7
 800147e:	f67f af68 	bls.w	8001352 <main+0x46>
	  {
		  accMsg[VERIFY_LEDS] -= MSG_FREQ_5HZ;
 8001482:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <main+0x194>)
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	3bc8      	subs	r3, #200	; 0xc8
 8001488:	4a05      	ldr	r2, [pc, #20]	; (80014a0 <main+0x194>)
 800148a:	6213      	str	r3, [r2, #32]
		  Principal_Verify_LEDs();
 800148c:	f000 fe46 	bl	800211c <Principal_Verify_LEDs>
	  Principal_Card_Detection();
 8001490:	e75f      	b.n	8001352 <main+0x46>
 8001492:	bf00      	nop
 8001494:	20000424 	.word	0x20000424
 8001498:	2000032c 	.word	0x2000032c
 800149c:	20000304 	.word	0x20000304
 80014a0:	200026a4 	.word	0x200026a4
 80014a4:	2000266c 	.word	0x2000266c

080014a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b094      	sub	sp, #80	; 0x50
 80014ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ae:	f107 031c 	add.w	r3, r7, #28
 80014b2:	2234      	movs	r2, #52	; 0x34
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f016 fe7c 	bl	80181b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014cc:	2300      	movs	r3, #0
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	4b2e      	ldr	r3, [pc, #184]	; (800158c <SystemClock_Config+0xe4>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	4a2d      	ldr	r2, [pc, #180]	; (800158c <SystemClock_Config+0xe4>)
 80014d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014da:	6413      	str	r3, [r2, #64]	; 0x40
 80014dc:	4b2b      	ldr	r3, [pc, #172]	; (800158c <SystemClock_Config+0xe4>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e8:	2300      	movs	r3, #0
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	4b28      	ldr	r3, [pc, #160]	; (8001590 <SystemClock_Config+0xe8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a27      	ldr	r2, [pc, #156]	; (8001590 <SystemClock_Config+0xe8>)
 80014f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	4b25      	ldr	r3, [pc, #148]	; (8001590 <SystemClock_Config+0xe8>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001504:	2305      	movs	r3, #5
 8001506:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001508:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800150c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800150e:	2301      	movs	r3, #1
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001512:	2302      	movs	r3, #2
 8001514:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001516:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800151a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800151c:	2308      	movs	r3, #8
 800151e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001520:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001524:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001526:	2302      	movs	r3, #2
 8001528:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800152a:	2306      	movs	r3, #6
 800152c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800152e:	2302      	movs	r3, #2
 8001530:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001532:	f107 031c 	add.w	r3, r7, #28
 8001536:	4618      	mov	r0, r3
 8001538:	f00a fe04 	bl	800c144 <HAL_RCC_OscConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001542:	f000 fb39 	bl	8001bb8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001546:	f009 ff4d 	bl	800b3e4 <HAL_PWREx_EnableOverDrive>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001550:	f000 fb32 	bl	8001bb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001554:	230f      	movs	r3, #15
 8001556:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001558:	2302      	movs	r3, #2
 800155a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155c:	2300      	movs	r3, #0
 800155e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001560:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001564:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001566:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800156a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800156c:	f107 0308 	add.w	r3, r7, #8
 8001570:	2105      	movs	r1, #5
 8001572:	4618      	mov	r0, r3
 8001574:	f009 ff86 	bl	800b484 <HAL_RCC_ClockConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <SystemClock_Config+0xda>
  {
    Error_Handler();
 800157e:	f000 fb1b 	bl	8001bb8 <Error_Handler>
  }
}
 8001582:	bf00      	nop
 8001584:	3750      	adds	r7, #80	; 0x50
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40023800 	.word	0x40023800
 8001590:	40007000 	.word	0x40007000

08001594 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b098      	sub	sp, #96	; 0x60
 8001598:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800159a:	1d3b      	adds	r3, r7, #4
 800159c:	225c      	movs	r2, #92	; 0x5c
 800159e:	2100      	movs	r1, #0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f016 fe07 	bl	80181b4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80015a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015aa:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 80015ac:	2308      	movs	r3, #8
 80015ae:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80015b0:	23c0      	movs	r3, #192	; 0xc0
 80015b2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80015b4:	2302      	movs	r3, #2
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80015b8:	2304      	movs	r3, #4
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80015bc:	2301      	movs	r3, #1
 80015be:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 80015c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80015c4:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80015c6:	2300      	movs	r3, #0
 80015c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ca:	1d3b      	adds	r3, r7, #4
 80015cc:	4618      	mov	r0, r3
 80015ce:	f00a f85f 	bl	800b690 <HAL_RCCEx_PeriphCLKConfig>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 80015d8:	f000 faee 	bl	8001bb8 <Error_Handler>
  }
}
 80015dc:	bf00      	nop
 80015de:	3760      	adds	r7, #96	; 0x60
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015ea:	463b      	mov	r3, r7
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015f6:	4b44      	ldr	r3, [pc, #272]	; (8001708 <MX_ADC1_Init+0x124>)
 80015f8:	4a44      	ldr	r2, [pc, #272]	; (800170c <MX_ADC1_Init+0x128>)
 80015fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015fc:	4b42      	ldr	r3, [pc, #264]	; (8001708 <MX_ADC1_Init+0x124>)
 80015fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001602:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001604:	4b40      	ldr	r3, [pc, #256]	; (8001708 <MX_ADC1_Init+0x124>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800160a:	4b3f      	ldr	r3, [pc, #252]	; (8001708 <MX_ADC1_Init+0x124>)
 800160c:	2201      	movs	r2, #1
 800160e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001610:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <MX_ADC1_Init+0x124>)
 8001612:	2201      	movs	r2, #1
 8001614:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001616:	4b3c      	ldr	r3, [pc, #240]	; (8001708 <MX_ADC1_Init+0x124>)
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800161e:	4b3a      	ldr	r3, [pc, #232]	; (8001708 <MX_ADC1_Init+0x124>)
 8001620:	2200      	movs	r2, #0
 8001622:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001624:	4b38      	ldr	r3, [pc, #224]	; (8001708 <MX_ADC1_Init+0x124>)
 8001626:	4a3a      	ldr	r2, [pc, #232]	; (8001710 <MX_ADC1_Init+0x12c>)
 8001628:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800162a:	4b37      	ldr	r3, [pc, #220]	; (8001708 <MX_ADC1_Init+0x124>)
 800162c:	2200      	movs	r2, #0
 800162e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001630:	4b35      	ldr	r3, [pc, #212]	; (8001708 <MX_ADC1_Init+0x124>)
 8001632:	2206      	movs	r2, #6
 8001634:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001636:	4b34      	ldr	r3, [pc, #208]	; (8001708 <MX_ADC1_Init+0x124>)
 8001638:	2201      	movs	r2, #1
 800163a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800163e:	4b32      	ldr	r3, [pc, #200]	; (8001708 <MX_ADC1_Init+0x124>)
 8001640:	2201      	movs	r2, #1
 8001642:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001644:	4830      	ldr	r0, [pc, #192]	; (8001708 <MX_ADC1_Init+0x124>)
 8001646:	f005 fab9 	bl	8006bbc <HAL_ADC_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001650:	f000 fab2 	bl	8001bb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001654:	2306      	movs	r3, #6
 8001656:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001658:	2301      	movs	r3, #1
 800165a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800165c:	2307      	movs	r3, #7
 800165e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001660:	463b      	mov	r3, r7
 8001662:	4619      	mov	r1, r3
 8001664:	4828      	ldr	r0, [pc, #160]	; (8001708 <MX_ADC1_Init+0x124>)
 8001666:	f005 fc1b 	bl	8006ea0 <HAL_ADC_ConfigChannel>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001670:	f000 faa2 	bl	8001bb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001674:	2307      	movs	r3, #7
 8001676:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001678:	2302      	movs	r3, #2
 800167a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800167c:	463b      	mov	r3, r7
 800167e:	4619      	mov	r1, r3
 8001680:	4821      	ldr	r0, [pc, #132]	; (8001708 <MX_ADC1_Init+0x124>)
 8001682:	f005 fc0d 	bl	8006ea0 <HAL_ADC_ConfigChannel>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800168c:	f000 fa94 	bl	8001bb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001690:	230e      	movs	r3, #14
 8001692:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001694:	2303      	movs	r3, #3
 8001696:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001698:	463b      	mov	r3, r7
 800169a:	4619      	mov	r1, r3
 800169c:	481a      	ldr	r0, [pc, #104]	; (8001708 <MX_ADC1_Init+0x124>)
 800169e:	f005 fbff 	bl	8006ea0 <HAL_ADC_ConfigChannel>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80016a8:	f000 fa86 	bl	8001bb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80016ac:	230f      	movs	r3, #15
 80016ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80016b0:	2304      	movs	r3, #4
 80016b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016b4:	463b      	mov	r3, r7
 80016b6:	4619      	mov	r1, r3
 80016b8:	4813      	ldr	r0, [pc, #76]	; (8001708 <MX_ADC1_Init+0x124>)
 80016ba:	f005 fbf1 	bl	8006ea0 <HAL_ADC_ConfigChannel>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80016c4:	f000 fa78 	bl	8001bb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80016c8:	2308      	movs	r3, #8
 80016ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80016cc:	2305      	movs	r3, #5
 80016ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016d0:	463b      	mov	r3, r7
 80016d2:	4619      	mov	r1, r3
 80016d4:	480c      	ldr	r0, [pc, #48]	; (8001708 <MX_ADC1_Init+0x124>)
 80016d6:	f005 fbe3 	bl	8006ea0 <HAL_ADC_ConfigChannel>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80016e0:	f000 fa6a 	bl	8001bb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80016e4:	2309      	movs	r3, #9
 80016e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80016e8:	2306      	movs	r3, #6
 80016ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ec:	463b      	mov	r3, r7
 80016ee:	4619      	mov	r1, r3
 80016f0:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_ADC1_Init+0x124>)
 80016f2:	f005 fbd5 	bl	8006ea0 <HAL_ADC_ConfigChannel>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80016fc:	f000 fa5c 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001700:	bf00      	nop
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200001b4 	.word	0x200001b4
 800170c:	40012000 	.word	0x40012000
 8001710:	0f000001 	.word	0x0f000001

08001714 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800171a:	463b      	mov	r3, r7
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001726:	4b44      	ldr	r3, [pc, #272]	; (8001838 <MX_ADC2_Init+0x124>)
 8001728:	4a44      	ldr	r2, [pc, #272]	; (800183c <MX_ADC2_Init+0x128>)
 800172a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800172c:	4b42      	ldr	r3, [pc, #264]	; (8001838 <MX_ADC2_Init+0x124>)
 800172e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001732:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001734:	4b40      	ldr	r3, [pc, #256]	; (8001838 <MX_ADC2_Init+0x124>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800173a:	4b3f      	ldr	r3, [pc, #252]	; (8001838 <MX_ADC2_Init+0x124>)
 800173c:	2201      	movs	r2, #1
 800173e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001740:	4b3d      	ldr	r3, [pc, #244]	; (8001838 <MX_ADC2_Init+0x124>)
 8001742:	2201      	movs	r2, #1
 8001744:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001746:	4b3c      	ldr	r3, [pc, #240]	; (8001838 <MX_ADC2_Init+0x124>)
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800174e:	4b3a      	ldr	r3, [pc, #232]	; (8001838 <MX_ADC2_Init+0x124>)
 8001750:	2200      	movs	r2, #0
 8001752:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001754:	4b38      	ldr	r3, [pc, #224]	; (8001838 <MX_ADC2_Init+0x124>)
 8001756:	4a3a      	ldr	r2, [pc, #232]	; (8001840 <MX_ADC2_Init+0x12c>)
 8001758:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800175a:	4b37      	ldr	r3, [pc, #220]	; (8001838 <MX_ADC2_Init+0x124>)
 800175c:	2200      	movs	r2, #0
 800175e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 6;
 8001760:	4b35      	ldr	r3, [pc, #212]	; (8001838 <MX_ADC2_Init+0x124>)
 8001762:	2206      	movs	r2, #6
 8001764:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001766:	4b34      	ldr	r3, [pc, #208]	; (8001838 <MX_ADC2_Init+0x124>)
 8001768:	2201      	movs	r2, #1
 800176a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800176e:	4b32      	ldr	r3, [pc, #200]	; (8001838 <MX_ADC2_Init+0x124>)
 8001770:	2201      	movs	r2, #1
 8001772:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001774:	4830      	ldr	r0, [pc, #192]	; (8001838 <MX_ADC2_Init+0x124>)
 8001776:	f005 fa21 	bl	8006bbc <HAL_ADC_Init>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001780:	f000 fa1a 	bl	8001bb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001784:	2300      	movs	r3, #0
 8001786:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001788:	2301      	movs	r3, #1
 800178a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800178c:	2307      	movs	r3, #7
 800178e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001790:	463b      	mov	r3, r7
 8001792:	4619      	mov	r1, r3
 8001794:	4828      	ldr	r0, [pc, #160]	; (8001838 <MX_ADC2_Init+0x124>)
 8001796:	f005 fb83 	bl	8006ea0 <HAL_ADC_ConfigChannel>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80017a0:	f000 fa0a 	bl	8001bb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017a4:	2301      	movs	r3, #1
 80017a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80017a8:	2302      	movs	r3, #2
 80017aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017ac:	463b      	mov	r3, r7
 80017ae:	4619      	mov	r1, r3
 80017b0:	4821      	ldr	r0, [pc, #132]	; (8001838 <MX_ADC2_Init+0x124>)
 80017b2:	f005 fb75 	bl	8006ea0 <HAL_ADC_ConfigChannel>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80017bc:	f000 f9fc 	bl	8001bb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80017c0:	2302      	movs	r3, #2
 80017c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80017c4:	2303      	movs	r3, #3
 80017c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017c8:	463b      	mov	r3, r7
 80017ca:	4619      	mov	r1, r3
 80017cc:	481a      	ldr	r0, [pc, #104]	; (8001838 <MX_ADC2_Init+0x124>)
 80017ce:	f005 fb67 	bl	8006ea0 <HAL_ADC_ConfigChannel>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80017d8:	f000 f9ee 	bl	8001bb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80017dc:	2303      	movs	r3, #3
 80017de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80017e0:	2304      	movs	r3, #4
 80017e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017e4:	463b      	mov	r3, r7
 80017e6:	4619      	mov	r1, r3
 80017e8:	4813      	ldr	r0, [pc, #76]	; (8001838 <MX_ADC2_Init+0x124>)
 80017ea:	f005 fb59 	bl	8006ea0 <HAL_ADC_ConfigChannel>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80017f4:	f000 f9e0 	bl	8001bb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80017f8:	2304      	movs	r3, #4
 80017fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80017fc:	2305      	movs	r3, #5
 80017fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001800:	463b      	mov	r3, r7
 8001802:	4619      	mov	r1, r3
 8001804:	480c      	ldr	r0, [pc, #48]	; (8001838 <MX_ADC2_Init+0x124>)
 8001806:	f005 fb4b 	bl	8006ea0 <HAL_ADC_ConfigChannel>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8001810:	f000 f9d2 	bl	8001bb8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001814:	2305      	movs	r3, #5
 8001816:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001818:	2306      	movs	r3, #6
 800181a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800181c:	463b      	mov	r3, r7
 800181e:	4619      	mov	r1, r3
 8001820:	4805      	ldr	r0, [pc, #20]	; (8001838 <MX_ADC2_Init+0x124>)
 8001822:	f005 fb3d 	bl	8006ea0 <HAL_ADC_ConfigChannel>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 800182c:	f000 f9c4 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	200001fc 	.word	0x200001fc
 800183c:	40012100 	.word	0x40012100
 8001840:	0f000001 	.word	0x0f000001

08001844 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001848:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <MX_CAN1_Init+0x64>)
 800184a:	4a18      	ldr	r2, [pc, #96]	; (80018ac <MX_CAN1_Init+0x68>)
 800184c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 800184e:	4b16      	ldr	r3, [pc, #88]	; (80018a8 <MX_CAN1_Init+0x64>)
 8001850:	2205      	movs	r2, #5
 8001852:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001854:	4b14      	ldr	r3, [pc, #80]	; (80018a8 <MX_CAN1_Init+0x64>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800185a:	4b13      	ldr	r3, [pc, #76]	; (80018a8 <MX_CAN1_Init+0x64>)
 800185c:	2200      	movs	r2, #0
 800185e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8001860:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <MX_CAN1_Init+0x64>)
 8001862:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001866:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <MX_CAN1_Init+0x64>)
 800186a:	2200      	movs	r2, #0
 800186c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <MX_CAN1_Init+0x64>)
 8001870:	2200      	movs	r2, #0
 8001872:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <MX_CAN1_Init+0x64>)
 8001876:	2200      	movs	r2, #0
 8001878:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <MX_CAN1_Init+0x64>)
 800187c:	2200      	movs	r2, #0
 800187e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <MX_CAN1_Init+0x64>)
 8001882:	2200      	movs	r2, #0
 8001884:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <MX_CAN1_Init+0x64>)
 8001888:	2200      	movs	r2, #0
 800188a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <MX_CAN1_Init+0x64>)
 800188e:	2200      	movs	r2, #0
 8001890:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001892:	4805      	ldr	r0, [pc, #20]	; (80018a8 <MX_CAN1_Init+0x64>)
 8001894:	f005 fdb4 	bl	8007400 <HAL_CAN_Init>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800189e:	f000 f98b 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000304 	.word	0x20000304
 80018ac:	40006400 	.word	0x40006400

080018b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <MX_I2C1_Init+0x50>)
 80018b6:	4a13      	ldr	r2, [pc, #76]	; (8001904 <MX_I2C1_Init+0x54>)
 80018b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80018ba:	4b11      	ldr	r3, [pc, #68]	; (8001900 <MX_I2C1_Init+0x50>)
 80018bc:	4a12      	ldr	r2, [pc, #72]	; (8001908 <MX_I2C1_Init+0x58>)
 80018be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <MX_I2C1_Init+0x50>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <MX_I2C1_Init+0x50>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <MX_I2C1_Init+0x50>)
 80018ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018d4:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <MX_I2C1_Init+0x50>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <MX_I2C1_Init+0x50>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018e0:	4b07      	ldr	r3, [pc, #28]	; (8001900 <MX_I2C1_Init+0x50>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <MX_I2C1_Init+0x50>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <MX_I2C1_Init+0x50>)
 80018ee:	f007 faed 	bl	8008ecc <HAL_I2C_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018f8:	f000 f95e 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	2000032c 	.word	0x2000032c
 8001904:	40005400 	.word	0x40005400
 8001908:	00061a80 	.word	0x00061a80

0800190c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001920:	2300      	movs	r3, #0
 8001922:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001924:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <MX_RTC_Init+0x58>)
 8001926:	4a10      	ldr	r2, [pc, #64]	; (8001968 <MX_RTC_Init+0x5c>)
 8001928:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800192a:	4b0e      	ldr	r3, [pc, #56]	; (8001964 <MX_RTC_Init+0x58>)
 800192c:	2200      	movs	r2, #0
 800192e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <MX_RTC_Init+0x58>)
 8001932:	227f      	movs	r2, #127	; 0x7f
 8001934:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <MX_RTC_Init+0x58>)
 8001938:	22ff      	movs	r2, #255	; 0xff
 800193a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800193c:	4b09      	ldr	r3, [pc, #36]	; (8001964 <MX_RTC_Init+0x58>)
 800193e:	2200      	movs	r2, #0
 8001940:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <MX_RTC_Init+0x58>)
 8001944:	2200      	movs	r2, #0
 8001946:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <MX_RTC_Init+0x58>)
 800194a:	2200      	movs	r2, #0
 800194c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800194e:	4805      	ldr	r0, [pc, #20]	; (8001964 <MX_RTC_Init+0x58>)
 8001950:	f00a fe96 	bl	800c680 <HAL_RTC_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800195a:	f000 f92d 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000380 	.word	0x20000380
 8001968:	40002800 	.word	0x40002800

0800196c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001970:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <MX_SDIO_SD_Init+0x3c>)
 8001972:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <MX_SDIO_SD_Init+0x40>)
 8001974:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001976:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <MX_SDIO_SD_Init+0x3c>)
 8001978:	2200      	movs	r2, #0
 800197a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800197c:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <MX_SDIO_SD_Init+0x3c>)
 800197e:	2200      	movs	r2, #0
 8001980:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <MX_SDIO_SD_Init+0x3c>)
 8001984:	2200      	movs	r2, #0
 8001986:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001988:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <MX_SDIO_SD_Init+0x3c>)
 800198a:	2200      	movs	r2, #0
 800198c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <MX_SDIO_SD_Init+0x3c>)
 8001990:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001994:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8001996:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <MX_SDIO_SD_Init+0x3c>)
 8001998:	2202      	movs	r2, #2
 800199a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	200003a0 	.word	0x200003a0
 80019ac:	40012c00 	.word	0x40012c00

080019b0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b6:	463b      	mov	r3, r7
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <MX_TIM7_Init+0x64>)
 80019c0:	4a15      	ldr	r2, [pc, #84]	; (8001a18 <MX_TIM7_Init+0x68>)
 80019c2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 89;
 80019c4:	4b13      	ldr	r3, [pc, #76]	; (8001a14 <MX_TIM7_Init+0x64>)
 80019c6:	2259      	movs	r2, #89	; 0x59
 80019c8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ca:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <MX_TIM7_Init+0x64>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 80019d0:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <MX_TIM7_Init+0x64>)
 80019d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019d6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d8:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <MX_TIM7_Init+0x64>)
 80019da:	2200      	movs	r2, #0
 80019dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80019de:	480d      	ldr	r0, [pc, #52]	; (8001a14 <MX_TIM7_Init+0x64>)
 80019e0:	f00c fd9d 	bl	800e51e <HAL_TIM_Base_Init>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80019ea:	f000 f8e5 	bl	8001bb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ee:	2300      	movs	r3, #0
 80019f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80019f6:	463b      	mov	r3, r7
 80019f8:	4619      	mov	r1, r3
 80019fa:	4806      	ldr	r0, [pc, #24]	; (8001a14 <MX_TIM7_Init+0x64>)
 80019fc:	f00d f81e 	bl	800ea3c <HAL_TIMEx_MasterConfigSynchronization>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001a06:	f000 f8d7 	bl	8001bb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000424 	.word	0x20000424
 8001a18:	40001400 	.word	0x40001400

08001a1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	607b      	str	r3, [r7, #4]
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <MX_DMA_Init+0x4c>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a0f      	ldr	r2, [pc, #60]	; (8001a68 <MX_DMA_Init+0x4c>)
 8001a2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <MX_DMA_Init+0x4c>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a3a:	607b      	str	r3, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2102      	movs	r1, #2
 8001a42:	2038      	movs	r0, #56	; 0x38
 8001a44:	f006 fc73 	bl	800832e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a48:	2038      	movs	r0, #56	; 0x38
 8001a4a:	f006 fc8c 	bl	8008366 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 0);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2102      	movs	r1, #2
 8001a52:	203a      	movs	r0, #58	; 0x3a
 8001a54:	f006 fc6b 	bl	800832e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a58:	203a      	movs	r0, #58	; 0x3a
 8001a5a:	f006 fc84 	bl	8008366 <HAL_NVIC_EnableIRQ>

}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800

08001a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a72:	f107 0314 	add.w	r3, r7, #20
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	4b49      	ldr	r3, [pc, #292]	; (8001bac <MX_GPIO_Init+0x140>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a48      	ldr	r2, [pc, #288]	; (8001bac <MX_GPIO_Init+0x140>)
 8001a8c:	f043 0304 	orr.w	r3, r3, #4
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b46      	ldr	r3, [pc, #280]	; (8001bac <MX_GPIO_Init+0x140>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	4b42      	ldr	r3, [pc, #264]	; (8001bac <MX_GPIO_Init+0x140>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a41      	ldr	r2, [pc, #260]	; (8001bac <MX_GPIO_Init+0x140>)
 8001aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b3f      	ldr	r3, [pc, #252]	; (8001bac <MX_GPIO_Init+0x140>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	4b3b      	ldr	r3, [pc, #236]	; (8001bac <MX_GPIO_Init+0x140>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a3a      	ldr	r2, [pc, #232]	; (8001bac <MX_GPIO_Init+0x140>)
 8001ac4:	f043 0301 	orr.w	r3, r3, #1
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b38      	ldr	r3, [pc, #224]	; (8001bac <MX_GPIO_Init+0x140>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	607b      	str	r3, [r7, #4]
 8001ada:	4b34      	ldr	r3, [pc, #208]	; (8001bac <MX_GPIO_Init+0x140>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a33      	ldr	r2, [pc, #204]	; (8001bac <MX_GPIO_Init+0x140>)
 8001ae0:	f043 0302 	orr.w	r3, r3, #2
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b31      	ldr	r3, [pc, #196]	; (8001bac <MX_GPIO_Init+0x140>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	603b      	str	r3, [r7, #0]
 8001af6:	4b2d      	ldr	r3, [pc, #180]	; (8001bac <MX_GPIO_Init+0x140>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a2c      	ldr	r2, [pc, #176]	; (8001bac <MX_GPIO_Init+0x140>)
 8001afc:	f043 0308 	orr.w	r3, r3, #8
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b2a      	ldr	r3, [pc, #168]	; (8001bac <MX_GPIO_Init+0x140>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	210f      	movs	r1, #15
 8001b12:	4827      	ldr	r0, [pc, #156]	; (8001bb0 <MX_GPIO_Init+0x144>)
 8001b14:	f007 f98e 	bl	8008e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT0_Pin|OUT1_Pin, GPIO_PIN_RESET);
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001b1e:	4825      	ldr	r0, [pc, #148]	; (8001bb4 <MX_GPIO_Init+0x148>)
 8001b20:	f007 f988 	bl	8008e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8001b24:	230f      	movs	r3, #15
 8001b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b30:	2300      	movs	r3, #0
 8001b32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	4619      	mov	r1, r3
 8001b3a:	481d      	ldr	r0, [pc, #116]	; (8001bb0 <MX_GPIO_Init+0x144>)
 8001b3c:	f006 ffce 	bl	8008adc <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin;
 8001b40:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b46:	2301      	movs	r3, #1
 8001b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	4619      	mov	r1, r3
 8001b58:	4816      	ldr	r0, [pc, #88]	; (8001bb4 <MX_GPIO_Init+0x148>)
 8001b5a:	f006 ffbf 	bl	8008adc <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI0_Pin EXTI1_Pin */
  GPIO_InitStruct.Pin = EXTI0_Pin|EXTI1_Pin;
 8001b5e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b64:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	4619      	mov	r1, r3
 8001b74:	480f      	ldr	r0, [pc, #60]	; (8001bb4 <MX_GPIO_Init+0x148>)
 8001b76:	f006 ffb1 	bl	8008adc <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 8001b86:	f107 0314 	add.w	r3, r7, #20
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4808      	ldr	r0, [pc, #32]	; (8001bb0 <MX_GPIO_Init+0x144>)
 8001b8e:	f006 ffa5 	bl	8008adc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2101      	movs	r1, #1
 8001b96:	2028      	movs	r0, #40	; 0x28
 8001b98:	f006 fbc9 	bl	800832e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b9c:	2028      	movs	r0, #40	; 0x28
 8001b9e:	f006 fbe2 	bl	8008366 <HAL_NVIC_EnableIRQ>

}
 8001ba2:	bf00      	nop
 8001ba4:	3728      	adds	r7, #40	; 0x28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40020800 	.word	0x40020800
 8001bb4:	40020400 	.word	0x40020400

08001bb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bbc:	b672      	cpsid	i
}
 8001bbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <Error_Handler+0x8>
	...

08001bc4 <Process_Data>:
 */

#include "pdm_can.h"

static void Process_Data(uint16_t id, uint16_t data, PDM_Data* data_struct)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	603a      	str	r2, [r7, #0]
 8001bce:	80fb      	strh	r3, [r7, #6]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	80bb      	strh	r3, [r7, #4]
	switch(id >> 1){
 8001bd4:	88fb      	ldrh	r3, [r7, #6]
 8001bd6:	085b      	lsrs	r3, r3, #1
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	2b1d      	cmp	r3, #29
 8001bde:	f200 81f9 	bhi.w	8001fd4 <Process_Data+0x410>
 8001be2:	a201      	add	r2, pc, #4	; (adr r2, 8001be8 <Process_Data+0x24>)
 8001be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be8:	08001c61 	.word	0x08001c61
 8001bec:	08001c91 	.word	0x08001c91
 8001bf0:	08001cc1 	.word	0x08001cc1
 8001bf4:	08001cf1 	.word	0x08001cf1
 8001bf8:	08001d21 	.word	0x08001d21
 8001bfc:	08001d51 	.word	0x08001d51
 8001c00:	08001d81 	.word	0x08001d81
 8001c04:	08001db1 	.word	0x08001db1
 8001c08:	08001de1 	.word	0x08001de1
 8001c0c:	08001e11 	.word	0x08001e11
 8001c10:	08001e41 	.word	0x08001e41
 8001c14:	08001e71 	.word	0x08001e71
 8001c18:	08001ea1 	.word	0x08001ea1
 8001c1c:	08001ed1 	.word	0x08001ed1
 8001c20:	08001f01 	.word	0x08001f01
 8001c24:	08001f31 	.word	0x08001f31
 8001c28:	08001f65 	.word	0x08001f65
 8001c2c:	08001f6d 	.word	0x08001f6d
 8001c30:	08001f75 	.word	0x08001f75
 8001c34:	08001f7d 	.word	0x08001f7d
 8001c38:	08001f85 	.word	0x08001f85
 8001c3c:	08001f8d 	.word	0x08001f8d
 8001c40:	08001f95 	.word	0x08001f95
 8001c44:	08001f9d 	.word	0x08001f9d
 8001c48:	08001fa5 	.word	0x08001fa5
 8001c4c:	08001fad 	.word	0x08001fad
 8001c50:	08001fb5 	.word	0x08001fb5
 8001c54:	08001fbd 	.word	0x08001fbd
 8001c58:	08001fc5 	.word	0x08001fc5
 8001c5c:	08001fcd 	.word	0x08001fcd
		case 0x0001:
			data_struct->Current_Buffer[0] = data;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	88ba      	ldrh	r2, [r7, #4]
 8001c64:	809a      	strh	r2, [r3, #4]
			if((id & 0x0001) == 1)
 8001c66:	88fb      	ldrh	r3, [r7, #6]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d007      	beq.n	8001c80 <Process_Data+0xbc>
				data_struct->Output_Verify |= 1;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	885b      	ldrh	r3, [r3, #2]
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	b29a      	uxth	r2, r3
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~1;
			break;
 8001c7e:	e1aa      	b.n	8001fd6 <Process_Data+0x412>
				data_struct->Output_Verify &= ~1;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	885b      	ldrh	r3, [r3, #2]
 8001c84:	f023 0301 	bic.w	r3, r3, #1
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	805a      	strh	r2, [r3, #2]
			break;
 8001c8e:	e1a2      	b.n	8001fd6 <Process_Data+0x412>

		case 0x0002:
			data_struct->Current_Buffer[1] = data;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	88ba      	ldrh	r2, [r7, #4]
 8001c94:	80da      	strh	r2, [r3, #6]
			if((id & 0x0001) == 1)
 8001c96:	88fb      	ldrh	r3, [r7, #6]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d007      	beq.n	8001cb0 <Process_Data+0xec>
				data_struct->Output_Verify |= (1 << 1);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	885b      	ldrh	r3, [r3, #2]
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 1);
			break;
 8001cae:	e192      	b.n	8001fd6 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 1);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	885b      	ldrh	r3, [r3, #2]
 8001cb4:	f023 0302 	bic.w	r3, r3, #2
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	805a      	strh	r2, [r3, #2]
			break;
 8001cbe:	e18a      	b.n	8001fd6 <Process_Data+0x412>

		case 0x0003:
			data_struct->Current_Buffer[2] = data;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	88ba      	ldrh	r2, [r7, #4]
 8001cc4:	811a      	strh	r2, [r3, #8]
			if((id & 0x0001) == 1)
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d007      	beq.n	8001ce0 <Process_Data+0x11c>
				data_struct->Output_Verify |= (1 << 2);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	885b      	ldrh	r3, [r3, #2]
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 2);
			break;
 8001cde:	e17a      	b.n	8001fd6 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 2);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	885b      	ldrh	r3, [r3, #2]
 8001ce4:	f023 0304 	bic.w	r3, r3, #4
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	805a      	strh	r2, [r3, #2]
			break;
 8001cee:	e172      	b.n	8001fd6 <Process_Data+0x412>

		case 0x0004:
			data_struct->Current_Buffer[3] = data;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	88ba      	ldrh	r2, [r7, #4]
 8001cf4:	815a      	strh	r2, [r3, #10]
			if((id & 0x0001) == 1)
 8001cf6:	88fb      	ldrh	r3, [r7, #6]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d007      	beq.n	8001d10 <Process_Data+0x14c>
				data_struct->Output_Verify |= (1 << 3);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	885b      	ldrh	r3, [r3, #2]
 8001d04:	f043 0308 	orr.w	r3, r3, #8
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 3);
			break;
 8001d0e:	e162      	b.n	8001fd6 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 3);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	885b      	ldrh	r3, [r3, #2]
 8001d14:	f023 0308 	bic.w	r3, r3, #8
 8001d18:	b29a      	uxth	r2, r3
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	805a      	strh	r2, [r3, #2]
			break;
 8001d1e:	e15a      	b.n	8001fd6 <Process_Data+0x412>

		case 0x0005:
			data_struct->Current_Buffer[4] = data;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	88ba      	ldrh	r2, [r7, #4]
 8001d24:	819a      	strh	r2, [r3, #12]
			if((id & 0x0001) == 1)
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d007      	beq.n	8001d40 <Process_Data+0x17c>
				data_struct->Output_Verify |= (1 << 4);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	885b      	ldrh	r3, [r3, #2]
 8001d34:	f043 0310 	orr.w	r3, r3, #16
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 4);
			break;
 8001d3e:	e14a      	b.n	8001fd6 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 4);
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	885b      	ldrh	r3, [r3, #2]
 8001d44:	f023 0310 	bic.w	r3, r3, #16
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	805a      	strh	r2, [r3, #2]
			break;
 8001d4e:	e142      	b.n	8001fd6 <Process_Data+0x412>

		case 0x0006:
			data_struct->Current_Buffer[5] = data;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	88ba      	ldrh	r2, [r7, #4]
 8001d54:	81da      	strh	r2, [r3, #14]
			if((id & 0x0001) == 1)
 8001d56:	88fb      	ldrh	r3, [r7, #6]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d007      	beq.n	8001d70 <Process_Data+0x1ac>
				data_struct->Output_Verify |= (1 << 5);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	885b      	ldrh	r3, [r3, #2]
 8001d64:	f043 0320 	orr.w	r3, r3, #32
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 5);
			break;
 8001d6e:	e132      	b.n	8001fd6 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 5);
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	885b      	ldrh	r3, [r3, #2]
 8001d74:	f023 0320 	bic.w	r3, r3, #32
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	805a      	strh	r2, [r3, #2]
			break;
 8001d7e:	e12a      	b.n	8001fd6 <Process_Data+0x412>

		case 0x0007:
			data_struct->Current_Buffer[6] = data;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	88ba      	ldrh	r2, [r7, #4]
 8001d84:	821a      	strh	r2, [r3, #16]
			if((id & 0x0001) == 1)
 8001d86:	88fb      	ldrh	r3, [r7, #6]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d007      	beq.n	8001da0 <Process_Data+0x1dc>
				data_struct->Output_Verify |= (1 << 6);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	885b      	ldrh	r3, [r3, #2]
 8001d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 6);
			break;
 8001d9e:	e11a      	b.n	8001fd6 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 6);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	885b      	ldrh	r3, [r3, #2]
 8001da4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	805a      	strh	r2, [r3, #2]
			break;
 8001dae:	e112      	b.n	8001fd6 <Process_Data+0x412>

		case 0x0008:
			data_struct->Current_Buffer[7] = data;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	88ba      	ldrh	r2, [r7, #4]
 8001db4:	825a      	strh	r2, [r3, #18]
			if((id & 0x0001) == 1)
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	f003 0301 	and.w	r3, r3, #1
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d007      	beq.n	8001dd0 <Process_Data+0x20c>
				data_struct->Output_Verify |= (1 << 7);
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	885b      	ldrh	r3, [r3, #2]
 8001dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dc8:	b29a      	uxth	r2, r3
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 7);
			break;
 8001dce:	e102      	b.n	8001fd6 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 7);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	885b      	ldrh	r3, [r3, #2]
 8001dd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	805a      	strh	r2, [r3, #2]
			break;
 8001dde:	e0fa      	b.n	8001fd6 <Process_Data+0x412>

		case 0x0009:
			data_struct->Current_Buffer[8] = data;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	88ba      	ldrh	r2, [r7, #4]
 8001de4:	829a      	strh	r2, [r3, #20]
			if((id & 0x0001) == 1)
 8001de6:	88fb      	ldrh	r3, [r7, #6]
 8001de8:	f003 0301 	and.w	r3, r3, #1
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d007      	beq.n	8001e00 <Process_Data+0x23c>
				data_struct->Output_Verify |= (1 << 8);
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	885b      	ldrh	r3, [r3, #2]
 8001df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 8);
			break;
 8001dfe:	e0ea      	b.n	8001fd6 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 8);
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	885b      	ldrh	r3, [r3, #2]
 8001e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	805a      	strh	r2, [r3, #2]
			break;
 8001e0e:	e0e2      	b.n	8001fd6 <Process_Data+0x412>

		case 0x000A:
			data_struct->Current_Buffer[9] = data;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	88ba      	ldrh	r2, [r7, #4]
 8001e14:	82da      	strh	r2, [r3, #22]
			if((id & 0x0001) == 1)
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d007      	beq.n	8001e30 <Process_Data+0x26c>
				data_struct->Output_Verify |= (1 << 9);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	885b      	ldrh	r3, [r3, #2]
 8001e24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 9);
			break;
 8001e2e:	e0d2      	b.n	8001fd6 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 9);
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	885b      	ldrh	r3, [r3, #2]
 8001e34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	805a      	strh	r2, [r3, #2]
			break;
 8001e3e:	e0ca      	b.n	8001fd6 <Process_Data+0x412>

		case 0x000B:
			data_struct->Current_Buffer[10] = data;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	88ba      	ldrh	r2, [r7, #4]
 8001e44:	831a      	strh	r2, [r3, #24]
			if((id & 0x0001) == 1)
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d007      	beq.n	8001e60 <Process_Data+0x29c>
				data_struct->Output_Verify |= (1 << 10);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	885b      	ldrh	r3, [r3, #2]
 8001e54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e58:	b29a      	uxth	r2, r3
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 10);
			break;
 8001e5e:	e0ba      	b.n	8001fd6 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 10);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	885b      	ldrh	r3, [r3, #2]
 8001e64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	805a      	strh	r2, [r3, #2]
			break;
 8001e6e:	e0b2      	b.n	8001fd6 <Process_Data+0x412>

		case 0x000C:
			data_struct->Current_Buffer[11] = data;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	88ba      	ldrh	r2, [r7, #4]
 8001e74:	835a      	strh	r2, [r3, #26]
			if((id & 0x0001) == 1)
 8001e76:	88fb      	ldrh	r3, [r7, #6]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d007      	beq.n	8001e90 <Process_Data+0x2cc>
				data_struct->Output_Verify |= (1 << 11);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	885b      	ldrh	r3, [r3, #2]
 8001e84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 11);
			break;
 8001e8e:	e0a2      	b.n	8001fd6 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 11);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	885b      	ldrh	r3, [r3, #2]
 8001e94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	805a      	strh	r2, [r3, #2]
			break;
 8001e9e:	e09a      	b.n	8001fd6 <Process_Data+0x412>

		case 0x000D:
			data_struct->Current_Buffer[12] = data;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	88ba      	ldrh	r2, [r7, #4]
 8001ea4:	839a      	strh	r2, [r3, #28]
			if((id & 0x0001) == 1)
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d007      	beq.n	8001ec0 <Process_Data+0x2fc>
				data_struct->Output_Verify |= (1 << 12);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	885b      	ldrh	r3, [r3, #2]
 8001eb4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 12);
			break;
 8001ebe:	e08a      	b.n	8001fd6 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 12);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	885b      	ldrh	r3, [r3, #2]
 8001ec4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	805a      	strh	r2, [r3, #2]
			break;
 8001ece:	e082      	b.n	8001fd6 <Process_Data+0x412>

		case 0x000E:
			data_struct->Current_Buffer[13] = data;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	88ba      	ldrh	r2, [r7, #4]
 8001ed4:	83da      	strh	r2, [r3, #30]
			if((id & 0x0001) == 1)
 8001ed6:	88fb      	ldrh	r3, [r7, #6]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d007      	beq.n	8001ef0 <Process_Data+0x32c>
				data_struct->Output_Verify |= (1 << 13);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	885b      	ldrh	r3, [r3, #2]
 8001ee4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 13);
			break;
 8001eee:	e072      	b.n	8001fd6 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 13);
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	885b      	ldrh	r3, [r3, #2]
 8001ef4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	805a      	strh	r2, [r3, #2]
			break;
 8001efe:	e06a      	b.n	8001fd6 <Process_Data+0x412>

		case 0x000F:
			data_struct->Current_Buffer[14] = data;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	88ba      	ldrh	r2, [r7, #4]
 8001f04:	841a      	strh	r2, [r3, #32]
			if((id & 0x0001) == 1)
 8001f06:	88fb      	ldrh	r3, [r7, #6]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d007      	beq.n	8001f20 <Process_Data+0x35c>
				data_struct->Output_Verify |= (1 << 14);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	885b      	ldrh	r3, [r3, #2]
 8001f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 14);
			break;
 8001f1e:	e05a      	b.n	8001fd6 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 14);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	885b      	ldrh	r3, [r3, #2]
 8001f24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	805a      	strh	r2, [r3, #2]
			break;
 8001f2e:	e052      	b.n	8001fd6 <Process_Data+0x412>

		case 0x0010:
			data_struct->Current_Buffer[15] = data;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	88ba      	ldrh	r2, [r7, #4]
 8001f34:	845a      	strh	r2, [r3, #34]	; 0x22
			if((id & 0x0001) == 1)
 8001f36:	88fb      	ldrh	r3, [r7, #6]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d009      	beq.n	8001f54 <Process_Data+0x390>
				data_struct->Output_Verify |= (1 << 15);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	885b      	ldrh	r3, [r3, #2]
 8001f44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 15);
			break;
 8001f52:	e040      	b.n	8001fd6 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 15);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	885b      	ldrh	r3, [r3, #2]
 8001f58:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	805a      	strh	r2, [r3, #2]
			break;
 8001f62:	e038      	b.n	8001fd6 <Process_Data+0x412>

		case 0x0011:
			data_struct->Tempetature_Buffer[0] = data;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	88ba      	ldrh	r2, [r7, #4]
 8001f68:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
 8001f6a:	e034      	b.n	8001fd6 <Process_Data+0x412>

		case 0x0012:
			data_struct->Tempetature_Buffer[1] = data;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	88ba      	ldrh	r2, [r7, #4]
 8001f70:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
 8001f72:	e030      	b.n	8001fd6 <Process_Data+0x412>

		case 0x0013:
			data_struct->Tempetature_Buffer[2] = data;
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	88ba      	ldrh	r2, [r7, #4]
 8001f78:	861a      	strh	r2, [r3, #48]	; 0x30
			break;
 8001f7a:	e02c      	b.n	8001fd6 <Process_Data+0x412>

		case 0x0014:
			data_struct->Tempetature_Buffer[3] = data;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	88ba      	ldrh	r2, [r7, #4]
 8001f80:	865a      	strh	r2, [r3, #50]	; 0x32
			break;
 8001f82:	e028      	b.n	8001fd6 <Process_Data+0x412>

		case 0x0015:
			data_struct->Tempetature_Buffer[4] = data;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	88ba      	ldrh	r2, [r7, #4]
 8001f88:	869a      	strh	r2, [r3, #52]	; 0x34
			break;
 8001f8a:	e024      	b.n	8001fd6 <Process_Data+0x412>

		case 0x0016:
			data_struct->Tempetature_Buffer[5] = data;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	88ba      	ldrh	r2, [r7, #4]
 8001f90:	86da      	strh	r2, [r3, #54]	; 0x36
			break;
 8001f92:	e020      	b.n	8001fd6 <Process_Data+0x412>

		case 0x0017:
			data_struct->Tempetature_Buffer[6] = data;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	88ba      	ldrh	r2, [r7, #4]
 8001f98:	871a      	strh	r2, [r3, #56]	; 0x38
			break;
 8001f9a:	e01c      	b.n	8001fd6 <Process_Data+0x412>

		case 0x0018:
			data_struct->Tempetature_Buffer[7] = data;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	88ba      	ldrh	r2, [r7, #4]
 8001fa0:	875a      	strh	r2, [r3, #58]	; 0x3a
			break;
 8001fa2:	e018      	b.n	8001fd6 <Process_Data+0x412>

		case 0x0019:
			data_struct->Tempetature_Buffer[8] = data;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	88ba      	ldrh	r2, [r7, #4]
 8001fa8:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
 8001faa:	e014      	b.n	8001fd6 <Process_Data+0x412>

		case 0x001A:
			data_struct->Input_Voltage = data;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	88ba      	ldrh	r2, [r7, #4]
 8001fb0:	801a      	strh	r2, [r3, #0]
			break;
 8001fb2:	e010      	b.n	8001fd6 <Process_Data+0x412>

		case 0x001B:
			data_struct->Duty_Cycle_Buffer[0] = data;
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	88ba      	ldrh	r2, [r7, #4]
 8001fb8:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 8001fba:	e00c      	b.n	8001fd6 <Process_Data+0x412>

		case 0x001C:
			data_struct->Duty_Cycle_Buffer[1] = data;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	88ba      	ldrh	r2, [r7, #4]
 8001fc0:	84da      	strh	r2, [r3, #38]	; 0x26
			break;
 8001fc2:	e008      	b.n	8001fd6 <Process_Data+0x412>

		case 0x001D:
			data_struct->Duty_Cycle_Buffer[2] = data;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	88ba      	ldrh	r2, [r7, #4]
 8001fc8:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 8001fca:	e004      	b.n	8001fd6 <Process_Data+0x412>

		case 0x001E:
			data_struct->Duty_Cycle_Buffer[3] = data;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	88ba      	ldrh	r2, [r7, #4]
 8001fd0:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 8001fd2:	e000      	b.n	8001fd6 <Process_Data+0x412>

		default:
			break;
 8001fd4:	bf00      	nop
	}

	return;
 8001fd6:	bf00      	nop
}
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop

08001fe4 <PDM_CAN_FilterConfig>:

HAL_StatusTypeDef PDM_CAN_FilterConfig(CAN_HandleTypeDef* hcan, uint32_t bank_position, uint32_t fifo_assignment)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b090      	sub	sp, #64	; 0x40
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filterID = 0x1E35C000, filterMask = 0x1FFFF000;
 8001ff0:	4b13      	ldr	r3, [pc, #76]	; (8002040 <PDM_CAN_FilterConfig+0x5c>)
 8001ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ff4:	4b13      	ldr	r3, [pc, #76]	; (8002044 <PDM_CAN_FilterConfig+0x60>)
 8001ff6:	63bb      	str	r3, [r7, #56]	; 0x38

	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterIdHigh = filterID >> 13;
 8002000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002002:	0b5b      	lsrs	r3, r3, #13
 8002004:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow = (filterID << 3) & 0xFFF8;
 8002006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	b29b      	uxth	r3, r3
 800200c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh = filterMask >> 13;
 800200e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002010:	0b5b      	lsrs	r3, r3, #13
 8002012:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow = (filterMask << 3) & 0xFFF8;
 8002014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	b29b      	uxth	r3, r3
 800201a:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterBank = bank_position;
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterFIFOAssignment = fifo_assignment;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterActivation = ENABLE;
 8002024:	2301      	movs	r3, #1
 8002026:	633b      	str	r3, [r7, #48]	; 0x30

	return HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 8002028:	f107 0310 	add.w	r3, r7, #16
 800202c:	4619      	mov	r1, r3
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f005 fae2 	bl	80075f8 <HAL_CAN_ConfigFilter>
 8002034:	4603      	mov	r3, r0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3740      	adds	r7, #64	; 0x40
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	1e35c000 	.word	0x1e35c000
 8002044:	1ffff000 	.word	0x1ffff000

08002048 <PDM_CAN_Process_Data>:

void PDM_CAN_Process_Data(CAN_RxHeaderTypeDef* rx_header, uint8_t* data_buffer, PDM_Data* data_struct)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
	uint8_t length = 0;
 8002054:	2300      	movs	r3, #0
 8002056:	77bb      	strb	r3, [r7, #30]
	uint8_t buffer[8];
	uint16_t id = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	83bb      	strh	r3, [r7, #28]
	uint16_t data = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	837b      	strh	r3, [r7, #26]

	if((rx_header->DLC != CAN_ID_EXT) && ((rx_header->ExtId & 0x1FFFF000) != 0x1E35C000))
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	2b04      	cmp	r3, #4
 8002066:	d006      	beq.n	8002076 <PDM_CAN_Process_Data+0x2e>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	4b29      	ldr	r3, [pc, #164]	; (8002114 <PDM_CAN_Process_Data+0xcc>)
 800206e:	4013      	ands	r3, r2
 8002070:	4a29      	ldr	r2, [pc, #164]	; (8002118 <PDM_CAN_Process_Data+0xd0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d149      	bne.n	800210a <PDM_CAN_Process_Data+0xc2>
		return;

	length = rx_header->DLC;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	77bb      	strb	r3, [r7, #30]

	for(uint8_t i = 0; i < length; i++)
 800207c:	2300      	movs	r3, #0
 800207e:	77fb      	strb	r3, [r7, #31]
 8002080:	e00b      	b.n	800209a <PDM_CAN_Process_Data+0x52>
		buffer[i] = data_buffer[i];
 8002082:	7ffb      	ldrb	r3, [r7, #31]
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	441a      	add	r2, r3
 8002088:	7ffb      	ldrb	r3, [r7, #31]
 800208a:	7812      	ldrb	r2, [r2, #0]
 800208c:	3320      	adds	r3, #32
 800208e:	443b      	add	r3, r7
 8002090:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(uint8_t i = 0; i < length; i++)
 8002094:	7ffb      	ldrb	r3, [r7, #31]
 8002096:	3301      	adds	r3, #1
 8002098:	77fb      	strb	r3, [r7, #31]
 800209a:	7ffa      	ldrb	r2, [r7, #31]
 800209c:	7fbb      	ldrb	r3, [r7, #30]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d3ef      	bcc.n	8002082 <PDM_CAN_Process_Data+0x3a>

	id  = buffer[0] << 8;
 80020a2:	7c3b      	ldrb	r3, [r7, #16]
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	83bb      	strh	r3, [r7, #28]
	id |= buffer[1] & 0xff;
 80020aa:	7c7b      	ldrb	r3, [r7, #17]
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	8bbb      	ldrh	r3, [r7, #28]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	83bb      	strh	r3, [r7, #28]
	data  = buffer[2] << 8;
 80020b4:	7cbb      	ldrb	r3, [r7, #18]
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	021b      	lsls	r3, r3, #8
 80020ba:	837b      	strh	r3, [r7, #26]
	data |= buffer[3] & 0xff;
 80020bc:	7cfb      	ldrb	r3, [r7, #19]
 80020be:	b29a      	uxth	r2, r3
 80020c0:	8b7b      	ldrh	r3, [r7, #26]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	837b      	strh	r3, [r7, #26]

	Process_Data(id, data, data_struct);
 80020c6:	8b79      	ldrh	r1, [r7, #26]
 80020c8:	8bbb      	ldrh	r3, [r7, #28]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fd79 	bl	8001bc4 <Process_Data>

	if(length == 8)
 80020d2:	7fbb      	ldrb	r3, [r7, #30]
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d119      	bne.n	800210c <PDM_CAN_Process_Data+0xc4>
	{
		id  = buffer[4] << 8;
 80020d8:	7d3b      	ldrb	r3, [r7, #20]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	021b      	lsls	r3, r3, #8
 80020de:	83bb      	strh	r3, [r7, #28]
		id |= buffer[5] & 0xff;
 80020e0:	7d7b      	ldrb	r3, [r7, #21]
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	8bbb      	ldrh	r3, [r7, #28]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	83bb      	strh	r3, [r7, #28]
		data  = buffer[6] << 8;
 80020ea:	7dbb      	ldrb	r3, [r7, #22]
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	021b      	lsls	r3, r3, #8
 80020f0:	837b      	strh	r3, [r7, #26]
		data |= buffer[7] & 0xff;
 80020f2:	7dfb      	ldrb	r3, [r7, #23]
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	8b7b      	ldrh	r3, [r7, #26]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	837b      	strh	r3, [r7, #26]

		Process_Data(id, data, data_struct);
 80020fc:	8b79      	ldrh	r1, [r7, #26]
 80020fe:	8bbb      	ldrh	r3, [r7, #28]
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fd5e 	bl	8001bc4 <Process_Data>
 8002108:	e000      	b.n	800210c <PDM_CAN_Process_Data+0xc4>
		return;
 800210a:	bf00      	nop
	}
}
 800210c:	3720      	adds	r7, #32
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	1ffff000 	.word	0x1ffff000
 8002118:	1e35c000 	.word	0x1e35c000

0800211c <Principal_Verify_LEDs>:
static void Tx_Beacon(CAN_HandleTypeDef* hcan);
static void Save_ECU(CAN_HandleTypeDef* hcan);
static void Save_PDM(CAN_HandleTypeDef* hcan);

void Principal_Verify_LEDs()
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
	verifyADC = 0;
 8002122:	4b2c      	ldr	r3, [pc, #176]	; (80021d4 <Principal_Verify_LEDs+0xb8>)
 8002124:	2200      	movs	r2, #0
 8002126:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < NBR_OF_CHANNELS; i++)
 8002128:	2300      	movs	r3, #0
 800212a:	71fb      	strb	r3, [r7, #7]
 800212c:	e015      	b.n	800215a <Principal_Verify_LEDs+0x3e>
		if(adcBuffer[i] > ADC_THRESHOLD)
 800212e:	79fb      	ldrb	r3, [r7, #7]
 8002130:	4a29      	ldr	r2, [pc, #164]	; (80021d8 <Principal_Verify_LEDs+0xbc>)
 8002132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002136:	2b5a      	cmp	r3, #90	; 0x5a
 8002138:	d90c      	bls.n	8002154 <Principal_Verify_LEDs+0x38>
			verifyADC |= (1 << i);
 800213a:	79fb      	ldrb	r3, [r7, #7]
 800213c:	2201      	movs	r2, #1
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	b21a      	sxth	r2, r3
 8002144:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <Principal_Verify_LEDs+0xb8>)
 8002146:	881b      	ldrh	r3, [r3, #0]
 8002148:	b21b      	sxth	r3, r3
 800214a:	4313      	orrs	r3, r2
 800214c:	b21b      	sxth	r3, r3
 800214e:	b29a      	uxth	r2, r3
 8002150:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <Principal_Verify_LEDs+0xb8>)
 8002152:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < NBR_OF_CHANNELS; i++)
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	3301      	adds	r3, #1
 8002158:	71fb      	strb	r3, [r7, #7]
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	2b0b      	cmp	r3, #11
 800215e:	d9e6      	bls.n	800212e <Principal_Verify_LEDs+0x12>

	HAL_GPIO_TogglePin(LED_OK);
 8002160:	2101      	movs	r1, #1
 8002162:	481e      	ldr	r0, [pc, #120]	; (80021dc <Principal_Verify_LEDs+0xc0>)
 8002164:	f006 fe7f 	bl	8008e66 <HAL_GPIO_TogglePin>

	if(flagDatalogger == DL_SAVE)
 8002168:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <Principal_Verify_LEDs+0xc4>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d105      	bne.n	800217c <Principal_Verify_LEDs+0x60>
		HAL_GPIO_WritePin(LED_DATALOGGER, GPIO_PIN_SET);
 8002170:	2201      	movs	r2, #1
 8002172:	2102      	movs	r1, #2
 8002174:	4819      	ldr	r0, [pc, #100]	; (80021dc <Principal_Verify_LEDs+0xc0>)
 8002176:	f006 fe5d 	bl	8008e34 <HAL_GPIO_WritePin>
 800217a:	e004      	b.n	8002186 <Principal_Verify_LEDs+0x6a>
	else
		HAL_GPIO_WritePin(LED_DATALOGGER, GPIO_PIN_RESET);
 800217c:	2200      	movs	r2, #0
 800217e:	2102      	movs	r1, #2
 8002180:	4816      	ldr	r0, [pc, #88]	; (80021dc <Principal_Verify_LEDs+0xc0>)
 8002182:	f006 fe57 	bl	8008e34 <HAL_GPIO_WritePin>

	if((verifyCAN & 1) == 1)
 8002186:	4b17      	ldr	r3, [pc, #92]	; (80021e4 <Principal_Verify_LEDs+0xc8>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	d005      	beq.n	800219e <Principal_Verify_LEDs+0x82>
		HAL_GPIO_WritePin(LED_CAN_TX, GPIO_PIN_SET);
 8002192:	2201      	movs	r2, #1
 8002194:	2104      	movs	r1, #4
 8002196:	4811      	ldr	r0, [pc, #68]	; (80021dc <Principal_Verify_LEDs+0xc0>)
 8002198:	f006 fe4c 	bl	8008e34 <HAL_GPIO_WritePin>
 800219c:	e004      	b.n	80021a8 <Principal_Verify_LEDs+0x8c>
	else
		HAL_GPIO_WritePin(LED_CAN_TX, GPIO_PIN_RESET);
 800219e:	2200      	movs	r2, #0
 80021a0:	2104      	movs	r1, #4
 80021a2:	480e      	ldr	r0, [pc, #56]	; (80021dc <Principal_Verify_LEDs+0xc0>)
 80021a4:	f006 fe46 	bl	8008e34 <HAL_GPIO_WritePin>

	if((verifyCAN & 2) == 2)
 80021a8:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <Principal_Verify_LEDs+0xc8>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d005      	beq.n	80021c0 <Principal_Verify_LEDs+0xa4>
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_SET);
 80021b4:	2201      	movs	r2, #1
 80021b6:	2108      	movs	r1, #8
 80021b8:	4808      	ldr	r0, [pc, #32]	; (80021dc <Principal_Verify_LEDs+0xc0>)
 80021ba:	f006 fe3b 	bl	8008e34 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_RESET);

	return;
 80021be:	e005      	b.n	80021cc <Principal_Verify_LEDs+0xb0>
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_RESET);
 80021c0:	2200      	movs	r2, #0
 80021c2:	2108      	movs	r1, #8
 80021c4:	4805      	ldr	r0, [pc, #20]	; (80021dc <Principal_Verify_LEDs+0xc0>)
 80021c6:	f006 fe35 	bl	8008e34 <HAL_GPIO_WritePin>
	return;
 80021ca:	bf00      	nop
}
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	200026ce 	.word	0x200026ce
 80021d8:	20002580 	.word	0x20002580
 80021dc:	40020800 	.word	0x40020800
 80021e0:	20002642 	.word	0x20002642
 80021e4:	200026cc 	.word	0x200026cc

080021e8 <Principal_CAN_Start>:

void Principal_CAN_Start(CAN_HandleTypeDef* hcan)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08e      	sub	sp, #56	; 0x38
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filter_id = 0, mask_id = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	637b      	str	r3, [r7, #52]	; 0x34
 80021f4:	2300      	movs	r3, #0
 80021f6:	633b      	str	r3, [r7, #48]	; 0x30

	filter_id = CAN_DAQ_FILTER;
 80021f8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80021fc:	637b      	str	r3, [r7, #52]	; 0x34
	mask_id = CAN_DAQ_MASK;
 80021fe:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002202:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002204:	2300      	movs	r3, #0
 8002206:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002208:	2301      	movs	r3, #1
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 800220c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800220e:	0b5b      	lsrs	r3, r3, #13
 8002210:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 8002212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	b29b      	uxth	r3, r3
 8002218:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 800221a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221c:	0b5b      	lsrs	r3, r3, #13
 800221e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 8002220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	b29b      	uxth	r3, r3
 8002226:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002228:	2300      	movs	r3, #0
 800222a:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 800222c:	2301      	movs	r3, #1
 800222e:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterBank = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	61fb      	str	r3, [r7, #28]
	sFilterConfig.SlaveStartFilterBank = 14;
 8002234:	230e      	movs	r3, #14
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 8002238:	f107 0308 	add.w	r3, r7, #8
 800223c:	4619      	mov	r1, r3
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f005 f9da 	bl	80075f8 <HAL_CAN_ConfigFilter>

	filter_id = CAN_CFG_FILTER;
 8002244:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <Principal_CAN_Start+0xe0>)
 8002246:	637b      	str	r3, [r7, #52]	; 0x34
	mask_id = CAN_CFG_MASK;
 8002248:	4b20      	ldr	r3, [pc, #128]	; (80022cc <Principal_CAN_Start+0xe4>)
 800224a:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800224c:	2300      	movs	r3, #0
 800224e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002250:	2301      	movs	r3, #1
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 8002254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002256:	0b5b      	lsrs	r3, r3, #13
 8002258:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 800225a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	b29b      	uxth	r3, r3
 8002260:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 8002262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002264:	0b5b      	lsrs	r3, r3, #13
 8002266:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 8002268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226a:	00db      	lsls	r3, r3, #3
 800226c:	b29b      	uxth	r3, r3
 800226e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002270:	2300      	movs	r3, #0
 8002272:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 8002274:	2301      	movs	r3, #1
 8002276:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterBank = 1;
 8002278:	2301      	movs	r3, #1
 800227a:	61fb      	str	r3, [r7, #28]
	sFilterConfig.SlaveStartFilterBank = 15;
 800227c:	230f      	movs	r3, #15
 800227e:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 8002280:	f107 0308 	add.w	r3, r7, #8
 8002284:	4619      	mov	r1, r3
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f005 f9b6 	bl	80075f8 <HAL_CAN_ConfigFilter>

	FT_CAN_FilterConfig(hcan, FT_Power_ECU, 2, CAN_RX_FIFO0);
 800228c:	2300      	movs	r3, #0
 800228e:	2202      	movs	r2, #2
 8002290:	f240 2181 	movw	r1, #641	; 0x281
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f7fe f98d 	bl	80005b4 <FT_CAN_FilterConfig>
	FT_CAN_FilterConfig(hcan, FT_WBO2_Nano, 3, CAN_RX_FIFO0);
 800229a:	2300      	movs	r3, #0
 800229c:	2203      	movs	r2, #3
 800229e:	f44f 7110 	mov.w	r1, #576	; 0x240
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7fe f986 	bl	80005b4 <FT_CAN_FilterConfig>
	PDM_CAN_FilterConfig(hcan, 4, CAN_RX_FIFO0);
 80022a8:	2200      	movs	r2, #0
 80022aa:	2104      	movs	r1, #4
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff fe99 	bl	8001fe4 <PDM_CAN_FilterConfig>

	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80022b2:	2102      	movs	r1, #2
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f005 fce5 	bl	8007c84 <HAL_CAN_ActivateNotification>

	HAL_CAN_Start(hcan);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f005 fa7c 	bl	80077b8 <HAL_CAN_Start>

	return;
 80022c0:	bf00      	nop
}
 80022c2:	3738      	adds	r7, #56	; 0x38
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	1e300000 	.word	0x1e300000
 80022cc:	1ff80000 	.word	0x1ff80000

080022d0 <Principal_Transmit_Msg>:

void Principal_Transmit_Msg(CAN_HandleTypeDef* hcan, uint8_t msg_number)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	460b      	mov	r3, r1
 80022da:	70fb      	strb	r3, [r7, #3]
	switch(msg_number)
 80022dc:	78fb      	ldrb	r3, [r7, #3]
 80022de:	2b07      	cmp	r3, #7
 80022e0:	d832      	bhi.n	8002348 <Principal_Transmit_Msg+0x78>
 80022e2:	a201      	add	r2, pc, #4	; (adr r2, 80022e8 <Principal_Transmit_Msg+0x18>)
 80022e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022e8:	08002309 	.word	0x08002309
 80022ec:	08002311 	.word	0x08002311
 80022f0:	08002319 	.word	0x08002319
 80022f4:	08002329 	.word	0x08002329
 80022f8:	08002321 	.word	0x08002321
 80022fc:	08002331 	.word	0x08002331
 8002300:	08002339 	.word	0x08002339
 8002304:	08002341 	.word	0x08002341
	{
		case ANALOG_1_4:
			Tx_Analog_1_4(hcan);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f821 	bl	8002350 <Tx_Analog_1_4>
			break;
 800230e:	e01c      	b.n	800234a <Principal_Transmit_Msg+0x7a>

		case ANALOG_5_8:
			Tx_Analog_5_8(hcan);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f8bb 	bl	800248c <Tx_Analog_5_8>
			break;
 8002316:	e018      	b.n	800234a <Principal_Transmit_Msg+0x7a>

		case ANALOG_9_12:
			Tx_Analog_9_12(hcan);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f955 	bl	80025c8 <Tx_Analog_9_12>
			break;
 800231e:	e014      	b.n	800234a <Principal_Transmit_Msg+0x7a>

		case VERIFY_MSG:
			Tx_Verify(hcan);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 fa83 	bl	800282c <Tx_Verify>
			break;
 8002326:	e010      	b.n	800234a <Principal_Transmit_Msg+0x7a>

		case RTC_MSG:
			Tx_RTC(hcan);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f9eb 	bl	8002704 <Tx_RTC>
			break;
 800232e:	e00c      	b.n	800234a <Principal_Transmit_Msg+0x7a>

		case BEACON_MSG:
			Tx_Beacon(hcan);
 8002330:	6878      	ldr	r0, [r7, #4]
 8002332:	f000 ff7f 	bl	8003234 <Tx_Beacon>
			break;
 8002336:	e008      	b.n	800234a <Principal_Transmit_Msg+0x7a>

		case ECU_SAVE:
			Save_ECU(hcan);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f001 f825 	bl	8003388 <Save_ECU>
			break;
 800233e:	e004      	b.n	800234a <Principal_Transmit_Msg+0x7a>

		case PDM_SAVE:
			Save_PDM(hcan);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f001 f98b 	bl	800365c <Save_PDM>
			break;
 8002346:	e000      	b.n	800234a <Principal_Transmit_Msg+0x7a>

		default:
			return;
 8002348:	bf00      	nop
	}
}
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <Tx_Analog_1_4>:

static void Tx_Analog_1_4(CAN_HandleTypeDef* hcan)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
	txHeader.IDE = CAN_ID_STD;
 8002358:	4b44      	ldr	r3, [pc, #272]	; (800246c <Tx_Analog_1_4+0x11c>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 800235e:	4b43      	ldr	r3, [pc, #268]	; (800246c <Tx_Analog_1_4+0x11c>)
 8002360:	2200      	movs	r2, #0
 8002362:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8002364:	4b41      	ldr	r3, [pc, #260]	; (800246c <Tx_Analog_1_4+0x11c>)
 8002366:	2200      	movs	r2, #0
 8002368:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = FIRST_ID + ANALOG_1_4;
 800236a:	4b40      	ldr	r3, [pc, #256]	; (800246c <Tx_Analog_1_4+0x11c>)
 800236c:	f240 5215 	movw	r2, #1301	; 0x515
 8002370:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 8002372:	4b3e      	ldr	r3, [pc, #248]	; (800246c <Tx_Analog_1_4+0x11c>)
 8002374:	2208      	movs	r2, #8
 8002376:	611a      	str	r2, [r3, #16]

	txData[0] = adcBuffer[0] >> 8;
 8002378:	4b3d      	ldr	r3, [pc, #244]	; (8002470 <Tx_Analog_1_4+0x120>)
 800237a:	881b      	ldrh	r3, [r3, #0]
 800237c:	0a1b      	lsrs	r3, r3, #8
 800237e:	b29b      	uxth	r3, r3
 8002380:	b2da      	uxtb	r2, r3
 8002382:	4b3c      	ldr	r3, [pc, #240]	; (8002474 <Tx_Analog_1_4+0x124>)
 8002384:	701a      	strb	r2, [r3, #0]
	txData[1] = adcBuffer[0] & 0xff;
 8002386:	4b3a      	ldr	r3, [pc, #232]	; (8002470 <Tx_Analog_1_4+0x120>)
 8002388:	881b      	ldrh	r3, [r3, #0]
 800238a:	b2da      	uxtb	r2, r3
 800238c:	4b39      	ldr	r3, [pc, #228]	; (8002474 <Tx_Analog_1_4+0x124>)
 800238e:	705a      	strb	r2, [r3, #1]
	txData[2] = adcBuffer[1] >> 8;
 8002390:	4b37      	ldr	r3, [pc, #220]	; (8002470 <Tx_Analog_1_4+0x120>)
 8002392:	885b      	ldrh	r3, [r3, #2]
 8002394:	0a1b      	lsrs	r3, r3, #8
 8002396:	b29b      	uxth	r3, r3
 8002398:	b2da      	uxtb	r2, r3
 800239a:	4b36      	ldr	r3, [pc, #216]	; (8002474 <Tx_Analog_1_4+0x124>)
 800239c:	709a      	strb	r2, [r3, #2]
	txData[3] = adcBuffer[1] & 0xff;
 800239e:	4b34      	ldr	r3, [pc, #208]	; (8002470 <Tx_Analog_1_4+0x120>)
 80023a0:	885b      	ldrh	r3, [r3, #2]
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b33      	ldr	r3, [pc, #204]	; (8002474 <Tx_Analog_1_4+0x124>)
 80023a6:	70da      	strb	r2, [r3, #3]
	txData[4] = adcBuffer[2] >> 8;
 80023a8:	4b31      	ldr	r3, [pc, #196]	; (8002470 <Tx_Analog_1_4+0x120>)
 80023aa:	889b      	ldrh	r3, [r3, #4]
 80023ac:	0a1b      	lsrs	r3, r3, #8
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	4b30      	ldr	r3, [pc, #192]	; (8002474 <Tx_Analog_1_4+0x124>)
 80023b4:	711a      	strb	r2, [r3, #4]
	txData[5] = adcBuffer[2] & 0xff;
 80023b6:	4b2e      	ldr	r3, [pc, #184]	; (8002470 <Tx_Analog_1_4+0x120>)
 80023b8:	889b      	ldrh	r3, [r3, #4]
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <Tx_Analog_1_4+0x124>)
 80023be:	715a      	strb	r2, [r3, #5]
	txData[6] = adcBuffer[3] >> 8;
 80023c0:	4b2b      	ldr	r3, [pc, #172]	; (8002470 <Tx_Analog_1_4+0x120>)
 80023c2:	88db      	ldrh	r3, [r3, #6]
 80023c4:	0a1b      	lsrs	r3, r3, #8
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	4b2a      	ldr	r3, [pc, #168]	; (8002474 <Tx_Analog_1_4+0x124>)
 80023cc:	719a      	strb	r2, [r3, #6]
	txData[7] = adcBuffer[3] & 0xff;
 80023ce:	4b28      	ldr	r3, [pc, #160]	; (8002470 <Tx_Analog_1_4+0x120>)
 80023d0:	88db      	ldrh	r3, [r3, #6]
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	4b27      	ldr	r3, [pc, #156]	; (8002474 <Tx_Analog_1_4+0x124>)
 80023d6:	71da      	strb	r2, [r3, #7]

	if(flagDatalogger == DL_SAVE)
 80023d8:	4b27      	ldr	r3, [pc, #156]	; (8002478 <Tx_Analog_1_4+0x128>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d108      	bne.n	80023f2 <Tx_Analog_1_4+0xa2>
#ifdef DATALOGGER_NO_BUFFER
		Principal_Datalogger_Save_Data(hcan, txHeader.StdId, txHeader.DLC, txData);
 80023e0:	4b22      	ldr	r3, [pc, #136]	; (800246c <Tx_Analog_1_4+0x11c>)
 80023e2:	6819      	ldr	r1, [r3, #0]
 80023e4:	4b21      	ldr	r3, [pc, #132]	; (800246c <Tx_Analog_1_4+0x11c>)
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	4b22      	ldr	r3, [pc, #136]	; (8002474 <Tx_Analog_1_4+0x124>)
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f003 fd61 	bl	8005eb4 <Principal_Datalogger_Save_Data>
#else
		Principal_Datalogger_Save_Buffer(hcan, txHeader.StdId, txHeader.DLC, txData);
#endif

	__PRINCIPAL_TX_DATA(hcan, ANALOG_1_4);
 80023f2:	4b22      	ldr	r3, [pc, #136]	; (800247c <Tx_Analog_1_4+0x12c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a22      	ldr	r2, [pc, #136]	; (8002480 <Tx_Analog_1_4+0x130>)
 80023f8:	8812      	ldrh	r2, [r2, #0]
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d332      	bcc.n	8002464 <Tx_Analog_1_4+0x114>
 80023fe:	4b20      	ldr	r3, [pc, #128]	; (8002480 <Tx_Analog_1_4+0x130>)
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d02e      	beq.n	8002464 <Tx_Analog_1_4+0x114>
 8002406:	4b1d      	ldr	r3, [pc, #116]	; (800247c <Tx_Analog_1_4+0x12c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a1d      	ldr	r2, [pc, #116]	; (8002480 <Tx_Analog_1_4+0x130>)
 800240c:	8812      	ldrh	r2, [r2, #0]
 800240e:	1a9b      	subs	r3, r3, r2
 8002410:	4a1a      	ldr	r2, [pc, #104]	; (800247c <Tx_Analog_1_4+0x12c>)
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <Tx_Analog_1_4+0x134>)
 8002416:	4a17      	ldr	r2, [pc, #92]	; (8002474 <Tx_Analog_1_4+0x124>)
 8002418:	4914      	ldr	r1, [pc, #80]	; (800246c <Tx_Analog_1_4+0x11c>)
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f005 fa10 	bl	8007840 <HAL_CAN_AddTxMessage>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d107      	bne.n	8002436 <Tx_Analog_1_4+0xe6>
 8002426:	4b18      	ldr	r3, [pc, #96]	; (8002488 <Tx_Analog_1_4+0x138>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	f043 0301 	orr.w	r3, r3, #1
 800242e:	b2da      	uxtb	r2, r3
 8002430:	4b15      	ldr	r3, [pc, #84]	; (8002488 <Tx_Analog_1_4+0x138>)
 8002432:	701a      	strb	r2, [r3, #0]
 8002434:	e006      	b.n	8002444 <Tx_Analog_1_4+0xf4>
 8002436:	4b14      	ldr	r3, [pc, #80]	; (8002488 <Tx_Analog_1_4+0x138>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	b2da      	uxtb	r2, r3
 8002440:	4b11      	ldr	r3, [pc, #68]	; (8002488 <Tx_Analog_1_4+0x138>)
 8002442:	701a      	strb	r2, [r3, #0]
 8002444:	2300      	movs	r3, #0
 8002446:	73fb      	strb	r3, [r7, #15]
 8002448:	e002      	b.n	8002450 <Tx_Analog_1_4+0x100>
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	3301      	adds	r3, #1
 800244e:	73fb      	strb	r3, [r7, #15]
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f005 fad0 	bl	80079f6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002456:	4603      	mov	r3, r0
 8002458:	2b03      	cmp	r3, #3
 800245a:	d003      	beq.n	8002464 <Tx_Analog_1_4+0x114>
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d9f3      	bls.n	800244a <Tx_Analog_1_4+0xfa>

	return;
 8002462:	bf00      	nop
 8002464:	bf00      	nop
}
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20002564 	.word	0x20002564
 8002470:	20002580 	.word	0x20002580
 8002474:	2000253c 	.word	0x2000253c
 8002478:	20002642 	.word	0x20002642
 800247c:	2000268c 	.word	0x2000268c
 8002480:	20002660 	.word	0x20002660
 8002484:	20002544 	.word	0x20002544
 8002488:	200026cc 	.word	0x200026cc

0800248c <Tx_Analog_5_8>:

static void Tx_Analog_5_8(CAN_HandleTypeDef* hcan)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
	txHeader.IDE = CAN_ID_STD;
 8002494:	4b44      	ldr	r3, [pc, #272]	; (80025a8 <Tx_Analog_5_8+0x11c>)
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 800249a:	4b43      	ldr	r3, [pc, #268]	; (80025a8 <Tx_Analog_5_8+0x11c>)
 800249c:	2200      	movs	r2, #0
 800249e:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80024a0:	4b41      	ldr	r3, [pc, #260]	; (80025a8 <Tx_Analog_5_8+0x11c>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = FIRST_ID + ANALOG_5_8;
 80024a6:	4b40      	ldr	r3, [pc, #256]	; (80025a8 <Tx_Analog_5_8+0x11c>)
 80024a8:	f240 5216 	movw	r2, #1302	; 0x516
 80024ac:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 80024ae:	4b3e      	ldr	r3, [pc, #248]	; (80025a8 <Tx_Analog_5_8+0x11c>)
 80024b0:	2208      	movs	r2, #8
 80024b2:	611a      	str	r2, [r3, #16]

	txData[0] = adcBuffer[4] >> 8;
 80024b4:	4b3d      	ldr	r3, [pc, #244]	; (80025ac <Tx_Analog_5_8+0x120>)
 80024b6:	891b      	ldrh	r3, [r3, #8]
 80024b8:	0a1b      	lsrs	r3, r3, #8
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	4b3c      	ldr	r3, [pc, #240]	; (80025b0 <Tx_Analog_5_8+0x124>)
 80024c0:	701a      	strb	r2, [r3, #0]
	txData[1] = adcBuffer[4] & 0xff;
 80024c2:	4b3a      	ldr	r3, [pc, #232]	; (80025ac <Tx_Analog_5_8+0x120>)
 80024c4:	891b      	ldrh	r3, [r3, #8]
 80024c6:	b2da      	uxtb	r2, r3
 80024c8:	4b39      	ldr	r3, [pc, #228]	; (80025b0 <Tx_Analog_5_8+0x124>)
 80024ca:	705a      	strb	r2, [r3, #1]
	txData[2] = adcBuffer[5] >> 8;
 80024cc:	4b37      	ldr	r3, [pc, #220]	; (80025ac <Tx_Analog_5_8+0x120>)
 80024ce:	895b      	ldrh	r3, [r3, #10]
 80024d0:	0a1b      	lsrs	r3, r3, #8
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	4b36      	ldr	r3, [pc, #216]	; (80025b0 <Tx_Analog_5_8+0x124>)
 80024d8:	709a      	strb	r2, [r3, #2]
	txData[3] = adcBuffer[5] & 0xff;
 80024da:	4b34      	ldr	r3, [pc, #208]	; (80025ac <Tx_Analog_5_8+0x120>)
 80024dc:	895b      	ldrh	r3, [r3, #10]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	4b33      	ldr	r3, [pc, #204]	; (80025b0 <Tx_Analog_5_8+0x124>)
 80024e2:	70da      	strb	r2, [r3, #3]
	txData[4] = adcBuffer[6] >> 8;
 80024e4:	4b31      	ldr	r3, [pc, #196]	; (80025ac <Tx_Analog_5_8+0x120>)
 80024e6:	899b      	ldrh	r3, [r3, #12]
 80024e8:	0a1b      	lsrs	r3, r3, #8
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	4b30      	ldr	r3, [pc, #192]	; (80025b0 <Tx_Analog_5_8+0x124>)
 80024f0:	711a      	strb	r2, [r3, #4]
	txData[5] = adcBuffer[6] & 0xff;
 80024f2:	4b2e      	ldr	r3, [pc, #184]	; (80025ac <Tx_Analog_5_8+0x120>)
 80024f4:	899b      	ldrh	r3, [r3, #12]
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	4b2d      	ldr	r3, [pc, #180]	; (80025b0 <Tx_Analog_5_8+0x124>)
 80024fa:	715a      	strb	r2, [r3, #5]
	txData[6] = adcBuffer[7] >> 8;
 80024fc:	4b2b      	ldr	r3, [pc, #172]	; (80025ac <Tx_Analog_5_8+0x120>)
 80024fe:	89db      	ldrh	r3, [r3, #14]
 8002500:	0a1b      	lsrs	r3, r3, #8
 8002502:	b29b      	uxth	r3, r3
 8002504:	b2da      	uxtb	r2, r3
 8002506:	4b2a      	ldr	r3, [pc, #168]	; (80025b0 <Tx_Analog_5_8+0x124>)
 8002508:	719a      	strb	r2, [r3, #6]
	txData[7] = adcBuffer[7] & 0xff;
 800250a:	4b28      	ldr	r3, [pc, #160]	; (80025ac <Tx_Analog_5_8+0x120>)
 800250c:	89db      	ldrh	r3, [r3, #14]
 800250e:	b2da      	uxtb	r2, r3
 8002510:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <Tx_Analog_5_8+0x124>)
 8002512:	71da      	strb	r2, [r3, #7]

	if(flagDatalogger == DL_SAVE)
 8002514:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <Tx_Analog_5_8+0x128>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d108      	bne.n	800252e <Tx_Analog_5_8+0xa2>
#ifdef DATALOGGER_NO_BUFFER
		Principal_Datalogger_Save_Data(hcan, txHeader.StdId, txHeader.DLC, txData);
 800251c:	4b22      	ldr	r3, [pc, #136]	; (80025a8 <Tx_Analog_5_8+0x11c>)
 800251e:	6819      	ldr	r1, [r3, #0]
 8002520:	4b21      	ldr	r3, [pc, #132]	; (80025a8 <Tx_Analog_5_8+0x11c>)
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	b2da      	uxtb	r2, r3
 8002526:	4b22      	ldr	r3, [pc, #136]	; (80025b0 <Tx_Analog_5_8+0x124>)
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f003 fcc3 	bl	8005eb4 <Principal_Datalogger_Save_Data>
#else
		Principal_Datalogger_Save_Buffer(hcan, txHeader.StdId, txHeader.DLC, txData);
#endif

	__PRINCIPAL_TX_DATA(hcan, ANALOG_5_8);
 800252e:	4b22      	ldr	r3, [pc, #136]	; (80025b8 <Tx_Analog_5_8+0x12c>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	4a22      	ldr	r2, [pc, #136]	; (80025bc <Tx_Analog_5_8+0x130>)
 8002534:	8852      	ldrh	r2, [r2, #2]
 8002536:	4293      	cmp	r3, r2
 8002538:	d332      	bcc.n	80025a0 <Tx_Analog_5_8+0x114>
 800253a:	4b20      	ldr	r3, [pc, #128]	; (80025bc <Tx_Analog_5_8+0x130>)
 800253c:	885b      	ldrh	r3, [r3, #2]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d02e      	beq.n	80025a0 <Tx_Analog_5_8+0x114>
 8002542:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <Tx_Analog_5_8+0x12c>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	4a1d      	ldr	r2, [pc, #116]	; (80025bc <Tx_Analog_5_8+0x130>)
 8002548:	8852      	ldrh	r2, [r2, #2]
 800254a:	1a9b      	subs	r3, r3, r2
 800254c:	4a1a      	ldr	r2, [pc, #104]	; (80025b8 <Tx_Analog_5_8+0x12c>)
 800254e:	6053      	str	r3, [r2, #4]
 8002550:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <Tx_Analog_5_8+0x134>)
 8002552:	4a17      	ldr	r2, [pc, #92]	; (80025b0 <Tx_Analog_5_8+0x124>)
 8002554:	4914      	ldr	r1, [pc, #80]	; (80025a8 <Tx_Analog_5_8+0x11c>)
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f005 f972 	bl	8007840 <HAL_CAN_AddTxMessage>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d107      	bne.n	8002572 <Tx_Analog_5_8+0xe6>
 8002562:	4b18      	ldr	r3, [pc, #96]	; (80025c4 <Tx_Analog_5_8+0x138>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	b2da      	uxtb	r2, r3
 800256c:	4b15      	ldr	r3, [pc, #84]	; (80025c4 <Tx_Analog_5_8+0x138>)
 800256e:	701a      	strb	r2, [r3, #0]
 8002570:	e006      	b.n	8002580 <Tx_Analog_5_8+0xf4>
 8002572:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <Tx_Analog_5_8+0x138>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	b2da      	uxtb	r2, r3
 800257c:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <Tx_Analog_5_8+0x138>)
 800257e:	701a      	strb	r2, [r3, #0]
 8002580:	2300      	movs	r3, #0
 8002582:	73fb      	strb	r3, [r7, #15]
 8002584:	e002      	b.n	800258c <Tx_Analog_5_8+0x100>
 8002586:	7bfb      	ldrb	r3, [r7, #15]
 8002588:	3301      	adds	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f005 fa32 	bl	80079f6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002592:	4603      	mov	r3, r0
 8002594:	2b03      	cmp	r3, #3
 8002596:	d003      	beq.n	80025a0 <Tx_Analog_5_8+0x114>
 8002598:	7bfb      	ldrb	r3, [r7, #15]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d9f3      	bls.n	8002586 <Tx_Analog_5_8+0xfa>

	return;
 800259e:	bf00      	nop
 80025a0:	bf00      	nop
}
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20002564 	.word	0x20002564
 80025ac:	20002580 	.word	0x20002580
 80025b0:	2000253c 	.word	0x2000253c
 80025b4:	20002642 	.word	0x20002642
 80025b8:	2000268c 	.word	0x2000268c
 80025bc:	20002660 	.word	0x20002660
 80025c0:	20002544 	.word	0x20002544
 80025c4:	200026cc 	.word	0x200026cc

080025c8 <Tx_Analog_9_12>:

static void Tx_Analog_9_12(CAN_HandleTypeDef* hcan)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
	txHeader.IDE = CAN_ID_STD;
 80025d0:	4b44      	ldr	r3, [pc, #272]	; (80026e4 <Tx_Analog_9_12+0x11c>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 80025d6:	4b43      	ldr	r3, [pc, #268]	; (80026e4 <Tx_Analog_9_12+0x11c>)
 80025d8:	2200      	movs	r2, #0
 80025da:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80025dc:	4b41      	ldr	r3, [pc, #260]	; (80026e4 <Tx_Analog_9_12+0x11c>)
 80025de:	2200      	movs	r2, #0
 80025e0:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = FIRST_ID + ANALOG_9_12;
 80025e2:	4b40      	ldr	r3, [pc, #256]	; (80026e4 <Tx_Analog_9_12+0x11c>)
 80025e4:	f240 5217 	movw	r2, #1303	; 0x517
 80025e8:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 80025ea:	4b3e      	ldr	r3, [pc, #248]	; (80026e4 <Tx_Analog_9_12+0x11c>)
 80025ec:	2208      	movs	r2, #8
 80025ee:	611a      	str	r2, [r3, #16]

	txData[0] = adcBuffer[8] >> 8;
 80025f0:	4b3d      	ldr	r3, [pc, #244]	; (80026e8 <Tx_Analog_9_12+0x120>)
 80025f2:	8a1b      	ldrh	r3, [r3, #16]
 80025f4:	0a1b      	lsrs	r3, r3, #8
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	4b3c      	ldr	r3, [pc, #240]	; (80026ec <Tx_Analog_9_12+0x124>)
 80025fc:	701a      	strb	r2, [r3, #0]
	txData[1] = adcBuffer[8] & 0xff;
 80025fe:	4b3a      	ldr	r3, [pc, #232]	; (80026e8 <Tx_Analog_9_12+0x120>)
 8002600:	8a1b      	ldrh	r3, [r3, #16]
 8002602:	b2da      	uxtb	r2, r3
 8002604:	4b39      	ldr	r3, [pc, #228]	; (80026ec <Tx_Analog_9_12+0x124>)
 8002606:	705a      	strb	r2, [r3, #1]
	txData[2] = adcBuffer[9] >> 8;
 8002608:	4b37      	ldr	r3, [pc, #220]	; (80026e8 <Tx_Analog_9_12+0x120>)
 800260a:	8a5b      	ldrh	r3, [r3, #18]
 800260c:	0a1b      	lsrs	r3, r3, #8
 800260e:	b29b      	uxth	r3, r3
 8002610:	b2da      	uxtb	r2, r3
 8002612:	4b36      	ldr	r3, [pc, #216]	; (80026ec <Tx_Analog_9_12+0x124>)
 8002614:	709a      	strb	r2, [r3, #2]
	txData[3] = adcBuffer[9] & 0xff;
 8002616:	4b34      	ldr	r3, [pc, #208]	; (80026e8 <Tx_Analog_9_12+0x120>)
 8002618:	8a5b      	ldrh	r3, [r3, #18]
 800261a:	b2da      	uxtb	r2, r3
 800261c:	4b33      	ldr	r3, [pc, #204]	; (80026ec <Tx_Analog_9_12+0x124>)
 800261e:	70da      	strb	r2, [r3, #3]
	txData[4] = adcBuffer[10] >> 8;
 8002620:	4b31      	ldr	r3, [pc, #196]	; (80026e8 <Tx_Analog_9_12+0x120>)
 8002622:	8a9b      	ldrh	r3, [r3, #20]
 8002624:	0a1b      	lsrs	r3, r3, #8
 8002626:	b29b      	uxth	r3, r3
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4b30      	ldr	r3, [pc, #192]	; (80026ec <Tx_Analog_9_12+0x124>)
 800262c:	711a      	strb	r2, [r3, #4]
	txData[5] = adcBuffer[10] & 0xff;
 800262e:	4b2e      	ldr	r3, [pc, #184]	; (80026e8 <Tx_Analog_9_12+0x120>)
 8002630:	8a9b      	ldrh	r3, [r3, #20]
 8002632:	b2da      	uxtb	r2, r3
 8002634:	4b2d      	ldr	r3, [pc, #180]	; (80026ec <Tx_Analog_9_12+0x124>)
 8002636:	715a      	strb	r2, [r3, #5]
	txData[6] = adcBuffer[11] >> 8;
 8002638:	4b2b      	ldr	r3, [pc, #172]	; (80026e8 <Tx_Analog_9_12+0x120>)
 800263a:	8adb      	ldrh	r3, [r3, #22]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	b29b      	uxth	r3, r3
 8002640:	b2da      	uxtb	r2, r3
 8002642:	4b2a      	ldr	r3, [pc, #168]	; (80026ec <Tx_Analog_9_12+0x124>)
 8002644:	719a      	strb	r2, [r3, #6]
	txData[7] = adcBuffer[11] & 0xff;
 8002646:	4b28      	ldr	r3, [pc, #160]	; (80026e8 <Tx_Analog_9_12+0x120>)
 8002648:	8adb      	ldrh	r3, [r3, #22]
 800264a:	b2da      	uxtb	r2, r3
 800264c:	4b27      	ldr	r3, [pc, #156]	; (80026ec <Tx_Analog_9_12+0x124>)
 800264e:	71da      	strb	r2, [r3, #7]

	if(flagDatalogger == DL_SAVE)
 8002650:	4b27      	ldr	r3, [pc, #156]	; (80026f0 <Tx_Analog_9_12+0x128>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d108      	bne.n	800266a <Tx_Analog_9_12+0xa2>
#ifdef DATALOGGER_NO_BUFFER
		Principal_Datalogger_Save_Data(hcan, txHeader.StdId, txHeader.DLC, txData);
 8002658:	4b22      	ldr	r3, [pc, #136]	; (80026e4 <Tx_Analog_9_12+0x11c>)
 800265a:	6819      	ldr	r1, [r3, #0]
 800265c:	4b21      	ldr	r3, [pc, #132]	; (80026e4 <Tx_Analog_9_12+0x11c>)
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	b2da      	uxtb	r2, r3
 8002662:	4b22      	ldr	r3, [pc, #136]	; (80026ec <Tx_Analog_9_12+0x124>)
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f003 fc25 	bl	8005eb4 <Principal_Datalogger_Save_Data>
#else
		Principal_Datalogger_Save_Buffer(hcan, txHeader.StdId, txHeader.DLC, txData);
#endif

	__PRINCIPAL_TX_DATA(hcan, ANALOG_9_12);
 800266a:	4b22      	ldr	r3, [pc, #136]	; (80026f4 <Tx_Analog_9_12+0x12c>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	4a22      	ldr	r2, [pc, #136]	; (80026f8 <Tx_Analog_9_12+0x130>)
 8002670:	8892      	ldrh	r2, [r2, #4]
 8002672:	4293      	cmp	r3, r2
 8002674:	d332      	bcc.n	80026dc <Tx_Analog_9_12+0x114>
 8002676:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <Tx_Analog_9_12+0x130>)
 8002678:	889b      	ldrh	r3, [r3, #4]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d02e      	beq.n	80026dc <Tx_Analog_9_12+0x114>
 800267e:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <Tx_Analog_9_12+0x12c>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	4a1d      	ldr	r2, [pc, #116]	; (80026f8 <Tx_Analog_9_12+0x130>)
 8002684:	8892      	ldrh	r2, [r2, #4]
 8002686:	1a9b      	subs	r3, r3, r2
 8002688:	4a1a      	ldr	r2, [pc, #104]	; (80026f4 <Tx_Analog_9_12+0x12c>)
 800268a:	6093      	str	r3, [r2, #8]
 800268c:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <Tx_Analog_9_12+0x134>)
 800268e:	4a17      	ldr	r2, [pc, #92]	; (80026ec <Tx_Analog_9_12+0x124>)
 8002690:	4914      	ldr	r1, [pc, #80]	; (80026e4 <Tx_Analog_9_12+0x11c>)
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f005 f8d4 	bl	8007840 <HAL_CAN_AddTxMessage>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d107      	bne.n	80026ae <Tx_Analog_9_12+0xe6>
 800269e:	4b18      	ldr	r3, [pc, #96]	; (8002700 <Tx_Analog_9_12+0x138>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	f043 0301 	orr.w	r3, r3, #1
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	4b15      	ldr	r3, [pc, #84]	; (8002700 <Tx_Analog_9_12+0x138>)
 80026aa:	701a      	strb	r2, [r3, #0]
 80026ac:	e006      	b.n	80026bc <Tx_Analog_9_12+0xf4>
 80026ae:	4b14      	ldr	r3, [pc, #80]	; (8002700 <Tx_Analog_9_12+0x138>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	4b11      	ldr	r3, [pc, #68]	; (8002700 <Tx_Analog_9_12+0x138>)
 80026ba:	701a      	strb	r2, [r3, #0]
 80026bc:	2300      	movs	r3, #0
 80026be:	73fb      	strb	r3, [r7, #15]
 80026c0:	e002      	b.n	80026c8 <Tx_Analog_9_12+0x100>
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	3301      	adds	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f005 f994 	bl	80079f6 <HAL_CAN_GetTxMailboxesFreeLevel>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	d003      	beq.n	80026dc <Tx_Analog_9_12+0x114>
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d9f3      	bls.n	80026c2 <Tx_Analog_9_12+0xfa>

	return;
 80026da:	bf00      	nop
 80026dc:	bf00      	nop
}
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20002564 	.word	0x20002564
 80026e8:	20002580 	.word	0x20002580
 80026ec:	2000253c 	.word	0x2000253c
 80026f0:	20002642 	.word	0x20002642
 80026f4:	2000268c 	.word	0x2000268c
 80026f8:	20002660 	.word	0x20002660
 80026fc:	20002544 	.word	0x20002544
 8002700:	200026cc 	.word	0x200026cc

08002704 <Tx_RTC>:

static void Tx_RTC(CAN_HandleTypeDef* hcan)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
	txHeader.IDE = CAN_ID_STD;
 800270c:	4b3d      	ldr	r3, [pc, #244]	; (8002804 <Tx_RTC+0x100>)
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 8002712:	4b3c      	ldr	r3, [pc, #240]	; (8002804 <Tx_RTC+0x100>)
 8002714:	2200      	movs	r2, #0
 8002716:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8002718:	4b3a      	ldr	r3, [pc, #232]	; (8002804 <Tx_RTC+0x100>)
 800271a:	2200      	movs	r2, #0
 800271c:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = FIRST_ID + RTC_MSG;
 800271e:	4b39      	ldr	r3, [pc, #228]	; (8002804 <Tx_RTC+0x100>)
 8002720:	f44f 62a3 	mov.w	r2, #1304	; 0x518
 8002724:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 6;
 8002726:	4b37      	ldr	r3, [pc, #220]	; (8002804 <Tx_RTC+0x100>)
 8002728:	2206      	movs	r2, #6
 800272a:	611a      	str	r2, [r3, #16]

	HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 800272c:	2200      	movs	r2, #0
 800272e:	4936      	ldr	r1, [pc, #216]	; (8002808 <Tx_RTC+0x104>)
 8002730:	4836      	ldr	r0, [pc, #216]	; (800280c <Tx_RTC+0x108>)
 8002732:	f00a f8b5 	bl	800c8a0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 8002736:	2200      	movs	r2, #0
 8002738:	4935      	ldr	r1, [pc, #212]	; (8002810 <Tx_RTC+0x10c>)
 800273a:	4834      	ldr	r0, [pc, #208]	; (800280c <Tx_RTC+0x108>)
 800273c:	f00a f992 	bl	800ca64 <HAL_RTC_GetDate>

	txData[0] = rtcDate.Year;
 8002740:	4b33      	ldr	r3, [pc, #204]	; (8002810 <Tx_RTC+0x10c>)
 8002742:	78da      	ldrb	r2, [r3, #3]
 8002744:	4b33      	ldr	r3, [pc, #204]	; (8002814 <Tx_RTC+0x110>)
 8002746:	701a      	strb	r2, [r3, #0]
	txData[1] = rtcDate.Month;
 8002748:	4b31      	ldr	r3, [pc, #196]	; (8002810 <Tx_RTC+0x10c>)
 800274a:	785a      	ldrb	r2, [r3, #1]
 800274c:	4b31      	ldr	r3, [pc, #196]	; (8002814 <Tx_RTC+0x110>)
 800274e:	705a      	strb	r2, [r3, #1]
	txData[2] = rtcDate.Date;
 8002750:	4b2f      	ldr	r3, [pc, #188]	; (8002810 <Tx_RTC+0x10c>)
 8002752:	789a      	ldrb	r2, [r3, #2]
 8002754:	4b2f      	ldr	r3, [pc, #188]	; (8002814 <Tx_RTC+0x110>)
 8002756:	709a      	strb	r2, [r3, #2]
	txData[3] = rtcTime.Hours;
 8002758:	4b2b      	ldr	r3, [pc, #172]	; (8002808 <Tx_RTC+0x104>)
 800275a:	781a      	ldrb	r2, [r3, #0]
 800275c:	4b2d      	ldr	r3, [pc, #180]	; (8002814 <Tx_RTC+0x110>)
 800275e:	70da      	strb	r2, [r3, #3]
	txData[4] = rtcTime.Minutes;
 8002760:	4b29      	ldr	r3, [pc, #164]	; (8002808 <Tx_RTC+0x104>)
 8002762:	785a      	ldrb	r2, [r3, #1]
 8002764:	4b2b      	ldr	r3, [pc, #172]	; (8002814 <Tx_RTC+0x110>)
 8002766:	711a      	strb	r2, [r3, #4]
	txData[5] = rtcTime.Seconds;
 8002768:	4b27      	ldr	r3, [pc, #156]	; (8002808 <Tx_RTC+0x104>)
 800276a:	789a      	ldrb	r2, [r3, #2]
 800276c:	4b29      	ldr	r3, [pc, #164]	; (8002814 <Tx_RTC+0x110>)
 800276e:	715a      	strb	r2, [r3, #5]


	if(flagDatalogger == DL_SAVE)
 8002770:	4b29      	ldr	r3, [pc, #164]	; (8002818 <Tx_RTC+0x114>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d108      	bne.n	800278a <Tx_RTC+0x86>
#ifdef DATALOGGER_NO_BUFFER
		Principal_Datalogger_Save_Data(hcan, txHeader.StdId, txHeader.DLC, txData);
 8002778:	4b22      	ldr	r3, [pc, #136]	; (8002804 <Tx_RTC+0x100>)
 800277a:	6819      	ldr	r1, [r3, #0]
 800277c:	4b21      	ldr	r3, [pc, #132]	; (8002804 <Tx_RTC+0x100>)
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	b2da      	uxtb	r2, r3
 8002782:	4b24      	ldr	r3, [pc, #144]	; (8002814 <Tx_RTC+0x110>)
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f003 fb95 	bl	8005eb4 <Principal_Datalogger_Save_Data>
#else
		Principal_Datalogger_Save_Buffer(hcan, txHeader.StdId, txHeader.DLC, txData);
#endif

	__PRINCIPAL_TX_DATA(hcan, RTC_MSG);
 800278a:	4b24      	ldr	r3, [pc, #144]	; (800281c <Tx_RTC+0x118>)
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	4a24      	ldr	r2, [pc, #144]	; (8002820 <Tx_RTC+0x11c>)
 8002790:	88d2      	ldrh	r2, [r2, #6]
 8002792:	4293      	cmp	r3, r2
 8002794:	d332      	bcc.n	80027fc <Tx_RTC+0xf8>
 8002796:	4b22      	ldr	r3, [pc, #136]	; (8002820 <Tx_RTC+0x11c>)
 8002798:	88db      	ldrh	r3, [r3, #6]
 800279a:	2b03      	cmp	r3, #3
 800279c:	d02e      	beq.n	80027fc <Tx_RTC+0xf8>
 800279e:	4b1f      	ldr	r3, [pc, #124]	; (800281c <Tx_RTC+0x118>)
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	4a1f      	ldr	r2, [pc, #124]	; (8002820 <Tx_RTC+0x11c>)
 80027a4:	88d2      	ldrh	r2, [r2, #6]
 80027a6:	1a9b      	subs	r3, r3, r2
 80027a8:	4a1c      	ldr	r2, [pc, #112]	; (800281c <Tx_RTC+0x118>)
 80027aa:	60d3      	str	r3, [r2, #12]
 80027ac:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <Tx_RTC+0x120>)
 80027ae:	4a19      	ldr	r2, [pc, #100]	; (8002814 <Tx_RTC+0x110>)
 80027b0:	4914      	ldr	r1, [pc, #80]	; (8002804 <Tx_RTC+0x100>)
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f005 f844 	bl	8007840 <HAL_CAN_AddTxMessage>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d107      	bne.n	80027ce <Tx_RTC+0xca>
 80027be:	4b1a      	ldr	r3, [pc, #104]	; (8002828 <Tx_RTC+0x124>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	4b17      	ldr	r3, [pc, #92]	; (8002828 <Tx_RTC+0x124>)
 80027ca:	701a      	strb	r2, [r3, #0]
 80027cc:	e006      	b.n	80027dc <Tx_RTC+0xd8>
 80027ce:	4b16      	ldr	r3, [pc, #88]	; (8002828 <Tx_RTC+0x124>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	4b13      	ldr	r3, [pc, #76]	; (8002828 <Tx_RTC+0x124>)
 80027da:	701a      	strb	r2, [r3, #0]
 80027dc:	2300      	movs	r3, #0
 80027de:	73fb      	strb	r3, [r7, #15]
 80027e0:	e002      	b.n	80027e8 <Tx_RTC+0xe4>
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
 80027e4:	3301      	adds	r3, #1
 80027e6:	73fb      	strb	r3, [r7, #15]
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f005 f904 	bl	80079f6 <HAL_CAN_GetTxMailboxesFreeLevel>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d003      	beq.n	80027fc <Tx_RTC+0xf8>
 80027f4:	7bfb      	ldrb	r3, [r7, #15]
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d9f3      	bls.n	80027e2 <Tx_RTC+0xde>

	return;
 80027fa:	bf00      	nop
 80027fc:	bf00      	nop
}
 80027fe:	3710      	adds	r7, #16
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20002564 	.word	0x20002564
 8002808:	2000264c 	.word	0x2000264c
 800280c:	20000380 	.word	0x20000380
 8002810:	20002648 	.word	0x20002648
 8002814:	2000253c 	.word	0x2000253c
 8002818:	20002642 	.word	0x20002642
 800281c:	2000268c 	.word	0x2000268c
 8002820:	20002660 	.word	0x20002660
 8002824:	20002544 	.word	0x20002544
 8002828:	200026cc 	.word	0x200026cc

0800282c <Tx_Verify>:

static void Tx_Verify(CAN_HandleTypeDef* hcan)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
	txHeader.IDE = CAN_ID_STD;
 8002834:	4bc8      	ldr	r3, [pc, #800]	; (8002b58 <Tx_Verify+0x32c>)
 8002836:	2200      	movs	r2, #0
 8002838:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 800283a:	4bc7      	ldr	r3, [pc, #796]	; (8002b58 <Tx_Verify+0x32c>)
 800283c:	2200      	movs	r2, #0
 800283e:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8002840:	4bc5      	ldr	r3, [pc, #788]	; (8002b58 <Tx_Verify+0x32c>)
 8002842:	2200      	movs	r2, #0
 8002844:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = FIRST_ID + VERIFY_MSG;
 8002846:	4bc4      	ldr	r3, [pc, #784]	; (8002b58 <Tx_Verify+0x32c>)
 8002848:	f240 5219 	movw	r2, #1305	; 0x519
 800284c:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 800284e:	4bc2      	ldr	r3, [pc, #776]	; (8002b58 <Tx_Verify+0x32c>)
 8002850:	2208      	movs	r2, #8
 8002852:	611a      	str	r2, [r3, #16]

	txData[0] = verifyADC & 0xff;
 8002854:	4bc1      	ldr	r3, [pc, #772]	; (8002b5c <Tx_Verify+0x330>)
 8002856:	881b      	ldrh	r3, [r3, #0]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	4bc1      	ldr	r3, [pc, #772]	; (8002b60 <Tx_Verify+0x334>)
 800285c:	701a      	strb	r2, [r3, #0]
	txData[1] = (verifyADC >> 8) & 0x0f;
 800285e:	4bbf      	ldr	r3, [pc, #764]	; (8002b5c <Tx_Verify+0x330>)
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	0a1b      	lsrs	r3, r3, #8
 8002864:	b29b      	uxth	r3, r3
 8002866:	b2db      	uxtb	r3, r3
 8002868:	f003 030f 	and.w	r3, r3, #15
 800286c:	b2da      	uxtb	r2, r3
 800286e:	4bbc      	ldr	r3, [pc, #752]	; (8002b60 <Tx_Verify+0x334>)
 8002870:	705a      	strb	r2, [r3, #1]

	if(flagDatalogger == DL_SAVE)
 8002872:	4bbc      	ldr	r3, [pc, #752]	; (8002b64 <Tx_Verify+0x338>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d10d      	bne.n	8002896 <Tx_Verify+0x6a>
	{
		txData[1] |= (1 << 4);
 800287a:	4bb9      	ldr	r3, [pc, #740]	; (8002b60 <Tx_Verify+0x334>)
 800287c:	785b      	ldrb	r3, [r3, #1]
 800287e:	f043 0310 	orr.w	r3, r3, #16
 8002882:	b2da      	uxtb	r2, r3
 8002884:	4bb6      	ldr	r3, [pc, #728]	; (8002b60 <Tx_Verify+0x334>)
 8002886:	705a      	strb	r2, [r3, #1]
		HAL_GPIO_WritePin(OUT0_GPIO_Port, OUT0_Pin, GPIO_PIN_RESET);
 8002888:	2200      	movs	r2, #0
 800288a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800288e:	48b6      	ldr	r0, [pc, #728]	; (8002b68 <Tx_Verify+0x33c>)
 8002890:	f006 fad0 	bl	8008e34 <HAL_GPIO_WritePin>
 8002894:	e005      	b.n	80028a2 <Tx_Verify+0x76>
	}
	else
		HAL_GPIO_WritePin(OUT0_GPIO_Port, OUT0_Pin, GPIO_PIN_SET);
 8002896:	2201      	movs	r2, #1
 8002898:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800289c:	48b2      	ldr	r0, [pc, #712]	; (8002b68 <Tx_Verify+0x33c>)
 800289e:	f006 fac9 	bl	8008e34 <HAL_GPIO_WritePin>

	if(flagRTC == RTC_OK)
 80028a2:	4bb2      	ldr	r3, [pc, #712]	; (8002b6c <Tx_Verify+0x340>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d106      	bne.n	80028b8 <Tx_Verify+0x8c>
		txData[1] |= (1 << 5);
 80028aa:	4bad      	ldr	r3, [pc, #692]	; (8002b60 <Tx_Verify+0x334>)
 80028ac:	785b      	ldrb	r3, [r3, #1]
 80028ae:	f043 0320 	orr.w	r3, r3, #32
 80028b2:	b2da      	uxtb	r2, r3
 80028b4:	4baa      	ldr	r3, [pc, #680]	; (8002b60 <Tx_Verify+0x334>)
 80028b6:	705a      	strb	r2, [r3, #1]

	__FREQ_TO_BUFFER(txData[2], perMsg[ANALOG_1_4]);
 80028b8:	4bad      	ldr	r3, [pc, #692]	; (8002b70 <Tx_Verify+0x344>)
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028c0:	f000 8081 	beq.w	80029c6 <Tx_Verify+0x19a>
 80028c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028c8:	f300 80a9 	bgt.w	8002a1e <Tx_Verify+0x1f2>
 80028cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80028d0:	d07d      	beq.n	80029ce <Tx_Verify+0x1a2>
 80028d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80028d6:	f300 80a2 	bgt.w	8002a1e <Tx_Verify+0x1f2>
 80028da:	2bc8      	cmp	r3, #200	; 0xc8
 80028dc:	d07b      	beq.n	80029d6 <Tx_Verify+0x1aa>
 80028de:	2bc8      	cmp	r3, #200	; 0xc8
 80028e0:	f300 809d 	bgt.w	8002a1e <Tx_Verify+0x1f2>
 80028e4:	2b32      	cmp	r3, #50	; 0x32
 80028e6:	dc6b      	bgt.n	80029c0 <Tx_Verify+0x194>
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	f2c0 8098 	blt.w	8002a1e <Tx_Verify+0x1f2>
 80028ee:	3b02      	subs	r3, #2
 80028f0:	2b30      	cmp	r3, #48	; 0x30
 80028f2:	f200 8094 	bhi.w	8002a1e <Tx_Verify+0x1f2>
 80028f6:	a201      	add	r2, pc, #4	; (adr r2, 80028fc <Tx_Verify+0xd0>)
 80028f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fc:	08002a17 	.word	0x08002a17
 8002900:	08002a1f 	.word	0x08002a1f
 8002904:	08002a0f 	.word	0x08002a0f
 8002908:	08002a07 	.word	0x08002a07
 800290c:	08002a1f 	.word	0x08002a1f
 8002910:	08002a1f 	.word	0x08002a1f
 8002914:	08002a1f 	.word	0x08002a1f
 8002918:	08002a1f 	.word	0x08002a1f
 800291c:	080029ff 	.word	0x080029ff
 8002920:	08002a1f 	.word	0x08002a1f
 8002924:	08002a1f 	.word	0x08002a1f
 8002928:	08002a1f 	.word	0x08002a1f
 800292c:	08002a1f 	.word	0x08002a1f
 8002930:	08002a1f 	.word	0x08002a1f
 8002934:	08002a1f 	.word	0x08002a1f
 8002938:	08002a1f 	.word	0x08002a1f
 800293c:	08002a1f 	.word	0x08002a1f
 8002940:	08002a1f 	.word	0x08002a1f
 8002944:	080029f7 	.word	0x080029f7
 8002948:	08002a1f 	.word	0x08002a1f
 800294c:	08002a1f 	.word	0x08002a1f
 8002950:	08002a1f 	.word	0x08002a1f
 8002954:	08002a1f 	.word	0x08002a1f
 8002958:	08002a1f 	.word	0x08002a1f
 800295c:	08002a1f 	.word	0x08002a1f
 8002960:	08002a1f 	.word	0x08002a1f
 8002964:	08002a1f 	.word	0x08002a1f
 8002968:	08002a1f 	.word	0x08002a1f
 800296c:	08002a1f 	.word	0x08002a1f
 8002970:	08002a1f 	.word	0x08002a1f
 8002974:	08002a1f 	.word	0x08002a1f
 8002978:	08002a1f 	.word	0x08002a1f
 800297c:	08002a1f 	.word	0x08002a1f
 8002980:	08002a1f 	.word	0x08002a1f
 8002984:	08002a1f 	.word	0x08002a1f
 8002988:	08002a1f 	.word	0x08002a1f
 800298c:	08002a1f 	.word	0x08002a1f
 8002990:	08002a1f 	.word	0x08002a1f
 8002994:	080029ef 	.word	0x080029ef
 8002998:	08002a1f 	.word	0x08002a1f
 800299c:	08002a1f 	.word	0x08002a1f
 80029a0:	08002a1f 	.word	0x08002a1f
 80029a4:	08002a1f 	.word	0x08002a1f
 80029a8:	08002a1f 	.word	0x08002a1f
 80029ac:	08002a1f 	.word	0x08002a1f
 80029b0:	08002a1f 	.word	0x08002a1f
 80029b4:	08002a1f 	.word	0x08002a1f
 80029b8:	08002a1f 	.word	0x08002a1f
 80029bc:	080029e7 	.word	0x080029e7
 80029c0:	2b64      	cmp	r3, #100	; 0x64
 80029c2:	d00c      	beq.n	80029de <Tx_Verify+0x1b2>
 80029c4:	e02b      	b.n	8002a1e <Tx_Verify+0x1f2>
 80029c6:	4b66      	ldr	r3, [pc, #408]	; (8002b60 <Tx_Verify+0x334>)
 80029c8:	2201      	movs	r2, #1
 80029ca:	709a      	strb	r2, [r3, #2]
 80029cc:	e02a      	b.n	8002a24 <Tx_Verify+0x1f8>
 80029ce:	4b64      	ldr	r3, [pc, #400]	; (8002b60 <Tx_Verify+0x334>)
 80029d0:	2202      	movs	r2, #2
 80029d2:	709a      	strb	r2, [r3, #2]
 80029d4:	e026      	b.n	8002a24 <Tx_Verify+0x1f8>
 80029d6:	4b62      	ldr	r3, [pc, #392]	; (8002b60 <Tx_Verify+0x334>)
 80029d8:	2203      	movs	r2, #3
 80029da:	709a      	strb	r2, [r3, #2]
 80029dc:	e022      	b.n	8002a24 <Tx_Verify+0x1f8>
 80029de:	4b60      	ldr	r3, [pc, #384]	; (8002b60 <Tx_Verify+0x334>)
 80029e0:	2204      	movs	r2, #4
 80029e2:	709a      	strb	r2, [r3, #2]
 80029e4:	e01e      	b.n	8002a24 <Tx_Verify+0x1f8>
 80029e6:	4b5e      	ldr	r3, [pc, #376]	; (8002b60 <Tx_Verify+0x334>)
 80029e8:	2205      	movs	r2, #5
 80029ea:	709a      	strb	r2, [r3, #2]
 80029ec:	e01a      	b.n	8002a24 <Tx_Verify+0x1f8>
 80029ee:	4b5c      	ldr	r3, [pc, #368]	; (8002b60 <Tx_Verify+0x334>)
 80029f0:	2206      	movs	r2, #6
 80029f2:	709a      	strb	r2, [r3, #2]
 80029f4:	e016      	b.n	8002a24 <Tx_Verify+0x1f8>
 80029f6:	4b5a      	ldr	r3, [pc, #360]	; (8002b60 <Tx_Verify+0x334>)
 80029f8:	2207      	movs	r2, #7
 80029fa:	709a      	strb	r2, [r3, #2]
 80029fc:	e012      	b.n	8002a24 <Tx_Verify+0x1f8>
 80029fe:	4b58      	ldr	r3, [pc, #352]	; (8002b60 <Tx_Verify+0x334>)
 8002a00:	2208      	movs	r2, #8
 8002a02:	709a      	strb	r2, [r3, #2]
 8002a04:	e00e      	b.n	8002a24 <Tx_Verify+0x1f8>
 8002a06:	4b56      	ldr	r3, [pc, #344]	; (8002b60 <Tx_Verify+0x334>)
 8002a08:	2209      	movs	r2, #9
 8002a0a:	709a      	strb	r2, [r3, #2]
 8002a0c:	e00a      	b.n	8002a24 <Tx_Verify+0x1f8>
 8002a0e:	4b54      	ldr	r3, [pc, #336]	; (8002b60 <Tx_Verify+0x334>)
 8002a10:	220a      	movs	r2, #10
 8002a12:	709a      	strb	r2, [r3, #2]
 8002a14:	e006      	b.n	8002a24 <Tx_Verify+0x1f8>
 8002a16:	4b52      	ldr	r3, [pc, #328]	; (8002b60 <Tx_Verify+0x334>)
 8002a18:	220b      	movs	r2, #11
 8002a1a:	709a      	strb	r2, [r3, #2]
 8002a1c:	e002      	b.n	8002a24 <Tx_Verify+0x1f8>
 8002a1e:	4b50      	ldr	r3, [pc, #320]	; (8002b60 <Tx_Verify+0x334>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	709a      	strb	r2, [r3, #2]
 8002a24:	bf00      	nop
	__FREQ_TO_BUFFER(txData[3], perMsg[ANALOG_5_8]);
 8002a26:	4b52      	ldr	r3, [pc, #328]	; (8002b70 <Tx_Verify+0x344>)
 8002a28:	885b      	ldrh	r3, [r3, #2]
 8002a2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a2e:	f000 8082 	beq.w	8002b36 <Tx_Verify+0x30a>
 8002a32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a36:	f300 80b9 	bgt.w	8002bac <Tx_Verify+0x380>
 8002a3a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a3e:	d07e      	beq.n	8002b3e <Tx_Verify+0x312>
 8002a40:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a44:	f300 80b2 	bgt.w	8002bac <Tx_Verify+0x380>
 8002a48:	2bc8      	cmp	r3, #200	; 0xc8
 8002a4a:	d07c      	beq.n	8002b46 <Tx_Verify+0x31a>
 8002a4c:	2bc8      	cmp	r3, #200	; 0xc8
 8002a4e:	f300 80ad 	bgt.w	8002bac <Tx_Verify+0x380>
 8002a52:	2b32      	cmp	r3, #50	; 0x32
 8002a54:	dc6c      	bgt.n	8002b30 <Tx_Verify+0x304>
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	f2c0 80a8 	blt.w	8002bac <Tx_Verify+0x380>
 8002a5c:	3b02      	subs	r3, #2
 8002a5e:	2b30      	cmp	r3, #48	; 0x30
 8002a60:	f200 80a4 	bhi.w	8002bac <Tx_Verify+0x380>
 8002a64:	a201      	add	r2, pc, #4	; (adr r2, 8002a6c <Tx_Verify+0x240>)
 8002a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6a:	bf00      	nop
 8002a6c:	08002ba5 	.word	0x08002ba5
 8002a70:	08002bad 	.word	0x08002bad
 8002a74:	08002b9d 	.word	0x08002b9d
 8002a78:	08002b95 	.word	0x08002b95
 8002a7c:	08002bad 	.word	0x08002bad
 8002a80:	08002bad 	.word	0x08002bad
 8002a84:	08002bad 	.word	0x08002bad
 8002a88:	08002bad 	.word	0x08002bad
 8002a8c:	08002b8d 	.word	0x08002b8d
 8002a90:	08002bad 	.word	0x08002bad
 8002a94:	08002bad 	.word	0x08002bad
 8002a98:	08002bad 	.word	0x08002bad
 8002a9c:	08002bad 	.word	0x08002bad
 8002aa0:	08002bad 	.word	0x08002bad
 8002aa4:	08002bad 	.word	0x08002bad
 8002aa8:	08002bad 	.word	0x08002bad
 8002aac:	08002bad 	.word	0x08002bad
 8002ab0:	08002bad 	.word	0x08002bad
 8002ab4:	08002b85 	.word	0x08002b85
 8002ab8:	08002bad 	.word	0x08002bad
 8002abc:	08002bad 	.word	0x08002bad
 8002ac0:	08002bad 	.word	0x08002bad
 8002ac4:	08002bad 	.word	0x08002bad
 8002ac8:	08002bad 	.word	0x08002bad
 8002acc:	08002bad 	.word	0x08002bad
 8002ad0:	08002bad 	.word	0x08002bad
 8002ad4:	08002bad 	.word	0x08002bad
 8002ad8:	08002bad 	.word	0x08002bad
 8002adc:	08002bad 	.word	0x08002bad
 8002ae0:	08002bad 	.word	0x08002bad
 8002ae4:	08002bad 	.word	0x08002bad
 8002ae8:	08002bad 	.word	0x08002bad
 8002aec:	08002bad 	.word	0x08002bad
 8002af0:	08002bad 	.word	0x08002bad
 8002af4:	08002bad 	.word	0x08002bad
 8002af8:	08002bad 	.word	0x08002bad
 8002afc:	08002bad 	.word	0x08002bad
 8002b00:	08002bad 	.word	0x08002bad
 8002b04:	08002b7d 	.word	0x08002b7d
 8002b08:	08002bad 	.word	0x08002bad
 8002b0c:	08002bad 	.word	0x08002bad
 8002b10:	08002bad 	.word	0x08002bad
 8002b14:	08002bad 	.word	0x08002bad
 8002b18:	08002bad 	.word	0x08002bad
 8002b1c:	08002bad 	.word	0x08002bad
 8002b20:	08002bad 	.word	0x08002bad
 8002b24:	08002bad 	.word	0x08002bad
 8002b28:	08002bad 	.word	0x08002bad
 8002b2c:	08002b75 	.word	0x08002b75
 8002b30:	2b64      	cmp	r3, #100	; 0x64
 8002b32:	d00c      	beq.n	8002b4e <Tx_Verify+0x322>
 8002b34:	e03a      	b.n	8002bac <Tx_Verify+0x380>
 8002b36:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <Tx_Verify+0x334>)
 8002b38:	2201      	movs	r2, #1
 8002b3a:	70da      	strb	r2, [r3, #3]
 8002b3c:	e039      	b.n	8002bb2 <Tx_Verify+0x386>
 8002b3e:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <Tx_Verify+0x334>)
 8002b40:	2202      	movs	r2, #2
 8002b42:	70da      	strb	r2, [r3, #3]
 8002b44:	e035      	b.n	8002bb2 <Tx_Verify+0x386>
 8002b46:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <Tx_Verify+0x334>)
 8002b48:	2203      	movs	r2, #3
 8002b4a:	70da      	strb	r2, [r3, #3]
 8002b4c:	e031      	b.n	8002bb2 <Tx_Verify+0x386>
 8002b4e:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <Tx_Verify+0x334>)
 8002b50:	2204      	movs	r2, #4
 8002b52:	70da      	strb	r2, [r3, #3]
 8002b54:	e02d      	b.n	8002bb2 <Tx_Verify+0x386>
 8002b56:	bf00      	nop
 8002b58:	20002564 	.word	0x20002564
 8002b5c:	200026ce 	.word	0x200026ce
 8002b60:	2000253c 	.word	0x2000253c
 8002b64:	20002642 	.word	0x20002642
 8002b68:	40020400 	.word	0x40020400
 8002b6c:	20002643 	.word	0x20002643
 8002b70:	2000266c 	.word	0x2000266c
 8002b74:	4bc5      	ldr	r3, [pc, #788]	; (8002e8c <Tx_Verify+0x660>)
 8002b76:	2205      	movs	r2, #5
 8002b78:	70da      	strb	r2, [r3, #3]
 8002b7a:	e01a      	b.n	8002bb2 <Tx_Verify+0x386>
 8002b7c:	4bc3      	ldr	r3, [pc, #780]	; (8002e8c <Tx_Verify+0x660>)
 8002b7e:	2206      	movs	r2, #6
 8002b80:	70da      	strb	r2, [r3, #3]
 8002b82:	e016      	b.n	8002bb2 <Tx_Verify+0x386>
 8002b84:	4bc1      	ldr	r3, [pc, #772]	; (8002e8c <Tx_Verify+0x660>)
 8002b86:	2207      	movs	r2, #7
 8002b88:	70da      	strb	r2, [r3, #3]
 8002b8a:	e012      	b.n	8002bb2 <Tx_Verify+0x386>
 8002b8c:	4bbf      	ldr	r3, [pc, #764]	; (8002e8c <Tx_Verify+0x660>)
 8002b8e:	2208      	movs	r2, #8
 8002b90:	70da      	strb	r2, [r3, #3]
 8002b92:	e00e      	b.n	8002bb2 <Tx_Verify+0x386>
 8002b94:	4bbd      	ldr	r3, [pc, #756]	; (8002e8c <Tx_Verify+0x660>)
 8002b96:	2209      	movs	r2, #9
 8002b98:	70da      	strb	r2, [r3, #3]
 8002b9a:	e00a      	b.n	8002bb2 <Tx_Verify+0x386>
 8002b9c:	4bbb      	ldr	r3, [pc, #748]	; (8002e8c <Tx_Verify+0x660>)
 8002b9e:	220a      	movs	r2, #10
 8002ba0:	70da      	strb	r2, [r3, #3]
 8002ba2:	e006      	b.n	8002bb2 <Tx_Verify+0x386>
 8002ba4:	4bb9      	ldr	r3, [pc, #740]	; (8002e8c <Tx_Verify+0x660>)
 8002ba6:	220b      	movs	r2, #11
 8002ba8:	70da      	strb	r2, [r3, #3]
 8002baa:	e002      	b.n	8002bb2 <Tx_Verify+0x386>
 8002bac:	4bb7      	ldr	r3, [pc, #732]	; (8002e8c <Tx_Verify+0x660>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	70da      	strb	r2, [r3, #3]
 8002bb2:	bf00      	nop
	__FREQ_TO_BUFFER(txData[4], perMsg[ANALOG_9_12]);
 8002bb4:	4bb6      	ldr	r3, [pc, #728]	; (8002e90 <Tx_Verify+0x664>)
 8002bb6:	889b      	ldrh	r3, [r3, #4]
 8002bb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bbc:	f000 8081 	beq.w	8002cc2 <Tx_Verify+0x496>
 8002bc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bc4:	f300 80a9 	bgt.w	8002d1a <Tx_Verify+0x4ee>
 8002bc8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002bcc:	d07d      	beq.n	8002cca <Tx_Verify+0x49e>
 8002bce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002bd2:	f300 80a2 	bgt.w	8002d1a <Tx_Verify+0x4ee>
 8002bd6:	2bc8      	cmp	r3, #200	; 0xc8
 8002bd8:	d07b      	beq.n	8002cd2 <Tx_Verify+0x4a6>
 8002bda:	2bc8      	cmp	r3, #200	; 0xc8
 8002bdc:	f300 809d 	bgt.w	8002d1a <Tx_Verify+0x4ee>
 8002be0:	2b32      	cmp	r3, #50	; 0x32
 8002be2:	dc6b      	bgt.n	8002cbc <Tx_Verify+0x490>
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	f2c0 8098 	blt.w	8002d1a <Tx_Verify+0x4ee>
 8002bea:	3b02      	subs	r3, #2
 8002bec:	2b30      	cmp	r3, #48	; 0x30
 8002bee:	f200 8094 	bhi.w	8002d1a <Tx_Verify+0x4ee>
 8002bf2:	a201      	add	r2, pc, #4	; (adr r2, 8002bf8 <Tx_Verify+0x3cc>)
 8002bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf8:	08002d13 	.word	0x08002d13
 8002bfc:	08002d1b 	.word	0x08002d1b
 8002c00:	08002d0b 	.word	0x08002d0b
 8002c04:	08002d03 	.word	0x08002d03
 8002c08:	08002d1b 	.word	0x08002d1b
 8002c0c:	08002d1b 	.word	0x08002d1b
 8002c10:	08002d1b 	.word	0x08002d1b
 8002c14:	08002d1b 	.word	0x08002d1b
 8002c18:	08002cfb 	.word	0x08002cfb
 8002c1c:	08002d1b 	.word	0x08002d1b
 8002c20:	08002d1b 	.word	0x08002d1b
 8002c24:	08002d1b 	.word	0x08002d1b
 8002c28:	08002d1b 	.word	0x08002d1b
 8002c2c:	08002d1b 	.word	0x08002d1b
 8002c30:	08002d1b 	.word	0x08002d1b
 8002c34:	08002d1b 	.word	0x08002d1b
 8002c38:	08002d1b 	.word	0x08002d1b
 8002c3c:	08002d1b 	.word	0x08002d1b
 8002c40:	08002cf3 	.word	0x08002cf3
 8002c44:	08002d1b 	.word	0x08002d1b
 8002c48:	08002d1b 	.word	0x08002d1b
 8002c4c:	08002d1b 	.word	0x08002d1b
 8002c50:	08002d1b 	.word	0x08002d1b
 8002c54:	08002d1b 	.word	0x08002d1b
 8002c58:	08002d1b 	.word	0x08002d1b
 8002c5c:	08002d1b 	.word	0x08002d1b
 8002c60:	08002d1b 	.word	0x08002d1b
 8002c64:	08002d1b 	.word	0x08002d1b
 8002c68:	08002d1b 	.word	0x08002d1b
 8002c6c:	08002d1b 	.word	0x08002d1b
 8002c70:	08002d1b 	.word	0x08002d1b
 8002c74:	08002d1b 	.word	0x08002d1b
 8002c78:	08002d1b 	.word	0x08002d1b
 8002c7c:	08002d1b 	.word	0x08002d1b
 8002c80:	08002d1b 	.word	0x08002d1b
 8002c84:	08002d1b 	.word	0x08002d1b
 8002c88:	08002d1b 	.word	0x08002d1b
 8002c8c:	08002d1b 	.word	0x08002d1b
 8002c90:	08002ceb 	.word	0x08002ceb
 8002c94:	08002d1b 	.word	0x08002d1b
 8002c98:	08002d1b 	.word	0x08002d1b
 8002c9c:	08002d1b 	.word	0x08002d1b
 8002ca0:	08002d1b 	.word	0x08002d1b
 8002ca4:	08002d1b 	.word	0x08002d1b
 8002ca8:	08002d1b 	.word	0x08002d1b
 8002cac:	08002d1b 	.word	0x08002d1b
 8002cb0:	08002d1b 	.word	0x08002d1b
 8002cb4:	08002d1b 	.word	0x08002d1b
 8002cb8:	08002ce3 	.word	0x08002ce3
 8002cbc:	2b64      	cmp	r3, #100	; 0x64
 8002cbe:	d00c      	beq.n	8002cda <Tx_Verify+0x4ae>
 8002cc0:	e02b      	b.n	8002d1a <Tx_Verify+0x4ee>
 8002cc2:	4b72      	ldr	r3, [pc, #456]	; (8002e8c <Tx_Verify+0x660>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	711a      	strb	r2, [r3, #4]
 8002cc8:	e02a      	b.n	8002d20 <Tx_Verify+0x4f4>
 8002cca:	4b70      	ldr	r3, [pc, #448]	; (8002e8c <Tx_Verify+0x660>)
 8002ccc:	2202      	movs	r2, #2
 8002cce:	711a      	strb	r2, [r3, #4]
 8002cd0:	e026      	b.n	8002d20 <Tx_Verify+0x4f4>
 8002cd2:	4b6e      	ldr	r3, [pc, #440]	; (8002e8c <Tx_Verify+0x660>)
 8002cd4:	2203      	movs	r2, #3
 8002cd6:	711a      	strb	r2, [r3, #4]
 8002cd8:	e022      	b.n	8002d20 <Tx_Verify+0x4f4>
 8002cda:	4b6c      	ldr	r3, [pc, #432]	; (8002e8c <Tx_Verify+0x660>)
 8002cdc:	2204      	movs	r2, #4
 8002cde:	711a      	strb	r2, [r3, #4]
 8002ce0:	e01e      	b.n	8002d20 <Tx_Verify+0x4f4>
 8002ce2:	4b6a      	ldr	r3, [pc, #424]	; (8002e8c <Tx_Verify+0x660>)
 8002ce4:	2205      	movs	r2, #5
 8002ce6:	711a      	strb	r2, [r3, #4]
 8002ce8:	e01a      	b.n	8002d20 <Tx_Verify+0x4f4>
 8002cea:	4b68      	ldr	r3, [pc, #416]	; (8002e8c <Tx_Verify+0x660>)
 8002cec:	2206      	movs	r2, #6
 8002cee:	711a      	strb	r2, [r3, #4]
 8002cf0:	e016      	b.n	8002d20 <Tx_Verify+0x4f4>
 8002cf2:	4b66      	ldr	r3, [pc, #408]	; (8002e8c <Tx_Verify+0x660>)
 8002cf4:	2207      	movs	r2, #7
 8002cf6:	711a      	strb	r2, [r3, #4]
 8002cf8:	e012      	b.n	8002d20 <Tx_Verify+0x4f4>
 8002cfa:	4b64      	ldr	r3, [pc, #400]	; (8002e8c <Tx_Verify+0x660>)
 8002cfc:	2208      	movs	r2, #8
 8002cfe:	711a      	strb	r2, [r3, #4]
 8002d00:	e00e      	b.n	8002d20 <Tx_Verify+0x4f4>
 8002d02:	4b62      	ldr	r3, [pc, #392]	; (8002e8c <Tx_Verify+0x660>)
 8002d04:	2209      	movs	r2, #9
 8002d06:	711a      	strb	r2, [r3, #4]
 8002d08:	e00a      	b.n	8002d20 <Tx_Verify+0x4f4>
 8002d0a:	4b60      	ldr	r3, [pc, #384]	; (8002e8c <Tx_Verify+0x660>)
 8002d0c:	220a      	movs	r2, #10
 8002d0e:	711a      	strb	r2, [r3, #4]
 8002d10:	e006      	b.n	8002d20 <Tx_Verify+0x4f4>
 8002d12:	4b5e      	ldr	r3, [pc, #376]	; (8002e8c <Tx_Verify+0x660>)
 8002d14:	220b      	movs	r2, #11
 8002d16:	711a      	strb	r2, [r3, #4]
 8002d18:	e002      	b.n	8002d20 <Tx_Verify+0x4f4>
 8002d1a:	4b5c      	ldr	r3, [pc, #368]	; (8002e8c <Tx_Verify+0x660>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	711a      	strb	r2, [r3, #4]
 8002d20:	bf00      	nop
	__FREQ_TO_BUFFER(txData[5], perMsg[RTC_MSG]);
 8002d22:	4b5b      	ldr	r3, [pc, #364]	; (8002e90 <Tx_Verify+0x664>)
 8002d24:	88db      	ldrh	r3, [r3, #6]
 8002d26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d2a:	f000 8082 	beq.w	8002e32 <Tx_Verify+0x606>
 8002d2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d32:	f300 80af 	bgt.w	8002e94 <Tx_Verify+0x668>
 8002d36:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d3a:	d07e      	beq.n	8002e3a <Tx_Verify+0x60e>
 8002d3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d40:	f300 80a8 	bgt.w	8002e94 <Tx_Verify+0x668>
 8002d44:	2bc8      	cmp	r3, #200	; 0xc8
 8002d46:	d07c      	beq.n	8002e42 <Tx_Verify+0x616>
 8002d48:	2bc8      	cmp	r3, #200	; 0xc8
 8002d4a:	f300 80a3 	bgt.w	8002e94 <Tx_Verify+0x668>
 8002d4e:	2b32      	cmp	r3, #50	; 0x32
 8002d50:	dc6c      	bgt.n	8002e2c <Tx_Verify+0x600>
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	f2c0 809e 	blt.w	8002e94 <Tx_Verify+0x668>
 8002d58:	3b02      	subs	r3, #2
 8002d5a:	2b30      	cmp	r3, #48	; 0x30
 8002d5c:	f200 809a 	bhi.w	8002e94 <Tx_Verify+0x668>
 8002d60:	a201      	add	r2, pc, #4	; (adr r2, 8002d68 <Tx_Verify+0x53c>)
 8002d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d66:	bf00      	nop
 8002d68:	08002e83 	.word	0x08002e83
 8002d6c:	08002e95 	.word	0x08002e95
 8002d70:	08002e7b 	.word	0x08002e7b
 8002d74:	08002e73 	.word	0x08002e73
 8002d78:	08002e95 	.word	0x08002e95
 8002d7c:	08002e95 	.word	0x08002e95
 8002d80:	08002e95 	.word	0x08002e95
 8002d84:	08002e95 	.word	0x08002e95
 8002d88:	08002e6b 	.word	0x08002e6b
 8002d8c:	08002e95 	.word	0x08002e95
 8002d90:	08002e95 	.word	0x08002e95
 8002d94:	08002e95 	.word	0x08002e95
 8002d98:	08002e95 	.word	0x08002e95
 8002d9c:	08002e95 	.word	0x08002e95
 8002da0:	08002e95 	.word	0x08002e95
 8002da4:	08002e95 	.word	0x08002e95
 8002da8:	08002e95 	.word	0x08002e95
 8002dac:	08002e95 	.word	0x08002e95
 8002db0:	08002e63 	.word	0x08002e63
 8002db4:	08002e95 	.word	0x08002e95
 8002db8:	08002e95 	.word	0x08002e95
 8002dbc:	08002e95 	.word	0x08002e95
 8002dc0:	08002e95 	.word	0x08002e95
 8002dc4:	08002e95 	.word	0x08002e95
 8002dc8:	08002e95 	.word	0x08002e95
 8002dcc:	08002e95 	.word	0x08002e95
 8002dd0:	08002e95 	.word	0x08002e95
 8002dd4:	08002e95 	.word	0x08002e95
 8002dd8:	08002e95 	.word	0x08002e95
 8002ddc:	08002e95 	.word	0x08002e95
 8002de0:	08002e95 	.word	0x08002e95
 8002de4:	08002e95 	.word	0x08002e95
 8002de8:	08002e95 	.word	0x08002e95
 8002dec:	08002e95 	.word	0x08002e95
 8002df0:	08002e95 	.word	0x08002e95
 8002df4:	08002e95 	.word	0x08002e95
 8002df8:	08002e95 	.word	0x08002e95
 8002dfc:	08002e95 	.word	0x08002e95
 8002e00:	08002e5b 	.word	0x08002e5b
 8002e04:	08002e95 	.word	0x08002e95
 8002e08:	08002e95 	.word	0x08002e95
 8002e0c:	08002e95 	.word	0x08002e95
 8002e10:	08002e95 	.word	0x08002e95
 8002e14:	08002e95 	.word	0x08002e95
 8002e18:	08002e95 	.word	0x08002e95
 8002e1c:	08002e95 	.word	0x08002e95
 8002e20:	08002e95 	.word	0x08002e95
 8002e24:	08002e95 	.word	0x08002e95
 8002e28:	08002e53 	.word	0x08002e53
 8002e2c:	2b64      	cmp	r3, #100	; 0x64
 8002e2e:	d00c      	beq.n	8002e4a <Tx_Verify+0x61e>
 8002e30:	e030      	b.n	8002e94 <Tx_Verify+0x668>
 8002e32:	4b16      	ldr	r3, [pc, #88]	; (8002e8c <Tx_Verify+0x660>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	715a      	strb	r2, [r3, #5]
 8002e38:	e02f      	b.n	8002e9a <Tx_Verify+0x66e>
 8002e3a:	4b14      	ldr	r3, [pc, #80]	; (8002e8c <Tx_Verify+0x660>)
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	715a      	strb	r2, [r3, #5]
 8002e40:	e02b      	b.n	8002e9a <Tx_Verify+0x66e>
 8002e42:	4b12      	ldr	r3, [pc, #72]	; (8002e8c <Tx_Verify+0x660>)
 8002e44:	2203      	movs	r2, #3
 8002e46:	715a      	strb	r2, [r3, #5]
 8002e48:	e027      	b.n	8002e9a <Tx_Verify+0x66e>
 8002e4a:	4b10      	ldr	r3, [pc, #64]	; (8002e8c <Tx_Verify+0x660>)
 8002e4c:	2204      	movs	r2, #4
 8002e4e:	715a      	strb	r2, [r3, #5]
 8002e50:	e023      	b.n	8002e9a <Tx_Verify+0x66e>
 8002e52:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <Tx_Verify+0x660>)
 8002e54:	2205      	movs	r2, #5
 8002e56:	715a      	strb	r2, [r3, #5]
 8002e58:	e01f      	b.n	8002e9a <Tx_Verify+0x66e>
 8002e5a:	4b0c      	ldr	r3, [pc, #48]	; (8002e8c <Tx_Verify+0x660>)
 8002e5c:	2206      	movs	r2, #6
 8002e5e:	715a      	strb	r2, [r3, #5]
 8002e60:	e01b      	b.n	8002e9a <Tx_Verify+0x66e>
 8002e62:	4b0a      	ldr	r3, [pc, #40]	; (8002e8c <Tx_Verify+0x660>)
 8002e64:	2207      	movs	r2, #7
 8002e66:	715a      	strb	r2, [r3, #5]
 8002e68:	e017      	b.n	8002e9a <Tx_Verify+0x66e>
 8002e6a:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <Tx_Verify+0x660>)
 8002e6c:	2208      	movs	r2, #8
 8002e6e:	715a      	strb	r2, [r3, #5]
 8002e70:	e013      	b.n	8002e9a <Tx_Verify+0x66e>
 8002e72:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <Tx_Verify+0x660>)
 8002e74:	2209      	movs	r2, #9
 8002e76:	715a      	strb	r2, [r3, #5]
 8002e78:	e00f      	b.n	8002e9a <Tx_Verify+0x66e>
 8002e7a:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <Tx_Verify+0x660>)
 8002e7c:	220a      	movs	r2, #10
 8002e7e:	715a      	strb	r2, [r3, #5]
 8002e80:	e00b      	b.n	8002e9a <Tx_Verify+0x66e>
 8002e82:	4b02      	ldr	r3, [pc, #8]	; (8002e8c <Tx_Verify+0x660>)
 8002e84:	220b      	movs	r2, #11
 8002e86:	715a      	strb	r2, [r3, #5]
 8002e88:	e007      	b.n	8002e9a <Tx_Verify+0x66e>
 8002e8a:	bf00      	nop
 8002e8c:	2000253c 	.word	0x2000253c
 8002e90:	2000266c 	.word	0x2000266c
 8002e94:	4bb7      	ldr	r3, [pc, #732]	; (8003174 <Tx_Verify+0x948>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	715a      	strb	r2, [r3, #5]
 8002e9a:	bf00      	nop
	__FREQ_TO_BUFFER(txData[6], perMsg[PDM_SAVE]);
 8002e9c:	4bb6      	ldr	r3, [pc, #728]	; (8003178 <Tx_Verify+0x94c>)
 8002e9e:	89db      	ldrh	r3, [r3, #14]
 8002ea0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ea4:	f000 8081 	beq.w	8002faa <Tx_Verify+0x77e>
 8002ea8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eac:	f300 80a9 	bgt.w	8003002 <Tx_Verify+0x7d6>
 8002eb0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002eb4:	d07d      	beq.n	8002fb2 <Tx_Verify+0x786>
 8002eb6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002eba:	f300 80a2 	bgt.w	8003002 <Tx_Verify+0x7d6>
 8002ebe:	2bc8      	cmp	r3, #200	; 0xc8
 8002ec0:	d07b      	beq.n	8002fba <Tx_Verify+0x78e>
 8002ec2:	2bc8      	cmp	r3, #200	; 0xc8
 8002ec4:	f300 809d 	bgt.w	8003002 <Tx_Verify+0x7d6>
 8002ec8:	2b32      	cmp	r3, #50	; 0x32
 8002eca:	dc6b      	bgt.n	8002fa4 <Tx_Verify+0x778>
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	f2c0 8098 	blt.w	8003002 <Tx_Verify+0x7d6>
 8002ed2:	3b02      	subs	r3, #2
 8002ed4:	2b30      	cmp	r3, #48	; 0x30
 8002ed6:	f200 8094 	bhi.w	8003002 <Tx_Verify+0x7d6>
 8002eda:	a201      	add	r2, pc, #4	; (adr r2, 8002ee0 <Tx_Verify+0x6b4>)
 8002edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee0:	08002ffb 	.word	0x08002ffb
 8002ee4:	08003003 	.word	0x08003003
 8002ee8:	08002ff3 	.word	0x08002ff3
 8002eec:	08002feb 	.word	0x08002feb
 8002ef0:	08003003 	.word	0x08003003
 8002ef4:	08003003 	.word	0x08003003
 8002ef8:	08003003 	.word	0x08003003
 8002efc:	08003003 	.word	0x08003003
 8002f00:	08002fe3 	.word	0x08002fe3
 8002f04:	08003003 	.word	0x08003003
 8002f08:	08003003 	.word	0x08003003
 8002f0c:	08003003 	.word	0x08003003
 8002f10:	08003003 	.word	0x08003003
 8002f14:	08003003 	.word	0x08003003
 8002f18:	08003003 	.word	0x08003003
 8002f1c:	08003003 	.word	0x08003003
 8002f20:	08003003 	.word	0x08003003
 8002f24:	08003003 	.word	0x08003003
 8002f28:	08002fdb 	.word	0x08002fdb
 8002f2c:	08003003 	.word	0x08003003
 8002f30:	08003003 	.word	0x08003003
 8002f34:	08003003 	.word	0x08003003
 8002f38:	08003003 	.word	0x08003003
 8002f3c:	08003003 	.word	0x08003003
 8002f40:	08003003 	.word	0x08003003
 8002f44:	08003003 	.word	0x08003003
 8002f48:	08003003 	.word	0x08003003
 8002f4c:	08003003 	.word	0x08003003
 8002f50:	08003003 	.word	0x08003003
 8002f54:	08003003 	.word	0x08003003
 8002f58:	08003003 	.word	0x08003003
 8002f5c:	08003003 	.word	0x08003003
 8002f60:	08003003 	.word	0x08003003
 8002f64:	08003003 	.word	0x08003003
 8002f68:	08003003 	.word	0x08003003
 8002f6c:	08003003 	.word	0x08003003
 8002f70:	08003003 	.word	0x08003003
 8002f74:	08003003 	.word	0x08003003
 8002f78:	08002fd3 	.word	0x08002fd3
 8002f7c:	08003003 	.word	0x08003003
 8002f80:	08003003 	.word	0x08003003
 8002f84:	08003003 	.word	0x08003003
 8002f88:	08003003 	.word	0x08003003
 8002f8c:	08003003 	.word	0x08003003
 8002f90:	08003003 	.word	0x08003003
 8002f94:	08003003 	.word	0x08003003
 8002f98:	08003003 	.word	0x08003003
 8002f9c:	08003003 	.word	0x08003003
 8002fa0:	08002fcb 	.word	0x08002fcb
 8002fa4:	2b64      	cmp	r3, #100	; 0x64
 8002fa6:	d00c      	beq.n	8002fc2 <Tx_Verify+0x796>
 8002fa8:	e02b      	b.n	8003002 <Tx_Verify+0x7d6>
 8002faa:	4b72      	ldr	r3, [pc, #456]	; (8003174 <Tx_Verify+0x948>)
 8002fac:	2201      	movs	r2, #1
 8002fae:	719a      	strb	r2, [r3, #6]
 8002fb0:	e02a      	b.n	8003008 <Tx_Verify+0x7dc>
 8002fb2:	4b70      	ldr	r3, [pc, #448]	; (8003174 <Tx_Verify+0x948>)
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	719a      	strb	r2, [r3, #6]
 8002fb8:	e026      	b.n	8003008 <Tx_Verify+0x7dc>
 8002fba:	4b6e      	ldr	r3, [pc, #440]	; (8003174 <Tx_Verify+0x948>)
 8002fbc:	2203      	movs	r2, #3
 8002fbe:	719a      	strb	r2, [r3, #6]
 8002fc0:	e022      	b.n	8003008 <Tx_Verify+0x7dc>
 8002fc2:	4b6c      	ldr	r3, [pc, #432]	; (8003174 <Tx_Verify+0x948>)
 8002fc4:	2204      	movs	r2, #4
 8002fc6:	719a      	strb	r2, [r3, #6]
 8002fc8:	e01e      	b.n	8003008 <Tx_Verify+0x7dc>
 8002fca:	4b6a      	ldr	r3, [pc, #424]	; (8003174 <Tx_Verify+0x948>)
 8002fcc:	2205      	movs	r2, #5
 8002fce:	719a      	strb	r2, [r3, #6]
 8002fd0:	e01a      	b.n	8003008 <Tx_Verify+0x7dc>
 8002fd2:	4b68      	ldr	r3, [pc, #416]	; (8003174 <Tx_Verify+0x948>)
 8002fd4:	2206      	movs	r2, #6
 8002fd6:	719a      	strb	r2, [r3, #6]
 8002fd8:	e016      	b.n	8003008 <Tx_Verify+0x7dc>
 8002fda:	4b66      	ldr	r3, [pc, #408]	; (8003174 <Tx_Verify+0x948>)
 8002fdc:	2207      	movs	r2, #7
 8002fde:	719a      	strb	r2, [r3, #6]
 8002fe0:	e012      	b.n	8003008 <Tx_Verify+0x7dc>
 8002fe2:	4b64      	ldr	r3, [pc, #400]	; (8003174 <Tx_Verify+0x948>)
 8002fe4:	2208      	movs	r2, #8
 8002fe6:	719a      	strb	r2, [r3, #6]
 8002fe8:	e00e      	b.n	8003008 <Tx_Verify+0x7dc>
 8002fea:	4b62      	ldr	r3, [pc, #392]	; (8003174 <Tx_Verify+0x948>)
 8002fec:	2209      	movs	r2, #9
 8002fee:	719a      	strb	r2, [r3, #6]
 8002ff0:	e00a      	b.n	8003008 <Tx_Verify+0x7dc>
 8002ff2:	4b60      	ldr	r3, [pc, #384]	; (8003174 <Tx_Verify+0x948>)
 8002ff4:	220a      	movs	r2, #10
 8002ff6:	719a      	strb	r2, [r3, #6]
 8002ff8:	e006      	b.n	8003008 <Tx_Verify+0x7dc>
 8002ffa:	4b5e      	ldr	r3, [pc, #376]	; (8003174 <Tx_Verify+0x948>)
 8002ffc:	220b      	movs	r2, #11
 8002ffe:	719a      	strb	r2, [r3, #6]
 8003000:	e002      	b.n	8003008 <Tx_Verify+0x7dc>
 8003002:	4b5c      	ldr	r3, [pc, #368]	; (8003174 <Tx_Verify+0x948>)
 8003004:	2200      	movs	r2, #0
 8003006:	719a      	strb	r2, [r3, #6]
 8003008:	bf00      	nop
	__FREQ_TO_BUFFER(txData[7], perMsg[ECU_SAVE]);
 800300a:	4b5b      	ldr	r3, [pc, #364]	; (8003178 <Tx_Verify+0x94c>)
 800300c:	899b      	ldrh	r3, [r3, #12]
 800300e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003012:	f000 8082 	beq.w	800311a <Tx_Verify+0x8ee>
 8003016:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800301a:	f300 80af 	bgt.w	800317c <Tx_Verify+0x950>
 800301e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003022:	d07e      	beq.n	8003122 <Tx_Verify+0x8f6>
 8003024:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003028:	f300 80a8 	bgt.w	800317c <Tx_Verify+0x950>
 800302c:	2bc8      	cmp	r3, #200	; 0xc8
 800302e:	d07c      	beq.n	800312a <Tx_Verify+0x8fe>
 8003030:	2bc8      	cmp	r3, #200	; 0xc8
 8003032:	f300 80a3 	bgt.w	800317c <Tx_Verify+0x950>
 8003036:	2b32      	cmp	r3, #50	; 0x32
 8003038:	dc6c      	bgt.n	8003114 <Tx_Verify+0x8e8>
 800303a:	2b02      	cmp	r3, #2
 800303c:	f2c0 809e 	blt.w	800317c <Tx_Verify+0x950>
 8003040:	3b02      	subs	r3, #2
 8003042:	2b30      	cmp	r3, #48	; 0x30
 8003044:	f200 809a 	bhi.w	800317c <Tx_Verify+0x950>
 8003048:	a201      	add	r2, pc, #4	; (adr r2, 8003050 <Tx_Verify+0x824>)
 800304a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304e:	bf00      	nop
 8003050:	0800316b 	.word	0x0800316b
 8003054:	0800317d 	.word	0x0800317d
 8003058:	08003163 	.word	0x08003163
 800305c:	0800315b 	.word	0x0800315b
 8003060:	0800317d 	.word	0x0800317d
 8003064:	0800317d 	.word	0x0800317d
 8003068:	0800317d 	.word	0x0800317d
 800306c:	0800317d 	.word	0x0800317d
 8003070:	08003153 	.word	0x08003153
 8003074:	0800317d 	.word	0x0800317d
 8003078:	0800317d 	.word	0x0800317d
 800307c:	0800317d 	.word	0x0800317d
 8003080:	0800317d 	.word	0x0800317d
 8003084:	0800317d 	.word	0x0800317d
 8003088:	0800317d 	.word	0x0800317d
 800308c:	0800317d 	.word	0x0800317d
 8003090:	0800317d 	.word	0x0800317d
 8003094:	0800317d 	.word	0x0800317d
 8003098:	0800314b 	.word	0x0800314b
 800309c:	0800317d 	.word	0x0800317d
 80030a0:	0800317d 	.word	0x0800317d
 80030a4:	0800317d 	.word	0x0800317d
 80030a8:	0800317d 	.word	0x0800317d
 80030ac:	0800317d 	.word	0x0800317d
 80030b0:	0800317d 	.word	0x0800317d
 80030b4:	0800317d 	.word	0x0800317d
 80030b8:	0800317d 	.word	0x0800317d
 80030bc:	0800317d 	.word	0x0800317d
 80030c0:	0800317d 	.word	0x0800317d
 80030c4:	0800317d 	.word	0x0800317d
 80030c8:	0800317d 	.word	0x0800317d
 80030cc:	0800317d 	.word	0x0800317d
 80030d0:	0800317d 	.word	0x0800317d
 80030d4:	0800317d 	.word	0x0800317d
 80030d8:	0800317d 	.word	0x0800317d
 80030dc:	0800317d 	.word	0x0800317d
 80030e0:	0800317d 	.word	0x0800317d
 80030e4:	0800317d 	.word	0x0800317d
 80030e8:	08003143 	.word	0x08003143
 80030ec:	0800317d 	.word	0x0800317d
 80030f0:	0800317d 	.word	0x0800317d
 80030f4:	0800317d 	.word	0x0800317d
 80030f8:	0800317d 	.word	0x0800317d
 80030fc:	0800317d 	.word	0x0800317d
 8003100:	0800317d 	.word	0x0800317d
 8003104:	0800317d 	.word	0x0800317d
 8003108:	0800317d 	.word	0x0800317d
 800310c:	0800317d 	.word	0x0800317d
 8003110:	0800313b 	.word	0x0800313b
 8003114:	2b64      	cmp	r3, #100	; 0x64
 8003116:	d00c      	beq.n	8003132 <Tx_Verify+0x906>
 8003118:	e030      	b.n	800317c <Tx_Verify+0x950>
 800311a:	4b16      	ldr	r3, [pc, #88]	; (8003174 <Tx_Verify+0x948>)
 800311c:	2201      	movs	r2, #1
 800311e:	71da      	strb	r2, [r3, #7]
 8003120:	e02f      	b.n	8003182 <Tx_Verify+0x956>
 8003122:	4b14      	ldr	r3, [pc, #80]	; (8003174 <Tx_Verify+0x948>)
 8003124:	2202      	movs	r2, #2
 8003126:	71da      	strb	r2, [r3, #7]
 8003128:	e02b      	b.n	8003182 <Tx_Verify+0x956>
 800312a:	4b12      	ldr	r3, [pc, #72]	; (8003174 <Tx_Verify+0x948>)
 800312c:	2203      	movs	r2, #3
 800312e:	71da      	strb	r2, [r3, #7]
 8003130:	e027      	b.n	8003182 <Tx_Verify+0x956>
 8003132:	4b10      	ldr	r3, [pc, #64]	; (8003174 <Tx_Verify+0x948>)
 8003134:	2204      	movs	r2, #4
 8003136:	71da      	strb	r2, [r3, #7]
 8003138:	e023      	b.n	8003182 <Tx_Verify+0x956>
 800313a:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <Tx_Verify+0x948>)
 800313c:	2205      	movs	r2, #5
 800313e:	71da      	strb	r2, [r3, #7]
 8003140:	e01f      	b.n	8003182 <Tx_Verify+0x956>
 8003142:	4b0c      	ldr	r3, [pc, #48]	; (8003174 <Tx_Verify+0x948>)
 8003144:	2206      	movs	r2, #6
 8003146:	71da      	strb	r2, [r3, #7]
 8003148:	e01b      	b.n	8003182 <Tx_Verify+0x956>
 800314a:	4b0a      	ldr	r3, [pc, #40]	; (8003174 <Tx_Verify+0x948>)
 800314c:	2207      	movs	r2, #7
 800314e:	71da      	strb	r2, [r3, #7]
 8003150:	e017      	b.n	8003182 <Tx_Verify+0x956>
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <Tx_Verify+0x948>)
 8003154:	2208      	movs	r2, #8
 8003156:	71da      	strb	r2, [r3, #7]
 8003158:	e013      	b.n	8003182 <Tx_Verify+0x956>
 800315a:	4b06      	ldr	r3, [pc, #24]	; (8003174 <Tx_Verify+0x948>)
 800315c:	2209      	movs	r2, #9
 800315e:	71da      	strb	r2, [r3, #7]
 8003160:	e00f      	b.n	8003182 <Tx_Verify+0x956>
 8003162:	4b04      	ldr	r3, [pc, #16]	; (8003174 <Tx_Verify+0x948>)
 8003164:	220a      	movs	r2, #10
 8003166:	71da      	strb	r2, [r3, #7]
 8003168:	e00b      	b.n	8003182 <Tx_Verify+0x956>
 800316a:	4b02      	ldr	r3, [pc, #8]	; (8003174 <Tx_Verify+0x948>)
 800316c:	220b      	movs	r2, #11
 800316e:	71da      	strb	r2, [r3, #7]
 8003170:	e007      	b.n	8003182 <Tx_Verify+0x956>
 8003172:	bf00      	nop
 8003174:	2000253c 	.word	0x2000253c
 8003178:	2000266c 	.word	0x2000266c
 800317c:	4b26      	ldr	r3, [pc, #152]	; (8003218 <Tx_Verify+0x9ec>)
 800317e:	2200      	movs	r2, #0
 8003180:	71da      	strb	r2, [r3, #7]
 8003182:	bf00      	nop

	if(flagDatalogger == DL_SAVE)
 8003184:	4b25      	ldr	r3, [pc, #148]	; (800321c <Tx_Verify+0x9f0>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d108      	bne.n	800319e <Tx_Verify+0x972>
#ifdef DATALOGGER_NO_BUFFER
		Principal_Datalogger_Save_Data(hcan, txHeader.StdId, txHeader.DLC, txData);
 800318c:	4b24      	ldr	r3, [pc, #144]	; (8003220 <Tx_Verify+0x9f4>)
 800318e:	6819      	ldr	r1, [r3, #0]
 8003190:	4b23      	ldr	r3, [pc, #140]	; (8003220 <Tx_Verify+0x9f4>)
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	b2da      	uxtb	r2, r3
 8003196:	4b20      	ldr	r3, [pc, #128]	; (8003218 <Tx_Verify+0x9ec>)
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f002 fe8b 	bl	8005eb4 <Principal_Datalogger_Save_Data>
#else
		Principal_Datalogger_Save_Buffer(hcan, txHeader.StdId, txHeader.DLC, txData);
#endif

	__PRINCIPAL_TX_DATA(hcan, VERIFY_MSG);
 800319e:	4b21      	ldr	r3, [pc, #132]	; (8003224 <Tx_Verify+0x9f8>)
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	4a21      	ldr	r2, [pc, #132]	; (8003228 <Tx_Verify+0x9fc>)
 80031a4:	8912      	ldrh	r2, [r2, #8]
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d332      	bcc.n	8003210 <Tx_Verify+0x9e4>
 80031aa:	4b1f      	ldr	r3, [pc, #124]	; (8003228 <Tx_Verify+0x9fc>)
 80031ac:	891b      	ldrh	r3, [r3, #8]
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d02e      	beq.n	8003210 <Tx_Verify+0x9e4>
 80031b2:	4b1c      	ldr	r3, [pc, #112]	; (8003224 <Tx_Verify+0x9f8>)
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	4a1c      	ldr	r2, [pc, #112]	; (8003228 <Tx_Verify+0x9fc>)
 80031b8:	8912      	ldrh	r2, [r2, #8]
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	4a19      	ldr	r2, [pc, #100]	; (8003224 <Tx_Verify+0x9f8>)
 80031be:	6113      	str	r3, [r2, #16]
 80031c0:	4b1a      	ldr	r3, [pc, #104]	; (800322c <Tx_Verify+0xa00>)
 80031c2:	4a15      	ldr	r2, [pc, #84]	; (8003218 <Tx_Verify+0x9ec>)
 80031c4:	4916      	ldr	r1, [pc, #88]	; (8003220 <Tx_Verify+0x9f4>)
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f004 fb3a 	bl	8007840 <HAL_CAN_AddTxMessage>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d107      	bne.n	80031e2 <Tx_Verify+0x9b6>
 80031d2:	4b17      	ldr	r3, [pc, #92]	; (8003230 <Tx_Verify+0xa04>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	4b14      	ldr	r3, [pc, #80]	; (8003230 <Tx_Verify+0xa04>)
 80031de:	701a      	strb	r2, [r3, #0]
 80031e0:	e006      	b.n	80031f0 <Tx_Verify+0x9c4>
 80031e2:	4b13      	ldr	r3, [pc, #76]	; (8003230 <Tx_Verify+0xa04>)
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	4b10      	ldr	r3, [pc, #64]	; (8003230 <Tx_Verify+0xa04>)
 80031ee:	701a      	strb	r2, [r3, #0]
 80031f0:	2300      	movs	r3, #0
 80031f2:	73fb      	strb	r3, [r7, #15]
 80031f4:	e002      	b.n	80031fc <Tx_Verify+0x9d0>
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	3301      	adds	r3, #1
 80031fa:	73fb      	strb	r3, [r7, #15]
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f004 fbfa 	bl	80079f6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8003202:	4603      	mov	r3, r0
 8003204:	2b03      	cmp	r3, #3
 8003206:	d003      	beq.n	8003210 <Tx_Verify+0x9e4>
 8003208:	7bfb      	ldrb	r3, [r7, #15]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d9f3      	bls.n	80031f6 <Tx_Verify+0x9ca>

	return;
 800320e:	bf00      	nop
 8003210:	bf00      	nop
}
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	2000253c 	.word	0x2000253c
 800321c:	20002642 	.word	0x20002642
 8003220:	20002564 	.word	0x20002564
 8003224:	2000268c 	.word	0x2000268c
 8003228:	20002660 	.word	0x20002660
 800322c:	20002544 	.word	0x20002544
 8003230:	200026cc 	.word	0x200026cc

08003234 <Tx_Beacon>:

static void Tx_Beacon(CAN_HandleTypeDef* hcan)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
	uint16_t buffer[3];

	txHeader.IDE = CAN_ID_STD;
 800323c:	4b47      	ldr	r3, [pc, #284]	; (800335c <Tx_Beacon+0x128>)
 800323e:	2200      	movs	r2, #0
 8003240:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 8003242:	4b46      	ldr	r3, [pc, #280]	; (800335c <Tx_Beacon+0x128>)
 8003244:	2200      	movs	r2, #0
 8003246:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8003248:	4b44      	ldr	r3, [pc, #272]	; (800335c <Tx_Beacon+0x128>)
 800324a:	2200      	movs	r2, #0
 800324c:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = BEACON_ID;
 800324e:	4b43      	ldr	r3, [pc, #268]	; (800335c <Tx_Beacon+0x128>)
 8003250:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003254:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 5;
 8003256:	4b41      	ldr	r3, [pc, #260]	; (800335c <Tx_Beacon+0x128>)
 8003258:	2205      	movs	r2, #5
 800325a:	611a      	str	r2, [r3, #16]

	buffer[0] = accLap / 60000;
 800325c:	4b40      	ldr	r3, [pc, #256]	; (8003360 <Tx_Beacon+0x12c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a40      	ldr	r2, [pc, #256]	; (8003364 <Tx_Beacon+0x130>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	0b9b      	lsrs	r3, r3, #14
 8003268:	b29b      	uxth	r3, r3
 800326a:	813b      	strh	r3, [r7, #8]
	buffer[1] = accLap / 1000;
 800326c:	4b3c      	ldr	r3, [pc, #240]	; (8003360 <Tx_Beacon+0x12c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a3d      	ldr	r2, [pc, #244]	; (8003368 <Tx_Beacon+0x134>)
 8003272:	fba2 2303 	umull	r2, r3, r2, r3
 8003276:	099b      	lsrs	r3, r3, #6
 8003278:	b29b      	uxth	r3, r3
 800327a:	817b      	strh	r3, [r7, #10]
	buffer[2] = accLap % 1000;
 800327c:	4b38      	ldr	r3, [pc, #224]	; (8003360 <Tx_Beacon+0x12c>)
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	4b39      	ldr	r3, [pc, #228]	; (8003368 <Tx_Beacon+0x134>)
 8003282:	fba3 1302 	umull	r1, r3, r3, r2
 8003286:	099b      	lsrs	r3, r3, #6
 8003288:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	b29b      	uxth	r3, r3
 8003294:	81bb      	strh	r3, [r7, #12]

	accLap = 0;
 8003296:	4b32      	ldr	r3, [pc, #200]	; (8003360 <Tx_Beacon+0x12c>)
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]

	txData[0] = lapNumber;
 800329c:	4b33      	ldr	r3, [pc, #204]	; (800336c <Tx_Beacon+0x138>)
 800329e:	781a      	ldrb	r2, [r3, #0]
 80032a0:	4b33      	ldr	r3, [pc, #204]	; (8003370 <Tx_Beacon+0x13c>)
 80032a2:	701a      	strb	r2, [r3, #0]
	txData[1] = buffer[0] & 0xff;
 80032a4:	893b      	ldrh	r3, [r7, #8]
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	4b31      	ldr	r3, [pc, #196]	; (8003370 <Tx_Beacon+0x13c>)
 80032aa:	705a      	strb	r2, [r3, #1]
	txData[2] = buffer[1] & 0xff;
 80032ac:	897b      	ldrh	r3, [r7, #10]
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	4b2f      	ldr	r3, [pc, #188]	; (8003370 <Tx_Beacon+0x13c>)
 80032b2:	709a      	strb	r2, [r3, #2]
	txData[3] = buffer[2] >> 8;
 80032b4:	89bb      	ldrh	r3, [r7, #12]
 80032b6:	0a1b      	lsrs	r3, r3, #8
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	4b2c      	ldr	r3, [pc, #176]	; (8003370 <Tx_Beacon+0x13c>)
 80032be:	70da      	strb	r2, [r3, #3]
	txData[4] = buffer[2] & 0xff;
 80032c0:	89bb      	ldrh	r3, [r7, #12]
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	4b2a      	ldr	r3, [pc, #168]	; (8003370 <Tx_Beacon+0x13c>)
 80032c6:	711a      	strb	r2, [r3, #4]

	if(flagDatalogger == DL_SAVE)
 80032c8:	4b2a      	ldr	r3, [pc, #168]	; (8003374 <Tx_Beacon+0x140>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d108      	bne.n	80032e2 <Tx_Beacon+0xae>
#ifdef DATALOGGER_NO_BUFFER
		Principal_Datalogger_Save_Data(hcan, txHeader.StdId, txHeader.DLC, txData);
 80032d0:	4b22      	ldr	r3, [pc, #136]	; (800335c <Tx_Beacon+0x128>)
 80032d2:	6819      	ldr	r1, [r3, #0]
 80032d4:	4b21      	ldr	r3, [pc, #132]	; (800335c <Tx_Beacon+0x128>)
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	4b25      	ldr	r3, [pc, #148]	; (8003370 <Tx_Beacon+0x13c>)
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f002 fde9 	bl	8005eb4 <Principal_Datalogger_Save_Data>
#else
		Principal_Datalogger_Save_Buffer(hcan, txHeader.StdId, txHeader.DLC, txData);
#endif

	__PRINCIPAL_TX_DATA(hcan, BEACON_MSG);
 80032e2:	4b25      	ldr	r3, [pc, #148]	; (8003378 <Tx_Beacon+0x144>)
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	4a25      	ldr	r2, [pc, #148]	; (800337c <Tx_Beacon+0x148>)
 80032e8:	8952      	ldrh	r2, [r2, #10]
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d332      	bcc.n	8003354 <Tx_Beacon+0x120>
 80032ee:	4b23      	ldr	r3, [pc, #140]	; (800337c <Tx_Beacon+0x148>)
 80032f0:	895b      	ldrh	r3, [r3, #10]
 80032f2:	2b05      	cmp	r3, #5
 80032f4:	d02e      	beq.n	8003354 <Tx_Beacon+0x120>
 80032f6:	4b20      	ldr	r3, [pc, #128]	; (8003378 <Tx_Beacon+0x144>)
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	4a20      	ldr	r2, [pc, #128]	; (800337c <Tx_Beacon+0x148>)
 80032fc:	8952      	ldrh	r2, [r2, #10]
 80032fe:	1a9b      	subs	r3, r3, r2
 8003300:	4a1d      	ldr	r2, [pc, #116]	; (8003378 <Tx_Beacon+0x144>)
 8003302:	6153      	str	r3, [r2, #20]
 8003304:	4b1e      	ldr	r3, [pc, #120]	; (8003380 <Tx_Beacon+0x14c>)
 8003306:	4a1a      	ldr	r2, [pc, #104]	; (8003370 <Tx_Beacon+0x13c>)
 8003308:	4914      	ldr	r1, [pc, #80]	; (800335c <Tx_Beacon+0x128>)
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f004 fa98 	bl	8007840 <HAL_CAN_AddTxMessage>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d107      	bne.n	8003326 <Tx_Beacon+0xf2>
 8003316:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <Tx_Beacon+0x150>)
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	f043 0301 	orr.w	r3, r3, #1
 800331e:	b2da      	uxtb	r2, r3
 8003320:	4b18      	ldr	r3, [pc, #96]	; (8003384 <Tx_Beacon+0x150>)
 8003322:	701a      	strb	r2, [r3, #0]
 8003324:	e006      	b.n	8003334 <Tx_Beacon+0x100>
 8003326:	4b17      	ldr	r3, [pc, #92]	; (8003384 <Tx_Beacon+0x150>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	b2da      	uxtb	r2, r3
 8003330:	4b14      	ldr	r3, [pc, #80]	; (8003384 <Tx_Beacon+0x150>)
 8003332:	701a      	strb	r2, [r3, #0]
 8003334:	2300      	movs	r3, #0
 8003336:	73fb      	strb	r3, [r7, #15]
 8003338:	e002      	b.n	8003340 <Tx_Beacon+0x10c>
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	3301      	adds	r3, #1
 800333e:	73fb      	strb	r3, [r7, #15]
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f004 fb58 	bl	80079f6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8003346:	4603      	mov	r3, r0
 8003348:	2b03      	cmp	r3, #3
 800334a:	d003      	beq.n	8003354 <Tx_Beacon+0x120>
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d9f3      	bls.n	800333a <Tx_Beacon+0x106>

	return;
 8003352:	bf00      	nop
 8003354:	bf00      	nop
}
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	20002564 	.word	0x20002564
 8003360:	200026c8 	.word	0x200026c8
 8003364:	45e7b273 	.word	0x45e7b273
 8003368:	10624dd3 	.word	0x10624dd3
 800336c:	2000257c 	.word	0x2000257c
 8003370:	2000253c 	.word	0x2000253c
 8003374:	20002642 	.word	0x20002642
 8003378:	2000268c 	.word	0x2000268c
 800337c:	20002660 	.word	0x20002660
 8003380:	20002544 	.word	0x20002544
 8003384:	200026cc 	.word	0x200026cc

08003388 <Save_ECU>:

static void Save_ECU(CAN_HandleTypeDef* hcan)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
	uint8_t id = 0;
 8003390:	2300      	movs	r3, #0
 8003392:	75fb      	strb	r3, [r7, #23]
	uint8_t length = 0;
 8003394:	2300      	movs	r3, #0
 8003396:	75bb      	strb	r3, [r7, #22]
	uint8_t buffer[8];

	if(flagDatalogger != DL_SAVE)
 8003398:	4bae      	ldr	r3, [pc, #696]	; (8003654 <Save_ECU+0x2cc>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b01      	cmp	r3, #1
 800339e:	f040 8155 	bne.w	800364c <Save_ECU+0x2c4>
		return;

	id = ECU_FIRST_ID;
 80033a2:	2301      	movs	r3, #1
 80033a4:	75fb      	strb	r3, [r7, #23]
	length = 8;
 80033a6:	2308      	movs	r3, #8
 80033a8:	75bb      	strb	r3, [r7, #22]

	buffer[0] = ecuData.rpm >> 8;
 80033aa:	4bab      	ldr	r3, [pc, #684]	; (8003658 <Save_ECU+0x2d0>)
 80033ac:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80033b0:	121b      	asrs	r3, r3, #8
 80033b2:	b21b      	sxth	r3, r3
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	733b      	strb	r3, [r7, #12]
	buffer[1] = ecuData.rpm & 0xff;
 80033b8:	4ba7      	ldr	r3, [pc, #668]	; (8003658 <Save_ECU+0x2d0>)
 80033ba:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	737b      	strb	r3, [r7, #13]
	buffer[2] = ecuData.tps >> 8;
 80033c2:	4ba5      	ldr	r3, [pc, #660]	; (8003658 <Save_ECU+0x2d0>)
 80033c4:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 80033c8:	121b      	asrs	r3, r3, #8
 80033ca:	b21b      	sxth	r3, r3
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	73bb      	strb	r3, [r7, #14]
	buffer[3] = ecuData.tps & 0xff;
 80033d0:	4ba1      	ldr	r3, [pc, #644]	; (8003658 <Save_ECU+0x2d0>)
 80033d2:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	73fb      	strb	r3, [r7, #15]
	buffer[4] = ecuData.iat >> 8;
 80033da:	4b9f      	ldr	r3, [pc, #636]	; (8003658 <Save_ECU+0x2d0>)
 80033dc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80033e0:	121b      	asrs	r3, r3, #8
 80033e2:	b21b      	sxth	r3, r3
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	743b      	strb	r3, [r7, #16]
	buffer[5] = ecuData.iat & 0xff;
 80033e8:	4b9b      	ldr	r3, [pc, #620]	; (8003658 <Save_ECU+0x2d0>)
 80033ea:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	747b      	strb	r3, [r7, #17]
	buffer[6] = ecuData.ect >> 8;
 80033f2:	4b99      	ldr	r3, [pc, #612]	; (8003658 <Save_ECU+0x2d0>)
 80033f4:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80033f8:	121b      	asrs	r3, r3, #8
 80033fa:	b21b      	sxth	r3, r3
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	74bb      	strb	r3, [r7, #18]
	buffer[7] = ecuData.ect & 0xff;
 8003400:	4b95      	ldr	r3, [pc, #596]	; (8003658 <Save_ECU+0x2d0>)
 8003402:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8003406:	b2db      	uxtb	r3, r3
 8003408:	74fb      	strb	r3, [r7, #19]

#ifdef DATALOGGER_NO_BUFFER
		Principal_Datalogger_Save_Data(hcan, id, length, buffer);
 800340a:	7df9      	ldrb	r1, [r7, #23]
 800340c:	f107 030c 	add.w	r3, r7, #12
 8003410:	7dba      	ldrb	r2, [r7, #22]
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f002 fd4e 	bl	8005eb4 <Principal_Datalogger_Save_Data>
#else
		Principal_Datalogger_Save_Buffer(hcan, id, length, buffer);
#endif

	id = ECU_FIRST_ID + 1;
 8003418:	2302      	movs	r3, #2
 800341a:	75fb      	strb	r3, [r7, #23]
	length = 8;
 800341c:	2308      	movs	r3, #8
 800341e:	75bb      	strb	r3, [r7, #22]

	buffer[0] = ecuData.map >> 8;
 8003420:	4b8d      	ldr	r3, [pc, #564]	; (8003658 <Save_ECU+0x2d0>)
 8003422:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8003426:	121b      	asrs	r3, r3, #8
 8003428:	b21b      	sxth	r3, r3
 800342a:	b2db      	uxtb	r3, r3
 800342c:	733b      	strb	r3, [r7, #12]
	buffer[1] = ecuData.map & 0xff;
 800342e:	4b8a      	ldr	r3, [pc, #552]	; (8003658 <Save_ECU+0x2d0>)
 8003430:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8003434:	b2db      	uxtb	r3, r3
 8003436:	737b      	strb	r3, [r7, #13]
	buffer[2] = ecuData.fuel_pressure >> 8;
 8003438:	4b87      	ldr	r3, [pc, #540]	; (8003658 <Save_ECU+0x2d0>)
 800343a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800343e:	121b      	asrs	r3, r3, #8
 8003440:	b21b      	sxth	r3, r3
 8003442:	b2db      	uxtb	r3, r3
 8003444:	73bb      	strb	r3, [r7, #14]
	buffer[3] = ecuData.fuel_pressure & 0xff;
 8003446:	4b84      	ldr	r3, [pc, #528]	; (8003658 <Save_ECU+0x2d0>)
 8003448:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800344c:	b2db      	uxtb	r3, r3
 800344e:	73fb      	strb	r3, [r7, #15]
	buffer[4] = ecuData.oil_pressure >> 8;
 8003450:	4b81      	ldr	r3, [pc, #516]	; (8003658 <Save_ECU+0x2d0>)
 8003452:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8003456:	121b      	asrs	r3, r3, #8
 8003458:	b21b      	sxth	r3, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	743b      	strb	r3, [r7, #16]
	buffer[5] = ecuData.oil_pressure & 0xff;
 800345e:	4b7e      	ldr	r3, [pc, #504]	; (8003658 <Save_ECU+0x2d0>)
 8003460:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8003464:	b2db      	uxtb	r3, r3
 8003466:	747b      	strb	r3, [r7, #17]
	buffer[6] = ecuData.coolant_pressure >> 8;
 8003468:	4b7b      	ldr	r3, [pc, #492]	; (8003658 <Save_ECU+0x2d0>)
 800346a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800346e:	121b      	asrs	r3, r3, #8
 8003470:	b21b      	sxth	r3, r3
 8003472:	b2db      	uxtb	r3, r3
 8003474:	74bb      	strb	r3, [r7, #18]
	buffer[7] = ecuData.coolant_pressure & 0xff;
 8003476:	4b78      	ldr	r3, [pc, #480]	; (8003658 <Save_ECU+0x2d0>)
 8003478:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800347c:	b2db      	uxtb	r3, r3
 800347e:	74fb      	strb	r3, [r7, #19]

#ifdef DATALOGGER_NO_BUFFER
		Principal_Datalogger_Save_Data(hcan, id, length, buffer);
 8003480:	7df9      	ldrb	r1, [r7, #23]
 8003482:	f107 030c 	add.w	r3, r7, #12
 8003486:	7dba      	ldrb	r2, [r7, #22]
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f002 fd13 	bl	8005eb4 <Principal_Datalogger_Save_Data>
#else
		Principal_Datalogger_Save_Buffer(hcan, id, length, buffer);
#endif

	id = ECU_FIRST_ID + 2;
 800348e:	2303      	movs	r3, #3
 8003490:	75fb      	strb	r3, [r7, #23]
	length = 6;
 8003492:	2306      	movs	r3, #6
 8003494:	75bb      	strb	r3, [r7, #22]

	buffer[0] = ecuData.lambda >> 8;
 8003496:	4b70      	ldr	r3, [pc, #448]	; (8003658 <Save_ECU+0x2d0>)
 8003498:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 800349c:	121b      	asrs	r3, r3, #8
 800349e:	b21b      	sxth	r3, r3
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	733b      	strb	r3, [r7, #12]
	buffer[1] = ecuData.lambda & 0xff;
 80034a4:	4b6c      	ldr	r3, [pc, #432]	; (8003658 <Save_ECU+0x2d0>)
 80034a6:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	737b      	strb	r3, [r7, #13]
	buffer[2] = ecuData.oil_temperature >> 8;
 80034ae:	4b6a      	ldr	r3, [pc, #424]	; (8003658 <Save_ECU+0x2d0>)
 80034b0:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 80034b4:	121b      	asrs	r3, r3, #8
 80034b6:	b21b      	sxth	r3, r3
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	73bb      	strb	r3, [r7, #14]
	buffer[3] = ecuData.oil_temperature & 0xff;
 80034bc:	4b66      	ldr	r3, [pc, #408]	; (8003658 <Save_ECU+0x2d0>)
 80034be:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	73fb      	strb	r3, [r7, #15]
	buffer[4] = ecuData.lambda_correction >> 8;
 80034c6:	4b64      	ldr	r3, [pc, #400]	; (8003658 <Save_ECU+0x2d0>)
 80034c8:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80034cc:	121b      	asrs	r3, r3, #8
 80034ce:	b21b      	sxth	r3, r3
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	743b      	strb	r3, [r7, #16]
	buffer[5] = ecuData.lambda_correction & 0xff;
 80034d4:	4b60      	ldr	r3, [pc, #384]	; (8003658 <Save_ECU+0x2d0>)
 80034d6:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	747b      	strb	r3, [r7, #17]

#ifdef DATALOGGER_NO_BUFFER
		Principal_Datalogger_Save_Data(hcan, id, length, buffer);
 80034de:	7df9      	ldrb	r1, [r7, #23]
 80034e0:	f107 030c 	add.w	r3, r7, #12
 80034e4:	7dba      	ldrb	r2, [r7, #22]
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f002 fce4 	bl	8005eb4 <Principal_Datalogger_Save_Data>
#else
		Principal_Datalogger_Save_Buffer(hcan, id, length, buffer);
#endif

	id = ECU_FIRST_ID + 3;
 80034ec:	2304      	movs	r3, #4
 80034ee:	75fb      	strb	r3, [r7, #23]
	length = 8;
 80034f0:	2308      	movs	r3, #8
 80034f2:	75bb      	strb	r3, [r7, #22]

	buffer[0] = ecuData.battery_voltage >> 8;
 80034f4:	4b58      	ldr	r3, [pc, #352]	; (8003658 <Save_ECU+0x2d0>)
 80034f6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80034fa:	121b      	asrs	r3, r3, #8
 80034fc:	b21b      	sxth	r3, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	733b      	strb	r3, [r7, #12]
	buffer[1] = ecuData.battery_voltage & 0xff;
 8003502:	4b55      	ldr	r3, [pc, #340]	; (8003658 <Save_ECU+0x2d0>)
 8003504:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8003508:	b2db      	uxtb	r3, r3
 800350a:	737b      	strb	r3, [r7, #13]
	buffer[2] = ecuData.fuel_flow_total >> 8;
 800350c:	4b52      	ldr	r3, [pc, #328]	; (8003658 <Save_ECU+0x2d0>)
 800350e:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8003512:	121b      	asrs	r3, r3, #8
 8003514:	b21b      	sxth	r3, r3
 8003516:	b2db      	uxtb	r3, r3
 8003518:	73bb      	strb	r3, [r7, #14]
	buffer[3] = ecuData.fuel_flow_total & 0xff;
 800351a:	4b4f      	ldr	r3, [pc, #316]	; (8003658 <Save_ECU+0x2d0>)
 800351c:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8003520:	b2db      	uxtb	r3, r3
 8003522:	73fb      	strb	r3, [r7, #15]
	buffer[4] = ecuData.gear & 0xff;
 8003524:	4b4c      	ldr	r3, [pc, #304]	; (8003658 <Save_ECU+0x2d0>)
 8003526:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 800352a:	b2db      	uxtb	r3, r3
 800352c:	743b      	strb	r3, [r7, #16]
	buffer[5] = ecuData.electro_fan & 0xff;
 800352e:	4b4a      	ldr	r3, [pc, #296]	; (8003658 <Save_ECU+0x2d0>)
 8003530:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	747b      	strb	r3, [r7, #17]
	buffer[6] = ecuData.injection_bank_a_time >> 8;
 8003538:	4b47      	ldr	r3, [pc, #284]	; (8003658 <Save_ECU+0x2d0>)
 800353a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800353e:	121b      	asrs	r3, r3, #8
 8003540:	b21b      	sxth	r3, r3
 8003542:	b2db      	uxtb	r3, r3
 8003544:	74bb      	strb	r3, [r7, #18]
	buffer[7] = ecuData.injection_bank_a_time & 0xff;
 8003546:	4b44      	ldr	r3, [pc, #272]	; (8003658 <Save_ECU+0x2d0>)
 8003548:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800354c:	b2db      	uxtb	r3, r3
 800354e:	74fb      	strb	r3, [r7, #19]

#ifdef DATALOGGER_NO_BUFFER
		Principal_Datalogger_Save_Data(hcan, id, length, buffer);
 8003550:	7df9      	ldrb	r1, [r7, #23]
 8003552:	f107 030c 	add.w	r3, r7, #12
 8003556:	7dba      	ldrb	r2, [r7, #22]
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f002 fcab 	bl	8005eb4 <Principal_Datalogger_Save_Data>
#else
		Principal_Datalogger_Save_Buffer(hcan, id, length, buffer);
#endif

	id = ECU_FIRST_ID + 4;
 800355e:	2305      	movs	r3, #5
 8003560:	75fb      	strb	r3, [r7, #23]
	length = 8;
 8003562:	2308      	movs	r3, #8
 8003564:	75bb      	strb	r3, [r7, #22]

	buffer[0] = ecuData.wheel_speed_fl >> 8;
 8003566:	4b3c      	ldr	r3, [pc, #240]	; (8003658 <Save_ECU+0x2d0>)
 8003568:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 800356c:	121b      	asrs	r3, r3, #8
 800356e:	b21b      	sxth	r3, r3
 8003570:	b2db      	uxtb	r3, r3
 8003572:	733b      	strb	r3, [r7, #12]
	buffer[1] = ecuData.wheel_speed_fl & 0xff;
 8003574:	4b38      	ldr	r3, [pc, #224]	; (8003658 <Save_ECU+0x2d0>)
 8003576:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 800357a:	b2db      	uxtb	r3, r3
 800357c:	737b      	strb	r3, [r7, #13]
	buffer[2] = ecuData.wheel_speed_fr >> 8;
 800357e:	4b36      	ldr	r3, [pc, #216]	; (8003658 <Save_ECU+0x2d0>)
 8003580:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8003584:	121b      	asrs	r3, r3, #8
 8003586:	b21b      	sxth	r3, r3
 8003588:	b2db      	uxtb	r3, r3
 800358a:	73bb      	strb	r3, [r7, #14]
	buffer[3] = ecuData.wheel_speed_fr & 0xff;
 800358c:	4b32      	ldr	r3, [pc, #200]	; (8003658 <Save_ECU+0x2d0>)
 800358e:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8003592:	b2db      	uxtb	r3, r3
 8003594:	73fb      	strb	r3, [r7, #15]
	buffer[4] = ecuData.wheel_speed_rl >> 8;
 8003596:	4b30      	ldr	r3, [pc, #192]	; (8003658 <Save_ECU+0x2d0>)
 8003598:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 800359c:	121b      	asrs	r3, r3, #8
 800359e:	b21b      	sxth	r3, r3
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	743b      	strb	r3, [r7, #16]
	buffer[5] = ecuData.wheel_speed_rl & 0xff;
 80035a4:	4b2c      	ldr	r3, [pc, #176]	; (8003658 <Save_ECU+0x2d0>)
 80035a6:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	747b      	strb	r3, [r7, #17]
	buffer[6] = ecuData.wheel_speed_rr >> 8;
 80035ae:	4b2a      	ldr	r3, [pc, #168]	; (8003658 <Save_ECU+0x2d0>)
 80035b0:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 80035b4:	121b      	asrs	r3, r3, #8
 80035b6:	b21b      	sxth	r3, r3
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	74bb      	strb	r3, [r7, #18]
	buffer[7] = ecuData.wheel_speed_rr & 0xff;
 80035bc:	4b26      	ldr	r3, [pc, #152]	; (8003658 <Save_ECU+0x2d0>)
 80035be:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	74fb      	strb	r3, [r7, #19]

#ifdef DATALOGGER_NO_BUFFER
		Principal_Datalogger_Save_Data(hcan, id, length, buffer);
 80035c6:	7df9      	ldrb	r1, [r7, #23]
 80035c8:	f107 030c 	add.w	r3, r7, #12
 80035cc:	7dba      	ldrb	r2, [r7, #22]
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f002 fc70 	bl	8005eb4 <Principal_Datalogger_Save_Data>
#else
		Principal_Datalogger_Save_Buffer(hcan, id, length, buffer);
#endif

	id = ECU_FIRST_ID + 5;
 80035d4:	2306      	movs	r3, #6
 80035d6:	75fb      	strb	r3, [r7, #23]
	length = 8;
 80035d8:	2308      	movs	r3, #8
 80035da:	75bb      	strb	r3, [r7, #22]

	buffer[0] = ecuData.accel_long >> 8;
 80035dc:	4b1e      	ldr	r3, [pc, #120]	; (8003658 <Save_ECU+0x2d0>)
 80035de:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80035e2:	121b      	asrs	r3, r3, #8
 80035e4:	b21b      	sxth	r3, r3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	733b      	strb	r3, [r7, #12]
	buffer[1] = ecuData.accel_long & 0xff;
 80035ea:	4b1b      	ldr	r3, [pc, #108]	; (8003658 <Save_ECU+0x2d0>)
 80035ec:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	737b      	strb	r3, [r7, #13]
	buffer[2] = ecuData.accel_lat >> 8;
 80035f4:	4b18      	ldr	r3, [pc, #96]	; (8003658 <Save_ECU+0x2d0>)
 80035f6:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80035fa:	121b      	asrs	r3, r3, #8
 80035fc:	b21b      	sxth	r3, r3
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	73bb      	strb	r3, [r7, #14]
	buffer[3] = ecuData.accel_lat & 0xff;
 8003602:	4b15      	ldr	r3, [pc, #84]	; (8003658 <Save_ECU+0x2d0>)
 8003604:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8003608:	b2db      	uxtb	r3, r3
 800360a:	73fb      	strb	r3, [r7, #15]
	buffer[4] = ecuData.angle_pitch >> 8;
 800360c:	4b12      	ldr	r3, [pc, #72]	; (8003658 <Save_ECU+0x2d0>)
 800360e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8003612:	121b      	asrs	r3, r3, #8
 8003614:	b21b      	sxth	r3, r3
 8003616:	b2db      	uxtb	r3, r3
 8003618:	743b      	strb	r3, [r7, #16]
	buffer[5] = ecuData.angle_pitch & 0xff;
 800361a:	4b0f      	ldr	r3, [pc, #60]	; (8003658 <Save_ECU+0x2d0>)
 800361c:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8003620:	b2db      	uxtb	r3, r3
 8003622:	747b      	strb	r3, [r7, #17]
	buffer[6] = ecuData.angle_roll >> 8;
 8003624:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <Save_ECU+0x2d0>)
 8003626:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800362a:	121b      	asrs	r3, r3, #8
 800362c:	b21b      	sxth	r3, r3
 800362e:	b2db      	uxtb	r3, r3
 8003630:	74bb      	strb	r3, [r7, #18]
	buffer[7] = ecuData.angle_roll & 0xff;
 8003632:	4b09      	ldr	r3, [pc, #36]	; (8003658 <Save_ECU+0x2d0>)
 8003634:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8003638:	b2db      	uxtb	r3, r3
 800363a:	74fb      	strb	r3, [r7, #19]

#ifdef DATALOGGER_NO_BUFFER
		Principal_Datalogger_Save_Data(hcan, id, length, buffer);
 800363c:	7df9      	ldrb	r1, [r7, #23]
 800363e:	f107 030c 	add.w	r3, r7, #12
 8003642:	7dba      	ldrb	r2, [r7, #22]
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f002 fc35 	bl	8005eb4 <Principal_Datalogger_Save_Data>
#else
		Principal_Datalogger_Save_Buffer(hcan, id, length, buffer);
#endif

	return;
 800364a:	e000      	b.n	800364e <Save_ECU+0x2c6>
		return;
 800364c:	bf00      	nop
}
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	20002642 	.word	0x20002642
 8003658:	2000259c 	.word	0x2000259c

0800365c <Save_PDM>:

static void Save_PDM(CAN_HandleTypeDef* hcan)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
	uint8_t id = 0, length = 0, buffer[8];
 8003664:	2300      	movs	r3, #0
 8003666:	75fb      	strb	r3, [r7, #23]
 8003668:	2300      	movs	r3, #0
 800366a:	75bb      	strb	r3, [r7, #22]

	if(flagDatalogger != DL_SAVE)
 800366c:	4b8a      	ldr	r3, [pc, #552]	; (8003898 <Save_PDM+0x23c>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b01      	cmp	r3, #1
 8003672:	f040 810d 	bne.w	8003890 <Save_PDM+0x234>
		return;

	id = PDM_FIRST_ID;
 8003676:	230a      	movs	r3, #10
 8003678:	75fb      	strb	r3, [r7, #23]
	length = 8;
 800367a:	2308      	movs	r3, #8
 800367c:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Current_Buffer[0] << 8;
 800367e:	2300      	movs	r3, #0
 8003680:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Current_Buffer[0] & 0xff;
 8003682:	4b86      	ldr	r3, [pc, #536]	; (800389c <Save_PDM+0x240>)
 8003684:	889b      	ldrh	r3, [r3, #4]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Current_Buffer[1] << 8;
 800368a:	2300      	movs	r3, #0
 800368c:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Current_Buffer[1] & 0xff;
 800368e:	4b83      	ldr	r3, [pc, #524]	; (800389c <Save_PDM+0x240>)
 8003690:	88db      	ldrh	r3, [r3, #6]
 8003692:	b2db      	uxtb	r3, r3
 8003694:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pdmReadings.Current_Buffer[2] << 8;
 8003696:	2300      	movs	r3, #0
 8003698:	743b      	strb	r3, [r7, #16]
	buffer[5] = pdmReadings.Current_Buffer[2] & 0xff;
 800369a:	4b80      	ldr	r3, [pc, #512]	; (800389c <Save_PDM+0x240>)
 800369c:	891b      	ldrh	r3, [r3, #8]
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	747b      	strb	r3, [r7, #17]
	buffer[6] = pdmReadings.Current_Buffer[3] << 8;
 80036a2:	2300      	movs	r3, #0
 80036a4:	74bb      	strb	r3, [r7, #18]
	buffer[7] = pdmReadings.Current_Buffer[3] & 0xff;
 80036a6:	4b7d      	ldr	r3, [pc, #500]	; (800389c <Save_PDM+0x240>)
 80036a8:	895b      	ldrh	r3, [r3, #10]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	74fb      	strb	r3, [r7, #19]

#ifdef DATALOGGER_NO_BUFFER
		Principal_Datalogger_Save_Data(hcan, id, length, buffer);
 80036ae:	7df9      	ldrb	r1, [r7, #23]
 80036b0:	f107 030c 	add.w	r3, r7, #12
 80036b4:	7dba      	ldrb	r2, [r7, #22]
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f002 fbfc 	bl	8005eb4 <Principal_Datalogger_Save_Data>
#else
		Principal_Datalogger_Save_Buffer(hcan, id, length, buffer);
#endif

	id = PDM_FIRST_ID + 1;
 80036bc:	230b      	movs	r3, #11
 80036be:	75fb      	strb	r3, [r7, #23]
	length = 8;
 80036c0:	2308      	movs	r3, #8
 80036c2:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Current_Buffer[4] << 8;
 80036c4:	2300      	movs	r3, #0
 80036c6:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Current_Buffer[4] & 0xff;
 80036c8:	4b74      	ldr	r3, [pc, #464]	; (800389c <Save_PDM+0x240>)
 80036ca:	899b      	ldrh	r3, [r3, #12]
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Current_Buffer[5] << 8;
 80036d0:	2300      	movs	r3, #0
 80036d2:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Current_Buffer[5] & 0xff;
 80036d4:	4b71      	ldr	r3, [pc, #452]	; (800389c <Save_PDM+0x240>)
 80036d6:	89db      	ldrh	r3, [r3, #14]
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pdmReadings.Current_Buffer[6] << 8;
 80036dc:	2300      	movs	r3, #0
 80036de:	743b      	strb	r3, [r7, #16]
	buffer[5] = pdmReadings.Current_Buffer[6] & 0xff;
 80036e0:	4b6e      	ldr	r3, [pc, #440]	; (800389c <Save_PDM+0x240>)
 80036e2:	8a1b      	ldrh	r3, [r3, #16]
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	747b      	strb	r3, [r7, #17]
	buffer[6] = pdmReadings.Current_Buffer[7] << 8;
 80036e8:	2300      	movs	r3, #0
 80036ea:	74bb      	strb	r3, [r7, #18]
	buffer[7] = pdmReadings.Current_Buffer[7] & 0xff;
 80036ec:	4b6b      	ldr	r3, [pc, #428]	; (800389c <Save_PDM+0x240>)
 80036ee:	8a5b      	ldrh	r3, [r3, #18]
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	74fb      	strb	r3, [r7, #19]

#ifdef DATALOGGER_NO_BUFFER
		Principal_Datalogger_Save_Data(hcan, id, length, buffer);
 80036f4:	7df9      	ldrb	r1, [r7, #23]
 80036f6:	f107 030c 	add.w	r3, r7, #12
 80036fa:	7dba      	ldrb	r2, [r7, #22]
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f002 fbd9 	bl	8005eb4 <Principal_Datalogger_Save_Data>
#else
		Principal_Datalogger_Save_Buffer(hcan, id, length, buffer);
#endif

	id = PDM_FIRST_ID + 2;
 8003702:	230c      	movs	r3, #12
 8003704:	75fb      	strb	r3, [r7, #23]
	length = 8;
 8003706:	2308      	movs	r3, #8
 8003708:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Current_Buffer[8] << 8;
 800370a:	2300      	movs	r3, #0
 800370c:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Current_Buffer[8] & 0xff;
 800370e:	4b63      	ldr	r3, [pc, #396]	; (800389c <Save_PDM+0x240>)
 8003710:	8a9b      	ldrh	r3, [r3, #20]
 8003712:	b2db      	uxtb	r3, r3
 8003714:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Current_Buffer[9] << 8;
 8003716:	2300      	movs	r3, #0
 8003718:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Current_Buffer[9] & 0xff;
 800371a:	4b60      	ldr	r3, [pc, #384]	; (800389c <Save_PDM+0x240>)
 800371c:	8adb      	ldrh	r3, [r3, #22]
 800371e:	b2db      	uxtb	r3, r3
 8003720:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pdmReadings.Current_Buffer[10] << 8;
 8003722:	2300      	movs	r3, #0
 8003724:	743b      	strb	r3, [r7, #16]
	buffer[5] = pdmReadings.Current_Buffer[10] & 0xff;
 8003726:	4b5d      	ldr	r3, [pc, #372]	; (800389c <Save_PDM+0x240>)
 8003728:	8b1b      	ldrh	r3, [r3, #24]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	747b      	strb	r3, [r7, #17]
	buffer[6] = pdmReadings.Current_Buffer[11] << 8;
 800372e:	2300      	movs	r3, #0
 8003730:	74bb      	strb	r3, [r7, #18]
	buffer[7] = pdmReadings.Current_Buffer[11] & 0xff;
 8003732:	4b5a      	ldr	r3, [pc, #360]	; (800389c <Save_PDM+0x240>)
 8003734:	8b5b      	ldrh	r3, [r3, #26]
 8003736:	b2db      	uxtb	r3, r3
 8003738:	74fb      	strb	r3, [r7, #19]

#ifdef DATALOGGER_NO_BUFFER
		Principal_Datalogger_Save_Data(hcan, id, length, buffer);
 800373a:	7df9      	ldrb	r1, [r7, #23]
 800373c:	f107 030c 	add.w	r3, r7, #12
 8003740:	7dba      	ldrb	r2, [r7, #22]
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f002 fbb6 	bl	8005eb4 <Principal_Datalogger_Save_Data>
#else
		Principal_Datalogger_Save_Buffer(hcan, id, length, buffer);
#endif

	id = PDM_FIRST_ID + 3;
 8003748:	230d      	movs	r3, #13
 800374a:	75fb      	strb	r3, [r7, #23]
	length = 8;
 800374c:	2308      	movs	r3, #8
 800374e:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Current_Buffer[12] << 8;
 8003750:	2300      	movs	r3, #0
 8003752:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Current_Buffer[12] & 0xff;
 8003754:	4b51      	ldr	r3, [pc, #324]	; (800389c <Save_PDM+0x240>)
 8003756:	8b9b      	ldrh	r3, [r3, #28]
 8003758:	b2db      	uxtb	r3, r3
 800375a:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Current_Buffer[13] << 8;
 800375c:	2300      	movs	r3, #0
 800375e:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Current_Buffer[13] & 0xff;
 8003760:	4b4e      	ldr	r3, [pc, #312]	; (800389c <Save_PDM+0x240>)
 8003762:	8bdb      	ldrh	r3, [r3, #30]
 8003764:	b2db      	uxtb	r3, r3
 8003766:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pdmReadings.Current_Buffer[14] << 8;
 8003768:	2300      	movs	r3, #0
 800376a:	743b      	strb	r3, [r7, #16]
	buffer[5] = pdmReadings.Current_Buffer[14] & 0xff;
 800376c:	4b4b      	ldr	r3, [pc, #300]	; (800389c <Save_PDM+0x240>)
 800376e:	8c1b      	ldrh	r3, [r3, #32]
 8003770:	b2db      	uxtb	r3, r3
 8003772:	747b      	strb	r3, [r7, #17]
	buffer[6] = pdmReadings.Current_Buffer[15] << 8;
 8003774:	2300      	movs	r3, #0
 8003776:	74bb      	strb	r3, [r7, #18]
	buffer[7] = pdmReadings.Current_Buffer[15] & 0xff;
 8003778:	4b48      	ldr	r3, [pc, #288]	; (800389c <Save_PDM+0x240>)
 800377a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800377c:	b2db      	uxtb	r3, r3
 800377e:	74fb      	strb	r3, [r7, #19]

#ifdef DATALOGGER_NO_BUFFER
		Principal_Datalogger_Save_Data(hcan, id, length, buffer);
 8003780:	7df9      	ldrb	r1, [r7, #23]
 8003782:	f107 030c 	add.w	r3, r7, #12
 8003786:	7dba      	ldrb	r2, [r7, #22]
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f002 fb93 	bl	8005eb4 <Principal_Datalogger_Save_Data>
#else
		Principal_Datalogger_Save_Buffer(hcan, id, length, buffer);
#endif

	id = PDM_FIRST_ID + 4;
 800378e:	230e      	movs	r3, #14
 8003790:	75fb      	strb	r3, [r7, #23]
	length = 8;
 8003792:	2308      	movs	r3, #8
 8003794:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Tempetature_Buffer[0] << 8;
 8003796:	2300      	movs	r3, #0
 8003798:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Tempetature_Buffer[0] & 0xff;
 800379a:	4b40      	ldr	r3, [pc, #256]	; (800389c <Save_PDM+0x240>)
 800379c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Tempetature_Buffer[1] << 8;
 80037a2:	2300      	movs	r3, #0
 80037a4:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Tempetature_Buffer[1] & 0xff;
 80037a6:	4b3d      	ldr	r3, [pc, #244]	; (800389c <Save_PDM+0x240>)
 80037a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pdmReadings.Tempetature_Buffer[2] << 8;
 80037ae:	2300      	movs	r3, #0
 80037b0:	743b      	strb	r3, [r7, #16]
	buffer[5] = pdmReadings.Tempetature_Buffer[2] & 0xff;
 80037b2:	4b3a      	ldr	r3, [pc, #232]	; (800389c <Save_PDM+0x240>)
 80037b4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	747b      	strb	r3, [r7, #17]
	buffer[6] = pdmReadings.Tempetature_Buffer[3] << 8;
 80037ba:	2300      	movs	r3, #0
 80037bc:	74bb      	strb	r3, [r7, #18]
	buffer[7] = pdmReadings.Tempetature_Buffer[3] & 0xff;
 80037be:	4b37      	ldr	r3, [pc, #220]	; (800389c <Save_PDM+0x240>)
 80037c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	74fb      	strb	r3, [r7, #19]

#ifdef DATALOGGER_NO_BUFFER
		Principal_Datalogger_Save_Data(hcan, id, length, buffer);
 80037c6:	7df9      	ldrb	r1, [r7, #23]
 80037c8:	f107 030c 	add.w	r3, r7, #12
 80037cc:	7dba      	ldrb	r2, [r7, #22]
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f002 fb70 	bl	8005eb4 <Principal_Datalogger_Save_Data>
#else
		Principal_Datalogger_Save_Buffer(hcan, id, length, buffer);
#endif

	id = PDM_FIRST_ID + 5;
 80037d4:	230f      	movs	r3, #15
 80037d6:	75fb      	strb	r3, [r7, #23]
	length = 8;
 80037d8:	2308      	movs	r3, #8
 80037da:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Tempetature_Buffer[4] << 8;
 80037dc:	2300      	movs	r3, #0
 80037de:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Tempetature_Buffer[4] & 0xff;
 80037e0:	4b2e      	ldr	r3, [pc, #184]	; (800389c <Save_PDM+0x240>)
 80037e2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Tempetature_Buffer[5] << 8;
 80037e8:	2300      	movs	r3, #0
 80037ea:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Tempetature_Buffer[5] & 0xff;
 80037ec:	4b2b      	ldr	r3, [pc, #172]	; (800389c <Save_PDM+0x240>)
 80037ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pdmReadings.Tempetature_Buffer[6] << 8;
 80037f4:	2300      	movs	r3, #0
 80037f6:	743b      	strb	r3, [r7, #16]
	buffer[5] = pdmReadings.Tempetature_Buffer[6] & 0xff;
 80037f8:	4b28      	ldr	r3, [pc, #160]	; (800389c <Save_PDM+0x240>)
 80037fa:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	747b      	strb	r3, [r7, #17]
	buffer[6] = pdmReadings.Tempetature_Buffer[7] << 8;
 8003800:	2300      	movs	r3, #0
 8003802:	74bb      	strb	r3, [r7, #18]
	buffer[7] = pdmReadings.Tempetature_Buffer[7] & 0xff;
 8003804:	4b25      	ldr	r3, [pc, #148]	; (800389c <Save_PDM+0x240>)
 8003806:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8003808:	b2db      	uxtb	r3, r3
 800380a:	74fb      	strb	r3, [r7, #19]

#ifdef DATALOGGER_NO_BUFFER
		Principal_Datalogger_Save_Data(hcan, id, length, buffer);
 800380c:	7df9      	ldrb	r1, [r7, #23]
 800380e:	f107 030c 	add.w	r3, r7, #12
 8003812:	7dba      	ldrb	r2, [r7, #22]
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f002 fb4d 	bl	8005eb4 <Principal_Datalogger_Save_Data>
#else
		Principal_Datalogger_Save_Buffer(hcan, id, length, buffer);
#endif

	id = PDM_FIRST_ID + 6;
 800381a:	2310      	movs	r3, #16
 800381c:	75fb      	strb	r3, [r7, #23]
	length = 8;
 800381e:	2308      	movs	r3, #8
 8003820:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Duty_Cycle_Buffer[0] << 8;
 8003822:	2300      	movs	r3, #0
 8003824:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Duty_Cycle_Buffer[0] & 0xff;
 8003826:	4b1d      	ldr	r3, [pc, #116]	; (800389c <Save_PDM+0x240>)
 8003828:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800382a:	b2db      	uxtb	r3, r3
 800382c:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Duty_Cycle_Buffer[1] << 8;
 800382e:	2300      	movs	r3, #0
 8003830:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Duty_Cycle_Buffer[1] & 0xff;
 8003832:	4b1a      	ldr	r3, [pc, #104]	; (800389c <Save_PDM+0x240>)
 8003834:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003836:	b2db      	uxtb	r3, r3
 8003838:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pdmReadings.Duty_Cycle_Buffer[2] << 8;
 800383a:	2300      	movs	r3, #0
 800383c:	743b      	strb	r3, [r7, #16]
	buffer[5] = pdmReadings.Duty_Cycle_Buffer[2] & 0xff;
 800383e:	4b17      	ldr	r3, [pc, #92]	; (800389c <Save_PDM+0x240>)
 8003840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003842:	b2db      	uxtb	r3, r3
 8003844:	747b      	strb	r3, [r7, #17]
	buffer[6] = pdmReadings.Duty_Cycle_Buffer[3] << 8;
 8003846:	2300      	movs	r3, #0
 8003848:	74bb      	strb	r3, [r7, #18]
	buffer[7] = pdmReadings.Duty_Cycle_Buffer[3] & 0xff;
 800384a:	4b14      	ldr	r3, [pc, #80]	; (800389c <Save_PDM+0x240>)
 800384c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384e:	b2db      	uxtb	r3, r3
 8003850:	74fb      	strb	r3, [r7, #19]

#ifdef DATALOGGER_NO_BUFFER
		Principal_Datalogger_Save_Data(hcan, id, length, buffer);
 8003852:	7df9      	ldrb	r1, [r7, #23]
 8003854:	f107 030c 	add.w	r3, r7, #12
 8003858:	7dba      	ldrb	r2, [r7, #22]
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f002 fb2a 	bl	8005eb4 <Principal_Datalogger_Save_Data>
#else
		Principal_Datalogger_Save_Buffer(hcan, id, length, buffer);
#endif

	id = PDM_FIRST_ID + 7;
 8003860:	2311      	movs	r3, #17
 8003862:	75fb      	strb	r3, [r7, #23]
	length = 4;
 8003864:	2304      	movs	r3, #4
 8003866:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Input_Voltage << 8;
 8003868:	2300      	movs	r3, #0
 800386a:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Input_Voltage & 0xff;
 800386c:	4b0b      	ldr	r3, [pc, #44]	; (800389c <Save_PDM+0x240>)
 800386e:	881b      	ldrh	r3, [r3, #0]
 8003870:	b2db      	uxtb	r3, r3
 8003872:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Output_Verify << 8;
 8003874:	2300      	movs	r3, #0
 8003876:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Output_Verify & 0xff;
 8003878:	4b08      	ldr	r3, [pc, #32]	; (800389c <Save_PDM+0x240>)
 800387a:	885b      	ldrh	r3, [r3, #2]
 800387c:	b2db      	uxtb	r3, r3
 800387e:	73fb      	strb	r3, [r7, #15]

#ifdef DATALOGGER_NO_BUFFER
		Principal_Datalogger_Save_Data(hcan, id, length, buffer);
 8003880:	7df9      	ldrb	r1, [r7, #23]
 8003882:	f107 030c 	add.w	r3, r7, #12
 8003886:	7dba      	ldrb	r2, [r7, #22]
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f002 fb13 	bl	8005eb4 <Principal_Datalogger_Save_Data>
#else
		Principal_Datalogger_Save_Buffer(hcan, id, length, buffer);
#endif

	return;
 800388e:	e000      	b.n	8003892 <Save_PDM+0x236>
		return;
 8003890:	bf00      	nop
}
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	20002642 	.word	0x20002642
 800389c:	20002604 	.word	0x20002604

080038a0 <Principal_Init>:

static HAL_StatusTypeDef Load_EEPROM(I2C_HandleTypeDef* hi2c);
static HAL_StatusTypeDef Save_EEPROM(I2C_HandleTypeDef* hi2c);

void Principal_Init(CAN_HandleTypeDef* hcan, I2C_HandleTypeDef* hi2c, TIM_HandleTypeDef* htim)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
	if(Load_EEPROM(hi2c) != HAL_OK)
 80038ac:	68b8      	ldr	r0, [r7, #8]
 80038ae:	f000 fd35 	bl	800431c <Load_EEPROM>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <Principal_Init+0x1c>
		Principal_Hard_Code_Config();
 80038b8:	f000 fce0 	bl	800427c <Principal_Hard_Code_Config>
//	HAL_RTCEx_SetCoarseCalib(&hrtc, RTC_CALIBSIGN_NEGATIVE, 55);
//	HAL_RTC_SetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
//	HAL_RTC_SetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
//	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_STORE_DATA);

	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) == RTC_STORE_DATA)
 80038bc:	2101      	movs	r1, #1
 80038be:	4812      	ldr	r0, [pc, #72]	; (8003908 <Principal_Init+0x68>)
 80038c0:	f009 f9f6 	bl	800ccb0 <HAL_RTCEx_BKUPRead>
 80038c4:	4603      	mov	r3, r0
 80038c6:	f24e 325c 	movw	r2, #58204	; 0xe35c
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d103      	bne.n	80038d6 <Principal_Init+0x36>
		flagRTC = RTC_OK;
 80038ce:	4b0f      	ldr	r3, [pc, #60]	; (800390c <Principal_Init+0x6c>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	701a      	strb	r2, [r3, #0]
 80038d4:	e002      	b.n	80038dc <Principal_Init+0x3c>
	else
		flagRTC = RTC_LOST;
 80038d6:	4b0d      	ldr	r3, [pc, #52]	; (800390c <Principal_Init+0x6c>)
 80038d8:	2201      	movs	r2, #1
 80038da:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adcBuffer[6], 6);
 80038dc:	2206      	movs	r2, #6
 80038de:	490c      	ldr	r1, [pc, #48]	; (8003910 <Principal_Init+0x70>)
 80038e0:	480c      	ldr	r0, [pc, #48]	; (8003914 <Principal_Init+0x74>)
 80038e2:	f003 f9af 	bl	8006c44 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) &adcBuffer[0], 6);
 80038e6:	2206      	movs	r2, #6
 80038e8:	490b      	ldr	r1, [pc, #44]	; (8003918 <Principal_Init+0x78>)
 80038ea:	480c      	ldr	r0, [pc, #48]	; (800391c <Principal_Init+0x7c>)
 80038ec:	f003 f9aa 	bl	8006c44 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(htim);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f00a fe63 	bl	800e5bc <HAL_TIM_Base_Start_IT>

	Principal_Datalogger_Init();
 80038f6:	f002 f9ad 	bl	8005c54 <Principal_Datalogger_Init>

	Principal_CAN_Start(hcan);
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f7fe fc74 	bl	80021e8 <Principal_CAN_Start>
}
 8003900:	bf00      	nop
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	20000380 	.word	0x20000380
 800390c:	20002643 	.word	0x20002643
 8003910:	2000258c 	.word	0x2000258c
 8003914:	200001b4 	.word	0x200001b4
 8003918:	20002580 	.word	0x20002580
 800391c:	200001fc 	.word	0x200001fc

08003920 <Principal_Receive_Config>:

HAL_StatusTypeDef Principal_Receive_Config(I2C_HandleTypeDef* hi2c, uint8_t* data, uint32_t length)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef retVal = HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	75fb      	strb	r3, [r7, #23]

	switch(data[0])
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b04      	cmp	r3, #4
 8003936:	f200 8482 	bhi.w	800423e <Principal_Receive_Config+0x91e>
 800393a:	a201      	add	r2, pc, #4	; (adr r2, 8003940 <Principal_Receive_Config+0x20>)
 800393c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003940:	08003955 	.word	0x08003955
 8003944:	08003de9 	.word	0x08003de9
 8003948:	0800413d 	.word	0x0800413d
 800394c:	080041c5 	.word	0x080041c5
 8003950:	08004239 	.word	0x08004239
	{
		case CAN_COMMAND_PER_MSG:
			if(length != 8)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b08      	cmp	r3, #8
 8003958:	f040 8473 	bne.w	8004242 <Principal_Receive_Config+0x922>
				break;

			__BUFFER_TO_FREQ(data[1], perMsg[ANALOG_1_4]);
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	3301      	adds	r3, #1
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	3b01      	subs	r3, #1
 8003964:	2b0a      	cmp	r3, #10
 8003966:	d847      	bhi.n	80039f8 <Principal_Receive_Config+0xd8>
 8003968:	a201      	add	r2, pc, #4	; (adr r2, 8003970 <Principal_Receive_Config+0x50>)
 800396a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396e:	bf00      	nop
 8003970:	0800399d 	.word	0x0800399d
 8003974:	080039a7 	.word	0x080039a7
 8003978:	080039b1 	.word	0x080039b1
 800397c:	080039b9 	.word	0x080039b9
 8003980:	080039c1 	.word	0x080039c1
 8003984:	080039c9 	.word	0x080039c9
 8003988:	080039d1 	.word	0x080039d1
 800398c:	080039d9 	.word	0x080039d9
 8003990:	080039e1 	.word	0x080039e1
 8003994:	080039e9 	.word	0x080039e9
 8003998:	080039f1 	.word	0x080039f1
 800399c:	4ba8      	ldr	r3, [pc, #672]	; (8003c40 <Principal_Receive_Config+0x320>)
 800399e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039a2:	801a      	strh	r2, [r3, #0]
 80039a4:	e02b      	b.n	80039fe <Principal_Receive_Config+0xde>
 80039a6:	4ba6      	ldr	r3, [pc, #664]	; (8003c40 <Principal_Receive_Config+0x320>)
 80039a8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80039ac:	801a      	strh	r2, [r3, #0]
 80039ae:	e026      	b.n	80039fe <Principal_Receive_Config+0xde>
 80039b0:	4ba3      	ldr	r3, [pc, #652]	; (8003c40 <Principal_Receive_Config+0x320>)
 80039b2:	22c8      	movs	r2, #200	; 0xc8
 80039b4:	801a      	strh	r2, [r3, #0]
 80039b6:	e022      	b.n	80039fe <Principal_Receive_Config+0xde>
 80039b8:	4ba1      	ldr	r3, [pc, #644]	; (8003c40 <Principal_Receive_Config+0x320>)
 80039ba:	2264      	movs	r2, #100	; 0x64
 80039bc:	801a      	strh	r2, [r3, #0]
 80039be:	e01e      	b.n	80039fe <Principal_Receive_Config+0xde>
 80039c0:	4b9f      	ldr	r3, [pc, #636]	; (8003c40 <Principal_Receive_Config+0x320>)
 80039c2:	2232      	movs	r2, #50	; 0x32
 80039c4:	801a      	strh	r2, [r3, #0]
 80039c6:	e01a      	b.n	80039fe <Principal_Receive_Config+0xde>
 80039c8:	4b9d      	ldr	r3, [pc, #628]	; (8003c40 <Principal_Receive_Config+0x320>)
 80039ca:	2228      	movs	r2, #40	; 0x28
 80039cc:	801a      	strh	r2, [r3, #0]
 80039ce:	e016      	b.n	80039fe <Principal_Receive_Config+0xde>
 80039d0:	4b9b      	ldr	r3, [pc, #620]	; (8003c40 <Principal_Receive_Config+0x320>)
 80039d2:	2214      	movs	r2, #20
 80039d4:	801a      	strh	r2, [r3, #0]
 80039d6:	e012      	b.n	80039fe <Principal_Receive_Config+0xde>
 80039d8:	4b99      	ldr	r3, [pc, #612]	; (8003c40 <Principal_Receive_Config+0x320>)
 80039da:	220a      	movs	r2, #10
 80039dc:	801a      	strh	r2, [r3, #0]
 80039de:	e00e      	b.n	80039fe <Principal_Receive_Config+0xde>
 80039e0:	4b97      	ldr	r3, [pc, #604]	; (8003c40 <Principal_Receive_Config+0x320>)
 80039e2:	2205      	movs	r2, #5
 80039e4:	801a      	strh	r2, [r3, #0]
 80039e6:	e00a      	b.n	80039fe <Principal_Receive_Config+0xde>
 80039e8:	4b95      	ldr	r3, [pc, #596]	; (8003c40 <Principal_Receive_Config+0x320>)
 80039ea:	2204      	movs	r2, #4
 80039ec:	801a      	strh	r2, [r3, #0]
 80039ee:	e006      	b.n	80039fe <Principal_Receive_Config+0xde>
 80039f0:	4b93      	ldr	r3, [pc, #588]	; (8003c40 <Principal_Receive_Config+0x320>)
 80039f2:	2202      	movs	r2, #2
 80039f4:	801a      	strh	r2, [r3, #0]
 80039f6:	e002      	b.n	80039fe <Principal_Receive_Config+0xde>
 80039f8:	4b91      	ldr	r3, [pc, #580]	; (8003c40 <Principal_Receive_Config+0x320>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	801a      	strh	r2, [r3, #0]
 80039fe:	bf00      	nop
			__BUFFER_TO_FREQ(data[2], perMsg[ANALOG_5_8]);
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	3302      	adds	r3, #2
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	2b0a      	cmp	r3, #10
 8003a0a:	d847      	bhi.n	8003a9c <Principal_Receive_Config+0x17c>
 8003a0c:	a201      	add	r2, pc, #4	; (adr r2, 8003a14 <Principal_Receive_Config+0xf4>)
 8003a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a12:	bf00      	nop
 8003a14:	08003a41 	.word	0x08003a41
 8003a18:	08003a4b 	.word	0x08003a4b
 8003a1c:	08003a55 	.word	0x08003a55
 8003a20:	08003a5d 	.word	0x08003a5d
 8003a24:	08003a65 	.word	0x08003a65
 8003a28:	08003a6d 	.word	0x08003a6d
 8003a2c:	08003a75 	.word	0x08003a75
 8003a30:	08003a7d 	.word	0x08003a7d
 8003a34:	08003a85 	.word	0x08003a85
 8003a38:	08003a8d 	.word	0x08003a8d
 8003a3c:	08003a95 	.word	0x08003a95
 8003a40:	4b7f      	ldr	r3, [pc, #508]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003a42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a46:	805a      	strh	r2, [r3, #2]
 8003a48:	e02b      	b.n	8003aa2 <Principal_Receive_Config+0x182>
 8003a4a:	4b7d      	ldr	r3, [pc, #500]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003a4c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003a50:	805a      	strh	r2, [r3, #2]
 8003a52:	e026      	b.n	8003aa2 <Principal_Receive_Config+0x182>
 8003a54:	4b7a      	ldr	r3, [pc, #488]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003a56:	22c8      	movs	r2, #200	; 0xc8
 8003a58:	805a      	strh	r2, [r3, #2]
 8003a5a:	e022      	b.n	8003aa2 <Principal_Receive_Config+0x182>
 8003a5c:	4b78      	ldr	r3, [pc, #480]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003a5e:	2264      	movs	r2, #100	; 0x64
 8003a60:	805a      	strh	r2, [r3, #2]
 8003a62:	e01e      	b.n	8003aa2 <Principal_Receive_Config+0x182>
 8003a64:	4b76      	ldr	r3, [pc, #472]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003a66:	2232      	movs	r2, #50	; 0x32
 8003a68:	805a      	strh	r2, [r3, #2]
 8003a6a:	e01a      	b.n	8003aa2 <Principal_Receive_Config+0x182>
 8003a6c:	4b74      	ldr	r3, [pc, #464]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003a6e:	2228      	movs	r2, #40	; 0x28
 8003a70:	805a      	strh	r2, [r3, #2]
 8003a72:	e016      	b.n	8003aa2 <Principal_Receive_Config+0x182>
 8003a74:	4b72      	ldr	r3, [pc, #456]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003a76:	2214      	movs	r2, #20
 8003a78:	805a      	strh	r2, [r3, #2]
 8003a7a:	e012      	b.n	8003aa2 <Principal_Receive_Config+0x182>
 8003a7c:	4b70      	ldr	r3, [pc, #448]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003a7e:	220a      	movs	r2, #10
 8003a80:	805a      	strh	r2, [r3, #2]
 8003a82:	e00e      	b.n	8003aa2 <Principal_Receive_Config+0x182>
 8003a84:	4b6e      	ldr	r3, [pc, #440]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003a86:	2205      	movs	r2, #5
 8003a88:	805a      	strh	r2, [r3, #2]
 8003a8a:	e00a      	b.n	8003aa2 <Principal_Receive_Config+0x182>
 8003a8c:	4b6c      	ldr	r3, [pc, #432]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003a8e:	2204      	movs	r2, #4
 8003a90:	805a      	strh	r2, [r3, #2]
 8003a92:	e006      	b.n	8003aa2 <Principal_Receive_Config+0x182>
 8003a94:	4b6a      	ldr	r3, [pc, #424]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003a96:	2202      	movs	r2, #2
 8003a98:	805a      	strh	r2, [r3, #2]
 8003a9a:	e002      	b.n	8003aa2 <Principal_Receive_Config+0x182>
 8003a9c:	4b68      	ldr	r3, [pc, #416]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	805a      	strh	r2, [r3, #2]
 8003aa2:	bf00      	nop
			__BUFFER_TO_FREQ(data[3], perMsg[ANALOG_9_12]);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	3303      	adds	r3, #3
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	2b0a      	cmp	r3, #10
 8003aae:	d847      	bhi.n	8003b40 <Principal_Receive_Config+0x220>
 8003ab0:	a201      	add	r2, pc, #4	; (adr r2, 8003ab8 <Principal_Receive_Config+0x198>)
 8003ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab6:	bf00      	nop
 8003ab8:	08003ae5 	.word	0x08003ae5
 8003abc:	08003aef 	.word	0x08003aef
 8003ac0:	08003af9 	.word	0x08003af9
 8003ac4:	08003b01 	.word	0x08003b01
 8003ac8:	08003b09 	.word	0x08003b09
 8003acc:	08003b11 	.word	0x08003b11
 8003ad0:	08003b19 	.word	0x08003b19
 8003ad4:	08003b21 	.word	0x08003b21
 8003ad8:	08003b29 	.word	0x08003b29
 8003adc:	08003b31 	.word	0x08003b31
 8003ae0:	08003b39 	.word	0x08003b39
 8003ae4:	4b56      	ldr	r3, [pc, #344]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003ae6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003aea:	809a      	strh	r2, [r3, #4]
 8003aec:	e02b      	b.n	8003b46 <Principal_Receive_Config+0x226>
 8003aee:	4b54      	ldr	r3, [pc, #336]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003af0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003af4:	809a      	strh	r2, [r3, #4]
 8003af6:	e026      	b.n	8003b46 <Principal_Receive_Config+0x226>
 8003af8:	4b51      	ldr	r3, [pc, #324]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003afa:	22c8      	movs	r2, #200	; 0xc8
 8003afc:	809a      	strh	r2, [r3, #4]
 8003afe:	e022      	b.n	8003b46 <Principal_Receive_Config+0x226>
 8003b00:	4b4f      	ldr	r3, [pc, #316]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003b02:	2264      	movs	r2, #100	; 0x64
 8003b04:	809a      	strh	r2, [r3, #4]
 8003b06:	e01e      	b.n	8003b46 <Principal_Receive_Config+0x226>
 8003b08:	4b4d      	ldr	r3, [pc, #308]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003b0a:	2232      	movs	r2, #50	; 0x32
 8003b0c:	809a      	strh	r2, [r3, #4]
 8003b0e:	e01a      	b.n	8003b46 <Principal_Receive_Config+0x226>
 8003b10:	4b4b      	ldr	r3, [pc, #300]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003b12:	2228      	movs	r2, #40	; 0x28
 8003b14:	809a      	strh	r2, [r3, #4]
 8003b16:	e016      	b.n	8003b46 <Principal_Receive_Config+0x226>
 8003b18:	4b49      	ldr	r3, [pc, #292]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003b1a:	2214      	movs	r2, #20
 8003b1c:	809a      	strh	r2, [r3, #4]
 8003b1e:	e012      	b.n	8003b46 <Principal_Receive_Config+0x226>
 8003b20:	4b47      	ldr	r3, [pc, #284]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003b22:	220a      	movs	r2, #10
 8003b24:	809a      	strh	r2, [r3, #4]
 8003b26:	e00e      	b.n	8003b46 <Principal_Receive_Config+0x226>
 8003b28:	4b45      	ldr	r3, [pc, #276]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003b2a:	2205      	movs	r2, #5
 8003b2c:	809a      	strh	r2, [r3, #4]
 8003b2e:	e00a      	b.n	8003b46 <Principal_Receive_Config+0x226>
 8003b30:	4b43      	ldr	r3, [pc, #268]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003b32:	2204      	movs	r2, #4
 8003b34:	809a      	strh	r2, [r3, #4]
 8003b36:	e006      	b.n	8003b46 <Principal_Receive_Config+0x226>
 8003b38:	4b41      	ldr	r3, [pc, #260]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	809a      	strh	r2, [r3, #4]
 8003b3e:	e002      	b.n	8003b46 <Principal_Receive_Config+0x226>
 8003b40:	4b3f      	ldr	r3, [pc, #252]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	809a      	strh	r2, [r3, #4]
 8003b46:	bf00      	nop
			__BUFFER_TO_FREQ(data[4], perMsg[RTC_MSG]);
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	2b0a      	cmp	r3, #10
 8003b52:	d847      	bhi.n	8003be4 <Principal_Receive_Config+0x2c4>
 8003b54:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <Principal_Receive_Config+0x23c>)
 8003b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5a:	bf00      	nop
 8003b5c:	08003b89 	.word	0x08003b89
 8003b60:	08003b93 	.word	0x08003b93
 8003b64:	08003b9d 	.word	0x08003b9d
 8003b68:	08003ba5 	.word	0x08003ba5
 8003b6c:	08003bad 	.word	0x08003bad
 8003b70:	08003bb5 	.word	0x08003bb5
 8003b74:	08003bbd 	.word	0x08003bbd
 8003b78:	08003bc5 	.word	0x08003bc5
 8003b7c:	08003bcd 	.word	0x08003bcd
 8003b80:	08003bd5 	.word	0x08003bd5
 8003b84:	08003bdd 	.word	0x08003bdd
 8003b88:	4b2d      	ldr	r3, [pc, #180]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003b8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b8e:	80da      	strh	r2, [r3, #6]
 8003b90:	e02b      	b.n	8003bea <Principal_Receive_Config+0x2ca>
 8003b92:	4b2b      	ldr	r3, [pc, #172]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003b94:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003b98:	80da      	strh	r2, [r3, #6]
 8003b9a:	e026      	b.n	8003bea <Principal_Receive_Config+0x2ca>
 8003b9c:	4b28      	ldr	r3, [pc, #160]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003b9e:	22c8      	movs	r2, #200	; 0xc8
 8003ba0:	80da      	strh	r2, [r3, #6]
 8003ba2:	e022      	b.n	8003bea <Principal_Receive_Config+0x2ca>
 8003ba4:	4b26      	ldr	r3, [pc, #152]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003ba6:	2264      	movs	r2, #100	; 0x64
 8003ba8:	80da      	strh	r2, [r3, #6]
 8003baa:	e01e      	b.n	8003bea <Principal_Receive_Config+0x2ca>
 8003bac:	4b24      	ldr	r3, [pc, #144]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003bae:	2232      	movs	r2, #50	; 0x32
 8003bb0:	80da      	strh	r2, [r3, #6]
 8003bb2:	e01a      	b.n	8003bea <Principal_Receive_Config+0x2ca>
 8003bb4:	4b22      	ldr	r3, [pc, #136]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003bb6:	2228      	movs	r2, #40	; 0x28
 8003bb8:	80da      	strh	r2, [r3, #6]
 8003bba:	e016      	b.n	8003bea <Principal_Receive_Config+0x2ca>
 8003bbc:	4b20      	ldr	r3, [pc, #128]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003bbe:	2214      	movs	r2, #20
 8003bc0:	80da      	strh	r2, [r3, #6]
 8003bc2:	e012      	b.n	8003bea <Principal_Receive_Config+0x2ca>
 8003bc4:	4b1e      	ldr	r3, [pc, #120]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003bc6:	220a      	movs	r2, #10
 8003bc8:	80da      	strh	r2, [r3, #6]
 8003bca:	e00e      	b.n	8003bea <Principal_Receive_Config+0x2ca>
 8003bcc:	4b1c      	ldr	r3, [pc, #112]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003bce:	2205      	movs	r2, #5
 8003bd0:	80da      	strh	r2, [r3, #6]
 8003bd2:	e00a      	b.n	8003bea <Principal_Receive_Config+0x2ca>
 8003bd4:	4b1a      	ldr	r3, [pc, #104]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003bd6:	2204      	movs	r2, #4
 8003bd8:	80da      	strh	r2, [r3, #6]
 8003bda:	e006      	b.n	8003bea <Principal_Receive_Config+0x2ca>
 8003bdc:	4b18      	ldr	r3, [pc, #96]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003bde:	2202      	movs	r2, #2
 8003be0:	80da      	strh	r2, [r3, #6]
 8003be2:	e002      	b.n	8003bea <Principal_Receive_Config+0x2ca>
 8003be4:	4b16      	ldr	r3, [pc, #88]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	80da      	strh	r2, [r3, #6]
 8003bea:	bf00      	nop
			__BUFFER_TO_FREQ(data[5], perMsg[VERIFY_MSG]);
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	3305      	adds	r3, #5
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	2b0a      	cmp	r3, #10
 8003bf6:	d849      	bhi.n	8003c8c <Principal_Receive_Config+0x36c>
 8003bf8:	a201      	add	r2, pc, #4	; (adr r2, 8003c00 <Principal_Receive_Config+0x2e0>)
 8003bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfe:	bf00      	nop
 8003c00:	08003c2d 	.word	0x08003c2d
 8003c04:	08003c37 	.word	0x08003c37
 8003c08:	08003c45 	.word	0x08003c45
 8003c0c:	08003c4d 	.word	0x08003c4d
 8003c10:	08003c55 	.word	0x08003c55
 8003c14:	08003c5d 	.word	0x08003c5d
 8003c18:	08003c65 	.word	0x08003c65
 8003c1c:	08003c6d 	.word	0x08003c6d
 8003c20:	08003c75 	.word	0x08003c75
 8003c24:	08003c7d 	.word	0x08003c7d
 8003c28:	08003c85 	.word	0x08003c85
 8003c2c:	4b04      	ldr	r3, [pc, #16]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003c2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c32:	811a      	strh	r2, [r3, #8]
 8003c34:	e02d      	b.n	8003c92 <Principal_Receive_Config+0x372>
 8003c36:	4b02      	ldr	r3, [pc, #8]	; (8003c40 <Principal_Receive_Config+0x320>)
 8003c38:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003c3c:	811a      	strh	r2, [r3, #8]
 8003c3e:	e028      	b.n	8003c92 <Principal_Receive_Config+0x372>
 8003c40:	2000266c 	.word	0x2000266c
 8003c44:	4ba8      	ldr	r3, [pc, #672]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003c46:	22c8      	movs	r2, #200	; 0xc8
 8003c48:	811a      	strh	r2, [r3, #8]
 8003c4a:	e022      	b.n	8003c92 <Principal_Receive_Config+0x372>
 8003c4c:	4ba6      	ldr	r3, [pc, #664]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003c4e:	2264      	movs	r2, #100	; 0x64
 8003c50:	811a      	strh	r2, [r3, #8]
 8003c52:	e01e      	b.n	8003c92 <Principal_Receive_Config+0x372>
 8003c54:	4ba4      	ldr	r3, [pc, #656]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003c56:	2232      	movs	r2, #50	; 0x32
 8003c58:	811a      	strh	r2, [r3, #8]
 8003c5a:	e01a      	b.n	8003c92 <Principal_Receive_Config+0x372>
 8003c5c:	4ba2      	ldr	r3, [pc, #648]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003c5e:	2228      	movs	r2, #40	; 0x28
 8003c60:	811a      	strh	r2, [r3, #8]
 8003c62:	e016      	b.n	8003c92 <Principal_Receive_Config+0x372>
 8003c64:	4ba0      	ldr	r3, [pc, #640]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003c66:	2214      	movs	r2, #20
 8003c68:	811a      	strh	r2, [r3, #8]
 8003c6a:	e012      	b.n	8003c92 <Principal_Receive_Config+0x372>
 8003c6c:	4b9e      	ldr	r3, [pc, #632]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003c6e:	220a      	movs	r2, #10
 8003c70:	811a      	strh	r2, [r3, #8]
 8003c72:	e00e      	b.n	8003c92 <Principal_Receive_Config+0x372>
 8003c74:	4b9c      	ldr	r3, [pc, #624]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003c76:	2205      	movs	r2, #5
 8003c78:	811a      	strh	r2, [r3, #8]
 8003c7a:	e00a      	b.n	8003c92 <Principal_Receive_Config+0x372>
 8003c7c:	4b9a      	ldr	r3, [pc, #616]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003c7e:	2204      	movs	r2, #4
 8003c80:	811a      	strh	r2, [r3, #8]
 8003c82:	e006      	b.n	8003c92 <Principal_Receive_Config+0x372>
 8003c84:	4b98      	ldr	r3, [pc, #608]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003c86:	2202      	movs	r2, #2
 8003c88:	811a      	strh	r2, [r3, #8]
 8003c8a:	e002      	b.n	8003c92 <Principal_Receive_Config+0x372>
 8003c8c:	4b96      	ldr	r3, [pc, #600]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	811a      	strh	r2, [r3, #8]
 8003c92:	bf00      	nop
			__BUFFER_TO_FREQ(data[6], perMsg[ECU_SAVE]);
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	3306      	adds	r3, #6
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	2b0a      	cmp	r3, #10
 8003c9e:	d847      	bhi.n	8003d30 <Principal_Receive_Config+0x410>
 8003ca0:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <Principal_Receive_Config+0x388>)
 8003ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca6:	bf00      	nop
 8003ca8:	08003cd5 	.word	0x08003cd5
 8003cac:	08003cdf 	.word	0x08003cdf
 8003cb0:	08003ce9 	.word	0x08003ce9
 8003cb4:	08003cf1 	.word	0x08003cf1
 8003cb8:	08003cf9 	.word	0x08003cf9
 8003cbc:	08003d01 	.word	0x08003d01
 8003cc0:	08003d09 	.word	0x08003d09
 8003cc4:	08003d11 	.word	0x08003d11
 8003cc8:	08003d19 	.word	0x08003d19
 8003ccc:	08003d21 	.word	0x08003d21
 8003cd0:	08003d29 	.word	0x08003d29
 8003cd4:	4b84      	ldr	r3, [pc, #528]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003cd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cda:	819a      	strh	r2, [r3, #12]
 8003cdc:	e02b      	b.n	8003d36 <Principal_Receive_Config+0x416>
 8003cde:	4b82      	ldr	r3, [pc, #520]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003ce0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003ce4:	819a      	strh	r2, [r3, #12]
 8003ce6:	e026      	b.n	8003d36 <Principal_Receive_Config+0x416>
 8003ce8:	4b7f      	ldr	r3, [pc, #508]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003cea:	22c8      	movs	r2, #200	; 0xc8
 8003cec:	819a      	strh	r2, [r3, #12]
 8003cee:	e022      	b.n	8003d36 <Principal_Receive_Config+0x416>
 8003cf0:	4b7d      	ldr	r3, [pc, #500]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003cf2:	2264      	movs	r2, #100	; 0x64
 8003cf4:	819a      	strh	r2, [r3, #12]
 8003cf6:	e01e      	b.n	8003d36 <Principal_Receive_Config+0x416>
 8003cf8:	4b7b      	ldr	r3, [pc, #492]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003cfa:	2232      	movs	r2, #50	; 0x32
 8003cfc:	819a      	strh	r2, [r3, #12]
 8003cfe:	e01a      	b.n	8003d36 <Principal_Receive_Config+0x416>
 8003d00:	4b79      	ldr	r3, [pc, #484]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003d02:	2228      	movs	r2, #40	; 0x28
 8003d04:	819a      	strh	r2, [r3, #12]
 8003d06:	e016      	b.n	8003d36 <Principal_Receive_Config+0x416>
 8003d08:	4b77      	ldr	r3, [pc, #476]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003d0a:	2214      	movs	r2, #20
 8003d0c:	819a      	strh	r2, [r3, #12]
 8003d0e:	e012      	b.n	8003d36 <Principal_Receive_Config+0x416>
 8003d10:	4b75      	ldr	r3, [pc, #468]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003d12:	220a      	movs	r2, #10
 8003d14:	819a      	strh	r2, [r3, #12]
 8003d16:	e00e      	b.n	8003d36 <Principal_Receive_Config+0x416>
 8003d18:	4b73      	ldr	r3, [pc, #460]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003d1a:	2205      	movs	r2, #5
 8003d1c:	819a      	strh	r2, [r3, #12]
 8003d1e:	e00a      	b.n	8003d36 <Principal_Receive_Config+0x416>
 8003d20:	4b71      	ldr	r3, [pc, #452]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003d22:	2204      	movs	r2, #4
 8003d24:	819a      	strh	r2, [r3, #12]
 8003d26:	e006      	b.n	8003d36 <Principal_Receive_Config+0x416>
 8003d28:	4b6f      	ldr	r3, [pc, #444]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	819a      	strh	r2, [r3, #12]
 8003d2e:	e002      	b.n	8003d36 <Principal_Receive_Config+0x416>
 8003d30:	4b6d      	ldr	r3, [pc, #436]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	819a      	strh	r2, [r3, #12]
 8003d36:	bf00      	nop
			__BUFFER_TO_FREQ(data[7], perMsg[PDM_SAVE]);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	3307      	adds	r3, #7
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	2b0a      	cmp	r3, #10
 8003d42:	d847      	bhi.n	8003dd4 <Principal_Receive_Config+0x4b4>
 8003d44:	a201      	add	r2, pc, #4	; (adr r2, 8003d4c <Principal_Receive_Config+0x42c>)
 8003d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4a:	bf00      	nop
 8003d4c:	08003d79 	.word	0x08003d79
 8003d50:	08003d83 	.word	0x08003d83
 8003d54:	08003d8d 	.word	0x08003d8d
 8003d58:	08003d95 	.word	0x08003d95
 8003d5c:	08003d9d 	.word	0x08003d9d
 8003d60:	08003da5 	.word	0x08003da5
 8003d64:	08003dad 	.word	0x08003dad
 8003d68:	08003db5 	.word	0x08003db5
 8003d6c:	08003dbd 	.word	0x08003dbd
 8003d70:	08003dc5 	.word	0x08003dc5
 8003d74:	08003dcd 	.word	0x08003dcd
 8003d78:	4b5b      	ldr	r3, [pc, #364]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003d7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d7e:	81da      	strh	r2, [r3, #14]
 8003d80:	e02b      	b.n	8003dda <Principal_Receive_Config+0x4ba>
 8003d82:	4b59      	ldr	r3, [pc, #356]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003d84:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003d88:	81da      	strh	r2, [r3, #14]
 8003d8a:	e026      	b.n	8003dda <Principal_Receive_Config+0x4ba>
 8003d8c:	4b56      	ldr	r3, [pc, #344]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003d8e:	22c8      	movs	r2, #200	; 0xc8
 8003d90:	81da      	strh	r2, [r3, #14]
 8003d92:	e022      	b.n	8003dda <Principal_Receive_Config+0x4ba>
 8003d94:	4b54      	ldr	r3, [pc, #336]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003d96:	2264      	movs	r2, #100	; 0x64
 8003d98:	81da      	strh	r2, [r3, #14]
 8003d9a:	e01e      	b.n	8003dda <Principal_Receive_Config+0x4ba>
 8003d9c:	4b52      	ldr	r3, [pc, #328]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003d9e:	2232      	movs	r2, #50	; 0x32
 8003da0:	81da      	strh	r2, [r3, #14]
 8003da2:	e01a      	b.n	8003dda <Principal_Receive_Config+0x4ba>
 8003da4:	4b50      	ldr	r3, [pc, #320]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003da6:	2228      	movs	r2, #40	; 0x28
 8003da8:	81da      	strh	r2, [r3, #14]
 8003daa:	e016      	b.n	8003dda <Principal_Receive_Config+0x4ba>
 8003dac:	4b4e      	ldr	r3, [pc, #312]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003dae:	2214      	movs	r2, #20
 8003db0:	81da      	strh	r2, [r3, #14]
 8003db2:	e012      	b.n	8003dda <Principal_Receive_Config+0x4ba>
 8003db4:	4b4c      	ldr	r3, [pc, #304]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003db6:	220a      	movs	r2, #10
 8003db8:	81da      	strh	r2, [r3, #14]
 8003dba:	e00e      	b.n	8003dda <Principal_Receive_Config+0x4ba>
 8003dbc:	4b4a      	ldr	r3, [pc, #296]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003dbe:	2205      	movs	r2, #5
 8003dc0:	81da      	strh	r2, [r3, #14]
 8003dc2:	e00a      	b.n	8003dda <Principal_Receive_Config+0x4ba>
 8003dc4:	4b48      	ldr	r3, [pc, #288]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003dc6:	2204      	movs	r2, #4
 8003dc8:	81da      	strh	r2, [r3, #14]
 8003dca:	e006      	b.n	8003dda <Principal_Receive_Config+0x4ba>
 8003dcc:	4b46      	ldr	r3, [pc, #280]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003dce:	2202      	movs	r2, #2
 8003dd0:	81da      	strh	r2, [r3, #14]
 8003dd2:	e002      	b.n	8003dda <Principal_Receive_Config+0x4ba>
 8003dd4:	4b44      	ldr	r3, [pc, #272]	; (8003ee8 <Principal_Receive_Config+0x5c8>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	81da      	strh	r2, [r3, #14]
 8003dda:	bf00      	nop

			retVal = Save_EEPROM(hi2c);
 8003ddc:	68f8      	ldr	r0, [r7, #12]
 8003dde:	f000 febd 	bl	8004b5c <Save_EEPROM>
 8003de2:	4603      	mov	r3, r0
 8003de4:	75fb      	strb	r3, [r7, #23]
			break;
 8003de6:	e233      	b.n	8004250 <Principal_Receive_Config+0x930>

		case CAN_COMMAND_PER_CAN:
			if(length != 6)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b06      	cmp	r3, #6
 8003dec:	f040 822b 	bne.w	8004246 <Principal_Receive_Config+0x926>
				break;

			__BUFFER_TO_FREQ(data[1], perCAN[ANALOG_1_4]);
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	3301      	adds	r3, #1
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	3b01      	subs	r3, #1
 8003df8:	2b0a      	cmp	r3, #10
 8003dfa:	d847      	bhi.n	8003e8c <Principal_Receive_Config+0x56c>
 8003dfc:	a201      	add	r2, pc, #4	; (adr r2, 8003e04 <Principal_Receive_Config+0x4e4>)
 8003dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e02:	bf00      	nop
 8003e04:	08003e31 	.word	0x08003e31
 8003e08:	08003e3b 	.word	0x08003e3b
 8003e0c:	08003e45 	.word	0x08003e45
 8003e10:	08003e4d 	.word	0x08003e4d
 8003e14:	08003e55 	.word	0x08003e55
 8003e18:	08003e5d 	.word	0x08003e5d
 8003e1c:	08003e65 	.word	0x08003e65
 8003e20:	08003e6d 	.word	0x08003e6d
 8003e24:	08003e75 	.word	0x08003e75
 8003e28:	08003e7d 	.word	0x08003e7d
 8003e2c:	08003e85 	.word	0x08003e85
 8003e30:	4b2e      	ldr	r3, [pc, #184]	; (8003eec <Principal_Receive_Config+0x5cc>)
 8003e32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e36:	801a      	strh	r2, [r3, #0]
 8003e38:	e02b      	b.n	8003e92 <Principal_Receive_Config+0x572>
 8003e3a:	4b2c      	ldr	r3, [pc, #176]	; (8003eec <Principal_Receive_Config+0x5cc>)
 8003e3c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003e40:	801a      	strh	r2, [r3, #0]
 8003e42:	e026      	b.n	8003e92 <Principal_Receive_Config+0x572>
 8003e44:	4b29      	ldr	r3, [pc, #164]	; (8003eec <Principal_Receive_Config+0x5cc>)
 8003e46:	22c8      	movs	r2, #200	; 0xc8
 8003e48:	801a      	strh	r2, [r3, #0]
 8003e4a:	e022      	b.n	8003e92 <Principal_Receive_Config+0x572>
 8003e4c:	4b27      	ldr	r3, [pc, #156]	; (8003eec <Principal_Receive_Config+0x5cc>)
 8003e4e:	2264      	movs	r2, #100	; 0x64
 8003e50:	801a      	strh	r2, [r3, #0]
 8003e52:	e01e      	b.n	8003e92 <Principal_Receive_Config+0x572>
 8003e54:	4b25      	ldr	r3, [pc, #148]	; (8003eec <Principal_Receive_Config+0x5cc>)
 8003e56:	2232      	movs	r2, #50	; 0x32
 8003e58:	801a      	strh	r2, [r3, #0]
 8003e5a:	e01a      	b.n	8003e92 <Principal_Receive_Config+0x572>
 8003e5c:	4b23      	ldr	r3, [pc, #140]	; (8003eec <Principal_Receive_Config+0x5cc>)
 8003e5e:	2228      	movs	r2, #40	; 0x28
 8003e60:	801a      	strh	r2, [r3, #0]
 8003e62:	e016      	b.n	8003e92 <Principal_Receive_Config+0x572>
 8003e64:	4b21      	ldr	r3, [pc, #132]	; (8003eec <Principal_Receive_Config+0x5cc>)
 8003e66:	2214      	movs	r2, #20
 8003e68:	801a      	strh	r2, [r3, #0]
 8003e6a:	e012      	b.n	8003e92 <Principal_Receive_Config+0x572>
 8003e6c:	4b1f      	ldr	r3, [pc, #124]	; (8003eec <Principal_Receive_Config+0x5cc>)
 8003e6e:	220a      	movs	r2, #10
 8003e70:	801a      	strh	r2, [r3, #0]
 8003e72:	e00e      	b.n	8003e92 <Principal_Receive_Config+0x572>
 8003e74:	4b1d      	ldr	r3, [pc, #116]	; (8003eec <Principal_Receive_Config+0x5cc>)
 8003e76:	2205      	movs	r2, #5
 8003e78:	801a      	strh	r2, [r3, #0]
 8003e7a:	e00a      	b.n	8003e92 <Principal_Receive_Config+0x572>
 8003e7c:	4b1b      	ldr	r3, [pc, #108]	; (8003eec <Principal_Receive_Config+0x5cc>)
 8003e7e:	2204      	movs	r2, #4
 8003e80:	801a      	strh	r2, [r3, #0]
 8003e82:	e006      	b.n	8003e92 <Principal_Receive_Config+0x572>
 8003e84:	4b19      	ldr	r3, [pc, #100]	; (8003eec <Principal_Receive_Config+0x5cc>)
 8003e86:	2202      	movs	r2, #2
 8003e88:	801a      	strh	r2, [r3, #0]
 8003e8a:	e002      	b.n	8003e92 <Principal_Receive_Config+0x572>
 8003e8c:	4b17      	ldr	r3, [pc, #92]	; (8003eec <Principal_Receive_Config+0x5cc>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	801a      	strh	r2, [r3, #0]
 8003e92:	bf00      	nop
			__BUFFER_TO_FREQ(data[2], perCAN[ANALOG_5_8]);
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	3302      	adds	r3, #2
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	2b0a      	cmp	r3, #10
 8003e9e:	d84b      	bhi.n	8003f38 <Principal_Receive_Config+0x618>
 8003ea0:	a201      	add	r2, pc, #4	; (adr r2, 8003ea8 <Principal_Receive_Config+0x588>)
 8003ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea6:	bf00      	nop
 8003ea8:	08003ed5 	.word	0x08003ed5
 8003eac:	08003edf 	.word	0x08003edf
 8003eb0:	08003ef1 	.word	0x08003ef1
 8003eb4:	08003ef9 	.word	0x08003ef9
 8003eb8:	08003f01 	.word	0x08003f01
 8003ebc:	08003f09 	.word	0x08003f09
 8003ec0:	08003f11 	.word	0x08003f11
 8003ec4:	08003f19 	.word	0x08003f19
 8003ec8:	08003f21 	.word	0x08003f21
 8003ecc:	08003f29 	.word	0x08003f29
 8003ed0:	08003f31 	.word	0x08003f31
 8003ed4:	4b05      	ldr	r3, [pc, #20]	; (8003eec <Principal_Receive_Config+0x5cc>)
 8003ed6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003eda:	805a      	strh	r2, [r3, #2]
 8003edc:	e02f      	b.n	8003f3e <Principal_Receive_Config+0x61e>
 8003ede:	4b03      	ldr	r3, [pc, #12]	; (8003eec <Principal_Receive_Config+0x5cc>)
 8003ee0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003ee4:	805a      	strh	r2, [r3, #2]
 8003ee6:	e02a      	b.n	8003f3e <Principal_Receive_Config+0x61e>
 8003ee8:	2000266c 	.word	0x2000266c
 8003eec:	20002660 	.word	0x20002660
 8003ef0:	4b91      	ldr	r3, [pc, #580]	; (8004138 <Principal_Receive_Config+0x818>)
 8003ef2:	22c8      	movs	r2, #200	; 0xc8
 8003ef4:	805a      	strh	r2, [r3, #2]
 8003ef6:	e022      	b.n	8003f3e <Principal_Receive_Config+0x61e>
 8003ef8:	4b8f      	ldr	r3, [pc, #572]	; (8004138 <Principal_Receive_Config+0x818>)
 8003efa:	2264      	movs	r2, #100	; 0x64
 8003efc:	805a      	strh	r2, [r3, #2]
 8003efe:	e01e      	b.n	8003f3e <Principal_Receive_Config+0x61e>
 8003f00:	4b8d      	ldr	r3, [pc, #564]	; (8004138 <Principal_Receive_Config+0x818>)
 8003f02:	2232      	movs	r2, #50	; 0x32
 8003f04:	805a      	strh	r2, [r3, #2]
 8003f06:	e01a      	b.n	8003f3e <Principal_Receive_Config+0x61e>
 8003f08:	4b8b      	ldr	r3, [pc, #556]	; (8004138 <Principal_Receive_Config+0x818>)
 8003f0a:	2228      	movs	r2, #40	; 0x28
 8003f0c:	805a      	strh	r2, [r3, #2]
 8003f0e:	e016      	b.n	8003f3e <Principal_Receive_Config+0x61e>
 8003f10:	4b89      	ldr	r3, [pc, #548]	; (8004138 <Principal_Receive_Config+0x818>)
 8003f12:	2214      	movs	r2, #20
 8003f14:	805a      	strh	r2, [r3, #2]
 8003f16:	e012      	b.n	8003f3e <Principal_Receive_Config+0x61e>
 8003f18:	4b87      	ldr	r3, [pc, #540]	; (8004138 <Principal_Receive_Config+0x818>)
 8003f1a:	220a      	movs	r2, #10
 8003f1c:	805a      	strh	r2, [r3, #2]
 8003f1e:	e00e      	b.n	8003f3e <Principal_Receive_Config+0x61e>
 8003f20:	4b85      	ldr	r3, [pc, #532]	; (8004138 <Principal_Receive_Config+0x818>)
 8003f22:	2205      	movs	r2, #5
 8003f24:	805a      	strh	r2, [r3, #2]
 8003f26:	e00a      	b.n	8003f3e <Principal_Receive_Config+0x61e>
 8003f28:	4b83      	ldr	r3, [pc, #524]	; (8004138 <Principal_Receive_Config+0x818>)
 8003f2a:	2204      	movs	r2, #4
 8003f2c:	805a      	strh	r2, [r3, #2]
 8003f2e:	e006      	b.n	8003f3e <Principal_Receive_Config+0x61e>
 8003f30:	4b81      	ldr	r3, [pc, #516]	; (8004138 <Principal_Receive_Config+0x818>)
 8003f32:	2202      	movs	r2, #2
 8003f34:	805a      	strh	r2, [r3, #2]
 8003f36:	e002      	b.n	8003f3e <Principal_Receive_Config+0x61e>
 8003f38:	4b7f      	ldr	r3, [pc, #508]	; (8004138 <Principal_Receive_Config+0x818>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	805a      	strh	r2, [r3, #2]
 8003f3e:	bf00      	nop
			__BUFFER_TO_FREQ(data[3], perCAN[ANALOG_9_12]);
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	3303      	adds	r3, #3
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	3b01      	subs	r3, #1
 8003f48:	2b0a      	cmp	r3, #10
 8003f4a:	d847      	bhi.n	8003fdc <Principal_Receive_Config+0x6bc>
 8003f4c:	a201      	add	r2, pc, #4	; (adr r2, 8003f54 <Principal_Receive_Config+0x634>)
 8003f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f52:	bf00      	nop
 8003f54:	08003f81 	.word	0x08003f81
 8003f58:	08003f8b 	.word	0x08003f8b
 8003f5c:	08003f95 	.word	0x08003f95
 8003f60:	08003f9d 	.word	0x08003f9d
 8003f64:	08003fa5 	.word	0x08003fa5
 8003f68:	08003fad 	.word	0x08003fad
 8003f6c:	08003fb5 	.word	0x08003fb5
 8003f70:	08003fbd 	.word	0x08003fbd
 8003f74:	08003fc5 	.word	0x08003fc5
 8003f78:	08003fcd 	.word	0x08003fcd
 8003f7c:	08003fd5 	.word	0x08003fd5
 8003f80:	4b6d      	ldr	r3, [pc, #436]	; (8004138 <Principal_Receive_Config+0x818>)
 8003f82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f86:	809a      	strh	r2, [r3, #4]
 8003f88:	e02b      	b.n	8003fe2 <Principal_Receive_Config+0x6c2>
 8003f8a:	4b6b      	ldr	r3, [pc, #428]	; (8004138 <Principal_Receive_Config+0x818>)
 8003f8c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003f90:	809a      	strh	r2, [r3, #4]
 8003f92:	e026      	b.n	8003fe2 <Principal_Receive_Config+0x6c2>
 8003f94:	4b68      	ldr	r3, [pc, #416]	; (8004138 <Principal_Receive_Config+0x818>)
 8003f96:	22c8      	movs	r2, #200	; 0xc8
 8003f98:	809a      	strh	r2, [r3, #4]
 8003f9a:	e022      	b.n	8003fe2 <Principal_Receive_Config+0x6c2>
 8003f9c:	4b66      	ldr	r3, [pc, #408]	; (8004138 <Principal_Receive_Config+0x818>)
 8003f9e:	2264      	movs	r2, #100	; 0x64
 8003fa0:	809a      	strh	r2, [r3, #4]
 8003fa2:	e01e      	b.n	8003fe2 <Principal_Receive_Config+0x6c2>
 8003fa4:	4b64      	ldr	r3, [pc, #400]	; (8004138 <Principal_Receive_Config+0x818>)
 8003fa6:	2232      	movs	r2, #50	; 0x32
 8003fa8:	809a      	strh	r2, [r3, #4]
 8003faa:	e01a      	b.n	8003fe2 <Principal_Receive_Config+0x6c2>
 8003fac:	4b62      	ldr	r3, [pc, #392]	; (8004138 <Principal_Receive_Config+0x818>)
 8003fae:	2228      	movs	r2, #40	; 0x28
 8003fb0:	809a      	strh	r2, [r3, #4]
 8003fb2:	e016      	b.n	8003fe2 <Principal_Receive_Config+0x6c2>
 8003fb4:	4b60      	ldr	r3, [pc, #384]	; (8004138 <Principal_Receive_Config+0x818>)
 8003fb6:	2214      	movs	r2, #20
 8003fb8:	809a      	strh	r2, [r3, #4]
 8003fba:	e012      	b.n	8003fe2 <Principal_Receive_Config+0x6c2>
 8003fbc:	4b5e      	ldr	r3, [pc, #376]	; (8004138 <Principal_Receive_Config+0x818>)
 8003fbe:	220a      	movs	r2, #10
 8003fc0:	809a      	strh	r2, [r3, #4]
 8003fc2:	e00e      	b.n	8003fe2 <Principal_Receive_Config+0x6c2>
 8003fc4:	4b5c      	ldr	r3, [pc, #368]	; (8004138 <Principal_Receive_Config+0x818>)
 8003fc6:	2205      	movs	r2, #5
 8003fc8:	809a      	strh	r2, [r3, #4]
 8003fca:	e00a      	b.n	8003fe2 <Principal_Receive_Config+0x6c2>
 8003fcc:	4b5a      	ldr	r3, [pc, #360]	; (8004138 <Principal_Receive_Config+0x818>)
 8003fce:	2204      	movs	r2, #4
 8003fd0:	809a      	strh	r2, [r3, #4]
 8003fd2:	e006      	b.n	8003fe2 <Principal_Receive_Config+0x6c2>
 8003fd4:	4b58      	ldr	r3, [pc, #352]	; (8004138 <Principal_Receive_Config+0x818>)
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	809a      	strh	r2, [r3, #4]
 8003fda:	e002      	b.n	8003fe2 <Principal_Receive_Config+0x6c2>
 8003fdc:	4b56      	ldr	r3, [pc, #344]	; (8004138 <Principal_Receive_Config+0x818>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	809a      	strh	r2, [r3, #4]
 8003fe2:	bf00      	nop
			__BUFFER_TO_FREQ(data[4], perCAN[RTC_MSG]);
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	3b01      	subs	r3, #1
 8003fec:	2b0a      	cmp	r3, #10
 8003fee:	d847      	bhi.n	8004080 <Principal_Receive_Config+0x760>
 8003ff0:	a201      	add	r2, pc, #4	; (adr r2, 8003ff8 <Principal_Receive_Config+0x6d8>)
 8003ff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff6:	bf00      	nop
 8003ff8:	08004025 	.word	0x08004025
 8003ffc:	0800402f 	.word	0x0800402f
 8004000:	08004039 	.word	0x08004039
 8004004:	08004041 	.word	0x08004041
 8004008:	08004049 	.word	0x08004049
 800400c:	08004051 	.word	0x08004051
 8004010:	08004059 	.word	0x08004059
 8004014:	08004061 	.word	0x08004061
 8004018:	08004069 	.word	0x08004069
 800401c:	08004071 	.word	0x08004071
 8004020:	08004079 	.word	0x08004079
 8004024:	4b44      	ldr	r3, [pc, #272]	; (8004138 <Principal_Receive_Config+0x818>)
 8004026:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800402a:	80da      	strh	r2, [r3, #6]
 800402c:	e02b      	b.n	8004086 <Principal_Receive_Config+0x766>
 800402e:	4b42      	ldr	r3, [pc, #264]	; (8004138 <Principal_Receive_Config+0x818>)
 8004030:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004034:	80da      	strh	r2, [r3, #6]
 8004036:	e026      	b.n	8004086 <Principal_Receive_Config+0x766>
 8004038:	4b3f      	ldr	r3, [pc, #252]	; (8004138 <Principal_Receive_Config+0x818>)
 800403a:	22c8      	movs	r2, #200	; 0xc8
 800403c:	80da      	strh	r2, [r3, #6]
 800403e:	e022      	b.n	8004086 <Principal_Receive_Config+0x766>
 8004040:	4b3d      	ldr	r3, [pc, #244]	; (8004138 <Principal_Receive_Config+0x818>)
 8004042:	2264      	movs	r2, #100	; 0x64
 8004044:	80da      	strh	r2, [r3, #6]
 8004046:	e01e      	b.n	8004086 <Principal_Receive_Config+0x766>
 8004048:	4b3b      	ldr	r3, [pc, #236]	; (8004138 <Principal_Receive_Config+0x818>)
 800404a:	2232      	movs	r2, #50	; 0x32
 800404c:	80da      	strh	r2, [r3, #6]
 800404e:	e01a      	b.n	8004086 <Principal_Receive_Config+0x766>
 8004050:	4b39      	ldr	r3, [pc, #228]	; (8004138 <Principal_Receive_Config+0x818>)
 8004052:	2228      	movs	r2, #40	; 0x28
 8004054:	80da      	strh	r2, [r3, #6]
 8004056:	e016      	b.n	8004086 <Principal_Receive_Config+0x766>
 8004058:	4b37      	ldr	r3, [pc, #220]	; (8004138 <Principal_Receive_Config+0x818>)
 800405a:	2214      	movs	r2, #20
 800405c:	80da      	strh	r2, [r3, #6]
 800405e:	e012      	b.n	8004086 <Principal_Receive_Config+0x766>
 8004060:	4b35      	ldr	r3, [pc, #212]	; (8004138 <Principal_Receive_Config+0x818>)
 8004062:	220a      	movs	r2, #10
 8004064:	80da      	strh	r2, [r3, #6]
 8004066:	e00e      	b.n	8004086 <Principal_Receive_Config+0x766>
 8004068:	4b33      	ldr	r3, [pc, #204]	; (8004138 <Principal_Receive_Config+0x818>)
 800406a:	2205      	movs	r2, #5
 800406c:	80da      	strh	r2, [r3, #6]
 800406e:	e00a      	b.n	8004086 <Principal_Receive_Config+0x766>
 8004070:	4b31      	ldr	r3, [pc, #196]	; (8004138 <Principal_Receive_Config+0x818>)
 8004072:	2204      	movs	r2, #4
 8004074:	80da      	strh	r2, [r3, #6]
 8004076:	e006      	b.n	8004086 <Principal_Receive_Config+0x766>
 8004078:	4b2f      	ldr	r3, [pc, #188]	; (8004138 <Principal_Receive_Config+0x818>)
 800407a:	2202      	movs	r2, #2
 800407c:	80da      	strh	r2, [r3, #6]
 800407e:	e002      	b.n	8004086 <Principal_Receive_Config+0x766>
 8004080:	4b2d      	ldr	r3, [pc, #180]	; (8004138 <Principal_Receive_Config+0x818>)
 8004082:	2200      	movs	r2, #0
 8004084:	80da      	strh	r2, [r3, #6]
 8004086:	bf00      	nop
			__BUFFER_TO_FREQ(data[5], perCAN[VERIFY_MSG]);
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	3305      	adds	r3, #5
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	3b01      	subs	r3, #1
 8004090:	2b0a      	cmp	r3, #10
 8004092:	d847      	bhi.n	8004124 <Principal_Receive_Config+0x804>
 8004094:	a201      	add	r2, pc, #4	; (adr r2, 800409c <Principal_Receive_Config+0x77c>)
 8004096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409a:	bf00      	nop
 800409c:	080040c9 	.word	0x080040c9
 80040a0:	080040d3 	.word	0x080040d3
 80040a4:	080040dd 	.word	0x080040dd
 80040a8:	080040e5 	.word	0x080040e5
 80040ac:	080040ed 	.word	0x080040ed
 80040b0:	080040f5 	.word	0x080040f5
 80040b4:	080040fd 	.word	0x080040fd
 80040b8:	08004105 	.word	0x08004105
 80040bc:	0800410d 	.word	0x0800410d
 80040c0:	08004115 	.word	0x08004115
 80040c4:	0800411d 	.word	0x0800411d
 80040c8:	4b1b      	ldr	r3, [pc, #108]	; (8004138 <Principal_Receive_Config+0x818>)
 80040ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040ce:	811a      	strh	r2, [r3, #8]
 80040d0:	e02b      	b.n	800412a <Principal_Receive_Config+0x80a>
 80040d2:	4b19      	ldr	r3, [pc, #100]	; (8004138 <Principal_Receive_Config+0x818>)
 80040d4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80040d8:	811a      	strh	r2, [r3, #8]
 80040da:	e026      	b.n	800412a <Principal_Receive_Config+0x80a>
 80040dc:	4b16      	ldr	r3, [pc, #88]	; (8004138 <Principal_Receive_Config+0x818>)
 80040de:	22c8      	movs	r2, #200	; 0xc8
 80040e0:	811a      	strh	r2, [r3, #8]
 80040e2:	e022      	b.n	800412a <Principal_Receive_Config+0x80a>
 80040e4:	4b14      	ldr	r3, [pc, #80]	; (8004138 <Principal_Receive_Config+0x818>)
 80040e6:	2264      	movs	r2, #100	; 0x64
 80040e8:	811a      	strh	r2, [r3, #8]
 80040ea:	e01e      	b.n	800412a <Principal_Receive_Config+0x80a>
 80040ec:	4b12      	ldr	r3, [pc, #72]	; (8004138 <Principal_Receive_Config+0x818>)
 80040ee:	2232      	movs	r2, #50	; 0x32
 80040f0:	811a      	strh	r2, [r3, #8]
 80040f2:	e01a      	b.n	800412a <Principal_Receive_Config+0x80a>
 80040f4:	4b10      	ldr	r3, [pc, #64]	; (8004138 <Principal_Receive_Config+0x818>)
 80040f6:	2228      	movs	r2, #40	; 0x28
 80040f8:	811a      	strh	r2, [r3, #8]
 80040fa:	e016      	b.n	800412a <Principal_Receive_Config+0x80a>
 80040fc:	4b0e      	ldr	r3, [pc, #56]	; (8004138 <Principal_Receive_Config+0x818>)
 80040fe:	2214      	movs	r2, #20
 8004100:	811a      	strh	r2, [r3, #8]
 8004102:	e012      	b.n	800412a <Principal_Receive_Config+0x80a>
 8004104:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <Principal_Receive_Config+0x818>)
 8004106:	220a      	movs	r2, #10
 8004108:	811a      	strh	r2, [r3, #8]
 800410a:	e00e      	b.n	800412a <Principal_Receive_Config+0x80a>
 800410c:	4b0a      	ldr	r3, [pc, #40]	; (8004138 <Principal_Receive_Config+0x818>)
 800410e:	2205      	movs	r2, #5
 8004110:	811a      	strh	r2, [r3, #8]
 8004112:	e00a      	b.n	800412a <Principal_Receive_Config+0x80a>
 8004114:	4b08      	ldr	r3, [pc, #32]	; (8004138 <Principal_Receive_Config+0x818>)
 8004116:	2204      	movs	r2, #4
 8004118:	811a      	strh	r2, [r3, #8]
 800411a:	e006      	b.n	800412a <Principal_Receive_Config+0x80a>
 800411c:	4b06      	ldr	r3, [pc, #24]	; (8004138 <Principal_Receive_Config+0x818>)
 800411e:	2202      	movs	r2, #2
 8004120:	811a      	strh	r2, [r3, #8]
 8004122:	e002      	b.n	800412a <Principal_Receive_Config+0x80a>
 8004124:	4b04      	ldr	r3, [pc, #16]	; (8004138 <Principal_Receive_Config+0x818>)
 8004126:	2200      	movs	r2, #0
 8004128:	811a      	strh	r2, [r3, #8]
 800412a:	bf00      	nop

			retVal = Save_EEPROM(hi2c);
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 fd15 	bl	8004b5c <Save_EEPROM>
 8004132:	4603      	mov	r3, r0
 8004134:	75fb      	strb	r3, [r7, #23]
			break;
 8004136:	e08b      	b.n	8004250 <Principal_Receive_Config+0x930>
 8004138:	20002660 	.word	0x20002660

		case CAN_COMMAND_THR:
			if(length != 8)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b08      	cmp	r3, #8
 8004140:	f040 8083 	bne.w	800424a <Principal_Receive_Config+0x92a>
				break;

			inputConfig		 = data[1];
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	785a      	ldrb	r2, [r3, #1]
 8004148:	4b44      	ldr	r3, [pc, #272]	; (800425c <Principal_Receive_Config+0x93c>)
 800414a:	701a      	strb	r2, [r3, #0]
			thresholdBeacon  = data[2] << 8;
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	3302      	adds	r3, #2
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	021b      	lsls	r3, r3, #8
 8004154:	b21a      	sxth	r2, r3
 8004156:	4b42      	ldr	r3, [pc, #264]	; (8004260 <Principal_Receive_Config+0x940>)
 8004158:	801a      	strh	r2, [r3, #0]
			thresholdBeacon |= data[3] & 0xff;
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	3303      	adds	r3, #3
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	b21a      	sxth	r2, r3
 8004162:	4b3f      	ldr	r3, [pc, #252]	; (8004260 <Principal_Receive_Config+0x940>)
 8004164:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004168:	4313      	orrs	r3, r2
 800416a:	b21a      	sxth	r2, r3
 800416c:	4b3c      	ldr	r3, [pc, #240]	; (8004260 <Principal_Receive_Config+0x940>)
 800416e:	801a      	strh	r2, [r3, #0]
			thresholdRPM	 = data[4] << 8;
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	3304      	adds	r3, #4
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	021b      	lsls	r3, r3, #8
 8004178:	b21a      	sxth	r2, r3
 800417a:	4b3a      	ldr	r3, [pc, #232]	; (8004264 <Principal_Receive_Config+0x944>)
 800417c:	801a      	strh	r2, [r3, #0]
			thresholdRPM	|= data[5] & 0xff;
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	3305      	adds	r3, #5
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	b21a      	sxth	r2, r3
 8004186:	4b37      	ldr	r3, [pc, #220]	; (8004264 <Principal_Receive_Config+0x944>)
 8004188:	f9b3 3000 	ldrsh.w	r3, [r3]
 800418c:	4313      	orrs	r3, r2
 800418e:	b21a      	sxth	r2, r3
 8004190:	4b34      	ldr	r3, [pc, #208]	; (8004264 <Principal_Receive_Config+0x944>)
 8004192:	801a      	strh	r2, [r3, #0]
			thresholdSpeed	 = data[6] << 8;
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	3306      	adds	r3, #6
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	021b      	lsls	r3, r3, #8
 800419c:	b21a      	sxth	r2, r3
 800419e:	4b32      	ldr	r3, [pc, #200]	; (8004268 <Principal_Receive_Config+0x948>)
 80041a0:	801a      	strh	r2, [r3, #0]
			thresholdSpeed	|= data[7] & 0xff;
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	3307      	adds	r3, #7
 80041a6:	781b      	ldrb	r3, [r3, #0]
 80041a8:	b21a      	sxth	r2, r3
 80041aa:	4b2f      	ldr	r3, [pc, #188]	; (8004268 <Principal_Receive_Config+0x948>)
 80041ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	b21a      	sxth	r2, r3
 80041b4:	4b2c      	ldr	r3, [pc, #176]	; (8004268 <Principal_Receive_Config+0x948>)
 80041b6:	801a      	strh	r2, [r3, #0]

			retVal = Save_EEPROM(hi2c);
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 fccf 	bl	8004b5c <Save_EEPROM>
 80041be:	4603      	mov	r3, r0
 80041c0:	75fb      	strb	r3, [r7, #23]
			break;
 80041c2:	e045      	b.n	8004250 <Principal_Receive_Config+0x930>

		case CAN_COMMAND_RTC:
			if(length != 7)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b07      	cmp	r3, #7
 80041c8:	d141      	bne.n	800424e <Principal_Receive_Config+0x92e>
				break;

			rtcDate.Year	= data[1];
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	785a      	ldrb	r2, [r3, #1]
 80041ce:	4b27      	ldr	r3, [pc, #156]	; (800426c <Principal_Receive_Config+0x94c>)
 80041d0:	70da      	strb	r2, [r3, #3]
			rtcDate.Month	= data[2];
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	789a      	ldrb	r2, [r3, #2]
 80041d6:	4b25      	ldr	r3, [pc, #148]	; (800426c <Principal_Receive_Config+0x94c>)
 80041d8:	705a      	strb	r2, [r3, #1]
			rtcDate.Date	= data[3];
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	78da      	ldrb	r2, [r3, #3]
 80041de:	4b23      	ldr	r3, [pc, #140]	; (800426c <Principal_Receive_Config+0x94c>)
 80041e0:	709a      	strb	r2, [r3, #2]
			rtcTime.Hours	= data[4];
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	791a      	ldrb	r2, [r3, #4]
 80041e6:	4b22      	ldr	r3, [pc, #136]	; (8004270 <Principal_Receive_Config+0x950>)
 80041e8:	701a      	strb	r2, [r3, #0]
			rtcTime.Minutes = data[5];
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	795a      	ldrb	r2, [r3, #5]
 80041ee:	4b20      	ldr	r3, [pc, #128]	; (8004270 <Principal_Receive_Config+0x950>)
 80041f0:	705a      	strb	r2, [r3, #1]
			rtcTime.Seconds = data[6];
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	799a      	ldrb	r2, [r3, #6]
 80041f6:	4b1e      	ldr	r3, [pc, #120]	; (8004270 <Principal_Receive_Config+0x950>)
 80041f8:	709a      	strb	r2, [r3, #2]

			if((HAL_RTC_SetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN) == HAL_OK)
 80041fa:	2200      	movs	r2, #0
 80041fc:	491b      	ldr	r1, [pc, #108]	; (800426c <Principal_Receive_Config+0x94c>)
 80041fe:	481d      	ldr	r0, [pc, #116]	; (8004274 <Principal_Receive_Config+0x954>)
 8004200:	f008 fbac 	bl	800c95c <HAL_RTC_SetDate>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d113      	bne.n	8004232 <Principal_Receive_Config+0x912>
				&& (HAL_RTC_SetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN) == HAL_OK))
 800420a:	2200      	movs	r2, #0
 800420c:	4918      	ldr	r1, [pc, #96]	; (8004270 <Principal_Receive_Config+0x950>)
 800420e:	4819      	ldr	r0, [pc, #100]	; (8004274 <Principal_Receive_Config+0x954>)
 8004210:	f008 faac 	bl	800c76c <HAL_RTC_SetTime>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10b      	bne.n	8004232 <Principal_Receive_Config+0x912>
			{
				HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_STORE_DATA);
 800421a:	f24e 325c 	movw	r2, #58204	; 0xe35c
 800421e:	2101      	movs	r1, #1
 8004220:	4814      	ldr	r0, [pc, #80]	; (8004274 <Principal_Receive_Config+0x954>)
 8004222:	f008 fd2b 	bl	800cc7c <HAL_RTCEx_BKUPWrite>
				flagRTC = RTC_OK;
 8004226:	4b14      	ldr	r3, [pc, #80]	; (8004278 <Principal_Receive_Config+0x958>)
 8004228:	2200      	movs	r2, #0
 800422a:	701a      	strb	r2, [r3, #0]
				retVal = HAL_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	75fb      	strb	r3, [r7, #23]
			}
			else
				retVal = HAL_ERROR;

			break;
 8004230:	e00e      	b.n	8004250 <Principal_Receive_Config+0x930>
				retVal = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	75fb      	strb	r3, [r7, #23]
			break;
 8004236:	e00b      	b.n	8004250 <Principal_Receive_Config+0x930>

		case CAN_COMMAND_FMT:
			if(length != 1)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b01      	cmp	r3, #1
				break;

			break;
 800423c:	e008      	b.n	8004250 <Principal_Receive_Config+0x930>

		default:
			break;
 800423e:	bf00      	nop
 8004240:	e006      	b.n	8004250 <Principal_Receive_Config+0x930>
				break;
 8004242:	bf00      	nop
 8004244:	e004      	b.n	8004250 <Principal_Receive_Config+0x930>
				break;
 8004246:	bf00      	nop
 8004248:	e002      	b.n	8004250 <Principal_Receive_Config+0x930>
				break;
 800424a:	bf00      	nop
 800424c:	e000      	b.n	8004250 <Principal_Receive_Config+0x930>
				break;
 800424e:	bf00      	nop
	}

	return retVal;
 8004250:	7dfb      	ldrb	r3, [r7, #23]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3718      	adds	r7, #24
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	20002644 	.word	0x20002644
 8004260:	2000252e 	.word	0x2000252e
 8004264:	20002530 	.word	0x20002530
 8004268:	20002532 	.word	0x20002532
 800426c:	20002648 	.word	0x20002648
 8004270:	2000264c 	.word	0x2000264c
 8004274:	20000380 	.word	0x20000380
 8004278:	20002643 	.word	0x20002643

0800427c <Principal_Hard_Code_Config>:

__weak void Principal_Hard_Code_Config(){
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
	perMsg[ANALOG_1_4] = MSG_FREQ_100HZ;
 8004280:	4b1f      	ldr	r3, [pc, #124]	; (8004300 <Principal_Hard_Code_Config+0x84>)
 8004282:	220a      	movs	r2, #10
 8004284:	801a      	strh	r2, [r3, #0]
	perMsg[ANALOG_5_8] = MSG_FREQ_100HZ;
 8004286:	4b1e      	ldr	r3, [pc, #120]	; (8004300 <Principal_Hard_Code_Config+0x84>)
 8004288:	220a      	movs	r2, #10
 800428a:	805a      	strh	r2, [r3, #2]
	perMsg[ANALOG_9_12] = MSG_DISABLED;
 800428c:	4b1c      	ldr	r3, [pc, #112]	; (8004300 <Principal_Hard_Code_Config+0x84>)
 800428e:	2200      	movs	r2, #0
 8004290:	809a      	strh	r2, [r3, #4]
	perMsg[RTC_MSG] = MSG_FREQ_2HZ;
 8004292:	4b1b      	ldr	r3, [pc, #108]	; (8004300 <Principal_Hard_Code_Config+0x84>)
 8004294:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004298:	80da      	strh	r2, [r3, #6]
	perMsg[VERIFY_MSG] = MSG_FREQ_5HZ;
 800429a:	4b19      	ldr	r3, [pc, #100]	; (8004300 <Principal_Hard_Code_Config+0x84>)
 800429c:	22c8      	movs	r2, #200	; 0xc8
 800429e:	811a      	strh	r2, [r3, #8]
	perMsg[BEACON_MSG] = MSG_FREQ_10HZ;
 80042a0:	4b17      	ldr	r3, [pc, #92]	; (8004300 <Principal_Hard_Code_Config+0x84>)
 80042a2:	2264      	movs	r2, #100	; 0x64
 80042a4:	815a      	strh	r2, [r3, #10]
	perMsg[ECU_SAVE] = MSG_FREQ_100HZ;
 80042a6:	4b16      	ldr	r3, [pc, #88]	; (8004300 <Principal_Hard_Code_Config+0x84>)
 80042a8:	220a      	movs	r2, #10
 80042aa:	819a      	strh	r2, [r3, #12]
	perMsg[PDM_SAVE] = MSG_FREQ_100HZ;
 80042ac:	4b14      	ldr	r3, [pc, #80]	; (8004300 <Principal_Hard_Code_Config+0x84>)
 80042ae:	220a      	movs	r2, #10
 80042b0:	81da      	strh	r2, [r3, #14]

	perCAN[ANALOG_1_4] = MSG_FREQ_10HZ;
 80042b2:	4b14      	ldr	r3, [pc, #80]	; (8004304 <Principal_Hard_Code_Config+0x88>)
 80042b4:	2264      	movs	r2, #100	; 0x64
 80042b6:	801a      	strh	r2, [r3, #0]
	perCAN[ANALOG_5_8] = MSG_FREQ_10HZ;
 80042b8:	4b12      	ldr	r3, [pc, #72]	; (8004304 <Principal_Hard_Code_Config+0x88>)
 80042ba:	2264      	movs	r2, #100	; 0x64
 80042bc:	805a      	strh	r2, [r3, #2]
	perCAN[ANALOG_9_12] = MSG_DISABLED;
 80042be:	4b11      	ldr	r3, [pc, #68]	; (8004304 <Principal_Hard_Code_Config+0x88>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	809a      	strh	r2, [r3, #4]
	perCAN[RTC_MSG] = MSG_FREQ_2HZ;
 80042c4:	4b0f      	ldr	r3, [pc, #60]	; (8004304 <Principal_Hard_Code_Config+0x88>)
 80042c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80042ca:	80da      	strh	r2, [r3, #6]
	perCAN[VERIFY_MSG] = MSG_FREQ_5HZ;
 80042cc:	4b0d      	ldr	r3, [pc, #52]	; (8004304 <Principal_Hard_Code_Config+0x88>)
 80042ce:	22c8      	movs	r2, #200	; 0xc8
 80042d0:	811a      	strh	r2, [r3, #8]
	perCAN[BEACON_MSG] = MSG_FREQ_5HZ;
 80042d2:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <Principal_Hard_Code_Config+0x88>)
 80042d4:	22c8      	movs	r2, #200	; 0xc8
 80042d6:	815a      	strh	r2, [r3, #10]

	inputConfig = INPUT_BEACON_PIN_1 | INPUT_DATALOGGER_PIN_0 | INPUT_BEACON_FALLING_EDGE | INPUT_DATALOGGER_FALLING_EDGE;
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <Principal_Hard_Code_Config+0x8c>)
 80042da:	2201      	movs	r2, #1
 80042dc:	701a      	strb	r2, [r3, #0]

	thresholdBeacon = 1000;
 80042de:	4b0b      	ldr	r3, [pc, #44]	; (800430c <Principal_Hard_Code_Config+0x90>)
 80042e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042e4:	801a      	strh	r2, [r3, #0]
	thresholdRPM = 2000;
 80042e6:	4b0a      	ldr	r3, [pc, #40]	; (8004310 <Principal_Hard_Code_Config+0x94>)
 80042e8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80042ec:	801a      	strh	r2, [r3, #0]
	thresholdSpeed = 1;
 80042ee:	4b09      	ldr	r3, [pc, #36]	; (8004314 <Principal_Hard_Code_Config+0x98>)
 80042f0:	2201      	movs	r2, #1
 80042f2:	801a      	strh	r2, [r3, #0]

	Save_EEPROM(&hi2c1);
 80042f4:	4808      	ldr	r0, [pc, #32]	; (8004318 <Principal_Hard_Code_Config+0x9c>)
 80042f6:	f000 fc31 	bl	8004b5c <Save_EEPROM>
}
 80042fa:	bf00      	nop
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	2000266c 	.word	0x2000266c
 8004304:	20002660 	.word	0x20002660
 8004308:	20002644 	.word	0x20002644
 800430c:	2000252e 	.word	0x2000252e
 8004310:	20002530 	.word	0x20002530
 8004314:	20002532 	.word	0x20002532
 8004318:	2000032c 	.word	0x2000032c

0800431c <Load_EEPROM>:

static HAL_StatusTypeDef Load_EEPROM(I2C_HandleTypeDef* hi2c)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08a      	sub	sp, #40	; 0x28
 8004320:	af02      	add	r7, sp, #8
 8004322:	6078      	str	r0, [r7, #4]
	uint8_t buffer[EEPROM_BUFFER_SIZE_READ];
	HAL_StatusTypeDef retVal = HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	77fb      	strb	r3, [r7, #31]

	HAL_I2C_Master_Transmit(hi2c, EEPROM_ADDRESS_WRITE, 0x00, 1, EEPROM_TIMEOUT_WRITE);
 8004328:	230a      	movs	r3, #10
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	2301      	movs	r3, #1
 800432e:	2200      	movs	r2, #0
 8004330:	21a0      	movs	r1, #160	; 0xa0
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f004 ff0e 	bl	8009154 <HAL_I2C_Master_Transmit>

	retVal = HAL_I2C_Master_Receive(hi2c, EEPROM_ADDRESS_READ, buffer, EEPROM_BUFFER_SIZE_READ, EEPROM_TIMEOUT_READ);
 8004338:	f107 020c 	add.w	r2, r7, #12
 800433c:	2305      	movs	r3, #5
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	2313      	movs	r3, #19
 8004342:	21a1      	movs	r1, #161	; 0xa1
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f005 f803 	bl	8009350 <HAL_I2C_Master_Receive>
 800434a:	4603      	mov	r3, r0
 800434c:	77fb      	strb	r3, [r7, #31]

	if(retVal != HAL_OK)
 800434e:	7ffb      	ldrb	r3, [r7, #31]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d001      	beq.n	8004358 <Load_EEPROM+0x3c>
		return retVal;
 8004354:	7ffb      	ldrb	r3, [r7, #31]
 8004356:	e3f3      	b.n	8004b40 <Load_EEPROM+0x824>

	__BUFFER_TO_FREQ(buffer[0], perMsg[ANALOG_1_4]);
 8004358:	7b3b      	ldrb	r3, [r7, #12]
 800435a:	3b01      	subs	r3, #1
 800435c:	2b0a      	cmp	r3, #10
 800435e:	d847      	bhi.n	80043f0 <Load_EEPROM+0xd4>
 8004360:	a201      	add	r2, pc, #4	; (adr r2, 8004368 <Load_EEPROM+0x4c>)
 8004362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004366:	bf00      	nop
 8004368:	08004395 	.word	0x08004395
 800436c:	0800439f 	.word	0x0800439f
 8004370:	080043a9 	.word	0x080043a9
 8004374:	080043b1 	.word	0x080043b1
 8004378:	080043b9 	.word	0x080043b9
 800437c:	080043c1 	.word	0x080043c1
 8004380:	080043c9 	.word	0x080043c9
 8004384:	080043d1 	.word	0x080043d1
 8004388:	080043d9 	.word	0x080043d9
 800438c:	080043e1 	.word	0x080043e1
 8004390:	080043e9 	.word	0x080043e9
 8004394:	4ba8      	ldr	r3, [pc, #672]	; (8004638 <Load_EEPROM+0x31c>)
 8004396:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800439a:	801a      	strh	r2, [r3, #0]
 800439c:	e02b      	b.n	80043f6 <Load_EEPROM+0xda>
 800439e:	4ba6      	ldr	r3, [pc, #664]	; (8004638 <Load_EEPROM+0x31c>)
 80043a0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80043a4:	801a      	strh	r2, [r3, #0]
 80043a6:	e026      	b.n	80043f6 <Load_EEPROM+0xda>
 80043a8:	4ba3      	ldr	r3, [pc, #652]	; (8004638 <Load_EEPROM+0x31c>)
 80043aa:	22c8      	movs	r2, #200	; 0xc8
 80043ac:	801a      	strh	r2, [r3, #0]
 80043ae:	e022      	b.n	80043f6 <Load_EEPROM+0xda>
 80043b0:	4ba1      	ldr	r3, [pc, #644]	; (8004638 <Load_EEPROM+0x31c>)
 80043b2:	2264      	movs	r2, #100	; 0x64
 80043b4:	801a      	strh	r2, [r3, #0]
 80043b6:	e01e      	b.n	80043f6 <Load_EEPROM+0xda>
 80043b8:	4b9f      	ldr	r3, [pc, #636]	; (8004638 <Load_EEPROM+0x31c>)
 80043ba:	2232      	movs	r2, #50	; 0x32
 80043bc:	801a      	strh	r2, [r3, #0]
 80043be:	e01a      	b.n	80043f6 <Load_EEPROM+0xda>
 80043c0:	4b9d      	ldr	r3, [pc, #628]	; (8004638 <Load_EEPROM+0x31c>)
 80043c2:	2228      	movs	r2, #40	; 0x28
 80043c4:	801a      	strh	r2, [r3, #0]
 80043c6:	e016      	b.n	80043f6 <Load_EEPROM+0xda>
 80043c8:	4b9b      	ldr	r3, [pc, #620]	; (8004638 <Load_EEPROM+0x31c>)
 80043ca:	2214      	movs	r2, #20
 80043cc:	801a      	strh	r2, [r3, #0]
 80043ce:	e012      	b.n	80043f6 <Load_EEPROM+0xda>
 80043d0:	4b99      	ldr	r3, [pc, #612]	; (8004638 <Load_EEPROM+0x31c>)
 80043d2:	220a      	movs	r2, #10
 80043d4:	801a      	strh	r2, [r3, #0]
 80043d6:	e00e      	b.n	80043f6 <Load_EEPROM+0xda>
 80043d8:	4b97      	ldr	r3, [pc, #604]	; (8004638 <Load_EEPROM+0x31c>)
 80043da:	2205      	movs	r2, #5
 80043dc:	801a      	strh	r2, [r3, #0]
 80043de:	e00a      	b.n	80043f6 <Load_EEPROM+0xda>
 80043e0:	4b95      	ldr	r3, [pc, #596]	; (8004638 <Load_EEPROM+0x31c>)
 80043e2:	2204      	movs	r2, #4
 80043e4:	801a      	strh	r2, [r3, #0]
 80043e6:	e006      	b.n	80043f6 <Load_EEPROM+0xda>
 80043e8:	4b93      	ldr	r3, [pc, #588]	; (8004638 <Load_EEPROM+0x31c>)
 80043ea:	2202      	movs	r2, #2
 80043ec:	801a      	strh	r2, [r3, #0]
 80043ee:	e002      	b.n	80043f6 <Load_EEPROM+0xda>
 80043f0:	4b91      	ldr	r3, [pc, #580]	; (8004638 <Load_EEPROM+0x31c>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	801a      	strh	r2, [r3, #0]
 80043f6:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[1], perMsg[ANALOG_5_8]);
 80043f8:	7b7b      	ldrb	r3, [r7, #13]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	2b0a      	cmp	r3, #10
 80043fe:	d847      	bhi.n	8004490 <Load_EEPROM+0x174>
 8004400:	a201      	add	r2, pc, #4	; (adr r2, 8004408 <Load_EEPROM+0xec>)
 8004402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004406:	bf00      	nop
 8004408:	08004435 	.word	0x08004435
 800440c:	0800443f 	.word	0x0800443f
 8004410:	08004449 	.word	0x08004449
 8004414:	08004451 	.word	0x08004451
 8004418:	08004459 	.word	0x08004459
 800441c:	08004461 	.word	0x08004461
 8004420:	08004469 	.word	0x08004469
 8004424:	08004471 	.word	0x08004471
 8004428:	08004479 	.word	0x08004479
 800442c:	08004481 	.word	0x08004481
 8004430:	08004489 	.word	0x08004489
 8004434:	4b80      	ldr	r3, [pc, #512]	; (8004638 <Load_EEPROM+0x31c>)
 8004436:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800443a:	805a      	strh	r2, [r3, #2]
 800443c:	e02b      	b.n	8004496 <Load_EEPROM+0x17a>
 800443e:	4b7e      	ldr	r3, [pc, #504]	; (8004638 <Load_EEPROM+0x31c>)
 8004440:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004444:	805a      	strh	r2, [r3, #2]
 8004446:	e026      	b.n	8004496 <Load_EEPROM+0x17a>
 8004448:	4b7b      	ldr	r3, [pc, #492]	; (8004638 <Load_EEPROM+0x31c>)
 800444a:	22c8      	movs	r2, #200	; 0xc8
 800444c:	805a      	strh	r2, [r3, #2]
 800444e:	e022      	b.n	8004496 <Load_EEPROM+0x17a>
 8004450:	4b79      	ldr	r3, [pc, #484]	; (8004638 <Load_EEPROM+0x31c>)
 8004452:	2264      	movs	r2, #100	; 0x64
 8004454:	805a      	strh	r2, [r3, #2]
 8004456:	e01e      	b.n	8004496 <Load_EEPROM+0x17a>
 8004458:	4b77      	ldr	r3, [pc, #476]	; (8004638 <Load_EEPROM+0x31c>)
 800445a:	2232      	movs	r2, #50	; 0x32
 800445c:	805a      	strh	r2, [r3, #2]
 800445e:	e01a      	b.n	8004496 <Load_EEPROM+0x17a>
 8004460:	4b75      	ldr	r3, [pc, #468]	; (8004638 <Load_EEPROM+0x31c>)
 8004462:	2228      	movs	r2, #40	; 0x28
 8004464:	805a      	strh	r2, [r3, #2]
 8004466:	e016      	b.n	8004496 <Load_EEPROM+0x17a>
 8004468:	4b73      	ldr	r3, [pc, #460]	; (8004638 <Load_EEPROM+0x31c>)
 800446a:	2214      	movs	r2, #20
 800446c:	805a      	strh	r2, [r3, #2]
 800446e:	e012      	b.n	8004496 <Load_EEPROM+0x17a>
 8004470:	4b71      	ldr	r3, [pc, #452]	; (8004638 <Load_EEPROM+0x31c>)
 8004472:	220a      	movs	r2, #10
 8004474:	805a      	strh	r2, [r3, #2]
 8004476:	e00e      	b.n	8004496 <Load_EEPROM+0x17a>
 8004478:	4b6f      	ldr	r3, [pc, #444]	; (8004638 <Load_EEPROM+0x31c>)
 800447a:	2205      	movs	r2, #5
 800447c:	805a      	strh	r2, [r3, #2]
 800447e:	e00a      	b.n	8004496 <Load_EEPROM+0x17a>
 8004480:	4b6d      	ldr	r3, [pc, #436]	; (8004638 <Load_EEPROM+0x31c>)
 8004482:	2204      	movs	r2, #4
 8004484:	805a      	strh	r2, [r3, #2]
 8004486:	e006      	b.n	8004496 <Load_EEPROM+0x17a>
 8004488:	4b6b      	ldr	r3, [pc, #428]	; (8004638 <Load_EEPROM+0x31c>)
 800448a:	2202      	movs	r2, #2
 800448c:	805a      	strh	r2, [r3, #2]
 800448e:	e002      	b.n	8004496 <Load_EEPROM+0x17a>
 8004490:	4b69      	ldr	r3, [pc, #420]	; (8004638 <Load_EEPROM+0x31c>)
 8004492:	2200      	movs	r2, #0
 8004494:	805a      	strh	r2, [r3, #2]
 8004496:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[2], perMsg[ANALOG_9_12]);
 8004498:	7bbb      	ldrb	r3, [r7, #14]
 800449a:	3b01      	subs	r3, #1
 800449c:	2b0a      	cmp	r3, #10
 800449e:	d847      	bhi.n	8004530 <Load_EEPROM+0x214>
 80044a0:	a201      	add	r2, pc, #4	; (adr r2, 80044a8 <Load_EEPROM+0x18c>)
 80044a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a6:	bf00      	nop
 80044a8:	080044d5 	.word	0x080044d5
 80044ac:	080044df 	.word	0x080044df
 80044b0:	080044e9 	.word	0x080044e9
 80044b4:	080044f1 	.word	0x080044f1
 80044b8:	080044f9 	.word	0x080044f9
 80044bc:	08004501 	.word	0x08004501
 80044c0:	08004509 	.word	0x08004509
 80044c4:	08004511 	.word	0x08004511
 80044c8:	08004519 	.word	0x08004519
 80044cc:	08004521 	.word	0x08004521
 80044d0:	08004529 	.word	0x08004529
 80044d4:	4b58      	ldr	r3, [pc, #352]	; (8004638 <Load_EEPROM+0x31c>)
 80044d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044da:	809a      	strh	r2, [r3, #4]
 80044dc:	e02b      	b.n	8004536 <Load_EEPROM+0x21a>
 80044de:	4b56      	ldr	r3, [pc, #344]	; (8004638 <Load_EEPROM+0x31c>)
 80044e0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044e4:	809a      	strh	r2, [r3, #4]
 80044e6:	e026      	b.n	8004536 <Load_EEPROM+0x21a>
 80044e8:	4b53      	ldr	r3, [pc, #332]	; (8004638 <Load_EEPROM+0x31c>)
 80044ea:	22c8      	movs	r2, #200	; 0xc8
 80044ec:	809a      	strh	r2, [r3, #4]
 80044ee:	e022      	b.n	8004536 <Load_EEPROM+0x21a>
 80044f0:	4b51      	ldr	r3, [pc, #324]	; (8004638 <Load_EEPROM+0x31c>)
 80044f2:	2264      	movs	r2, #100	; 0x64
 80044f4:	809a      	strh	r2, [r3, #4]
 80044f6:	e01e      	b.n	8004536 <Load_EEPROM+0x21a>
 80044f8:	4b4f      	ldr	r3, [pc, #316]	; (8004638 <Load_EEPROM+0x31c>)
 80044fa:	2232      	movs	r2, #50	; 0x32
 80044fc:	809a      	strh	r2, [r3, #4]
 80044fe:	e01a      	b.n	8004536 <Load_EEPROM+0x21a>
 8004500:	4b4d      	ldr	r3, [pc, #308]	; (8004638 <Load_EEPROM+0x31c>)
 8004502:	2228      	movs	r2, #40	; 0x28
 8004504:	809a      	strh	r2, [r3, #4]
 8004506:	e016      	b.n	8004536 <Load_EEPROM+0x21a>
 8004508:	4b4b      	ldr	r3, [pc, #300]	; (8004638 <Load_EEPROM+0x31c>)
 800450a:	2214      	movs	r2, #20
 800450c:	809a      	strh	r2, [r3, #4]
 800450e:	e012      	b.n	8004536 <Load_EEPROM+0x21a>
 8004510:	4b49      	ldr	r3, [pc, #292]	; (8004638 <Load_EEPROM+0x31c>)
 8004512:	220a      	movs	r2, #10
 8004514:	809a      	strh	r2, [r3, #4]
 8004516:	e00e      	b.n	8004536 <Load_EEPROM+0x21a>
 8004518:	4b47      	ldr	r3, [pc, #284]	; (8004638 <Load_EEPROM+0x31c>)
 800451a:	2205      	movs	r2, #5
 800451c:	809a      	strh	r2, [r3, #4]
 800451e:	e00a      	b.n	8004536 <Load_EEPROM+0x21a>
 8004520:	4b45      	ldr	r3, [pc, #276]	; (8004638 <Load_EEPROM+0x31c>)
 8004522:	2204      	movs	r2, #4
 8004524:	809a      	strh	r2, [r3, #4]
 8004526:	e006      	b.n	8004536 <Load_EEPROM+0x21a>
 8004528:	4b43      	ldr	r3, [pc, #268]	; (8004638 <Load_EEPROM+0x31c>)
 800452a:	2202      	movs	r2, #2
 800452c:	809a      	strh	r2, [r3, #4]
 800452e:	e002      	b.n	8004536 <Load_EEPROM+0x21a>
 8004530:	4b41      	ldr	r3, [pc, #260]	; (8004638 <Load_EEPROM+0x31c>)
 8004532:	2200      	movs	r2, #0
 8004534:	809a      	strh	r2, [r3, #4]
 8004536:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[3], perMsg[RTC_MSG]);
 8004538:	7bfb      	ldrb	r3, [r7, #15]
 800453a:	3b01      	subs	r3, #1
 800453c:	2b0a      	cmp	r3, #10
 800453e:	d847      	bhi.n	80045d0 <Load_EEPROM+0x2b4>
 8004540:	a201      	add	r2, pc, #4	; (adr r2, 8004548 <Load_EEPROM+0x22c>)
 8004542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004546:	bf00      	nop
 8004548:	08004575 	.word	0x08004575
 800454c:	0800457f 	.word	0x0800457f
 8004550:	08004589 	.word	0x08004589
 8004554:	08004591 	.word	0x08004591
 8004558:	08004599 	.word	0x08004599
 800455c:	080045a1 	.word	0x080045a1
 8004560:	080045a9 	.word	0x080045a9
 8004564:	080045b1 	.word	0x080045b1
 8004568:	080045b9 	.word	0x080045b9
 800456c:	080045c1 	.word	0x080045c1
 8004570:	080045c9 	.word	0x080045c9
 8004574:	4b30      	ldr	r3, [pc, #192]	; (8004638 <Load_EEPROM+0x31c>)
 8004576:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800457a:	80da      	strh	r2, [r3, #6]
 800457c:	e02b      	b.n	80045d6 <Load_EEPROM+0x2ba>
 800457e:	4b2e      	ldr	r3, [pc, #184]	; (8004638 <Load_EEPROM+0x31c>)
 8004580:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004584:	80da      	strh	r2, [r3, #6]
 8004586:	e026      	b.n	80045d6 <Load_EEPROM+0x2ba>
 8004588:	4b2b      	ldr	r3, [pc, #172]	; (8004638 <Load_EEPROM+0x31c>)
 800458a:	22c8      	movs	r2, #200	; 0xc8
 800458c:	80da      	strh	r2, [r3, #6]
 800458e:	e022      	b.n	80045d6 <Load_EEPROM+0x2ba>
 8004590:	4b29      	ldr	r3, [pc, #164]	; (8004638 <Load_EEPROM+0x31c>)
 8004592:	2264      	movs	r2, #100	; 0x64
 8004594:	80da      	strh	r2, [r3, #6]
 8004596:	e01e      	b.n	80045d6 <Load_EEPROM+0x2ba>
 8004598:	4b27      	ldr	r3, [pc, #156]	; (8004638 <Load_EEPROM+0x31c>)
 800459a:	2232      	movs	r2, #50	; 0x32
 800459c:	80da      	strh	r2, [r3, #6]
 800459e:	e01a      	b.n	80045d6 <Load_EEPROM+0x2ba>
 80045a0:	4b25      	ldr	r3, [pc, #148]	; (8004638 <Load_EEPROM+0x31c>)
 80045a2:	2228      	movs	r2, #40	; 0x28
 80045a4:	80da      	strh	r2, [r3, #6]
 80045a6:	e016      	b.n	80045d6 <Load_EEPROM+0x2ba>
 80045a8:	4b23      	ldr	r3, [pc, #140]	; (8004638 <Load_EEPROM+0x31c>)
 80045aa:	2214      	movs	r2, #20
 80045ac:	80da      	strh	r2, [r3, #6]
 80045ae:	e012      	b.n	80045d6 <Load_EEPROM+0x2ba>
 80045b0:	4b21      	ldr	r3, [pc, #132]	; (8004638 <Load_EEPROM+0x31c>)
 80045b2:	220a      	movs	r2, #10
 80045b4:	80da      	strh	r2, [r3, #6]
 80045b6:	e00e      	b.n	80045d6 <Load_EEPROM+0x2ba>
 80045b8:	4b1f      	ldr	r3, [pc, #124]	; (8004638 <Load_EEPROM+0x31c>)
 80045ba:	2205      	movs	r2, #5
 80045bc:	80da      	strh	r2, [r3, #6]
 80045be:	e00a      	b.n	80045d6 <Load_EEPROM+0x2ba>
 80045c0:	4b1d      	ldr	r3, [pc, #116]	; (8004638 <Load_EEPROM+0x31c>)
 80045c2:	2204      	movs	r2, #4
 80045c4:	80da      	strh	r2, [r3, #6]
 80045c6:	e006      	b.n	80045d6 <Load_EEPROM+0x2ba>
 80045c8:	4b1b      	ldr	r3, [pc, #108]	; (8004638 <Load_EEPROM+0x31c>)
 80045ca:	2202      	movs	r2, #2
 80045cc:	80da      	strh	r2, [r3, #6]
 80045ce:	e002      	b.n	80045d6 <Load_EEPROM+0x2ba>
 80045d0:	4b19      	ldr	r3, [pc, #100]	; (8004638 <Load_EEPROM+0x31c>)
 80045d2:	2200      	movs	r2, #0
 80045d4:	80da      	strh	r2, [r3, #6]
 80045d6:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[4], perMsg[VERIFY_MSG]);
 80045d8:	7c3b      	ldrb	r3, [r7, #16]
 80045da:	3b01      	subs	r3, #1
 80045dc:	2b0a      	cmp	r3, #10
 80045de:	d849      	bhi.n	8004674 <Load_EEPROM+0x358>
 80045e0:	a201      	add	r2, pc, #4	; (adr r2, 80045e8 <Load_EEPROM+0x2cc>)
 80045e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e6:	bf00      	nop
 80045e8:	08004615 	.word	0x08004615
 80045ec:	0800461f 	.word	0x0800461f
 80045f0:	08004629 	.word	0x08004629
 80045f4:	08004631 	.word	0x08004631
 80045f8:	0800463d 	.word	0x0800463d
 80045fc:	08004645 	.word	0x08004645
 8004600:	0800464d 	.word	0x0800464d
 8004604:	08004655 	.word	0x08004655
 8004608:	0800465d 	.word	0x0800465d
 800460c:	08004665 	.word	0x08004665
 8004610:	0800466d 	.word	0x0800466d
 8004614:	4b08      	ldr	r3, [pc, #32]	; (8004638 <Load_EEPROM+0x31c>)
 8004616:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800461a:	811a      	strh	r2, [r3, #8]
 800461c:	e02d      	b.n	800467a <Load_EEPROM+0x35e>
 800461e:	4b06      	ldr	r3, [pc, #24]	; (8004638 <Load_EEPROM+0x31c>)
 8004620:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004624:	811a      	strh	r2, [r3, #8]
 8004626:	e028      	b.n	800467a <Load_EEPROM+0x35e>
 8004628:	4b03      	ldr	r3, [pc, #12]	; (8004638 <Load_EEPROM+0x31c>)
 800462a:	22c8      	movs	r2, #200	; 0xc8
 800462c:	811a      	strh	r2, [r3, #8]
 800462e:	e024      	b.n	800467a <Load_EEPROM+0x35e>
 8004630:	4b01      	ldr	r3, [pc, #4]	; (8004638 <Load_EEPROM+0x31c>)
 8004632:	2264      	movs	r2, #100	; 0x64
 8004634:	811a      	strh	r2, [r3, #8]
 8004636:	e020      	b.n	800467a <Load_EEPROM+0x35e>
 8004638:	2000266c 	.word	0x2000266c
 800463c:	4ba7      	ldr	r3, [pc, #668]	; (80048dc <Load_EEPROM+0x5c0>)
 800463e:	2232      	movs	r2, #50	; 0x32
 8004640:	811a      	strh	r2, [r3, #8]
 8004642:	e01a      	b.n	800467a <Load_EEPROM+0x35e>
 8004644:	4ba5      	ldr	r3, [pc, #660]	; (80048dc <Load_EEPROM+0x5c0>)
 8004646:	2228      	movs	r2, #40	; 0x28
 8004648:	811a      	strh	r2, [r3, #8]
 800464a:	e016      	b.n	800467a <Load_EEPROM+0x35e>
 800464c:	4ba3      	ldr	r3, [pc, #652]	; (80048dc <Load_EEPROM+0x5c0>)
 800464e:	2214      	movs	r2, #20
 8004650:	811a      	strh	r2, [r3, #8]
 8004652:	e012      	b.n	800467a <Load_EEPROM+0x35e>
 8004654:	4ba1      	ldr	r3, [pc, #644]	; (80048dc <Load_EEPROM+0x5c0>)
 8004656:	220a      	movs	r2, #10
 8004658:	811a      	strh	r2, [r3, #8]
 800465a:	e00e      	b.n	800467a <Load_EEPROM+0x35e>
 800465c:	4b9f      	ldr	r3, [pc, #636]	; (80048dc <Load_EEPROM+0x5c0>)
 800465e:	2205      	movs	r2, #5
 8004660:	811a      	strh	r2, [r3, #8]
 8004662:	e00a      	b.n	800467a <Load_EEPROM+0x35e>
 8004664:	4b9d      	ldr	r3, [pc, #628]	; (80048dc <Load_EEPROM+0x5c0>)
 8004666:	2204      	movs	r2, #4
 8004668:	811a      	strh	r2, [r3, #8]
 800466a:	e006      	b.n	800467a <Load_EEPROM+0x35e>
 800466c:	4b9b      	ldr	r3, [pc, #620]	; (80048dc <Load_EEPROM+0x5c0>)
 800466e:	2202      	movs	r2, #2
 8004670:	811a      	strh	r2, [r3, #8]
 8004672:	e002      	b.n	800467a <Load_EEPROM+0x35e>
 8004674:	4b99      	ldr	r3, [pc, #612]	; (80048dc <Load_EEPROM+0x5c0>)
 8004676:	2200      	movs	r2, #0
 8004678:	811a      	strh	r2, [r3, #8]
 800467a:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[5], perMsg[ECU_SAVE]);
 800467c:	7c7b      	ldrb	r3, [r7, #17]
 800467e:	3b01      	subs	r3, #1
 8004680:	2b0a      	cmp	r3, #10
 8004682:	d847      	bhi.n	8004714 <Load_EEPROM+0x3f8>
 8004684:	a201      	add	r2, pc, #4	; (adr r2, 800468c <Load_EEPROM+0x370>)
 8004686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468a:	bf00      	nop
 800468c:	080046b9 	.word	0x080046b9
 8004690:	080046c3 	.word	0x080046c3
 8004694:	080046cd 	.word	0x080046cd
 8004698:	080046d5 	.word	0x080046d5
 800469c:	080046dd 	.word	0x080046dd
 80046a0:	080046e5 	.word	0x080046e5
 80046a4:	080046ed 	.word	0x080046ed
 80046a8:	080046f5 	.word	0x080046f5
 80046ac:	080046fd 	.word	0x080046fd
 80046b0:	08004705 	.word	0x08004705
 80046b4:	0800470d 	.word	0x0800470d
 80046b8:	4b88      	ldr	r3, [pc, #544]	; (80048dc <Load_EEPROM+0x5c0>)
 80046ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80046be:	819a      	strh	r2, [r3, #12]
 80046c0:	e02b      	b.n	800471a <Load_EEPROM+0x3fe>
 80046c2:	4b86      	ldr	r3, [pc, #536]	; (80048dc <Load_EEPROM+0x5c0>)
 80046c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80046c8:	819a      	strh	r2, [r3, #12]
 80046ca:	e026      	b.n	800471a <Load_EEPROM+0x3fe>
 80046cc:	4b83      	ldr	r3, [pc, #524]	; (80048dc <Load_EEPROM+0x5c0>)
 80046ce:	22c8      	movs	r2, #200	; 0xc8
 80046d0:	819a      	strh	r2, [r3, #12]
 80046d2:	e022      	b.n	800471a <Load_EEPROM+0x3fe>
 80046d4:	4b81      	ldr	r3, [pc, #516]	; (80048dc <Load_EEPROM+0x5c0>)
 80046d6:	2264      	movs	r2, #100	; 0x64
 80046d8:	819a      	strh	r2, [r3, #12]
 80046da:	e01e      	b.n	800471a <Load_EEPROM+0x3fe>
 80046dc:	4b7f      	ldr	r3, [pc, #508]	; (80048dc <Load_EEPROM+0x5c0>)
 80046de:	2232      	movs	r2, #50	; 0x32
 80046e0:	819a      	strh	r2, [r3, #12]
 80046e2:	e01a      	b.n	800471a <Load_EEPROM+0x3fe>
 80046e4:	4b7d      	ldr	r3, [pc, #500]	; (80048dc <Load_EEPROM+0x5c0>)
 80046e6:	2228      	movs	r2, #40	; 0x28
 80046e8:	819a      	strh	r2, [r3, #12]
 80046ea:	e016      	b.n	800471a <Load_EEPROM+0x3fe>
 80046ec:	4b7b      	ldr	r3, [pc, #492]	; (80048dc <Load_EEPROM+0x5c0>)
 80046ee:	2214      	movs	r2, #20
 80046f0:	819a      	strh	r2, [r3, #12]
 80046f2:	e012      	b.n	800471a <Load_EEPROM+0x3fe>
 80046f4:	4b79      	ldr	r3, [pc, #484]	; (80048dc <Load_EEPROM+0x5c0>)
 80046f6:	220a      	movs	r2, #10
 80046f8:	819a      	strh	r2, [r3, #12]
 80046fa:	e00e      	b.n	800471a <Load_EEPROM+0x3fe>
 80046fc:	4b77      	ldr	r3, [pc, #476]	; (80048dc <Load_EEPROM+0x5c0>)
 80046fe:	2205      	movs	r2, #5
 8004700:	819a      	strh	r2, [r3, #12]
 8004702:	e00a      	b.n	800471a <Load_EEPROM+0x3fe>
 8004704:	4b75      	ldr	r3, [pc, #468]	; (80048dc <Load_EEPROM+0x5c0>)
 8004706:	2204      	movs	r2, #4
 8004708:	819a      	strh	r2, [r3, #12]
 800470a:	e006      	b.n	800471a <Load_EEPROM+0x3fe>
 800470c:	4b73      	ldr	r3, [pc, #460]	; (80048dc <Load_EEPROM+0x5c0>)
 800470e:	2202      	movs	r2, #2
 8004710:	819a      	strh	r2, [r3, #12]
 8004712:	e002      	b.n	800471a <Load_EEPROM+0x3fe>
 8004714:	4b71      	ldr	r3, [pc, #452]	; (80048dc <Load_EEPROM+0x5c0>)
 8004716:	2200      	movs	r2, #0
 8004718:	819a      	strh	r2, [r3, #12]
 800471a:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[6], perMsg[PDM_SAVE]);
 800471c:	7cbb      	ldrb	r3, [r7, #18]
 800471e:	3b01      	subs	r3, #1
 8004720:	2b0a      	cmp	r3, #10
 8004722:	d847      	bhi.n	80047b4 <Load_EEPROM+0x498>
 8004724:	a201      	add	r2, pc, #4	; (adr r2, 800472c <Load_EEPROM+0x410>)
 8004726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472a:	bf00      	nop
 800472c:	08004759 	.word	0x08004759
 8004730:	08004763 	.word	0x08004763
 8004734:	0800476d 	.word	0x0800476d
 8004738:	08004775 	.word	0x08004775
 800473c:	0800477d 	.word	0x0800477d
 8004740:	08004785 	.word	0x08004785
 8004744:	0800478d 	.word	0x0800478d
 8004748:	08004795 	.word	0x08004795
 800474c:	0800479d 	.word	0x0800479d
 8004750:	080047a5 	.word	0x080047a5
 8004754:	080047ad 	.word	0x080047ad
 8004758:	4b60      	ldr	r3, [pc, #384]	; (80048dc <Load_EEPROM+0x5c0>)
 800475a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800475e:	81da      	strh	r2, [r3, #14]
 8004760:	e02b      	b.n	80047ba <Load_EEPROM+0x49e>
 8004762:	4b5e      	ldr	r3, [pc, #376]	; (80048dc <Load_EEPROM+0x5c0>)
 8004764:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004768:	81da      	strh	r2, [r3, #14]
 800476a:	e026      	b.n	80047ba <Load_EEPROM+0x49e>
 800476c:	4b5b      	ldr	r3, [pc, #364]	; (80048dc <Load_EEPROM+0x5c0>)
 800476e:	22c8      	movs	r2, #200	; 0xc8
 8004770:	81da      	strh	r2, [r3, #14]
 8004772:	e022      	b.n	80047ba <Load_EEPROM+0x49e>
 8004774:	4b59      	ldr	r3, [pc, #356]	; (80048dc <Load_EEPROM+0x5c0>)
 8004776:	2264      	movs	r2, #100	; 0x64
 8004778:	81da      	strh	r2, [r3, #14]
 800477a:	e01e      	b.n	80047ba <Load_EEPROM+0x49e>
 800477c:	4b57      	ldr	r3, [pc, #348]	; (80048dc <Load_EEPROM+0x5c0>)
 800477e:	2232      	movs	r2, #50	; 0x32
 8004780:	81da      	strh	r2, [r3, #14]
 8004782:	e01a      	b.n	80047ba <Load_EEPROM+0x49e>
 8004784:	4b55      	ldr	r3, [pc, #340]	; (80048dc <Load_EEPROM+0x5c0>)
 8004786:	2228      	movs	r2, #40	; 0x28
 8004788:	81da      	strh	r2, [r3, #14]
 800478a:	e016      	b.n	80047ba <Load_EEPROM+0x49e>
 800478c:	4b53      	ldr	r3, [pc, #332]	; (80048dc <Load_EEPROM+0x5c0>)
 800478e:	2214      	movs	r2, #20
 8004790:	81da      	strh	r2, [r3, #14]
 8004792:	e012      	b.n	80047ba <Load_EEPROM+0x49e>
 8004794:	4b51      	ldr	r3, [pc, #324]	; (80048dc <Load_EEPROM+0x5c0>)
 8004796:	220a      	movs	r2, #10
 8004798:	81da      	strh	r2, [r3, #14]
 800479a:	e00e      	b.n	80047ba <Load_EEPROM+0x49e>
 800479c:	4b4f      	ldr	r3, [pc, #316]	; (80048dc <Load_EEPROM+0x5c0>)
 800479e:	2205      	movs	r2, #5
 80047a0:	81da      	strh	r2, [r3, #14]
 80047a2:	e00a      	b.n	80047ba <Load_EEPROM+0x49e>
 80047a4:	4b4d      	ldr	r3, [pc, #308]	; (80048dc <Load_EEPROM+0x5c0>)
 80047a6:	2204      	movs	r2, #4
 80047a8:	81da      	strh	r2, [r3, #14]
 80047aa:	e006      	b.n	80047ba <Load_EEPROM+0x49e>
 80047ac:	4b4b      	ldr	r3, [pc, #300]	; (80048dc <Load_EEPROM+0x5c0>)
 80047ae:	2202      	movs	r2, #2
 80047b0:	81da      	strh	r2, [r3, #14]
 80047b2:	e002      	b.n	80047ba <Load_EEPROM+0x49e>
 80047b4:	4b49      	ldr	r3, [pc, #292]	; (80048dc <Load_EEPROM+0x5c0>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	81da      	strh	r2, [r3, #14]
 80047ba:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[7], perCAN[ANALOG_1_4]);
 80047bc:	7cfb      	ldrb	r3, [r7, #19]
 80047be:	3b01      	subs	r3, #1
 80047c0:	2b0a      	cmp	r3, #10
 80047c2:	d847      	bhi.n	8004854 <Load_EEPROM+0x538>
 80047c4:	a201      	add	r2, pc, #4	; (adr r2, 80047cc <Load_EEPROM+0x4b0>)
 80047c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ca:	bf00      	nop
 80047cc:	080047f9 	.word	0x080047f9
 80047d0:	08004803 	.word	0x08004803
 80047d4:	0800480d 	.word	0x0800480d
 80047d8:	08004815 	.word	0x08004815
 80047dc:	0800481d 	.word	0x0800481d
 80047e0:	08004825 	.word	0x08004825
 80047e4:	0800482d 	.word	0x0800482d
 80047e8:	08004835 	.word	0x08004835
 80047ec:	0800483d 	.word	0x0800483d
 80047f0:	08004845 	.word	0x08004845
 80047f4:	0800484d 	.word	0x0800484d
 80047f8:	4b39      	ldr	r3, [pc, #228]	; (80048e0 <Load_EEPROM+0x5c4>)
 80047fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047fe:	801a      	strh	r2, [r3, #0]
 8004800:	e02b      	b.n	800485a <Load_EEPROM+0x53e>
 8004802:	4b37      	ldr	r3, [pc, #220]	; (80048e0 <Load_EEPROM+0x5c4>)
 8004804:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004808:	801a      	strh	r2, [r3, #0]
 800480a:	e026      	b.n	800485a <Load_EEPROM+0x53e>
 800480c:	4b34      	ldr	r3, [pc, #208]	; (80048e0 <Load_EEPROM+0x5c4>)
 800480e:	22c8      	movs	r2, #200	; 0xc8
 8004810:	801a      	strh	r2, [r3, #0]
 8004812:	e022      	b.n	800485a <Load_EEPROM+0x53e>
 8004814:	4b32      	ldr	r3, [pc, #200]	; (80048e0 <Load_EEPROM+0x5c4>)
 8004816:	2264      	movs	r2, #100	; 0x64
 8004818:	801a      	strh	r2, [r3, #0]
 800481a:	e01e      	b.n	800485a <Load_EEPROM+0x53e>
 800481c:	4b30      	ldr	r3, [pc, #192]	; (80048e0 <Load_EEPROM+0x5c4>)
 800481e:	2232      	movs	r2, #50	; 0x32
 8004820:	801a      	strh	r2, [r3, #0]
 8004822:	e01a      	b.n	800485a <Load_EEPROM+0x53e>
 8004824:	4b2e      	ldr	r3, [pc, #184]	; (80048e0 <Load_EEPROM+0x5c4>)
 8004826:	2228      	movs	r2, #40	; 0x28
 8004828:	801a      	strh	r2, [r3, #0]
 800482a:	e016      	b.n	800485a <Load_EEPROM+0x53e>
 800482c:	4b2c      	ldr	r3, [pc, #176]	; (80048e0 <Load_EEPROM+0x5c4>)
 800482e:	2214      	movs	r2, #20
 8004830:	801a      	strh	r2, [r3, #0]
 8004832:	e012      	b.n	800485a <Load_EEPROM+0x53e>
 8004834:	4b2a      	ldr	r3, [pc, #168]	; (80048e0 <Load_EEPROM+0x5c4>)
 8004836:	220a      	movs	r2, #10
 8004838:	801a      	strh	r2, [r3, #0]
 800483a:	e00e      	b.n	800485a <Load_EEPROM+0x53e>
 800483c:	4b28      	ldr	r3, [pc, #160]	; (80048e0 <Load_EEPROM+0x5c4>)
 800483e:	2205      	movs	r2, #5
 8004840:	801a      	strh	r2, [r3, #0]
 8004842:	e00a      	b.n	800485a <Load_EEPROM+0x53e>
 8004844:	4b26      	ldr	r3, [pc, #152]	; (80048e0 <Load_EEPROM+0x5c4>)
 8004846:	2204      	movs	r2, #4
 8004848:	801a      	strh	r2, [r3, #0]
 800484a:	e006      	b.n	800485a <Load_EEPROM+0x53e>
 800484c:	4b24      	ldr	r3, [pc, #144]	; (80048e0 <Load_EEPROM+0x5c4>)
 800484e:	2202      	movs	r2, #2
 8004850:	801a      	strh	r2, [r3, #0]
 8004852:	e002      	b.n	800485a <Load_EEPROM+0x53e>
 8004854:	4b22      	ldr	r3, [pc, #136]	; (80048e0 <Load_EEPROM+0x5c4>)
 8004856:	2200      	movs	r2, #0
 8004858:	801a      	strh	r2, [r3, #0]
 800485a:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[8], perCAN[ANALOG_5_8]);
 800485c:	7d3b      	ldrb	r3, [r7, #20]
 800485e:	3b01      	subs	r3, #1
 8004860:	2b0a      	cmp	r3, #10
 8004862:	d84b      	bhi.n	80048fc <Load_EEPROM+0x5e0>
 8004864:	a201      	add	r2, pc, #4	; (adr r2, 800486c <Load_EEPROM+0x550>)
 8004866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486a:	bf00      	nop
 800486c:	08004899 	.word	0x08004899
 8004870:	080048a3 	.word	0x080048a3
 8004874:	080048ad 	.word	0x080048ad
 8004878:	080048b5 	.word	0x080048b5
 800487c:	080048bd 	.word	0x080048bd
 8004880:	080048c5 	.word	0x080048c5
 8004884:	080048cd 	.word	0x080048cd
 8004888:	080048d5 	.word	0x080048d5
 800488c:	080048e5 	.word	0x080048e5
 8004890:	080048ed 	.word	0x080048ed
 8004894:	080048f5 	.word	0x080048f5
 8004898:	4b11      	ldr	r3, [pc, #68]	; (80048e0 <Load_EEPROM+0x5c4>)
 800489a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800489e:	805a      	strh	r2, [r3, #2]
 80048a0:	e02f      	b.n	8004902 <Load_EEPROM+0x5e6>
 80048a2:	4b0f      	ldr	r3, [pc, #60]	; (80048e0 <Load_EEPROM+0x5c4>)
 80048a4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80048a8:	805a      	strh	r2, [r3, #2]
 80048aa:	e02a      	b.n	8004902 <Load_EEPROM+0x5e6>
 80048ac:	4b0c      	ldr	r3, [pc, #48]	; (80048e0 <Load_EEPROM+0x5c4>)
 80048ae:	22c8      	movs	r2, #200	; 0xc8
 80048b0:	805a      	strh	r2, [r3, #2]
 80048b2:	e026      	b.n	8004902 <Load_EEPROM+0x5e6>
 80048b4:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <Load_EEPROM+0x5c4>)
 80048b6:	2264      	movs	r2, #100	; 0x64
 80048b8:	805a      	strh	r2, [r3, #2]
 80048ba:	e022      	b.n	8004902 <Load_EEPROM+0x5e6>
 80048bc:	4b08      	ldr	r3, [pc, #32]	; (80048e0 <Load_EEPROM+0x5c4>)
 80048be:	2232      	movs	r2, #50	; 0x32
 80048c0:	805a      	strh	r2, [r3, #2]
 80048c2:	e01e      	b.n	8004902 <Load_EEPROM+0x5e6>
 80048c4:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <Load_EEPROM+0x5c4>)
 80048c6:	2228      	movs	r2, #40	; 0x28
 80048c8:	805a      	strh	r2, [r3, #2]
 80048ca:	e01a      	b.n	8004902 <Load_EEPROM+0x5e6>
 80048cc:	4b04      	ldr	r3, [pc, #16]	; (80048e0 <Load_EEPROM+0x5c4>)
 80048ce:	2214      	movs	r2, #20
 80048d0:	805a      	strh	r2, [r3, #2]
 80048d2:	e016      	b.n	8004902 <Load_EEPROM+0x5e6>
 80048d4:	4b02      	ldr	r3, [pc, #8]	; (80048e0 <Load_EEPROM+0x5c4>)
 80048d6:	220a      	movs	r2, #10
 80048d8:	805a      	strh	r2, [r3, #2]
 80048da:	e012      	b.n	8004902 <Load_EEPROM+0x5e6>
 80048dc:	2000266c 	.word	0x2000266c
 80048e0:	20002660 	.word	0x20002660
 80048e4:	4b98      	ldr	r3, [pc, #608]	; (8004b48 <Load_EEPROM+0x82c>)
 80048e6:	2205      	movs	r2, #5
 80048e8:	805a      	strh	r2, [r3, #2]
 80048ea:	e00a      	b.n	8004902 <Load_EEPROM+0x5e6>
 80048ec:	4b96      	ldr	r3, [pc, #600]	; (8004b48 <Load_EEPROM+0x82c>)
 80048ee:	2204      	movs	r2, #4
 80048f0:	805a      	strh	r2, [r3, #2]
 80048f2:	e006      	b.n	8004902 <Load_EEPROM+0x5e6>
 80048f4:	4b94      	ldr	r3, [pc, #592]	; (8004b48 <Load_EEPROM+0x82c>)
 80048f6:	2202      	movs	r2, #2
 80048f8:	805a      	strh	r2, [r3, #2]
 80048fa:	e002      	b.n	8004902 <Load_EEPROM+0x5e6>
 80048fc:	4b92      	ldr	r3, [pc, #584]	; (8004b48 <Load_EEPROM+0x82c>)
 80048fe:	2200      	movs	r2, #0
 8004900:	805a      	strh	r2, [r3, #2]
 8004902:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[9], perCAN[ANALOG_9_12]);
 8004904:	7d7b      	ldrb	r3, [r7, #21]
 8004906:	3b01      	subs	r3, #1
 8004908:	2b0a      	cmp	r3, #10
 800490a:	d847      	bhi.n	800499c <Load_EEPROM+0x680>
 800490c:	a201      	add	r2, pc, #4	; (adr r2, 8004914 <Load_EEPROM+0x5f8>)
 800490e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004912:	bf00      	nop
 8004914:	08004941 	.word	0x08004941
 8004918:	0800494b 	.word	0x0800494b
 800491c:	08004955 	.word	0x08004955
 8004920:	0800495d 	.word	0x0800495d
 8004924:	08004965 	.word	0x08004965
 8004928:	0800496d 	.word	0x0800496d
 800492c:	08004975 	.word	0x08004975
 8004930:	0800497d 	.word	0x0800497d
 8004934:	08004985 	.word	0x08004985
 8004938:	0800498d 	.word	0x0800498d
 800493c:	08004995 	.word	0x08004995
 8004940:	4b81      	ldr	r3, [pc, #516]	; (8004b48 <Load_EEPROM+0x82c>)
 8004942:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004946:	809a      	strh	r2, [r3, #4]
 8004948:	e02b      	b.n	80049a2 <Load_EEPROM+0x686>
 800494a:	4b7f      	ldr	r3, [pc, #508]	; (8004b48 <Load_EEPROM+0x82c>)
 800494c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004950:	809a      	strh	r2, [r3, #4]
 8004952:	e026      	b.n	80049a2 <Load_EEPROM+0x686>
 8004954:	4b7c      	ldr	r3, [pc, #496]	; (8004b48 <Load_EEPROM+0x82c>)
 8004956:	22c8      	movs	r2, #200	; 0xc8
 8004958:	809a      	strh	r2, [r3, #4]
 800495a:	e022      	b.n	80049a2 <Load_EEPROM+0x686>
 800495c:	4b7a      	ldr	r3, [pc, #488]	; (8004b48 <Load_EEPROM+0x82c>)
 800495e:	2264      	movs	r2, #100	; 0x64
 8004960:	809a      	strh	r2, [r3, #4]
 8004962:	e01e      	b.n	80049a2 <Load_EEPROM+0x686>
 8004964:	4b78      	ldr	r3, [pc, #480]	; (8004b48 <Load_EEPROM+0x82c>)
 8004966:	2232      	movs	r2, #50	; 0x32
 8004968:	809a      	strh	r2, [r3, #4]
 800496a:	e01a      	b.n	80049a2 <Load_EEPROM+0x686>
 800496c:	4b76      	ldr	r3, [pc, #472]	; (8004b48 <Load_EEPROM+0x82c>)
 800496e:	2228      	movs	r2, #40	; 0x28
 8004970:	809a      	strh	r2, [r3, #4]
 8004972:	e016      	b.n	80049a2 <Load_EEPROM+0x686>
 8004974:	4b74      	ldr	r3, [pc, #464]	; (8004b48 <Load_EEPROM+0x82c>)
 8004976:	2214      	movs	r2, #20
 8004978:	809a      	strh	r2, [r3, #4]
 800497a:	e012      	b.n	80049a2 <Load_EEPROM+0x686>
 800497c:	4b72      	ldr	r3, [pc, #456]	; (8004b48 <Load_EEPROM+0x82c>)
 800497e:	220a      	movs	r2, #10
 8004980:	809a      	strh	r2, [r3, #4]
 8004982:	e00e      	b.n	80049a2 <Load_EEPROM+0x686>
 8004984:	4b70      	ldr	r3, [pc, #448]	; (8004b48 <Load_EEPROM+0x82c>)
 8004986:	2205      	movs	r2, #5
 8004988:	809a      	strh	r2, [r3, #4]
 800498a:	e00a      	b.n	80049a2 <Load_EEPROM+0x686>
 800498c:	4b6e      	ldr	r3, [pc, #440]	; (8004b48 <Load_EEPROM+0x82c>)
 800498e:	2204      	movs	r2, #4
 8004990:	809a      	strh	r2, [r3, #4]
 8004992:	e006      	b.n	80049a2 <Load_EEPROM+0x686>
 8004994:	4b6c      	ldr	r3, [pc, #432]	; (8004b48 <Load_EEPROM+0x82c>)
 8004996:	2202      	movs	r2, #2
 8004998:	809a      	strh	r2, [r3, #4]
 800499a:	e002      	b.n	80049a2 <Load_EEPROM+0x686>
 800499c:	4b6a      	ldr	r3, [pc, #424]	; (8004b48 <Load_EEPROM+0x82c>)
 800499e:	2200      	movs	r2, #0
 80049a0:	809a      	strh	r2, [r3, #4]
 80049a2:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[10], perCAN[RTC_MSG]);
 80049a4:	7dbb      	ldrb	r3, [r7, #22]
 80049a6:	3b01      	subs	r3, #1
 80049a8:	2b0a      	cmp	r3, #10
 80049aa:	d847      	bhi.n	8004a3c <Load_EEPROM+0x720>
 80049ac:	a201      	add	r2, pc, #4	; (adr r2, 80049b4 <Load_EEPROM+0x698>)
 80049ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b2:	bf00      	nop
 80049b4:	080049e1 	.word	0x080049e1
 80049b8:	080049eb 	.word	0x080049eb
 80049bc:	080049f5 	.word	0x080049f5
 80049c0:	080049fd 	.word	0x080049fd
 80049c4:	08004a05 	.word	0x08004a05
 80049c8:	08004a0d 	.word	0x08004a0d
 80049cc:	08004a15 	.word	0x08004a15
 80049d0:	08004a1d 	.word	0x08004a1d
 80049d4:	08004a25 	.word	0x08004a25
 80049d8:	08004a2d 	.word	0x08004a2d
 80049dc:	08004a35 	.word	0x08004a35
 80049e0:	4b59      	ldr	r3, [pc, #356]	; (8004b48 <Load_EEPROM+0x82c>)
 80049e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049e6:	80da      	strh	r2, [r3, #6]
 80049e8:	e02b      	b.n	8004a42 <Load_EEPROM+0x726>
 80049ea:	4b57      	ldr	r3, [pc, #348]	; (8004b48 <Load_EEPROM+0x82c>)
 80049ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80049f0:	80da      	strh	r2, [r3, #6]
 80049f2:	e026      	b.n	8004a42 <Load_EEPROM+0x726>
 80049f4:	4b54      	ldr	r3, [pc, #336]	; (8004b48 <Load_EEPROM+0x82c>)
 80049f6:	22c8      	movs	r2, #200	; 0xc8
 80049f8:	80da      	strh	r2, [r3, #6]
 80049fa:	e022      	b.n	8004a42 <Load_EEPROM+0x726>
 80049fc:	4b52      	ldr	r3, [pc, #328]	; (8004b48 <Load_EEPROM+0x82c>)
 80049fe:	2264      	movs	r2, #100	; 0x64
 8004a00:	80da      	strh	r2, [r3, #6]
 8004a02:	e01e      	b.n	8004a42 <Load_EEPROM+0x726>
 8004a04:	4b50      	ldr	r3, [pc, #320]	; (8004b48 <Load_EEPROM+0x82c>)
 8004a06:	2232      	movs	r2, #50	; 0x32
 8004a08:	80da      	strh	r2, [r3, #6]
 8004a0a:	e01a      	b.n	8004a42 <Load_EEPROM+0x726>
 8004a0c:	4b4e      	ldr	r3, [pc, #312]	; (8004b48 <Load_EEPROM+0x82c>)
 8004a0e:	2228      	movs	r2, #40	; 0x28
 8004a10:	80da      	strh	r2, [r3, #6]
 8004a12:	e016      	b.n	8004a42 <Load_EEPROM+0x726>
 8004a14:	4b4c      	ldr	r3, [pc, #304]	; (8004b48 <Load_EEPROM+0x82c>)
 8004a16:	2214      	movs	r2, #20
 8004a18:	80da      	strh	r2, [r3, #6]
 8004a1a:	e012      	b.n	8004a42 <Load_EEPROM+0x726>
 8004a1c:	4b4a      	ldr	r3, [pc, #296]	; (8004b48 <Load_EEPROM+0x82c>)
 8004a1e:	220a      	movs	r2, #10
 8004a20:	80da      	strh	r2, [r3, #6]
 8004a22:	e00e      	b.n	8004a42 <Load_EEPROM+0x726>
 8004a24:	4b48      	ldr	r3, [pc, #288]	; (8004b48 <Load_EEPROM+0x82c>)
 8004a26:	2205      	movs	r2, #5
 8004a28:	80da      	strh	r2, [r3, #6]
 8004a2a:	e00a      	b.n	8004a42 <Load_EEPROM+0x726>
 8004a2c:	4b46      	ldr	r3, [pc, #280]	; (8004b48 <Load_EEPROM+0x82c>)
 8004a2e:	2204      	movs	r2, #4
 8004a30:	80da      	strh	r2, [r3, #6]
 8004a32:	e006      	b.n	8004a42 <Load_EEPROM+0x726>
 8004a34:	4b44      	ldr	r3, [pc, #272]	; (8004b48 <Load_EEPROM+0x82c>)
 8004a36:	2202      	movs	r2, #2
 8004a38:	80da      	strh	r2, [r3, #6]
 8004a3a:	e002      	b.n	8004a42 <Load_EEPROM+0x726>
 8004a3c:	4b42      	ldr	r3, [pc, #264]	; (8004b48 <Load_EEPROM+0x82c>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	80da      	strh	r2, [r3, #6]
 8004a42:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[11], perCAN[VERIFY_MSG]);
 8004a44:	7dfb      	ldrb	r3, [r7, #23]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	2b0a      	cmp	r3, #10
 8004a4a:	d847      	bhi.n	8004adc <Load_EEPROM+0x7c0>
 8004a4c:	a201      	add	r2, pc, #4	; (adr r2, 8004a54 <Load_EEPROM+0x738>)
 8004a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a52:	bf00      	nop
 8004a54:	08004a81 	.word	0x08004a81
 8004a58:	08004a8b 	.word	0x08004a8b
 8004a5c:	08004a95 	.word	0x08004a95
 8004a60:	08004a9d 	.word	0x08004a9d
 8004a64:	08004aa5 	.word	0x08004aa5
 8004a68:	08004aad 	.word	0x08004aad
 8004a6c:	08004ab5 	.word	0x08004ab5
 8004a70:	08004abd 	.word	0x08004abd
 8004a74:	08004ac5 	.word	0x08004ac5
 8004a78:	08004acd 	.word	0x08004acd
 8004a7c:	08004ad5 	.word	0x08004ad5
 8004a80:	4b31      	ldr	r3, [pc, #196]	; (8004b48 <Load_EEPROM+0x82c>)
 8004a82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a86:	811a      	strh	r2, [r3, #8]
 8004a88:	e02b      	b.n	8004ae2 <Load_EEPROM+0x7c6>
 8004a8a:	4b2f      	ldr	r3, [pc, #188]	; (8004b48 <Load_EEPROM+0x82c>)
 8004a8c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004a90:	811a      	strh	r2, [r3, #8]
 8004a92:	e026      	b.n	8004ae2 <Load_EEPROM+0x7c6>
 8004a94:	4b2c      	ldr	r3, [pc, #176]	; (8004b48 <Load_EEPROM+0x82c>)
 8004a96:	22c8      	movs	r2, #200	; 0xc8
 8004a98:	811a      	strh	r2, [r3, #8]
 8004a9a:	e022      	b.n	8004ae2 <Load_EEPROM+0x7c6>
 8004a9c:	4b2a      	ldr	r3, [pc, #168]	; (8004b48 <Load_EEPROM+0x82c>)
 8004a9e:	2264      	movs	r2, #100	; 0x64
 8004aa0:	811a      	strh	r2, [r3, #8]
 8004aa2:	e01e      	b.n	8004ae2 <Load_EEPROM+0x7c6>
 8004aa4:	4b28      	ldr	r3, [pc, #160]	; (8004b48 <Load_EEPROM+0x82c>)
 8004aa6:	2232      	movs	r2, #50	; 0x32
 8004aa8:	811a      	strh	r2, [r3, #8]
 8004aaa:	e01a      	b.n	8004ae2 <Load_EEPROM+0x7c6>
 8004aac:	4b26      	ldr	r3, [pc, #152]	; (8004b48 <Load_EEPROM+0x82c>)
 8004aae:	2228      	movs	r2, #40	; 0x28
 8004ab0:	811a      	strh	r2, [r3, #8]
 8004ab2:	e016      	b.n	8004ae2 <Load_EEPROM+0x7c6>
 8004ab4:	4b24      	ldr	r3, [pc, #144]	; (8004b48 <Load_EEPROM+0x82c>)
 8004ab6:	2214      	movs	r2, #20
 8004ab8:	811a      	strh	r2, [r3, #8]
 8004aba:	e012      	b.n	8004ae2 <Load_EEPROM+0x7c6>
 8004abc:	4b22      	ldr	r3, [pc, #136]	; (8004b48 <Load_EEPROM+0x82c>)
 8004abe:	220a      	movs	r2, #10
 8004ac0:	811a      	strh	r2, [r3, #8]
 8004ac2:	e00e      	b.n	8004ae2 <Load_EEPROM+0x7c6>
 8004ac4:	4b20      	ldr	r3, [pc, #128]	; (8004b48 <Load_EEPROM+0x82c>)
 8004ac6:	2205      	movs	r2, #5
 8004ac8:	811a      	strh	r2, [r3, #8]
 8004aca:	e00a      	b.n	8004ae2 <Load_EEPROM+0x7c6>
 8004acc:	4b1e      	ldr	r3, [pc, #120]	; (8004b48 <Load_EEPROM+0x82c>)
 8004ace:	2204      	movs	r2, #4
 8004ad0:	811a      	strh	r2, [r3, #8]
 8004ad2:	e006      	b.n	8004ae2 <Load_EEPROM+0x7c6>
 8004ad4:	4b1c      	ldr	r3, [pc, #112]	; (8004b48 <Load_EEPROM+0x82c>)
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	811a      	strh	r2, [r3, #8]
 8004ada:	e002      	b.n	8004ae2 <Load_EEPROM+0x7c6>
 8004adc:	4b1a      	ldr	r3, [pc, #104]	; (8004b48 <Load_EEPROM+0x82c>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	811a      	strh	r2, [r3, #8]
 8004ae2:	bf00      	nop

	inputConfig 	 = buffer[12];
 8004ae4:	7e3a      	ldrb	r2, [r7, #24]
 8004ae6:	4b19      	ldr	r3, [pc, #100]	; (8004b4c <Load_EEPROM+0x830>)
 8004ae8:	701a      	strb	r2, [r3, #0]
	thresholdBeacon	 = buffer[13] << 8;
 8004aea:	7e7b      	ldrb	r3, [r7, #25]
 8004aec:	021b      	lsls	r3, r3, #8
 8004aee:	b21a      	sxth	r2, r3
 8004af0:	4b17      	ldr	r3, [pc, #92]	; (8004b50 <Load_EEPROM+0x834>)
 8004af2:	801a      	strh	r2, [r3, #0]
	thresholdBeacon |= buffer[14] & 0xff;
 8004af4:	7ebb      	ldrb	r3, [r7, #26]
 8004af6:	b21a      	sxth	r2, r3
 8004af8:	4b15      	ldr	r3, [pc, #84]	; (8004b50 <Load_EEPROM+0x834>)
 8004afa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	b21a      	sxth	r2, r3
 8004b02:	4b13      	ldr	r3, [pc, #76]	; (8004b50 <Load_EEPROM+0x834>)
 8004b04:	801a      	strh	r2, [r3, #0]
	thresholdRPM	 = buffer[15] << 8;
 8004b06:	7efb      	ldrb	r3, [r7, #27]
 8004b08:	021b      	lsls	r3, r3, #8
 8004b0a:	b21a      	sxth	r2, r3
 8004b0c:	4b11      	ldr	r3, [pc, #68]	; (8004b54 <Load_EEPROM+0x838>)
 8004b0e:	801a      	strh	r2, [r3, #0]
	thresholdRPM	|= buffer[16] & 0xff;
 8004b10:	7f3b      	ldrb	r3, [r7, #28]
 8004b12:	b21a      	sxth	r2, r3
 8004b14:	4b0f      	ldr	r3, [pc, #60]	; (8004b54 <Load_EEPROM+0x838>)
 8004b16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	b21a      	sxth	r2, r3
 8004b1e:	4b0d      	ldr	r3, [pc, #52]	; (8004b54 <Load_EEPROM+0x838>)
 8004b20:	801a      	strh	r2, [r3, #0]
	thresholdSpeed	 = buffer[17] << 8;
 8004b22:	7f7b      	ldrb	r3, [r7, #29]
 8004b24:	021b      	lsls	r3, r3, #8
 8004b26:	b21a      	sxth	r2, r3
 8004b28:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <Load_EEPROM+0x83c>)
 8004b2a:	801a      	strh	r2, [r3, #0]
	thresholdSpeed	|= buffer[18] & 0xff;
 8004b2c:	7fbb      	ldrb	r3, [r7, #30]
 8004b2e:	b21a      	sxth	r2, r3
 8004b30:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <Load_EEPROM+0x83c>)
 8004b32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b36:	4313      	orrs	r3, r2
 8004b38:	b21a      	sxth	r2, r3
 8004b3a:	4b07      	ldr	r3, [pc, #28]	; (8004b58 <Load_EEPROM+0x83c>)
 8004b3c:	801a      	strh	r2, [r3, #0]

	return retVal;
 8004b3e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3720      	adds	r7, #32
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	20002660 	.word	0x20002660
 8004b4c:	20002644 	.word	0x20002644
 8004b50:	2000252e 	.word	0x2000252e
 8004b54:	20002530 	.word	0x20002530
 8004b58:	20002532 	.word	0x20002532

08004b5c <Save_EEPROM>:

static HAL_StatusTypeDef Save_EEPROM(I2C_HandleTypeDef* hi2c)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b088      	sub	sp, #32
 8004b60:	af02      	add	r7, sp, #8
 8004b62:	6078      	str	r0, [r7, #4]
	uint8_t buffer[EEPROM_BUFFER_SIZE_WRITE];

	buffer[0] = 0x00;
 8004b64:	2300      	movs	r3, #0
 8004b66:	733b      	strb	r3, [r7, #12]

	__FREQ_TO_BUFFER(buffer[1], perMsg[ANALOG_1_4]);
 8004b68:	4ba9      	ldr	r3, [pc, #676]	; (8004e10 <Save_EEPROM+0x2b4>)
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b70:	f000 8081 	beq.w	8004c76 <Save_EEPROM+0x11a>
 8004b74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b78:	f300 809e 	bgt.w	8004cb8 <Save_EEPROM+0x15c>
 8004b7c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004b80:	d07c      	beq.n	8004c7c <Save_EEPROM+0x120>
 8004b82:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004b86:	f300 8097 	bgt.w	8004cb8 <Save_EEPROM+0x15c>
 8004b8a:	2bc8      	cmp	r3, #200	; 0xc8
 8004b8c:	d079      	beq.n	8004c82 <Save_EEPROM+0x126>
 8004b8e:	2bc8      	cmp	r3, #200	; 0xc8
 8004b90:	f300 8092 	bgt.w	8004cb8 <Save_EEPROM+0x15c>
 8004b94:	2b32      	cmp	r3, #50	; 0x32
 8004b96:	dc6b      	bgt.n	8004c70 <Save_EEPROM+0x114>
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	f2c0 808d 	blt.w	8004cb8 <Save_EEPROM+0x15c>
 8004b9e:	3b02      	subs	r3, #2
 8004ba0:	2b30      	cmp	r3, #48	; 0x30
 8004ba2:	f200 8089 	bhi.w	8004cb8 <Save_EEPROM+0x15c>
 8004ba6:	a201      	add	r2, pc, #4	; (adr r2, 8004bac <Save_EEPROM+0x50>)
 8004ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bac:	08004cb3 	.word	0x08004cb3
 8004bb0:	08004cb9 	.word	0x08004cb9
 8004bb4:	08004cad 	.word	0x08004cad
 8004bb8:	08004ca7 	.word	0x08004ca7
 8004bbc:	08004cb9 	.word	0x08004cb9
 8004bc0:	08004cb9 	.word	0x08004cb9
 8004bc4:	08004cb9 	.word	0x08004cb9
 8004bc8:	08004cb9 	.word	0x08004cb9
 8004bcc:	08004ca1 	.word	0x08004ca1
 8004bd0:	08004cb9 	.word	0x08004cb9
 8004bd4:	08004cb9 	.word	0x08004cb9
 8004bd8:	08004cb9 	.word	0x08004cb9
 8004bdc:	08004cb9 	.word	0x08004cb9
 8004be0:	08004cb9 	.word	0x08004cb9
 8004be4:	08004cb9 	.word	0x08004cb9
 8004be8:	08004cb9 	.word	0x08004cb9
 8004bec:	08004cb9 	.word	0x08004cb9
 8004bf0:	08004cb9 	.word	0x08004cb9
 8004bf4:	08004c9b 	.word	0x08004c9b
 8004bf8:	08004cb9 	.word	0x08004cb9
 8004bfc:	08004cb9 	.word	0x08004cb9
 8004c00:	08004cb9 	.word	0x08004cb9
 8004c04:	08004cb9 	.word	0x08004cb9
 8004c08:	08004cb9 	.word	0x08004cb9
 8004c0c:	08004cb9 	.word	0x08004cb9
 8004c10:	08004cb9 	.word	0x08004cb9
 8004c14:	08004cb9 	.word	0x08004cb9
 8004c18:	08004cb9 	.word	0x08004cb9
 8004c1c:	08004cb9 	.word	0x08004cb9
 8004c20:	08004cb9 	.word	0x08004cb9
 8004c24:	08004cb9 	.word	0x08004cb9
 8004c28:	08004cb9 	.word	0x08004cb9
 8004c2c:	08004cb9 	.word	0x08004cb9
 8004c30:	08004cb9 	.word	0x08004cb9
 8004c34:	08004cb9 	.word	0x08004cb9
 8004c38:	08004cb9 	.word	0x08004cb9
 8004c3c:	08004cb9 	.word	0x08004cb9
 8004c40:	08004cb9 	.word	0x08004cb9
 8004c44:	08004c95 	.word	0x08004c95
 8004c48:	08004cb9 	.word	0x08004cb9
 8004c4c:	08004cb9 	.word	0x08004cb9
 8004c50:	08004cb9 	.word	0x08004cb9
 8004c54:	08004cb9 	.word	0x08004cb9
 8004c58:	08004cb9 	.word	0x08004cb9
 8004c5c:	08004cb9 	.word	0x08004cb9
 8004c60:	08004cb9 	.word	0x08004cb9
 8004c64:	08004cb9 	.word	0x08004cb9
 8004c68:	08004cb9 	.word	0x08004cb9
 8004c6c:	08004c8f 	.word	0x08004c8f
 8004c70:	2b64      	cmp	r3, #100	; 0x64
 8004c72:	d009      	beq.n	8004c88 <Save_EEPROM+0x12c>
 8004c74:	e020      	b.n	8004cb8 <Save_EEPROM+0x15c>
 8004c76:	2301      	movs	r3, #1
 8004c78:	737b      	strb	r3, [r7, #13]
 8004c7a:	e01f      	b.n	8004cbc <Save_EEPROM+0x160>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	737b      	strb	r3, [r7, #13]
 8004c80:	e01c      	b.n	8004cbc <Save_EEPROM+0x160>
 8004c82:	2303      	movs	r3, #3
 8004c84:	737b      	strb	r3, [r7, #13]
 8004c86:	e019      	b.n	8004cbc <Save_EEPROM+0x160>
 8004c88:	2304      	movs	r3, #4
 8004c8a:	737b      	strb	r3, [r7, #13]
 8004c8c:	e016      	b.n	8004cbc <Save_EEPROM+0x160>
 8004c8e:	2305      	movs	r3, #5
 8004c90:	737b      	strb	r3, [r7, #13]
 8004c92:	e013      	b.n	8004cbc <Save_EEPROM+0x160>
 8004c94:	2306      	movs	r3, #6
 8004c96:	737b      	strb	r3, [r7, #13]
 8004c98:	e010      	b.n	8004cbc <Save_EEPROM+0x160>
 8004c9a:	2307      	movs	r3, #7
 8004c9c:	737b      	strb	r3, [r7, #13]
 8004c9e:	e00d      	b.n	8004cbc <Save_EEPROM+0x160>
 8004ca0:	2308      	movs	r3, #8
 8004ca2:	737b      	strb	r3, [r7, #13]
 8004ca4:	e00a      	b.n	8004cbc <Save_EEPROM+0x160>
 8004ca6:	2309      	movs	r3, #9
 8004ca8:	737b      	strb	r3, [r7, #13]
 8004caa:	e007      	b.n	8004cbc <Save_EEPROM+0x160>
 8004cac:	230a      	movs	r3, #10
 8004cae:	737b      	strb	r3, [r7, #13]
 8004cb0:	e004      	b.n	8004cbc <Save_EEPROM+0x160>
 8004cb2:	230b      	movs	r3, #11
 8004cb4:	737b      	strb	r3, [r7, #13]
 8004cb6:	e001      	b.n	8004cbc <Save_EEPROM+0x160>
 8004cb8:	2300      	movs	r3, #0
 8004cba:	737b      	strb	r3, [r7, #13]
 8004cbc:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[2], perMsg[ANALOG_5_8]);
 8004cbe:	4b54      	ldr	r3, [pc, #336]	; (8004e10 <Save_EEPROM+0x2b4>)
 8004cc0:	885b      	ldrh	r3, [r3, #2]
 8004cc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cc6:	f000 8082 	beq.w	8004dce <Save_EEPROM+0x272>
 8004cca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004cce:	f300 80a1 	bgt.w	8004e14 <Save_EEPROM+0x2b8>
 8004cd2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004cd6:	d07d      	beq.n	8004dd4 <Save_EEPROM+0x278>
 8004cd8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004cdc:	f300 809a 	bgt.w	8004e14 <Save_EEPROM+0x2b8>
 8004ce0:	2bc8      	cmp	r3, #200	; 0xc8
 8004ce2:	d07a      	beq.n	8004dda <Save_EEPROM+0x27e>
 8004ce4:	2bc8      	cmp	r3, #200	; 0xc8
 8004ce6:	f300 8095 	bgt.w	8004e14 <Save_EEPROM+0x2b8>
 8004cea:	2b32      	cmp	r3, #50	; 0x32
 8004cec:	dc6c      	bgt.n	8004dc8 <Save_EEPROM+0x26c>
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	f2c0 8090 	blt.w	8004e14 <Save_EEPROM+0x2b8>
 8004cf4:	3b02      	subs	r3, #2
 8004cf6:	2b30      	cmp	r3, #48	; 0x30
 8004cf8:	f200 808c 	bhi.w	8004e14 <Save_EEPROM+0x2b8>
 8004cfc:	a201      	add	r2, pc, #4	; (adr r2, 8004d04 <Save_EEPROM+0x1a8>)
 8004cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d02:	bf00      	nop
 8004d04:	08004e0b 	.word	0x08004e0b
 8004d08:	08004e15 	.word	0x08004e15
 8004d0c:	08004e05 	.word	0x08004e05
 8004d10:	08004dff 	.word	0x08004dff
 8004d14:	08004e15 	.word	0x08004e15
 8004d18:	08004e15 	.word	0x08004e15
 8004d1c:	08004e15 	.word	0x08004e15
 8004d20:	08004e15 	.word	0x08004e15
 8004d24:	08004df9 	.word	0x08004df9
 8004d28:	08004e15 	.word	0x08004e15
 8004d2c:	08004e15 	.word	0x08004e15
 8004d30:	08004e15 	.word	0x08004e15
 8004d34:	08004e15 	.word	0x08004e15
 8004d38:	08004e15 	.word	0x08004e15
 8004d3c:	08004e15 	.word	0x08004e15
 8004d40:	08004e15 	.word	0x08004e15
 8004d44:	08004e15 	.word	0x08004e15
 8004d48:	08004e15 	.word	0x08004e15
 8004d4c:	08004df3 	.word	0x08004df3
 8004d50:	08004e15 	.word	0x08004e15
 8004d54:	08004e15 	.word	0x08004e15
 8004d58:	08004e15 	.word	0x08004e15
 8004d5c:	08004e15 	.word	0x08004e15
 8004d60:	08004e15 	.word	0x08004e15
 8004d64:	08004e15 	.word	0x08004e15
 8004d68:	08004e15 	.word	0x08004e15
 8004d6c:	08004e15 	.word	0x08004e15
 8004d70:	08004e15 	.word	0x08004e15
 8004d74:	08004e15 	.word	0x08004e15
 8004d78:	08004e15 	.word	0x08004e15
 8004d7c:	08004e15 	.word	0x08004e15
 8004d80:	08004e15 	.word	0x08004e15
 8004d84:	08004e15 	.word	0x08004e15
 8004d88:	08004e15 	.word	0x08004e15
 8004d8c:	08004e15 	.word	0x08004e15
 8004d90:	08004e15 	.word	0x08004e15
 8004d94:	08004e15 	.word	0x08004e15
 8004d98:	08004e15 	.word	0x08004e15
 8004d9c:	08004ded 	.word	0x08004ded
 8004da0:	08004e15 	.word	0x08004e15
 8004da4:	08004e15 	.word	0x08004e15
 8004da8:	08004e15 	.word	0x08004e15
 8004dac:	08004e15 	.word	0x08004e15
 8004db0:	08004e15 	.word	0x08004e15
 8004db4:	08004e15 	.word	0x08004e15
 8004db8:	08004e15 	.word	0x08004e15
 8004dbc:	08004e15 	.word	0x08004e15
 8004dc0:	08004e15 	.word	0x08004e15
 8004dc4:	08004de7 	.word	0x08004de7
 8004dc8:	2b64      	cmp	r3, #100	; 0x64
 8004dca:	d009      	beq.n	8004de0 <Save_EEPROM+0x284>
 8004dcc:	e022      	b.n	8004e14 <Save_EEPROM+0x2b8>
 8004dce:	2301      	movs	r3, #1
 8004dd0:	73bb      	strb	r3, [r7, #14]
 8004dd2:	e021      	b.n	8004e18 <Save_EEPROM+0x2bc>
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	73bb      	strb	r3, [r7, #14]
 8004dd8:	e01e      	b.n	8004e18 <Save_EEPROM+0x2bc>
 8004dda:	2303      	movs	r3, #3
 8004ddc:	73bb      	strb	r3, [r7, #14]
 8004dde:	e01b      	b.n	8004e18 <Save_EEPROM+0x2bc>
 8004de0:	2304      	movs	r3, #4
 8004de2:	73bb      	strb	r3, [r7, #14]
 8004de4:	e018      	b.n	8004e18 <Save_EEPROM+0x2bc>
 8004de6:	2305      	movs	r3, #5
 8004de8:	73bb      	strb	r3, [r7, #14]
 8004dea:	e015      	b.n	8004e18 <Save_EEPROM+0x2bc>
 8004dec:	2306      	movs	r3, #6
 8004dee:	73bb      	strb	r3, [r7, #14]
 8004df0:	e012      	b.n	8004e18 <Save_EEPROM+0x2bc>
 8004df2:	2307      	movs	r3, #7
 8004df4:	73bb      	strb	r3, [r7, #14]
 8004df6:	e00f      	b.n	8004e18 <Save_EEPROM+0x2bc>
 8004df8:	2308      	movs	r3, #8
 8004dfa:	73bb      	strb	r3, [r7, #14]
 8004dfc:	e00c      	b.n	8004e18 <Save_EEPROM+0x2bc>
 8004dfe:	2309      	movs	r3, #9
 8004e00:	73bb      	strb	r3, [r7, #14]
 8004e02:	e009      	b.n	8004e18 <Save_EEPROM+0x2bc>
 8004e04:	230a      	movs	r3, #10
 8004e06:	73bb      	strb	r3, [r7, #14]
 8004e08:	e006      	b.n	8004e18 <Save_EEPROM+0x2bc>
 8004e0a:	230b      	movs	r3, #11
 8004e0c:	73bb      	strb	r3, [r7, #14]
 8004e0e:	e003      	b.n	8004e18 <Save_EEPROM+0x2bc>
 8004e10:	2000266c 	.word	0x2000266c
 8004e14:	2300      	movs	r3, #0
 8004e16:	73bb      	strb	r3, [r7, #14]
 8004e18:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[3], perMsg[ANALOG_9_12]);
 8004e1a:	4baa      	ldr	r3, [pc, #680]	; (80050c4 <Save_EEPROM+0x568>)
 8004e1c:	889b      	ldrh	r3, [r3, #4]
 8004e1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e22:	f000 8082 	beq.w	8004f2a <Save_EEPROM+0x3ce>
 8004e26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e2a:	f300 809f 	bgt.w	8004f6c <Save_EEPROM+0x410>
 8004e2e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e32:	d07d      	beq.n	8004f30 <Save_EEPROM+0x3d4>
 8004e34:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004e38:	f300 8098 	bgt.w	8004f6c <Save_EEPROM+0x410>
 8004e3c:	2bc8      	cmp	r3, #200	; 0xc8
 8004e3e:	d07a      	beq.n	8004f36 <Save_EEPROM+0x3da>
 8004e40:	2bc8      	cmp	r3, #200	; 0xc8
 8004e42:	f300 8093 	bgt.w	8004f6c <Save_EEPROM+0x410>
 8004e46:	2b32      	cmp	r3, #50	; 0x32
 8004e48:	dc6c      	bgt.n	8004f24 <Save_EEPROM+0x3c8>
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	f2c0 808e 	blt.w	8004f6c <Save_EEPROM+0x410>
 8004e50:	3b02      	subs	r3, #2
 8004e52:	2b30      	cmp	r3, #48	; 0x30
 8004e54:	f200 808a 	bhi.w	8004f6c <Save_EEPROM+0x410>
 8004e58:	a201      	add	r2, pc, #4	; (adr r2, 8004e60 <Save_EEPROM+0x304>)
 8004e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5e:	bf00      	nop
 8004e60:	08004f67 	.word	0x08004f67
 8004e64:	08004f6d 	.word	0x08004f6d
 8004e68:	08004f61 	.word	0x08004f61
 8004e6c:	08004f5b 	.word	0x08004f5b
 8004e70:	08004f6d 	.word	0x08004f6d
 8004e74:	08004f6d 	.word	0x08004f6d
 8004e78:	08004f6d 	.word	0x08004f6d
 8004e7c:	08004f6d 	.word	0x08004f6d
 8004e80:	08004f55 	.word	0x08004f55
 8004e84:	08004f6d 	.word	0x08004f6d
 8004e88:	08004f6d 	.word	0x08004f6d
 8004e8c:	08004f6d 	.word	0x08004f6d
 8004e90:	08004f6d 	.word	0x08004f6d
 8004e94:	08004f6d 	.word	0x08004f6d
 8004e98:	08004f6d 	.word	0x08004f6d
 8004e9c:	08004f6d 	.word	0x08004f6d
 8004ea0:	08004f6d 	.word	0x08004f6d
 8004ea4:	08004f6d 	.word	0x08004f6d
 8004ea8:	08004f4f 	.word	0x08004f4f
 8004eac:	08004f6d 	.word	0x08004f6d
 8004eb0:	08004f6d 	.word	0x08004f6d
 8004eb4:	08004f6d 	.word	0x08004f6d
 8004eb8:	08004f6d 	.word	0x08004f6d
 8004ebc:	08004f6d 	.word	0x08004f6d
 8004ec0:	08004f6d 	.word	0x08004f6d
 8004ec4:	08004f6d 	.word	0x08004f6d
 8004ec8:	08004f6d 	.word	0x08004f6d
 8004ecc:	08004f6d 	.word	0x08004f6d
 8004ed0:	08004f6d 	.word	0x08004f6d
 8004ed4:	08004f6d 	.word	0x08004f6d
 8004ed8:	08004f6d 	.word	0x08004f6d
 8004edc:	08004f6d 	.word	0x08004f6d
 8004ee0:	08004f6d 	.word	0x08004f6d
 8004ee4:	08004f6d 	.word	0x08004f6d
 8004ee8:	08004f6d 	.word	0x08004f6d
 8004eec:	08004f6d 	.word	0x08004f6d
 8004ef0:	08004f6d 	.word	0x08004f6d
 8004ef4:	08004f6d 	.word	0x08004f6d
 8004ef8:	08004f49 	.word	0x08004f49
 8004efc:	08004f6d 	.word	0x08004f6d
 8004f00:	08004f6d 	.word	0x08004f6d
 8004f04:	08004f6d 	.word	0x08004f6d
 8004f08:	08004f6d 	.word	0x08004f6d
 8004f0c:	08004f6d 	.word	0x08004f6d
 8004f10:	08004f6d 	.word	0x08004f6d
 8004f14:	08004f6d 	.word	0x08004f6d
 8004f18:	08004f6d 	.word	0x08004f6d
 8004f1c:	08004f6d 	.word	0x08004f6d
 8004f20:	08004f43 	.word	0x08004f43
 8004f24:	2b64      	cmp	r3, #100	; 0x64
 8004f26:	d009      	beq.n	8004f3c <Save_EEPROM+0x3e0>
 8004f28:	e020      	b.n	8004f6c <Save_EEPROM+0x410>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	73fb      	strb	r3, [r7, #15]
 8004f2e:	e01f      	b.n	8004f70 <Save_EEPROM+0x414>
 8004f30:	2302      	movs	r3, #2
 8004f32:	73fb      	strb	r3, [r7, #15]
 8004f34:	e01c      	b.n	8004f70 <Save_EEPROM+0x414>
 8004f36:	2303      	movs	r3, #3
 8004f38:	73fb      	strb	r3, [r7, #15]
 8004f3a:	e019      	b.n	8004f70 <Save_EEPROM+0x414>
 8004f3c:	2304      	movs	r3, #4
 8004f3e:	73fb      	strb	r3, [r7, #15]
 8004f40:	e016      	b.n	8004f70 <Save_EEPROM+0x414>
 8004f42:	2305      	movs	r3, #5
 8004f44:	73fb      	strb	r3, [r7, #15]
 8004f46:	e013      	b.n	8004f70 <Save_EEPROM+0x414>
 8004f48:	2306      	movs	r3, #6
 8004f4a:	73fb      	strb	r3, [r7, #15]
 8004f4c:	e010      	b.n	8004f70 <Save_EEPROM+0x414>
 8004f4e:	2307      	movs	r3, #7
 8004f50:	73fb      	strb	r3, [r7, #15]
 8004f52:	e00d      	b.n	8004f70 <Save_EEPROM+0x414>
 8004f54:	2308      	movs	r3, #8
 8004f56:	73fb      	strb	r3, [r7, #15]
 8004f58:	e00a      	b.n	8004f70 <Save_EEPROM+0x414>
 8004f5a:	2309      	movs	r3, #9
 8004f5c:	73fb      	strb	r3, [r7, #15]
 8004f5e:	e007      	b.n	8004f70 <Save_EEPROM+0x414>
 8004f60:	230a      	movs	r3, #10
 8004f62:	73fb      	strb	r3, [r7, #15]
 8004f64:	e004      	b.n	8004f70 <Save_EEPROM+0x414>
 8004f66:	230b      	movs	r3, #11
 8004f68:	73fb      	strb	r3, [r7, #15]
 8004f6a:	e001      	b.n	8004f70 <Save_EEPROM+0x414>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	73fb      	strb	r3, [r7, #15]
 8004f70:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[4], perMsg[RTC_MSG]);
 8004f72:	4b54      	ldr	r3, [pc, #336]	; (80050c4 <Save_EEPROM+0x568>)
 8004f74:	88db      	ldrh	r3, [r3, #6]
 8004f76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f7a:	f000 8082 	beq.w	8005082 <Save_EEPROM+0x526>
 8004f7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f82:	f300 80a1 	bgt.w	80050c8 <Save_EEPROM+0x56c>
 8004f86:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004f8a:	d07d      	beq.n	8005088 <Save_EEPROM+0x52c>
 8004f8c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004f90:	f300 809a 	bgt.w	80050c8 <Save_EEPROM+0x56c>
 8004f94:	2bc8      	cmp	r3, #200	; 0xc8
 8004f96:	d07a      	beq.n	800508e <Save_EEPROM+0x532>
 8004f98:	2bc8      	cmp	r3, #200	; 0xc8
 8004f9a:	f300 8095 	bgt.w	80050c8 <Save_EEPROM+0x56c>
 8004f9e:	2b32      	cmp	r3, #50	; 0x32
 8004fa0:	dc6c      	bgt.n	800507c <Save_EEPROM+0x520>
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	f2c0 8090 	blt.w	80050c8 <Save_EEPROM+0x56c>
 8004fa8:	3b02      	subs	r3, #2
 8004faa:	2b30      	cmp	r3, #48	; 0x30
 8004fac:	f200 808c 	bhi.w	80050c8 <Save_EEPROM+0x56c>
 8004fb0:	a201      	add	r2, pc, #4	; (adr r2, 8004fb8 <Save_EEPROM+0x45c>)
 8004fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb6:	bf00      	nop
 8004fb8:	080050bf 	.word	0x080050bf
 8004fbc:	080050c9 	.word	0x080050c9
 8004fc0:	080050b9 	.word	0x080050b9
 8004fc4:	080050b3 	.word	0x080050b3
 8004fc8:	080050c9 	.word	0x080050c9
 8004fcc:	080050c9 	.word	0x080050c9
 8004fd0:	080050c9 	.word	0x080050c9
 8004fd4:	080050c9 	.word	0x080050c9
 8004fd8:	080050ad 	.word	0x080050ad
 8004fdc:	080050c9 	.word	0x080050c9
 8004fe0:	080050c9 	.word	0x080050c9
 8004fe4:	080050c9 	.word	0x080050c9
 8004fe8:	080050c9 	.word	0x080050c9
 8004fec:	080050c9 	.word	0x080050c9
 8004ff0:	080050c9 	.word	0x080050c9
 8004ff4:	080050c9 	.word	0x080050c9
 8004ff8:	080050c9 	.word	0x080050c9
 8004ffc:	080050c9 	.word	0x080050c9
 8005000:	080050a7 	.word	0x080050a7
 8005004:	080050c9 	.word	0x080050c9
 8005008:	080050c9 	.word	0x080050c9
 800500c:	080050c9 	.word	0x080050c9
 8005010:	080050c9 	.word	0x080050c9
 8005014:	080050c9 	.word	0x080050c9
 8005018:	080050c9 	.word	0x080050c9
 800501c:	080050c9 	.word	0x080050c9
 8005020:	080050c9 	.word	0x080050c9
 8005024:	080050c9 	.word	0x080050c9
 8005028:	080050c9 	.word	0x080050c9
 800502c:	080050c9 	.word	0x080050c9
 8005030:	080050c9 	.word	0x080050c9
 8005034:	080050c9 	.word	0x080050c9
 8005038:	080050c9 	.word	0x080050c9
 800503c:	080050c9 	.word	0x080050c9
 8005040:	080050c9 	.word	0x080050c9
 8005044:	080050c9 	.word	0x080050c9
 8005048:	080050c9 	.word	0x080050c9
 800504c:	080050c9 	.word	0x080050c9
 8005050:	080050a1 	.word	0x080050a1
 8005054:	080050c9 	.word	0x080050c9
 8005058:	080050c9 	.word	0x080050c9
 800505c:	080050c9 	.word	0x080050c9
 8005060:	080050c9 	.word	0x080050c9
 8005064:	080050c9 	.word	0x080050c9
 8005068:	080050c9 	.word	0x080050c9
 800506c:	080050c9 	.word	0x080050c9
 8005070:	080050c9 	.word	0x080050c9
 8005074:	080050c9 	.word	0x080050c9
 8005078:	0800509b 	.word	0x0800509b
 800507c:	2b64      	cmp	r3, #100	; 0x64
 800507e:	d009      	beq.n	8005094 <Save_EEPROM+0x538>
 8005080:	e022      	b.n	80050c8 <Save_EEPROM+0x56c>
 8005082:	2301      	movs	r3, #1
 8005084:	743b      	strb	r3, [r7, #16]
 8005086:	e021      	b.n	80050cc <Save_EEPROM+0x570>
 8005088:	2302      	movs	r3, #2
 800508a:	743b      	strb	r3, [r7, #16]
 800508c:	e01e      	b.n	80050cc <Save_EEPROM+0x570>
 800508e:	2303      	movs	r3, #3
 8005090:	743b      	strb	r3, [r7, #16]
 8005092:	e01b      	b.n	80050cc <Save_EEPROM+0x570>
 8005094:	2304      	movs	r3, #4
 8005096:	743b      	strb	r3, [r7, #16]
 8005098:	e018      	b.n	80050cc <Save_EEPROM+0x570>
 800509a:	2305      	movs	r3, #5
 800509c:	743b      	strb	r3, [r7, #16]
 800509e:	e015      	b.n	80050cc <Save_EEPROM+0x570>
 80050a0:	2306      	movs	r3, #6
 80050a2:	743b      	strb	r3, [r7, #16]
 80050a4:	e012      	b.n	80050cc <Save_EEPROM+0x570>
 80050a6:	2307      	movs	r3, #7
 80050a8:	743b      	strb	r3, [r7, #16]
 80050aa:	e00f      	b.n	80050cc <Save_EEPROM+0x570>
 80050ac:	2308      	movs	r3, #8
 80050ae:	743b      	strb	r3, [r7, #16]
 80050b0:	e00c      	b.n	80050cc <Save_EEPROM+0x570>
 80050b2:	2309      	movs	r3, #9
 80050b4:	743b      	strb	r3, [r7, #16]
 80050b6:	e009      	b.n	80050cc <Save_EEPROM+0x570>
 80050b8:	230a      	movs	r3, #10
 80050ba:	743b      	strb	r3, [r7, #16]
 80050bc:	e006      	b.n	80050cc <Save_EEPROM+0x570>
 80050be:	230b      	movs	r3, #11
 80050c0:	743b      	strb	r3, [r7, #16]
 80050c2:	e003      	b.n	80050cc <Save_EEPROM+0x570>
 80050c4:	2000266c 	.word	0x2000266c
 80050c8:	2300      	movs	r3, #0
 80050ca:	743b      	strb	r3, [r7, #16]
 80050cc:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[5], perMsg[VERIFY_MSG]);
 80050ce:	4baa      	ldr	r3, [pc, #680]	; (8005378 <Save_EEPROM+0x81c>)
 80050d0:	891b      	ldrh	r3, [r3, #8]
 80050d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050d6:	f000 8082 	beq.w	80051de <Save_EEPROM+0x682>
 80050da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050de:	f300 809f 	bgt.w	8005220 <Save_EEPROM+0x6c4>
 80050e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80050e6:	d07d      	beq.n	80051e4 <Save_EEPROM+0x688>
 80050e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80050ec:	f300 8098 	bgt.w	8005220 <Save_EEPROM+0x6c4>
 80050f0:	2bc8      	cmp	r3, #200	; 0xc8
 80050f2:	d07a      	beq.n	80051ea <Save_EEPROM+0x68e>
 80050f4:	2bc8      	cmp	r3, #200	; 0xc8
 80050f6:	f300 8093 	bgt.w	8005220 <Save_EEPROM+0x6c4>
 80050fa:	2b32      	cmp	r3, #50	; 0x32
 80050fc:	dc6c      	bgt.n	80051d8 <Save_EEPROM+0x67c>
 80050fe:	2b02      	cmp	r3, #2
 8005100:	f2c0 808e 	blt.w	8005220 <Save_EEPROM+0x6c4>
 8005104:	3b02      	subs	r3, #2
 8005106:	2b30      	cmp	r3, #48	; 0x30
 8005108:	f200 808a 	bhi.w	8005220 <Save_EEPROM+0x6c4>
 800510c:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <Save_EEPROM+0x5b8>)
 800510e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005112:	bf00      	nop
 8005114:	0800521b 	.word	0x0800521b
 8005118:	08005221 	.word	0x08005221
 800511c:	08005215 	.word	0x08005215
 8005120:	0800520f 	.word	0x0800520f
 8005124:	08005221 	.word	0x08005221
 8005128:	08005221 	.word	0x08005221
 800512c:	08005221 	.word	0x08005221
 8005130:	08005221 	.word	0x08005221
 8005134:	08005209 	.word	0x08005209
 8005138:	08005221 	.word	0x08005221
 800513c:	08005221 	.word	0x08005221
 8005140:	08005221 	.word	0x08005221
 8005144:	08005221 	.word	0x08005221
 8005148:	08005221 	.word	0x08005221
 800514c:	08005221 	.word	0x08005221
 8005150:	08005221 	.word	0x08005221
 8005154:	08005221 	.word	0x08005221
 8005158:	08005221 	.word	0x08005221
 800515c:	08005203 	.word	0x08005203
 8005160:	08005221 	.word	0x08005221
 8005164:	08005221 	.word	0x08005221
 8005168:	08005221 	.word	0x08005221
 800516c:	08005221 	.word	0x08005221
 8005170:	08005221 	.word	0x08005221
 8005174:	08005221 	.word	0x08005221
 8005178:	08005221 	.word	0x08005221
 800517c:	08005221 	.word	0x08005221
 8005180:	08005221 	.word	0x08005221
 8005184:	08005221 	.word	0x08005221
 8005188:	08005221 	.word	0x08005221
 800518c:	08005221 	.word	0x08005221
 8005190:	08005221 	.word	0x08005221
 8005194:	08005221 	.word	0x08005221
 8005198:	08005221 	.word	0x08005221
 800519c:	08005221 	.word	0x08005221
 80051a0:	08005221 	.word	0x08005221
 80051a4:	08005221 	.word	0x08005221
 80051a8:	08005221 	.word	0x08005221
 80051ac:	080051fd 	.word	0x080051fd
 80051b0:	08005221 	.word	0x08005221
 80051b4:	08005221 	.word	0x08005221
 80051b8:	08005221 	.word	0x08005221
 80051bc:	08005221 	.word	0x08005221
 80051c0:	08005221 	.word	0x08005221
 80051c4:	08005221 	.word	0x08005221
 80051c8:	08005221 	.word	0x08005221
 80051cc:	08005221 	.word	0x08005221
 80051d0:	08005221 	.word	0x08005221
 80051d4:	080051f7 	.word	0x080051f7
 80051d8:	2b64      	cmp	r3, #100	; 0x64
 80051da:	d009      	beq.n	80051f0 <Save_EEPROM+0x694>
 80051dc:	e020      	b.n	8005220 <Save_EEPROM+0x6c4>
 80051de:	2301      	movs	r3, #1
 80051e0:	747b      	strb	r3, [r7, #17]
 80051e2:	e01f      	b.n	8005224 <Save_EEPROM+0x6c8>
 80051e4:	2302      	movs	r3, #2
 80051e6:	747b      	strb	r3, [r7, #17]
 80051e8:	e01c      	b.n	8005224 <Save_EEPROM+0x6c8>
 80051ea:	2303      	movs	r3, #3
 80051ec:	747b      	strb	r3, [r7, #17]
 80051ee:	e019      	b.n	8005224 <Save_EEPROM+0x6c8>
 80051f0:	2304      	movs	r3, #4
 80051f2:	747b      	strb	r3, [r7, #17]
 80051f4:	e016      	b.n	8005224 <Save_EEPROM+0x6c8>
 80051f6:	2305      	movs	r3, #5
 80051f8:	747b      	strb	r3, [r7, #17]
 80051fa:	e013      	b.n	8005224 <Save_EEPROM+0x6c8>
 80051fc:	2306      	movs	r3, #6
 80051fe:	747b      	strb	r3, [r7, #17]
 8005200:	e010      	b.n	8005224 <Save_EEPROM+0x6c8>
 8005202:	2307      	movs	r3, #7
 8005204:	747b      	strb	r3, [r7, #17]
 8005206:	e00d      	b.n	8005224 <Save_EEPROM+0x6c8>
 8005208:	2308      	movs	r3, #8
 800520a:	747b      	strb	r3, [r7, #17]
 800520c:	e00a      	b.n	8005224 <Save_EEPROM+0x6c8>
 800520e:	2309      	movs	r3, #9
 8005210:	747b      	strb	r3, [r7, #17]
 8005212:	e007      	b.n	8005224 <Save_EEPROM+0x6c8>
 8005214:	230a      	movs	r3, #10
 8005216:	747b      	strb	r3, [r7, #17]
 8005218:	e004      	b.n	8005224 <Save_EEPROM+0x6c8>
 800521a:	230b      	movs	r3, #11
 800521c:	747b      	strb	r3, [r7, #17]
 800521e:	e001      	b.n	8005224 <Save_EEPROM+0x6c8>
 8005220:	2300      	movs	r3, #0
 8005222:	747b      	strb	r3, [r7, #17]
 8005224:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[6], perMsg[ECU_SAVE]);
 8005226:	4b54      	ldr	r3, [pc, #336]	; (8005378 <Save_EEPROM+0x81c>)
 8005228:	899b      	ldrh	r3, [r3, #12]
 800522a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800522e:	f000 8082 	beq.w	8005336 <Save_EEPROM+0x7da>
 8005232:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005236:	f300 80a1 	bgt.w	800537c <Save_EEPROM+0x820>
 800523a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800523e:	d07d      	beq.n	800533c <Save_EEPROM+0x7e0>
 8005240:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005244:	f300 809a 	bgt.w	800537c <Save_EEPROM+0x820>
 8005248:	2bc8      	cmp	r3, #200	; 0xc8
 800524a:	d07a      	beq.n	8005342 <Save_EEPROM+0x7e6>
 800524c:	2bc8      	cmp	r3, #200	; 0xc8
 800524e:	f300 8095 	bgt.w	800537c <Save_EEPROM+0x820>
 8005252:	2b32      	cmp	r3, #50	; 0x32
 8005254:	dc6c      	bgt.n	8005330 <Save_EEPROM+0x7d4>
 8005256:	2b02      	cmp	r3, #2
 8005258:	f2c0 8090 	blt.w	800537c <Save_EEPROM+0x820>
 800525c:	3b02      	subs	r3, #2
 800525e:	2b30      	cmp	r3, #48	; 0x30
 8005260:	f200 808c 	bhi.w	800537c <Save_EEPROM+0x820>
 8005264:	a201      	add	r2, pc, #4	; (adr r2, 800526c <Save_EEPROM+0x710>)
 8005266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800526a:	bf00      	nop
 800526c:	08005373 	.word	0x08005373
 8005270:	0800537d 	.word	0x0800537d
 8005274:	0800536d 	.word	0x0800536d
 8005278:	08005367 	.word	0x08005367
 800527c:	0800537d 	.word	0x0800537d
 8005280:	0800537d 	.word	0x0800537d
 8005284:	0800537d 	.word	0x0800537d
 8005288:	0800537d 	.word	0x0800537d
 800528c:	08005361 	.word	0x08005361
 8005290:	0800537d 	.word	0x0800537d
 8005294:	0800537d 	.word	0x0800537d
 8005298:	0800537d 	.word	0x0800537d
 800529c:	0800537d 	.word	0x0800537d
 80052a0:	0800537d 	.word	0x0800537d
 80052a4:	0800537d 	.word	0x0800537d
 80052a8:	0800537d 	.word	0x0800537d
 80052ac:	0800537d 	.word	0x0800537d
 80052b0:	0800537d 	.word	0x0800537d
 80052b4:	0800535b 	.word	0x0800535b
 80052b8:	0800537d 	.word	0x0800537d
 80052bc:	0800537d 	.word	0x0800537d
 80052c0:	0800537d 	.word	0x0800537d
 80052c4:	0800537d 	.word	0x0800537d
 80052c8:	0800537d 	.word	0x0800537d
 80052cc:	0800537d 	.word	0x0800537d
 80052d0:	0800537d 	.word	0x0800537d
 80052d4:	0800537d 	.word	0x0800537d
 80052d8:	0800537d 	.word	0x0800537d
 80052dc:	0800537d 	.word	0x0800537d
 80052e0:	0800537d 	.word	0x0800537d
 80052e4:	0800537d 	.word	0x0800537d
 80052e8:	0800537d 	.word	0x0800537d
 80052ec:	0800537d 	.word	0x0800537d
 80052f0:	0800537d 	.word	0x0800537d
 80052f4:	0800537d 	.word	0x0800537d
 80052f8:	0800537d 	.word	0x0800537d
 80052fc:	0800537d 	.word	0x0800537d
 8005300:	0800537d 	.word	0x0800537d
 8005304:	08005355 	.word	0x08005355
 8005308:	0800537d 	.word	0x0800537d
 800530c:	0800537d 	.word	0x0800537d
 8005310:	0800537d 	.word	0x0800537d
 8005314:	0800537d 	.word	0x0800537d
 8005318:	0800537d 	.word	0x0800537d
 800531c:	0800537d 	.word	0x0800537d
 8005320:	0800537d 	.word	0x0800537d
 8005324:	0800537d 	.word	0x0800537d
 8005328:	0800537d 	.word	0x0800537d
 800532c:	0800534f 	.word	0x0800534f
 8005330:	2b64      	cmp	r3, #100	; 0x64
 8005332:	d009      	beq.n	8005348 <Save_EEPROM+0x7ec>
 8005334:	e022      	b.n	800537c <Save_EEPROM+0x820>
 8005336:	2301      	movs	r3, #1
 8005338:	74bb      	strb	r3, [r7, #18]
 800533a:	e021      	b.n	8005380 <Save_EEPROM+0x824>
 800533c:	2302      	movs	r3, #2
 800533e:	74bb      	strb	r3, [r7, #18]
 8005340:	e01e      	b.n	8005380 <Save_EEPROM+0x824>
 8005342:	2303      	movs	r3, #3
 8005344:	74bb      	strb	r3, [r7, #18]
 8005346:	e01b      	b.n	8005380 <Save_EEPROM+0x824>
 8005348:	2304      	movs	r3, #4
 800534a:	74bb      	strb	r3, [r7, #18]
 800534c:	e018      	b.n	8005380 <Save_EEPROM+0x824>
 800534e:	2305      	movs	r3, #5
 8005350:	74bb      	strb	r3, [r7, #18]
 8005352:	e015      	b.n	8005380 <Save_EEPROM+0x824>
 8005354:	2306      	movs	r3, #6
 8005356:	74bb      	strb	r3, [r7, #18]
 8005358:	e012      	b.n	8005380 <Save_EEPROM+0x824>
 800535a:	2307      	movs	r3, #7
 800535c:	74bb      	strb	r3, [r7, #18]
 800535e:	e00f      	b.n	8005380 <Save_EEPROM+0x824>
 8005360:	2308      	movs	r3, #8
 8005362:	74bb      	strb	r3, [r7, #18]
 8005364:	e00c      	b.n	8005380 <Save_EEPROM+0x824>
 8005366:	2309      	movs	r3, #9
 8005368:	74bb      	strb	r3, [r7, #18]
 800536a:	e009      	b.n	8005380 <Save_EEPROM+0x824>
 800536c:	230a      	movs	r3, #10
 800536e:	74bb      	strb	r3, [r7, #18]
 8005370:	e006      	b.n	8005380 <Save_EEPROM+0x824>
 8005372:	230b      	movs	r3, #11
 8005374:	74bb      	strb	r3, [r7, #18]
 8005376:	e003      	b.n	8005380 <Save_EEPROM+0x824>
 8005378:	2000266c 	.word	0x2000266c
 800537c:	2300      	movs	r3, #0
 800537e:	74bb      	strb	r3, [r7, #18]
 8005380:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[7], perMsg[PDM_SAVE]);
 8005382:	4baa      	ldr	r3, [pc, #680]	; (800562c <Save_EEPROM+0xad0>)
 8005384:	89db      	ldrh	r3, [r3, #14]
 8005386:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800538a:	f000 8082 	beq.w	8005492 <Save_EEPROM+0x936>
 800538e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005392:	f300 809f 	bgt.w	80054d4 <Save_EEPROM+0x978>
 8005396:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800539a:	d07d      	beq.n	8005498 <Save_EEPROM+0x93c>
 800539c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80053a0:	f300 8098 	bgt.w	80054d4 <Save_EEPROM+0x978>
 80053a4:	2bc8      	cmp	r3, #200	; 0xc8
 80053a6:	d07a      	beq.n	800549e <Save_EEPROM+0x942>
 80053a8:	2bc8      	cmp	r3, #200	; 0xc8
 80053aa:	f300 8093 	bgt.w	80054d4 <Save_EEPROM+0x978>
 80053ae:	2b32      	cmp	r3, #50	; 0x32
 80053b0:	dc6c      	bgt.n	800548c <Save_EEPROM+0x930>
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	f2c0 808e 	blt.w	80054d4 <Save_EEPROM+0x978>
 80053b8:	3b02      	subs	r3, #2
 80053ba:	2b30      	cmp	r3, #48	; 0x30
 80053bc:	f200 808a 	bhi.w	80054d4 <Save_EEPROM+0x978>
 80053c0:	a201      	add	r2, pc, #4	; (adr r2, 80053c8 <Save_EEPROM+0x86c>)
 80053c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c6:	bf00      	nop
 80053c8:	080054cf 	.word	0x080054cf
 80053cc:	080054d5 	.word	0x080054d5
 80053d0:	080054c9 	.word	0x080054c9
 80053d4:	080054c3 	.word	0x080054c3
 80053d8:	080054d5 	.word	0x080054d5
 80053dc:	080054d5 	.word	0x080054d5
 80053e0:	080054d5 	.word	0x080054d5
 80053e4:	080054d5 	.word	0x080054d5
 80053e8:	080054bd 	.word	0x080054bd
 80053ec:	080054d5 	.word	0x080054d5
 80053f0:	080054d5 	.word	0x080054d5
 80053f4:	080054d5 	.word	0x080054d5
 80053f8:	080054d5 	.word	0x080054d5
 80053fc:	080054d5 	.word	0x080054d5
 8005400:	080054d5 	.word	0x080054d5
 8005404:	080054d5 	.word	0x080054d5
 8005408:	080054d5 	.word	0x080054d5
 800540c:	080054d5 	.word	0x080054d5
 8005410:	080054b7 	.word	0x080054b7
 8005414:	080054d5 	.word	0x080054d5
 8005418:	080054d5 	.word	0x080054d5
 800541c:	080054d5 	.word	0x080054d5
 8005420:	080054d5 	.word	0x080054d5
 8005424:	080054d5 	.word	0x080054d5
 8005428:	080054d5 	.word	0x080054d5
 800542c:	080054d5 	.word	0x080054d5
 8005430:	080054d5 	.word	0x080054d5
 8005434:	080054d5 	.word	0x080054d5
 8005438:	080054d5 	.word	0x080054d5
 800543c:	080054d5 	.word	0x080054d5
 8005440:	080054d5 	.word	0x080054d5
 8005444:	080054d5 	.word	0x080054d5
 8005448:	080054d5 	.word	0x080054d5
 800544c:	080054d5 	.word	0x080054d5
 8005450:	080054d5 	.word	0x080054d5
 8005454:	080054d5 	.word	0x080054d5
 8005458:	080054d5 	.word	0x080054d5
 800545c:	080054d5 	.word	0x080054d5
 8005460:	080054b1 	.word	0x080054b1
 8005464:	080054d5 	.word	0x080054d5
 8005468:	080054d5 	.word	0x080054d5
 800546c:	080054d5 	.word	0x080054d5
 8005470:	080054d5 	.word	0x080054d5
 8005474:	080054d5 	.word	0x080054d5
 8005478:	080054d5 	.word	0x080054d5
 800547c:	080054d5 	.word	0x080054d5
 8005480:	080054d5 	.word	0x080054d5
 8005484:	080054d5 	.word	0x080054d5
 8005488:	080054ab 	.word	0x080054ab
 800548c:	2b64      	cmp	r3, #100	; 0x64
 800548e:	d009      	beq.n	80054a4 <Save_EEPROM+0x948>
 8005490:	e020      	b.n	80054d4 <Save_EEPROM+0x978>
 8005492:	2301      	movs	r3, #1
 8005494:	74fb      	strb	r3, [r7, #19]
 8005496:	e01f      	b.n	80054d8 <Save_EEPROM+0x97c>
 8005498:	2302      	movs	r3, #2
 800549a:	74fb      	strb	r3, [r7, #19]
 800549c:	e01c      	b.n	80054d8 <Save_EEPROM+0x97c>
 800549e:	2303      	movs	r3, #3
 80054a0:	74fb      	strb	r3, [r7, #19]
 80054a2:	e019      	b.n	80054d8 <Save_EEPROM+0x97c>
 80054a4:	2304      	movs	r3, #4
 80054a6:	74fb      	strb	r3, [r7, #19]
 80054a8:	e016      	b.n	80054d8 <Save_EEPROM+0x97c>
 80054aa:	2305      	movs	r3, #5
 80054ac:	74fb      	strb	r3, [r7, #19]
 80054ae:	e013      	b.n	80054d8 <Save_EEPROM+0x97c>
 80054b0:	2306      	movs	r3, #6
 80054b2:	74fb      	strb	r3, [r7, #19]
 80054b4:	e010      	b.n	80054d8 <Save_EEPROM+0x97c>
 80054b6:	2307      	movs	r3, #7
 80054b8:	74fb      	strb	r3, [r7, #19]
 80054ba:	e00d      	b.n	80054d8 <Save_EEPROM+0x97c>
 80054bc:	2308      	movs	r3, #8
 80054be:	74fb      	strb	r3, [r7, #19]
 80054c0:	e00a      	b.n	80054d8 <Save_EEPROM+0x97c>
 80054c2:	2309      	movs	r3, #9
 80054c4:	74fb      	strb	r3, [r7, #19]
 80054c6:	e007      	b.n	80054d8 <Save_EEPROM+0x97c>
 80054c8:	230a      	movs	r3, #10
 80054ca:	74fb      	strb	r3, [r7, #19]
 80054cc:	e004      	b.n	80054d8 <Save_EEPROM+0x97c>
 80054ce:	230b      	movs	r3, #11
 80054d0:	74fb      	strb	r3, [r7, #19]
 80054d2:	e001      	b.n	80054d8 <Save_EEPROM+0x97c>
 80054d4:	2300      	movs	r3, #0
 80054d6:	74fb      	strb	r3, [r7, #19]
 80054d8:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[8], perCAN[ANALOG_1_4]);
 80054da:	4b55      	ldr	r3, [pc, #340]	; (8005630 <Save_EEPROM+0xad4>)
 80054dc:	881b      	ldrh	r3, [r3, #0]
 80054de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054e2:	f000 8082 	beq.w	80055ea <Save_EEPROM+0xa8e>
 80054e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054ea:	f300 80a3 	bgt.w	8005634 <Save_EEPROM+0xad8>
 80054ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80054f2:	d07d      	beq.n	80055f0 <Save_EEPROM+0xa94>
 80054f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80054f8:	f300 809c 	bgt.w	8005634 <Save_EEPROM+0xad8>
 80054fc:	2bc8      	cmp	r3, #200	; 0xc8
 80054fe:	d07a      	beq.n	80055f6 <Save_EEPROM+0xa9a>
 8005500:	2bc8      	cmp	r3, #200	; 0xc8
 8005502:	f300 8097 	bgt.w	8005634 <Save_EEPROM+0xad8>
 8005506:	2b32      	cmp	r3, #50	; 0x32
 8005508:	dc6c      	bgt.n	80055e4 <Save_EEPROM+0xa88>
 800550a:	2b02      	cmp	r3, #2
 800550c:	f2c0 8092 	blt.w	8005634 <Save_EEPROM+0xad8>
 8005510:	3b02      	subs	r3, #2
 8005512:	2b30      	cmp	r3, #48	; 0x30
 8005514:	f200 808e 	bhi.w	8005634 <Save_EEPROM+0xad8>
 8005518:	a201      	add	r2, pc, #4	; (adr r2, 8005520 <Save_EEPROM+0x9c4>)
 800551a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800551e:	bf00      	nop
 8005520:	08005627 	.word	0x08005627
 8005524:	08005635 	.word	0x08005635
 8005528:	08005621 	.word	0x08005621
 800552c:	0800561b 	.word	0x0800561b
 8005530:	08005635 	.word	0x08005635
 8005534:	08005635 	.word	0x08005635
 8005538:	08005635 	.word	0x08005635
 800553c:	08005635 	.word	0x08005635
 8005540:	08005615 	.word	0x08005615
 8005544:	08005635 	.word	0x08005635
 8005548:	08005635 	.word	0x08005635
 800554c:	08005635 	.word	0x08005635
 8005550:	08005635 	.word	0x08005635
 8005554:	08005635 	.word	0x08005635
 8005558:	08005635 	.word	0x08005635
 800555c:	08005635 	.word	0x08005635
 8005560:	08005635 	.word	0x08005635
 8005564:	08005635 	.word	0x08005635
 8005568:	0800560f 	.word	0x0800560f
 800556c:	08005635 	.word	0x08005635
 8005570:	08005635 	.word	0x08005635
 8005574:	08005635 	.word	0x08005635
 8005578:	08005635 	.word	0x08005635
 800557c:	08005635 	.word	0x08005635
 8005580:	08005635 	.word	0x08005635
 8005584:	08005635 	.word	0x08005635
 8005588:	08005635 	.word	0x08005635
 800558c:	08005635 	.word	0x08005635
 8005590:	08005635 	.word	0x08005635
 8005594:	08005635 	.word	0x08005635
 8005598:	08005635 	.word	0x08005635
 800559c:	08005635 	.word	0x08005635
 80055a0:	08005635 	.word	0x08005635
 80055a4:	08005635 	.word	0x08005635
 80055a8:	08005635 	.word	0x08005635
 80055ac:	08005635 	.word	0x08005635
 80055b0:	08005635 	.word	0x08005635
 80055b4:	08005635 	.word	0x08005635
 80055b8:	08005609 	.word	0x08005609
 80055bc:	08005635 	.word	0x08005635
 80055c0:	08005635 	.word	0x08005635
 80055c4:	08005635 	.word	0x08005635
 80055c8:	08005635 	.word	0x08005635
 80055cc:	08005635 	.word	0x08005635
 80055d0:	08005635 	.word	0x08005635
 80055d4:	08005635 	.word	0x08005635
 80055d8:	08005635 	.word	0x08005635
 80055dc:	08005635 	.word	0x08005635
 80055e0:	08005603 	.word	0x08005603
 80055e4:	2b64      	cmp	r3, #100	; 0x64
 80055e6:	d009      	beq.n	80055fc <Save_EEPROM+0xaa0>
 80055e8:	e024      	b.n	8005634 <Save_EEPROM+0xad8>
 80055ea:	2301      	movs	r3, #1
 80055ec:	753b      	strb	r3, [r7, #20]
 80055ee:	e023      	b.n	8005638 <Save_EEPROM+0xadc>
 80055f0:	2302      	movs	r3, #2
 80055f2:	753b      	strb	r3, [r7, #20]
 80055f4:	e020      	b.n	8005638 <Save_EEPROM+0xadc>
 80055f6:	2303      	movs	r3, #3
 80055f8:	753b      	strb	r3, [r7, #20]
 80055fa:	e01d      	b.n	8005638 <Save_EEPROM+0xadc>
 80055fc:	2304      	movs	r3, #4
 80055fe:	753b      	strb	r3, [r7, #20]
 8005600:	e01a      	b.n	8005638 <Save_EEPROM+0xadc>
 8005602:	2305      	movs	r3, #5
 8005604:	753b      	strb	r3, [r7, #20]
 8005606:	e017      	b.n	8005638 <Save_EEPROM+0xadc>
 8005608:	2306      	movs	r3, #6
 800560a:	753b      	strb	r3, [r7, #20]
 800560c:	e014      	b.n	8005638 <Save_EEPROM+0xadc>
 800560e:	2307      	movs	r3, #7
 8005610:	753b      	strb	r3, [r7, #20]
 8005612:	e011      	b.n	8005638 <Save_EEPROM+0xadc>
 8005614:	2308      	movs	r3, #8
 8005616:	753b      	strb	r3, [r7, #20]
 8005618:	e00e      	b.n	8005638 <Save_EEPROM+0xadc>
 800561a:	2309      	movs	r3, #9
 800561c:	753b      	strb	r3, [r7, #20]
 800561e:	e00b      	b.n	8005638 <Save_EEPROM+0xadc>
 8005620:	230a      	movs	r3, #10
 8005622:	753b      	strb	r3, [r7, #20]
 8005624:	e008      	b.n	8005638 <Save_EEPROM+0xadc>
 8005626:	230b      	movs	r3, #11
 8005628:	753b      	strb	r3, [r7, #20]
 800562a:	e005      	b.n	8005638 <Save_EEPROM+0xadc>
 800562c:	2000266c 	.word	0x2000266c
 8005630:	20002660 	.word	0x20002660
 8005634:	2300      	movs	r3, #0
 8005636:	753b      	strb	r3, [r7, #20]
 8005638:	bf00      	nop

	HAL_I2C_Master_Transmit(hi2c, EEPROM_ADDRESS_WRITE, buffer, EEPROM_BUFFER_SIZE_WRITE, EEPROM_TIMEOUT_WRITE);
 800563a:	f107 020c 	add.w	r2, r7, #12
 800563e:	230a      	movs	r3, #10
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	2309      	movs	r3, #9
 8005644:	21a0      	movs	r1, #160	; 0xa0
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f003 fd84 	bl	8009154 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 800564c:	200a      	movs	r0, #10
 800564e:	f001 fa91 	bl	8006b74 <HAL_Delay>

	buffer[0] = 0x08;
 8005652:	2308      	movs	r3, #8
 8005654:	733b      	strb	r3, [r7, #12]

	__FREQ_TO_BUFFER(buffer[1], perCAN[ANALOG_5_8]);
 8005656:	4baa      	ldr	r3, [pc, #680]	; (8005900 <Save_EEPROM+0xda4>)
 8005658:	885b      	ldrh	r3, [r3, #2]
 800565a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800565e:	f000 8082 	beq.w	8005766 <Save_EEPROM+0xc0a>
 8005662:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005666:	f300 809f 	bgt.w	80057a8 <Save_EEPROM+0xc4c>
 800566a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800566e:	d07d      	beq.n	800576c <Save_EEPROM+0xc10>
 8005670:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005674:	f300 8098 	bgt.w	80057a8 <Save_EEPROM+0xc4c>
 8005678:	2bc8      	cmp	r3, #200	; 0xc8
 800567a:	d07a      	beq.n	8005772 <Save_EEPROM+0xc16>
 800567c:	2bc8      	cmp	r3, #200	; 0xc8
 800567e:	f300 8093 	bgt.w	80057a8 <Save_EEPROM+0xc4c>
 8005682:	2b32      	cmp	r3, #50	; 0x32
 8005684:	dc6c      	bgt.n	8005760 <Save_EEPROM+0xc04>
 8005686:	2b02      	cmp	r3, #2
 8005688:	f2c0 808e 	blt.w	80057a8 <Save_EEPROM+0xc4c>
 800568c:	3b02      	subs	r3, #2
 800568e:	2b30      	cmp	r3, #48	; 0x30
 8005690:	f200 808a 	bhi.w	80057a8 <Save_EEPROM+0xc4c>
 8005694:	a201      	add	r2, pc, #4	; (adr r2, 800569c <Save_EEPROM+0xb40>)
 8005696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569a:	bf00      	nop
 800569c:	080057a3 	.word	0x080057a3
 80056a0:	080057a9 	.word	0x080057a9
 80056a4:	0800579d 	.word	0x0800579d
 80056a8:	08005797 	.word	0x08005797
 80056ac:	080057a9 	.word	0x080057a9
 80056b0:	080057a9 	.word	0x080057a9
 80056b4:	080057a9 	.word	0x080057a9
 80056b8:	080057a9 	.word	0x080057a9
 80056bc:	08005791 	.word	0x08005791
 80056c0:	080057a9 	.word	0x080057a9
 80056c4:	080057a9 	.word	0x080057a9
 80056c8:	080057a9 	.word	0x080057a9
 80056cc:	080057a9 	.word	0x080057a9
 80056d0:	080057a9 	.word	0x080057a9
 80056d4:	080057a9 	.word	0x080057a9
 80056d8:	080057a9 	.word	0x080057a9
 80056dc:	080057a9 	.word	0x080057a9
 80056e0:	080057a9 	.word	0x080057a9
 80056e4:	0800578b 	.word	0x0800578b
 80056e8:	080057a9 	.word	0x080057a9
 80056ec:	080057a9 	.word	0x080057a9
 80056f0:	080057a9 	.word	0x080057a9
 80056f4:	080057a9 	.word	0x080057a9
 80056f8:	080057a9 	.word	0x080057a9
 80056fc:	080057a9 	.word	0x080057a9
 8005700:	080057a9 	.word	0x080057a9
 8005704:	080057a9 	.word	0x080057a9
 8005708:	080057a9 	.word	0x080057a9
 800570c:	080057a9 	.word	0x080057a9
 8005710:	080057a9 	.word	0x080057a9
 8005714:	080057a9 	.word	0x080057a9
 8005718:	080057a9 	.word	0x080057a9
 800571c:	080057a9 	.word	0x080057a9
 8005720:	080057a9 	.word	0x080057a9
 8005724:	080057a9 	.word	0x080057a9
 8005728:	080057a9 	.word	0x080057a9
 800572c:	080057a9 	.word	0x080057a9
 8005730:	080057a9 	.word	0x080057a9
 8005734:	08005785 	.word	0x08005785
 8005738:	080057a9 	.word	0x080057a9
 800573c:	080057a9 	.word	0x080057a9
 8005740:	080057a9 	.word	0x080057a9
 8005744:	080057a9 	.word	0x080057a9
 8005748:	080057a9 	.word	0x080057a9
 800574c:	080057a9 	.word	0x080057a9
 8005750:	080057a9 	.word	0x080057a9
 8005754:	080057a9 	.word	0x080057a9
 8005758:	080057a9 	.word	0x080057a9
 800575c:	0800577f 	.word	0x0800577f
 8005760:	2b64      	cmp	r3, #100	; 0x64
 8005762:	d009      	beq.n	8005778 <Save_EEPROM+0xc1c>
 8005764:	e020      	b.n	80057a8 <Save_EEPROM+0xc4c>
 8005766:	2301      	movs	r3, #1
 8005768:	737b      	strb	r3, [r7, #13]
 800576a:	e01f      	b.n	80057ac <Save_EEPROM+0xc50>
 800576c:	2302      	movs	r3, #2
 800576e:	737b      	strb	r3, [r7, #13]
 8005770:	e01c      	b.n	80057ac <Save_EEPROM+0xc50>
 8005772:	2303      	movs	r3, #3
 8005774:	737b      	strb	r3, [r7, #13]
 8005776:	e019      	b.n	80057ac <Save_EEPROM+0xc50>
 8005778:	2304      	movs	r3, #4
 800577a:	737b      	strb	r3, [r7, #13]
 800577c:	e016      	b.n	80057ac <Save_EEPROM+0xc50>
 800577e:	2305      	movs	r3, #5
 8005780:	737b      	strb	r3, [r7, #13]
 8005782:	e013      	b.n	80057ac <Save_EEPROM+0xc50>
 8005784:	2306      	movs	r3, #6
 8005786:	737b      	strb	r3, [r7, #13]
 8005788:	e010      	b.n	80057ac <Save_EEPROM+0xc50>
 800578a:	2307      	movs	r3, #7
 800578c:	737b      	strb	r3, [r7, #13]
 800578e:	e00d      	b.n	80057ac <Save_EEPROM+0xc50>
 8005790:	2308      	movs	r3, #8
 8005792:	737b      	strb	r3, [r7, #13]
 8005794:	e00a      	b.n	80057ac <Save_EEPROM+0xc50>
 8005796:	2309      	movs	r3, #9
 8005798:	737b      	strb	r3, [r7, #13]
 800579a:	e007      	b.n	80057ac <Save_EEPROM+0xc50>
 800579c:	230a      	movs	r3, #10
 800579e:	737b      	strb	r3, [r7, #13]
 80057a0:	e004      	b.n	80057ac <Save_EEPROM+0xc50>
 80057a2:	230b      	movs	r3, #11
 80057a4:	737b      	strb	r3, [r7, #13]
 80057a6:	e001      	b.n	80057ac <Save_EEPROM+0xc50>
 80057a8:	2300      	movs	r3, #0
 80057aa:	737b      	strb	r3, [r7, #13]
 80057ac:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[2], perCAN[ANALOG_9_12]);
 80057ae:	4b54      	ldr	r3, [pc, #336]	; (8005900 <Save_EEPROM+0xda4>)
 80057b0:	889b      	ldrh	r3, [r3, #4]
 80057b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057b6:	f000 8082 	beq.w	80058be <Save_EEPROM+0xd62>
 80057ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057be:	f300 80a1 	bgt.w	8005904 <Save_EEPROM+0xda8>
 80057c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80057c6:	d07d      	beq.n	80058c4 <Save_EEPROM+0xd68>
 80057c8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80057cc:	f300 809a 	bgt.w	8005904 <Save_EEPROM+0xda8>
 80057d0:	2bc8      	cmp	r3, #200	; 0xc8
 80057d2:	d07a      	beq.n	80058ca <Save_EEPROM+0xd6e>
 80057d4:	2bc8      	cmp	r3, #200	; 0xc8
 80057d6:	f300 8095 	bgt.w	8005904 <Save_EEPROM+0xda8>
 80057da:	2b32      	cmp	r3, #50	; 0x32
 80057dc:	dc6c      	bgt.n	80058b8 <Save_EEPROM+0xd5c>
 80057de:	2b02      	cmp	r3, #2
 80057e0:	f2c0 8090 	blt.w	8005904 <Save_EEPROM+0xda8>
 80057e4:	3b02      	subs	r3, #2
 80057e6:	2b30      	cmp	r3, #48	; 0x30
 80057e8:	f200 808c 	bhi.w	8005904 <Save_EEPROM+0xda8>
 80057ec:	a201      	add	r2, pc, #4	; (adr r2, 80057f4 <Save_EEPROM+0xc98>)
 80057ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f2:	bf00      	nop
 80057f4:	080058fb 	.word	0x080058fb
 80057f8:	08005905 	.word	0x08005905
 80057fc:	080058f5 	.word	0x080058f5
 8005800:	080058ef 	.word	0x080058ef
 8005804:	08005905 	.word	0x08005905
 8005808:	08005905 	.word	0x08005905
 800580c:	08005905 	.word	0x08005905
 8005810:	08005905 	.word	0x08005905
 8005814:	080058e9 	.word	0x080058e9
 8005818:	08005905 	.word	0x08005905
 800581c:	08005905 	.word	0x08005905
 8005820:	08005905 	.word	0x08005905
 8005824:	08005905 	.word	0x08005905
 8005828:	08005905 	.word	0x08005905
 800582c:	08005905 	.word	0x08005905
 8005830:	08005905 	.word	0x08005905
 8005834:	08005905 	.word	0x08005905
 8005838:	08005905 	.word	0x08005905
 800583c:	080058e3 	.word	0x080058e3
 8005840:	08005905 	.word	0x08005905
 8005844:	08005905 	.word	0x08005905
 8005848:	08005905 	.word	0x08005905
 800584c:	08005905 	.word	0x08005905
 8005850:	08005905 	.word	0x08005905
 8005854:	08005905 	.word	0x08005905
 8005858:	08005905 	.word	0x08005905
 800585c:	08005905 	.word	0x08005905
 8005860:	08005905 	.word	0x08005905
 8005864:	08005905 	.word	0x08005905
 8005868:	08005905 	.word	0x08005905
 800586c:	08005905 	.word	0x08005905
 8005870:	08005905 	.word	0x08005905
 8005874:	08005905 	.word	0x08005905
 8005878:	08005905 	.word	0x08005905
 800587c:	08005905 	.word	0x08005905
 8005880:	08005905 	.word	0x08005905
 8005884:	08005905 	.word	0x08005905
 8005888:	08005905 	.word	0x08005905
 800588c:	080058dd 	.word	0x080058dd
 8005890:	08005905 	.word	0x08005905
 8005894:	08005905 	.word	0x08005905
 8005898:	08005905 	.word	0x08005905
 800589c:	08005905 	.word	0x08005905
 80058a0:	08005905 	.word	0x08005905
 80058a4:	08005905 	.word	0x08005905
 80058a8:	08005905 	.word	0x08005905
 80058ac:	08005905 	.word	0x08005905
 80058b0:	08005905 	.word	0x08005905
 80058b4:	080058d7 	.word	0x080058d7
 80058b8:	2b64      	cmp	r3, #100	; 0x64
 80058ba:	d009      	beq.n	80058d0 <Save_EEPROM+0xd74>
 80058bc:	e022      	b.n	8005904 <Save_EEPROM+0xda8>
 80058be:	2301      	movs	r3, #1
 80058c0:	73bb      	strb	r3, [r7, #14]
 80058c2:	e021      	b.n	8005908 <Save_EEPROM+0xdac>
 80058c4:	2302      	movs	r3, #2
 80058c6:	73bb      	strb	r3, [r7, #14]
 80058c8:	e01e      	b.n	8005908 <Save_EEPROM+0xdac>
 80058ca:	2303      	movs	r3, #3
 80058cc:	73bb      	strb	r3, [r7, #14]
 80058ce:	e01b      	b.n	8005908 <Save_EEPROM+0xdac>
 80058d0:	2304      	movs	r3, #4
 80058d2:	73bb      	strb	r3, [r7, #14]
 80058d4:	e018      	b.n	8005908 <Save_EEPROM+0xdac>
 80058d6:	2305      	movs	r3, #5
 80058d8:	73bb      	strb	r3, [r7, #14]
 80058da:	e015      	b.n	8005908 <Save_EEPROM+0xdac>
 80058dc:	2306      	movs	r3, #6
 80058de:	73bb      	strb	r3, [r7, #14]
 80058e0:	e012      	b.n	8005908 <Save_EEPROM+0xdac>
 80058e2:	2307      	movs	r3, #7
 80058e4:	73bb      	strb	r3, [r7, #14]
 80058e6:	e00f      	b.n	8005908 <Save_EEPROM+0xdac>
 80058e8:	2308      	movs	r3, #8
 80058ea:	73bb      	strb	r3, [r7, #14]
 80058ec:	e00c      	b.n	8005908 <Save_EEPROM+0xdac>
 80058ee:	2309      	movs	r3, #9
 80058f0:	73bb      	strb	r3, [r7, #14]
 80058f2:	e009      	b.n	8005908 <Save_EEPROM+0xdac>
 80058f4:	230a      	movs	r3, #10
 80058f6:	73bb      	strb	r3, [r7, #14]
 80058f8:	e006      	b.n	8005908 <Save_EEPROM+0xdac>
 80058fa:	230b      	movs	r3, #11
 80058fc:	73bb      	strb	r3, [r7, #14]
 80058fe:	e003      	b.n	8005908 <Save_EEPROM+0xdac>
 8005900:	20002660 	.word	0x20002660
 8005904:	2300      	movs	r3, #0
 8005906:	73bb      	strb	r3, [r7, #14]
 8005908:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[3], perCAN[RTC_MSG]);
 800590a:	4bcd      	ldr	r3, [pc, #820]	; (8005c40 <Save_EEPROM+0x10e4>)
 800590c:	88db      	ldrh	r3, [r3, #6]
 800590e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005912:	f000 8082 	beq.w	8005a1a <Save_EEPROM+0xebe>
 8005916:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800591a:	f300 809f 	bgt.w	8005a5c <Save_EEPROM+0xf00>
 800591e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005922:	d07d      	beq.n	8005a20 <Save_EEPROM+0xec4>
 8005924:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005928:	f300 8098 	bgt.w	8005a5c <Save_EEPROM+0xf00>
 800592c:	2bc8      	cmp	r3, #200	; 0xc8
 800592e:	d07a      	beq.n	8005a26 <Save_EEPROM+0xeca>
 8005930:	2bc8      	cmp	r3, #200	; 0xc8
 8005932:	f300 8093 	bgt.w	8005a5c <Save_EEPROM+0xf00>
 8005936:	2b32      	cmp	r3, #50	; 0x32
 8005938:	dc6c      	bgt.n	8005a14 <Save_EEPROM+0xeb8>
 800593a:	2b02      	cmp	r3, #2
 800593c:	f2c0 808e 	blt.w	8005a5c <Save_EEPROM+0xf00>
 8005940:	3b02      	subs	r3, #2
 8005942:	2b30      	cmp	r3, #48	; 0x30
 8005944:	f200 808a 	bhi.w	8005a5c <Save_EEPROM+0xf00>
 8005948:	a201      	add	r2, pc, #4	; (adr r2, 8005950 <Save_EEPROM+0xdf4>)
 800594a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800594e:	bf00      	nop
 8005950:	08005a57 	.word	0x08005a57
 8005954:	08005a5d 	.word	0x08005a5d
 8005958:	08005a51 	.word	0x08005a51
 800595c:	08005a4b 	.word	0x08005a4b
 8005960:	08005a5d 	.word	0x08005a5d
 8005964:	08005a5d 	.word	0x08005a5d
 8005968:	08005a5d 	.word	0x08005a5d
 800596c:	08005a5d 	.word	0x08005a5d
 8005970:	08005a45 	.word	0x08005a45
 8005974:	08005a5d 	.word	0x08005a5d
 8005978:	08005a5d 	.word	0x08005a5d
 800597c:	08005a5d 	.word	0x08005a5d
 8005980:	08005a5d 	.word	0x08005a5d
 8005984:	08005a5d 	.word	0x08005a5d
 8005988:	08005a5d 	.word	0x08005a5d
 800598c:	08005a5d 	.word	0x08005a5d
 8005990:	08005a5d 	.word	0x08005a5d
 8005994:	08005a5d 	.word	0x08005a5d
 8005998:	08005a3f 	.word	0x08005a3f
 800599c:	08005a5d 	.word	0x08005a5d
 80059a0:	08005a5d 	.word	0x08005a5d
 80059a4:	08005a5d 	.word	0x08005a5d
 80059a8:	08005a5d 	.word	0x08005a5d
 80059ac:	08005a5d 	.word	0x08005a5d
 80059b0:	08005a5d 	.word	0x08005a5d
 80059b4:	08005a5d 	.word	0x08005a5d
 80059b8:	08005a5d 	.word	0x08005a5d
 80059bc:	08005a5d 	.word	0x08005a5d
 80059c0:	08005a5d 	.word	0x08005a5d
 80059c4:	08005a5d 	.word	0x08005a5d
 80059c8:	08005a5d 	.word	0x08005a5d
 80059cc:	08005a5d 	.word	0x08005a5d
 80059d0:	08005a5d 	.word	0x08005a5d
 80059d4:	08005a5d 	.word	0x08005a5d
 80059d8:	08005a5d 	.word	0x08005a5d
 80059dc:	08005a5d 	.word	0x08005a5d
 80059e0:	08005a5d 	.word	0x08005a5d
 80059e4:	08005a5d 	.word	0x08005a5d
 80059e8:	08005a39 	.word	0x08005a39
 80059ec:	08005a5d 	.word	0x08005a5d
 80059f0:	08005a5d 	.word	0x08005a5d
 80059f4:	08005a5d 	.word	0x08005a5d
 80059f8:	08005a5d 	.word	0x08005a5d
 80059fc:	08005a5d 	.word	0x08005a5d
 8005a00:	08005a5d 	.word	0x08005a5d
 8005a04:	08005a5d 	.word	0x08005a5d
 8005a08:	08005a5d 	.word	0x08005a5d
 8005a0c:	08005a5d 	.word	0x08005a5d
 8005a10:	08005a33 	.word	0x08005a33
 8005a14:	2b64      	cmp	r3, #100	; 0x64
 8005a16:	d009      	beq.n	8005a2c <Save_EEPROM+0xed0>
 8005a18:	e020      	b.n	8005a5c <Save_EEPROM+0xf00>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	73fb      	strb	r3, [r7, #15]
 8005a1e:	e01f      	b.n	8005a60 <Save_EEPROM+0xf04>
 8005a20:	2302      	movs	r3, #2
 8005a22:	73fb      	strb	r3, [r7, #15]
 8005a24:	e01c      	b.n	8005a60 <Save_EEPROM+0xf04>
 8005a26:	2303      	movs	r3, #3
 8005a28:	73fb      	strb	r3, [r7, #15]
 8005a2a:	e019      	b.n	8005a60 <Save_EEPROM+0xf04>
 8005a2c:	2304      	movs	r3, #4
 8005a2e:	73fb      	strb	r3, [r7, #15]
 8005a30:	e016      	b.n	8005a60 <Save_EEPROM+0xf04>
 8005a32:	2305      	movs	r3, #5
 8005a34:	73fb      	strb	r3, [r7, #15]
 8005a36:	e013      	b.n	8005a60 <Save_EEPROM+0xf04>
 8005a38:	2306      	movs	r3, #6
 8005a3a:	73fb      	strb	r3, [r7, #15]
 8005a3c:	e010      	b.n	8005a60 <Save_EEPROM+0xf04>
 8005a3e:	2307      	movs	r3, #7
 8005a40:	73fb      	strb	r3, [r7, #15]
 8005a42:	e00d      	b.n	8005a60 <Save_EEPROM+0xf04>
 8005a44:	2308      	movs	r3, #8
 8005a46:	73fb      	strb	r3, [r7, #15]
 8005a48:	e00a      	b.n	8005a60 <Save_EEPROM+0xf04>
 8005a4a:	2309      	movs	r3, #9
 8005a4c:	73fb      	strb	r3, [r7, #15]
 8005a4e:	e007      	b.n	8005a60 <Save_EEPROM+0xf04>
 8005a50:	230a      	movs	r3, #10
 8005a52:	73fb      	strb	r3, [r7, #15]
 8005a54:	e004      	b.n	8005a60 <Save_EEPROM+0xf04>
 8005a56:	230b      	movs	r3, #11
 8005a58:	73fb      	strb	r3, [r7, #15]
 8005a5a:	e001      	b.n	8005a60 <Save_EEPROM+0xf04>
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	73fb      	strb	r3, [r7, #15]
 8005a60:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[4], perCAN[VERIFY_MSG]);
 8005a62:	4b77      	ldr	r3, [pc, #476]	; (8005c40 <Save_EEPROM+0x10e4>)
 8005a64:	891b      	ldrh	r3, [r3, #8]
 8005a66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a6a:	f000 8082 	beq.w	8005b72 <Save_EEPROM+0x1016>
 8005a6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a72:	f300 809f 	bgt.w	8005bb4 <Save_EEPROM+0x1058>
 8005a76:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005a7a:	d07d      	beq.n	8005b78 <Save_EEPROM+0x101c>
 8005a7c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005a80:	f300 8098 	bgt.w	8005bb4 <Save_EEPROM+0x1058>
 8005a84:	2bc8      	cmp	r3, #200	; 0xc8
 8005a86:	d07a      	beq.n	8005b7e <Save_EEPROM+0x1022>
 8005a88:	2bc8      	cmp	r3, #200	; 0xc8
 8005a8a:	f300 8093 	bgt.w	8005bb4 <Save_EEPROM+0x1058>
 8005a8e:	2b32      	cmp	r3, #50	; 0x32
 8005a90:	dc6c      	bgt.n	8005b6c <Save_EEPROM+0x1010>
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	f2c0 808e 	blt.w	8005bb4 <Save_EEPROM+0x1058>
 8005a98:	3b02      	subs	r3, #2
 8005a9a:	2b30      	cmp	r3, #48	; 0x30
 8005a9c:	f200 808a 	bhi.w	8005bb4 <Save_EEPROM+0x1058>
 8005aa0:	a201      	add	r2, pc, #4	; (adr r2, 8005aa8 <Save_EEPROM+0xf4c>)
 8005aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa6:	bf00      	nop
 8005aa8:	08005baf 	.word	0x08005baf
 8005aac:	08005bb5 	.word	0x08005bb5
 8005ab0:	08005ba9 	.word	0x08005ba9
 8005ab4:	08005ba3 	.word	0x08005ba3
 8005ab8:	08005bb5 	.word	0x08005bb5
 8005abc:	08005bb5 	.word	0x08005bb5
 8005ac0:	08005bb5 	.word	0x08005bb5
 8005ac4:	08005bb5 	.word	0x08005bb5
 8005ac8:	08005b9d 	.word	0x08005b9d
 8005acc:	08005bb5 	.word	0x08005bb5
 8005ad0:	08005bb5 	.word	0x08005bb5
 8005ad4:	08005bb5 	.word	0x08005bb5
 8005ad8:	08005bb5 	.word	0x08005bb5
 8005adc:	08005bb5 	.word	0x08005bb5
 8005ae0:	08005bb5 	.word	0x08005bb5
 8005ae4:	08005bb5 	.word	0x08005bb5
 8005ae8:	08005bb5 	.word	0x08005bb5
 8005aec:	08005bb5 	.word	0x08005bb5
 8005af0:	08005b97 	.word	0x08005b97
 8005af4:	08005bb5 	.word	0x08005bb5
 8005af8:	08005bb5 	.word	0x08005bb5
 8005afc:	08005bb5 	.word	0x08005bb5
 8005b00:	08005bb5 	.word	0x08005bb5
 8005b04:	08005bb5 	.word	0x08005bb5
 8005b08:	08005bb5 	.word	0x08005bb5
 8005b0c:	08005bb5 	.word	0x08005bb5
 8005b10:	08005bb5 	.word	0x08005bb5
 8005b14:	08005bb5 	.word	0x08005bb5
 8005b18:	08005bb5 	.word	0x08005bb5
 8005b1c:	08005bb5 	.word	0x08005bb5
 8005b20:	08005bb5 	.word	0x08005bb5
 8005b24:	08005bb5 	.word	0x08005bb5
 8005b28:	08005bb5 	.word	0x08005bb5
 8005b2c:	08005bb5 	.word	0x08005bb5
 8005b30:	08005bb5 	.word	0x08005bb5
 8005b34:	08005bb5 	.word	0x08005bb5
 8005b38:	08005bb5 	.word	0x08005bb5
 8005b3c:	08005bb5 	.word	0x08005bb5
 8005b40:	08005b91 	.word	0x08005b91
 8005b44:	08005bb5 	.word	0x08005bb5
 8005b48:	08005bb5 	.word	0x08005bb5
 8005b4c:	08005bb5 	.word	0x08005bb5
 8005b50:	08005bb5 	.word	0x08005bb5
 8005b54:	08005bb5 	.word	0x08005bb5
 8005b58:	08005bb5 	.word	0x08005bb5
 8005b5c:	08005bb5 	.word	0x08005bb5
 8005b60:	08005bb5 	.word	0x08005bb5
 8005b64:	08005bb5 	.word	0x08005bb5
 8005b68:	08005b8b 	.word	0x08005b8b
 8005b6c:	2b64      	cmp	r3, #100	; 0x64
 8005b6e:	d009      	beq.n	8005b84 <Save_EEPROM+0x1028>
 8005b70:	e020      	b.n	8005bb4 <Save_EEPROM+0x1058>
 8005b72:	2301      	movs	r3, #1
 8005b74:	743b      	strb	r3, [r7, #16]
 8005b76:	e01f      	b.n	8005bb8 <Save_EEPROM+0x105c>
 8005b78:	2302      	movs	r3, #2
 8005b7a:	743b      	strb	r3, [r7, #16]
 8005b7c:	e01c      	b.n	8005bb8 <Save_EEPROM+0x105c>
 8005b7e:	2303      	movs	r3, #3
 8005b80:	743b      	strb	r3, [r7, #16]
 8005b82:	e019      	b.n	8005bb8 <Save_EEPROM+0x105c>
 8005b84:	2304      	movs	r3, #4
 8005b86:	743b      	strb	r3, [r7, #16]
 8005b88:	e016      	b.n	8005bb8 <Save_EEPROM+0x105c>
 8005b8a:	2305      	movs	r3, #5
 8005b8c:	743b      	strb	r3, [r7, #16]
 8005b8e:	e013      	b.n	8005bb8 <Save_EEPROM+0x105c>
 8005b90:	2306      	movs	r3, #6
 8005b92:	743b      	strb	r3, [r7, #16]
 8005b94:	e010      	b.n	8005bb8 <Save_EEPROM+0x105c>
 8005b96:	2307      	movs	r3, #7
 8005b98:	743b      	strb	r3, [r7, #16]
 8005b9a:	e00d      	b.n	8005bb8 <Save_EEPROM+0x105c>
 8005b9c:	2308      	movs	r3, #8
 8005b9e:	743b      	strb	r3, [r7, #16]
 8005ba0:	e00a      	b.n	8005bb8 <Save_EEPROM+0x105c>
 8005ba2:	2309      	movs	r3, #9
 8005ba4:	743b      	strb	r3, [r7, #16]
 8005ba6:	e007      	b.n	8005bb8 <Save_EEPROM+0x105c>
 8005ba8:	230a      	movs	r3, #10
 8005baa:	743b      	strb	r3, [r7, #16]
 8005bac:	e004      	b.n	8005bb8 <Save_EEPROM+0x105c>
 8005bae:	230b      	movs	r3, #11
 8005bb0:	743b      	strb	r3, [r7, #16]
 8005bb2:	e001      	b.n	8005bb8 <Save_EEPROM+0x105c>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	743b      	strb	r3, [r7, #16]
 8005bb8:	bf00      	nop

	buffer[5] = inputConfig;
 8005bba:	4b22      	ldr	r3, [pc, #136]	; (8005c44 <Save_EEPROM+0x10e8>)
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	747b      	strb	r3, [r7, #17]
	buffer[6] = thresholdBeacon >> 8;
 8005bc0:	4b21      	ldr	r3, [pc, #132]	; (8005c48 <Save_EEPROM+0x10ec>)
 8005bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bc6:	121b      	asrs	r3, r3, #8
 8005bc8:	b21b      	sxth	r3, r3
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	74bb      	strb	r3, [r7, #18]
	buffer[7] = thresholdBeacon & 0xff;
 8005bce:	4b1e      	ldr	r3, [pc, #120]	; (8005c48 <Save_EEPROM+0x10ec>)
 8005bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	74fb      	strb	r3, [r7, #19]
	buffer[8] = thresholdRPM >> 8;
 8005bd8:	4b1c      	ldr	r3, [pc, #112]	; (8005c4c <Save_EEPROM+0x10f0>)
 8005bda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bde:	121b      	asrs	r3, r3, #8
 8005be0:	b21b      	sxth	r3, r3
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	753b      	strb	r3, [r7, #20]

	HAL_I2C_Master_Transmit(hi2c, EEPROM_ADDRESS_WRITE, buffer, EEPROM_BUFFER_SIZE_WRITE, EEPROM_TIMEOUT_WRITE);
 8005be6:	f107 020c 	add.w	r2, r7, #12
 8005bea:	230a      	movs	r3, #10
 8005bec:	9300      	str	r3, [sp, #0]
 8005bee:	2309      	movs	r3, #9
 8005bf0:	21a0      	movs	r1, #160	; 0xa0
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f003 faae 	bl	8009154 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8005bf8:	200a      	movs	r0, #10
 8005bfa:	f000 ffbb 	bl	8006b74 <HAL_Delay>

	buffer[0] = 0x10;
 8005bfe:	2310      	movs	r3, #16
 8005c00:	733b      	strb	r3, [r7, #12]
	buffer[1] = thresholdRPM & 0xff;
 8005c02:	4b12      	ldr	r3, [pc, #72]	; (8005c4c <Save_EEPROM+0x10f0>)
 8005c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	737b      	strb	r3, [r7, #13]
	buffer[2] = thresholdSpeed >> 8;
 8005c0c:	4b10      	ldr	r3, [pc, #64]	; (8005c50 <Save_EEPROM+0x10f4>)
 8005c0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c12:	121b      	asrs	r3, r3, #8
 8005c14:	b21b      	sxth	r3, r3
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	73bb      	strb	r3, [r7, #14]
	buffer[3] = thresholdSpeed & 0xff;
 8005c1a:	4b0d      	ldr	r3, [pc, #52]	; (8005c50 <Save_EEPROM+0x10f4>)
 8005c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	73fb      	strb	r3, [r7, #15]

	return HAL_I2C_Master_Transmit(hi2c, EEPROM_ADDRESS_WRITE, buffer, 4, EEPROM_TIMEOUT_WRITE);
 8005c24:	f107 020c 	add.w	r2, r7, #12
 8005c28:	230a      	movs	r3, #10
 8005c2a:	9300      	str	r3, [sp, #0]
 8005c2c:	2304      	movs	r3, #4
 8005c2e:	21a0      	movs	r1, #160	; 0xa0
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f003 fa8f 	bl	8009154 <HAL_I2C_Master_Transmit>
 8005c36:	4603      	mov	r3, r0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	20002660 	.word	0x20002660
 8005c44:	20002644 	.word	0x20002644
 8005c48:	2000252e 	.word	0x2000252e
 8005c4c:	20002530 	.word	0x20002530
 8005c50:	20002532 	.word	0x20002532

08005c54 <Principal_Datalogger_Init>:
int16_t thresholdRPM;
int16_t thresholdSpeed;


FRESULT Principal_Datalogger_Init()
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
	FRESULT retVal = FR_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	71fb      	strb	r3, [r7, #7]

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005c5e:	2180      	movs	r1, #128	; 0x80
 8005c60:	4812      	ldr	r0, [pc, #72]	; (8005cac <Principal_Datalogger_Init+0x58>)
 8005c62:	f003 f8cf 	bl	8008e04 <HAL_GPIO_ReadPin>
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d104      	bne.n	8005c76 <Principal_Datalogger_Init+0x22>
	{
		flagDatalogger = DL_NO_CARD;
 8005c6c:	4b10      	ldr	r3, [pc, #64]	; (8005cb0 <Principal_Datalogger_Init+0x5c>)
 8005c6e:	2202      	movs	r2, #2
 8005c70:	701a      	strb	r2, [r3, #0]
		return FR_DISK_ERR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e016      	b.n	8005ca4 <Principal_Datalogger_Init+0x50>
	}

	BSP_SD_Init();
 8005c76:	f00b f973 	bl	8010f60 <BSP_SD_Init>

	retVal = f_mount(&fatfsStruct, SDPath, 1);
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	490d      	ldr	r1, [pc, #52]	; (8005cb4 <Principal_Datalogger_Init+0x60>)
 8005c7e:	480e      	ldr	r0, [pc, #56]	; (8005cb8 <Principal_Datalogger_Init+0x64>)
 8005c80:	f010 fe4e 	bl	8016920 <f_mount>
 8005c84:	4603      	mov	r3, r0
 8005c86:	71fb      	strb	r3, [r7, #7]

	if(retVal == FR_OK)
 8005c88:	79fb      	ldrb	r3, [r7, #7]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d103      	bne.n	8005c96 <Principal_Datalogger_Init+0x42>
		flagDatalogger = DL_NO_SAVE;
 8005c8e:	4b08      	ldr	r3, [pc, #32]	; (8005cb0 <Principal_Datalogger_Init+0x5c>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	701a      	strb	r2, [r3, #0]
 8005c94:	e002      	b.n	8005c9c <Principal_Datalogger_Init+0x48>

	else
		flagDatalogger = DL_ERROR;
 8005c96:	4b06      	ldr	r3, [pc, #24]	; (8005cb0 <Principal_Datalogger_Init+0x5c>)
 8005c98:	2204      	movs	r2, #4
 8005c9a:	701a      	strb	r2, [r3, #0]

	accDatalogger[DL_ACC_COOLDOWN] = DATALOGGER_COOLDOWN;
 8005c9c:	4b07      	ldr	r3, [pc, #28]	; (8005cbc <Principal_Datalogger_Init+0x68>)
 8005c9e:	22fa      	movs	r2, #250	; 0xfa
 8005ca0:	601a      	str	r2, [r3, #0]

	return retVal;
 8005ca2:	79fb      	ldrb	r3, [r7, #7]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	40020800 	.word	0x40020800
 8005cb0:	20002642 	.word	0x20002642
 8005cb4:	200026dc 	.word	0x200026dc
 8005cb8:	20000470 	.word	0x20000470
 8005cbc:	20002680 	.word	0x20002680

08005cc0 <Principal_Datalogger_Start>:

FRESULT Principal_Datalogger_Start()
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08c      	sub	sp, #48	; 0x30
 8005cc4:	af04      	add	r7, sp, #16
	FRESULT retVal = FR_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	77fb      	strb	r3, [r7, #31]

	if((flagDatalogger != DL_BUT_START) && (flagDatalogger != DL_NO_SAVE))
 8005cca:	4b50      	ldr	r3, [pc, #320]	; (8005e0c <Principal_Datalogger_Start+0x14c>)
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	d005      	beq.n	8005cde <Principal_Datalogger_Start+0x1e>
 8005cd2:	4b4e      	ldr	r3, [pc, #312]	; (8005e0c <Principal_Datalogger_Start+0x14c>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <Principal_Datalogger_Start+0x1e>
		return retVal;
 8005cda:	7ffb      	ldrb	r3, [r7, #31]
 8005cdc:	e092      	b.n	8005e04 <Principal_Datalogger_Start+0x144>

	else if((flagRTC != RTC_OK)
 8005cde:	4b4c      	ldr	r3, [pc, #304]	; (8005e10 <Principal_Datalogger_Start+0x150>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d12b      	bne.n	8005d3e <Principal_Datalogger_Start+0x7e>
			|| ((flagDatalogger != DL_BUT_START)
 8005ce6:	4b49      	ldr	r3, [pc, #292]	; (8005e0c <Principal_Datalogger_Start+0x14c>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	2b03      	cmp	r3, #3
 8005cec:	d02c      	beq.n	8005d48 <Principal_Datalogger_Start+0x88>
			&& __DL_THR_COND()))
 8005cee:	4b49      	ldr	r3, [pc, #292]	; (8005e14 <Principal_Datalogger_Start+0x154>)
 8005cf0:	f9b3 2052 	ldrsh.w	r2, [r3, #82]	; 0x52
 8005cf4:	4b48      	ldr	r3, [pc, #288]	; (8005e18 <Principal_Datalogger_Start+0x158>)
 8005cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	db1f      	blt.n	8005d3e <Principal_Datalogger_Start+0x7e>
 8005cfe:	4b45      	ldr	r3, [pc, #276]	; (8005e14 <Principal_Datalogger_Start+0x154>)
 8005d00:	f9b3 2056 	ldrsh.w	r2, [r3, #86]	; 0x56
 8005d04:	4b45      	ldr	r3, [pc, #276]	; (8005e1c <Principal_Datalogger_Start+0x15c>)
 8005d06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	da1c      	bge.n	8005d48 <Principal_Datalogger_Start+0x88>
 8005d0e:	4b41      	ldr	r3, [pc, #260]	; (8005e14 <Principal_Datalogger_Start+0x154>)
 8005d10:	f9b3 2058 	ldrsh.w	r2, [r3, #88]	; 0x58
 8005d14:	4b41      	ldr	r3, [pc, #260]	; (8005e1c <Principal_Datalogger_Start+0x15c>)
 8005d16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	da14      	bge.n	8005d48 <Principal_Datalogger_Start+0x88>
 8005d1e:	4b3d      	ldr	r3, [pc, #244]	; (8005e14 <Principal_Datalogger_Start+0x154>)
 8005d20:	f9b3 205a 	ldrsh.w	r2, [r3, #90]	; 0x5a
 8005d24:	4b3d      	ldr	r3, [pc, #244]	; (8005e1c <Principal_Datalogger_Start+0x15c>)
 8005d26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	da0c      	bge.n	8005d48 <Principal_Datalogger_Start+0x88>
 8005d2e:	4b39      	ldr	r3, [pc, #228]	; (8005e14 <Principal_Datalogger_Start+0x154>)
 8005d30:	f9b3 205c 	ldrsh.w	r2, [r3, #92]	; 0x5c
 8005d34:	4b39      	ldr	r3, [pc, #228]	; (8005e1c <Principal_Datalogger_Start+0x15c>)
 8005d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	da04      	bge.n	8005d48 <Principal_Datalogger_Start+0x88>
	{
		flagDatalogger = DL_NO_SAVE;
 8005d3e:	4b33      	ldr	r3, [pc, #204]	; (8005e0c <Principal_Datalogger_Start+0x14c>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	701a      	strb	r2, [r3, #0]
		return retVal;
 8005d44:	7ffb      	ldrb	r3, [r7, #31]
 8005d46:	e05d      	b.n	8005e04 <Principal_Datalogger_Start+0x144>
	}

	HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8005d48:	2014      	movs	r0, #20
 8005d4a:	f002 fb1a 	bl	8008382 <HAL_NVIC_DisableIRQ>
#else

	RTC_DateTypeDef sDate;
	RTC_TimeTypeDef sTime;

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8005d4e:	1d3b      	adds	r3, r7, #4
 8005d50:	2200      	movs	r2, #0
 8005d52:	4619      	mov	r1, r3
 8005d54:	4832      	ldr	r0, [pc, #200]	; (8005e20 <Principal_Datalogger_Start+0x160>)
 8005d56:	f006 fda3 	bl	800c8a0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8005d5a:	f107 0318 	add.w	r3, r7, #24
 8005d5e:	2200      	movs	r2, #0
 8005d60:	4619      	mov	r1, r3
 8005d62:	482f      	ldr	r0, [pc, #188]	; (8005e20 <Principal_Datalogger_Start+0x160>)
 8005d64:	f006 fe7e 	bl	800ca64 <HAL_RTC_GetDate>

#if _USE_LFN == 0
	sprintf(logString, "%02d%02d%02d.sd", sTime.Hours, sTime.Minutes, sTime.Seconds);
#else
	sprintf(dirString, "%02d-%02d-%02d", sDate.Year, sDate.Month, sDate.Date);
 8005d68:	7efb      	ldrb	r3, [r7, #27]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	7e7b      	ldrb	r3, [r7, #25]
 8005d6e:	4619      	mov	r1, r3
 8005d70:	7ebb      	ldrb	r3, [r7, #26]
 8005d72:	9300      	str	r3, [sp, #0]
 8005d74:	460b      	mov	r3, r1
 8005d76:	492b      	ldr	r1, [pc, #172]	; (8005e24 <Principal_Datalogger_Start+0x164>)
 8005d78:	482b      	ldr	r0, [pc, #172]	; (8005e28 <Principal_Datalogger_Start+0x168>)
 8005d7a:	f012 fa23 	bl	80181c4 <siprintf>

	sprintf(logString, "%s/%s_%02d-%02d-%02d.sd", dirString, dirString, sTime.Hours, sTime.Minutes, sTime.Seconds);
 8005d7e:	793b      	ldrb	r3, [r7, #4]
 8005d80:	797a      	ldrb	r2, [r7, #5]
 8005d82:	79b9      	ldrb	r1, [r7, #6]
 8005d84:	9102      	str	r1, [sp, #8]
 8005d86:	9201      	str	r2, [sp, #4]
 8005d88:	9300      	str	r3, [sp, #0]
 8005d8a:	4b27      	ldr	r3, [pc, #156]	; (8005e28 <Principal_Datalogger_Start+0x168>)
 8005d8c:	4a26      	ldr	r2, [pc, #152]	; (8005e28 <Principal_Datalogger_Start+0x168>)
 8005d8e:	4927      	ldr	r1, [pc, #156]	; (8005e2c <Principal_Datalogger_Start+0x16c>)
 8005d90:	4827      	ldr	r0, [pc, #156]	; (8005e30 <Principal_Datalogger_Start+0x170>)
 8005d92:	f012 fa17 	bl	80181c4 <siprintf>

	retVal = f_mkdir(dirString);
 8005d96:	4824      	ldr	r0, [pc, #144]	; (8005e28 <Principal_Datalogger_Start+0x168>)
 8005d98:	f011 fa44 	bl	8017224 <f_mkdir>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	77fb      	strb	r3, [r7, #31]

	if((retVal == FR_OK) || (retVal == FR_EXIST))
 8005da0:	7ffb      	ldrb	r3, [r7, #31]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d002      	beq.n	8005dac <Principal_Datalogger_Start+0xec>
 8005da6:	7ffb      	ldrb	r3, [r7, #31]
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d11b      	bne.n	8005de4 <Principal_Datalogger_Start+0x124>
	{
		retVal = f_opendir(&dirStruct, dirString);
 8005dac:	491e      	ldr	r1, [pc, #120]	; (8005e28 <Principal_Datalogger_Start+0x168>)
 8005dae:	4821      	ldr	r0, [pc, #132]	; (8005e34 <Principal_Datalogger_Start+0x174>)
 8005db0:	f011 f9c5 	bl	801713e <f_opendir>
 8005db4:	4603      	mov	r3, r0
 8005db6:	77fb      	strb	r3, [r7, #31]

		if(retVal == FR_OK)
 8005db8:	7ffb      	ldrb	r3, [r7, #31]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d112      	bne.n	8005de4 <Principal_Datalogger_Start+0x124>
		{
#endif

#ifdef DATALOGGER_SYNC
			retVal = f_open(&fileStruct, logString, FA_WRITE | FA_CREATE_ALWAYS);
 8005dbe:	220a      	movs	r2, #10
 8005dc0:	491b      	ldr	r1, [pc, #108]	; (8005e30 <Principal_Datalogger_Start+0x170>)
 8005dc2:	481d      	ldr	r0, [pc, #116]	; (8005e38 <Principal_Datalogger_Start+0x178>)
 8005dc4:	f010 fdf0 	bl	80169a8 <f_open>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	77fb      	strb	r3, [r7, #31]
#endif

			if(retVal == FR_OK)
 8005dcc:	7ffb      	ldrb	r3, [r7, #31]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d108      	bne.n	8005de4 <Principal_Datalogger_Start+0x124>
			{
				flagDatalogger = DL_SAVE;
 8005dd2:	4b0e      	ldr	r3, [pc, #56]	; (8005e0c <Principal_Datalogger_Start+0x14c>)
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	701a      	strb	r2, [r3, #0]
				accDatalogger[DL_ACC_TIMING] = 0;
 8005dd8:	4b18      	ldr	r3, [pc, #96]	; (8005e3c <Principal_Datalogger_Start+0x17c>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	609a      	str	r2, [r3, #8]
				accDatalogger[DL_ACC_TIMEOUT] = 0;
 8005dde:	4b17      	ldr	r3, [pc, #92]	; (8005e3c <Principal_Datalogger_Start+0x17c>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	605a      	str	r2, [r3, #4]
	}
#endif

#endif

	if(retVal != FR_OK)
 8005de4:	7ffb      	ldrb	r3, [r7, #31]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d002      	beq.n	8005df0 <Principal_Datalogger_Start+0x130>
		flagDatalogger = DL_ERROR;
 8005dea:	4b08      	ldr	r3, [pc, #32]	; (8005e0c <Principal_Datalogger_Start+0x14c>)
 8005dec:	2204      	movs	r2, #4
 8005dee:	701a      	strb	r2, [r3, #0]

	dataloggerBufferPosition = 0;
 8005df0:	4b13      	ldr	r3, [pc, #76]	; (8005e40 <Principal_Datalogger_Start+0x180>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	801a      	strh	r2, [r3, #0]
	accDatalogger[DL_ACC_COOLDOWN] = DATALOGGER_COOLDOWN;
 8005df6:	4b11      	ldr	r3, [pc, #68]	; (8005e3c <Principal_Datalogger_Start+0x17c>)
 8005df8:	22fa      	movs	r2, #250	; 0xfa
 8005dfa:	601a      	str	r2, [r3, #0]

	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8005dfc:	2014      	movs	r0, #20
 8005dfe:	f002 fab2 	bl	8008366 <HAL_NVIC_EnableIRQ>

	return retVal;
 8005e02:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3720      	adds	r7, #32
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	20002642 	.word	0x20002642
 8005e10:	20002643 	.word	0x20002643
 8005e14:	2000259c 	.word	0x2000259c
 8005e18:	20002530 	.word	0x20002530
 8005e1c:	20002532 	.word	0x20002532
 8005e20:	20000380 	.word	0x20000380
 8005e24:	08018ab8 	.word	0x08018ab8
 8005e28:	20002504 	.word	0x20002504
 8005e2c:	08018ac8 	.word	0x08018ac8
 8005e30:	20002510 	.word	0x20002510
 8005e34:	200014a8 	.word	0x200014a8
 8005e38:	200014d8 	.word	0x200014d8
 8005e3c:	20002680 	.word	0x20002680
 8005e40:	2000046c 	.word	0x2000046c

08005e44 <Principal_Datalogger_Finish>:

FRESULT Principal_Datalogger_Finish()
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
	FRESULT retVal = FR_OK;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	71fb      	strb	r3, [r7, #7]

	HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8005e4e:	2014      	movs	r0, #20
 8005e50:	f002 fa97 	bl	8008382 <HAL_NVIC_DisableIRQ>

	accDatalogger[DL_ACC_COOLDOWN] = DATALOGGER_COOLDOWN;
 8005e54:	4b12      	ldr	r3, [pc, #72]	; (8005ea0 <Principal_Datalogger_Finish+0x5c>)
 8005e56:	22fa      	movs	r2, #250	; 0xfa
 8005e58:	601a      	str	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005e5a:	2180      	movs	r1, #128	; 0x80
 8005e5c:	4811      	ldr	r0, [pc, #68]	; (8005ea4 <Principal_Datalogger_Finish+0x60>)
 8005e5e:	f002 ffd1 	bl	8008e04 <HAL_GPIO_ReadPin>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	d103      	bne.n	8005e70 <Principal_Datalogger_Finish+0x2c>
		flagDatalogger = DL_NO_CARD;
 8005e68:	4b0f      	ldr	r3, [pc, #60]	; (8005ea8 <Principal_Datalogger_Finish+0x64>)
 8005e6a:	2202      	movs	r2, #2
 8005e6c:	701a      	strb	r2, [r3, #0]
 8005e6e:	e006      	b.n	8005e7e <Principal_Datalogger_Finish+0x3a>

	else if(flagDatalogger != DL_ERROR)
 8005e70:	4b0d      	ldr	r3, [pc, #52]	; (8005ea8 <Principal_Datalogger_Finish+0x64>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2b04      	cmp	r3, #4
 8005e76:	d002      	beq.n	8005e7e <Principal_Datalogger_Finish+0x3a>
		flagDatalogger = DL_NO_SAVE;
 8005e78:	4b0b      	ldr	r3, [pc, #44]	; (8005ea8 <Principal_Datalogger_Finish+0x64>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	701a      	strb	r2, [r3, #0]

#ifdef DATALOGGER_SYNC
	retVal = f_close(&fileStruct);
 8005e7e:	480b      	ldr	r0, [pc, #44]	; (8005eac <Principal_Datalogger_Finish+0x68>)
 8005e80:	f011 f93d 	bl	80170fe <f_close>
 8005e84:	4603      	mov	r3, r0
 8005e86:	71fb      	strb	r3, [r7, #7]
#endif

#if	_USE_LFN != 0
	f_closedir(&dirStruct);
 8005e88:	4809      	ldr	r0, [pc, #36]	; (8005eb0 <Principal_Datalogger_Finish+0x6c>)
 8005e8a:	f011 f9b3 	bl	80171f4 <f_closedir>
#endif

	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8005e8e:	2014      	movs	r0, #20
 8005e90:	f002 fa69 	bl	8008366 <HAL_NVIC_EnableIRQ>

	return retVal;
 8005e94:	79fb      	ldrb	r3, [r7, #7]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	20002680 	.word	0x20002680
 8005ea4:	40020800 	.word	0x40020800
 8005ea8:	20002642 	.word	0x20002642
 8005eac:	200014d8 	.word	0x200014d8
 8005eb0:	200014a8 	.word	0x200014a8

08005eb4 <Principal_Datalogger_Save_Data>:

void Principal_Datalogger_Save_Data(CAN_HandleTypeDef* hcan, uint32_t data_id, uint8_t data_length, uint8_t* data_buffer)
{
 8005eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eb8:	b088      	sub	sp, #32
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	60f8      	str	r0, [r7, #12]
 8005ebe:	60b9      	str	r1, [r7, #8]
 8005ec0:	603b      	str	r3, [r7, #0]
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	71fb      	strb	r3, [r7, #7]
 8005ec6:	466b      	mov	r3, sp
 8005ec8:	469a      	mov	sl, r3
	uint8_t buffer[5 + data_length];
 8005eca:	79fb      	ldrb	r3, [r7, #7]
 8005ecc:	1d5e      	adds	r6, r3, #5
 8005ece:	1e73      	subs	r3, r6, #1
 8005ed0:	61bb      	str	r3, [r7, #24]
 8005ed2:	4632      	mov	r2, r6
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	4690      	mov	r8, r2
 8005ed8:	4699      	mov	r9, r3
 8005eda:	f04f 0200 	mov.w	r2, #0
 8005ede:	f04f 0300 	mov.w	r3, #0
 8005ee2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ee6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005eea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005eee:	4632      	mov	r2, r6
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	4614      	mov	r4, r2
 8005ef4:	461d      	mov	r5, r3
 8005ef6:	f04f 0200 	mov.w	r2, #0
 8005efa:	f04f 0300 	mov.w	r3, #0
 8005efe:	00eb      	lsls	r3, r5, #3
 8005f00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f04:	00e2      	lsls	r2, r4, #3
 8005f06:	4633      	mov	r3, r6
 8005f08:	3307      	adds	r3, #7
 8005f0a:	08db      	lsrs	r3, r3, #3
 8005f0c:	00db      	lsls	r3, r3, #3
 8005f0e:	ebad 0d03 	sub.w	sp, sp, r3
 8005f12:	466b      	mov	r3, sp
 8005f14:	3300      	adds	r3, #0
 8005f16:	617b      	str	r3, [r7, #20]
	UINT writeSize = 0;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	613b      	str	r3, [r7, #16]
	FRESULT verify;

	HAL_NVIC_DisableIRQ(CAN1_RX0_IRQn);
 8005f1c:	2014      	movs	r0, #20
 8005f1e:	f002 fa30 	bl	8008382 <HAL_NVIC_DisableIRQ>

	buffer[0] = 'D';
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2244      	movs	r2, #68	; 0x44
 8005f26:	701a      	strb	r2, [r3, #0]
	buffer[1] = 'L';
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	224c      	movs	r2, #76	; 0x4c
 8005f2c:	705a      	strb	r2, [r3, #1]
	buffer[2] = data_id & 0xff;
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	709a      	strb	r2, [r3, #2]
	buffer[3] = data_length;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	79fa      	ldrb	r2, [r7, #7]
 8005f3a:	70da      	strb	r2, [r3, #3]
	buffer[4] = accDatalogger[DL_ACC_TIMING];
 8005f3c:	4b1d      	ldr	r3, [pc, #116]	; (8005fb4 <Principal_Datalogger_Save_Data+0x100>)
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	711a      	strb	r2, [r3, #4]

	verify = f_write(&fileStruct, buffer, sizeof(buffer), &writeSize);
 8005f46:	4632      	mov	r2, r6
 8005f48:	f107 0310 	add.w	r3, r7, #16
 8005f4c:	6979      	ldr	r1, [r7, #20]
 8005f4e:	481a      	ldr	r0, [pc, #104]	; (8005fb8 <Principal_Datalogger_Save_Data+0x104>)
 8005f50:	f010 fec3 	bl	8016cda <f_write>
 8005f54:	4603      	mov	r3, r0
 8005f56:	77fb      	strb	r3, [r7, #31]

	dataloggerWrite++;
 8005f58:	4b18      	ldr	r3, [pc, #96]	; (8005fbc <Principal_Datalogger_Save_Data+0x108>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	4a17      	ldr	r2, [pc, #92]	; (8005fbc <Principal_Datalogger_Save_Data+0x108>)
 8005f60:	6013      	str	r3, [r2, #0]

	if((dataloggerWrite > 0) && (accDatalogger[DL_ACC_TIMEOUT] > DATALOGGER_SAVE_TIME_THR) && (verify == FR_OK))
 8005f62:	4b16      	ldr	r3, [pc, #88]	; (8005fbc <Principal_Datalogger_Save_Data+0x108>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d013      	beq.n	8005f92 <Principal_Datalogger_Save_Data+0xde>
 8005f6a:	4b12      	ldr	r3, [pc, #72]	; (8005fb4 <Principal_Datalogger_Save_Data+0x100>)
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d90d      	bls.n	8005f92 <Principal_Datalogger_Save_Data+0xde>
 8005f76:	7ffb      	ldrb	r3, [r7, #31]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d10a      	bne.n	8005f92 <Principal_Datalogger_Save_Data+0xde>
	{
		verify = f_sync(&fileStruct);
 8005f7c:	480e      	ldr	r0, [pc, #56]	; (8005fb8 <Principal_Datalogger_Save_Data+0x104>)
 8005f7e:	f011 f840 	bl	8017002 <f_sync>
 8005f82:	4603      	mov	r3, r0
 8005f84:	77fb      	strb	r3, [r7, #31]

		dataloggerWrite = 0;
 8005f86:	4b0d      	ldr	r3, [pc, #52]	; (8005fbc <Principal_Datalogger_Save_Data+0x108>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	601a      	str	r2, [r3, #0]
		accDatalogger[DL_ACC_TIMEOUT] = 0;
 8005f8c:	4b09      	ldr	r3, [pc, #36]	; (8005fb4 <Principal_Datalogger_Save_Data+0x100>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	605a      	str	r2, [r3, #4]
	}

	if(verify != FR_OK)
 8005f92:	7ffb      	ldrb	r3, [r7, #31]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d004      	beq.n	8005fa2 <Principal_Datalogger_Save_Data+0xee>
	{
		flagDatalogger = DL_ERROR;
 8005f98:	4b09      	ldr	r3, [pc, #36]	; (8005fc0 <Principal_Datalogger_Save_Data+0x10c>)
 8005f9a:	2204      	movs	r2, #4
 8005f9c:	701a      	strb	r2, [r3, #0]

		Principal_Datalogger_Finish();
 8005f9e:	f7ff ff51 	bl	8005e44 <Principal_Datalogger_Finish>
	}

	HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8005fa2:	2014      	movs	r0, #20
 8005fa4:	f002 f9df 	bl	8008366 <HAL_NVIC_EnableIRQ>

	return;
 8005fa8:	bf00      	nop
 8005faa:	46d5      	mov	sp, sl
}
 8005fac:	3720      	adds	r7, #32
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb4:	20002680 	.word	0x20002680
 8005fb8:	200014d8 	.word	0x200014d8
 8005fbc:	20002598 	.word	0x20002598
 8005fc0:	20002642 	.word	0x20002642

08005fc4 <Principal_Datalogger_Button>:

	return;
}

void Principal_Datalogger_Button()
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	af00      	add	r7, sp, #0
	if(accDatalogger[DL_ACC_COOLDOWN] == 0)
 8005fc8:	4b0f      	ldr	r3, [pc, #60]	; (8006008 <Principal_Datalogger_Button+0x44>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d118      	bne.n	8006002 <Principal_Datalogger_Button+0x3e>
	{
		accDatalogger[DL_ACC_COOLDOWN] = DATALOGGER_COOLDOWN;
 8005fd0:	4b0d      	ldr	r3, [pc, #52]	; (8006008 <Principal_Datalogger_Button+0x44>)
 8005fd2:	22fa      	movs	r2, #250	; 0xfa
 8005fd4:	601a      	str	r2, [r3, #0]

		if((flagDatalogger == DL_NO_SAVE) && (HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_RESET))
 8005fd6:	4b0d      	ldr	r3, [pc, #52]	; (800600c <Principal_Datalogger_Button+0x48>)
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10b      	bne.n	8005ff6 <Principal_Datalogger_Button+0x32>
 8005fde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005fe2:	480b      	ldr	r0, [pc, #44]	; (8006010 <Principal_Datalogger_Button+0x4c>)
 8005fe4:	f002 ff0e 	bl	8008e04 <HAL_GPIO_ReadPin>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d103      	bne.n	8005ff6 <Principal_Datalogger_Button+0x32>
			flagDatalogger = DL_BUT_START;
 8005fee:	4b07      	ldr	r3, [pc, #28]	; (800600c <Principal_Datalogger_Button+0x48>)
 8005ff0:	2203      	movs	r2, #3
 8005ff2:	701a      	strb	r2, [r3, #0]

		else if(flagDatalogger == DL_SAVE)
			Principal_Datalogger_Finish();
	}
}
 8005ff4:	e005      	b.n	8006002 <Principal_Datalogger_Button+0x3e>
		else if(flagDatalogger == DL_SAVE)
 8005ff6:	4b05      	ldr	r3, [pc, #20]	; (800600c <Principal_Datalogger_Button+0x48>)
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d101      	bne.n	8006002 <Principal_Datalogger_Button+0x3e>
			Principal_Datalogger_Finish();
 8005ffe:	f7ff ff21 	bl	8005e44 <Principal_Datalogger_Finish>
}
 8006002:	bf00      	nop
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	20002680 	.word	0x20002680
 800600c:	20002642 	.word	0x20002642
 8006010:	40020000 	.word	0x40020000

08006014 <Principal_Card_Detection>:

void Principal_Card_Detection()
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
	GPIO_PinState cd_pin = HAL_GPIO_ReadPin(SDIO_CD_PIN);
 800601a:	2180      	movs	r1, #128	; 0x80
 800601c:	4813      	ldr	r0, [pc, #76]	; (800606c <Principal_Card_Detection+0x58>)
 800601e:	f002 fef1 	bl	8008e04 <HAL_GPIO_ReadPin>
 8006022:	4603      	mov	r3, r0
 8006024:	71fb      	strb	r3, [r7, #7]

	if(((cd_pin == GPIO_PIN_SET) && (flagDatalogger != DL_NO_CARD))
 8006026:	79fb      	ldrb	r3, [r7, #7]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d103      	bne.n	8006034 <Principal_Card_Detection+0x20>
 800602c:	4b10      	ldr	r3, [pc, #64]	; (8006070 <Principal_Card_Detection+0x5c>)
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	2b02      	cmp	r3, #2
 8006032:	d10b      	bne.n	800604c <Principal_Card_Detection+0x38>
			|| ((HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_SET) && (flagDatalogger == DL_SAVE)))
 8006034:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006038:	480e      	ldr	r0, [pc, #56]	; (8006074 <Principal_Card_Detection+0x60>)
 800603a:	f002 fee3 	bl	8008e04 <HAL_GPIO_ReadPin>
 800603e:	4603      	mov	r3, r0
 8006040:	2b01      	cmp	r3, #1
 8006042:	d106      	bne.n	8006052 <Principal_Card_Detection+0x3e>
 8006044:	4b0a      	ldr	r3, [pc, #40]	; (8006070 <Principal_Card_Detection+0x5c>)
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	2b01      	cmp	r3, #1
 800604a:	d102      	bne.n	8006052 <Principal_Card_Detection+0x3e>
		Principal_Datalogger_Finish();
 800604c:	f7ff fefa 	bl	8005e44 <Principal_Datalogger_Finish>

	else if((cd_pin == GPIO_PIN_RESET) && (flagDatalogger == DL_NO_CARD))
		Principal_Datalogger_Init();
}
 8006050:	e008      	b.n	8006064 <Principal_Card_Detection+0x50>
	else if((cd_pin == GPIO_PIN_RESET) && (flagDatalogger == DL_NO_CARD))
 8006052:	79fb      	ldrb	r3, [r7, #7]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d105      	bne.n	8006064 <Principal_Card_Detection+0x50>
 8006058:	4b05      	ldr	r3, [pc, #20]	; (8006070 <Principal_Card_Detection+0x5c>)
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b02      	cmp	r3, #2
 800605e:	d101      	bne.n	8006064 <Principal_Card_Detection+0x50>
		Principal_Datalogger_Init();
 8006060:	f7ff fdf8 	bl	8005c54 <Principal_Datalogger_Init>
}
 8006064:	bf00      	nop
 8006066:	3708      	adds	r7, #8
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	40020800 	.word	0x40020800
 8006070:	20002642 	.word	0x20002642
 8006074:	40020000 	.word	0x40020000

08006078 <Principal_Beacon_Detect>:

void Principal_Beacon_Detect()
{
 8006078:	b580      	push	{r7, lr}
 800607a:	af00      	add	r7, sp, #0
	if(accLap < thresholdBeacon)
 800607c:	4b0a      	ldr	r3, [pc, #40]	; (80060a8 <Principal_Beacon_Detect+0x30>)
 800607e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006082:	461a      	mov	r2, r3
 8006084:	4b09      	ldr	r3, [pc, #36]	; (80060ac <Principal_Beacon_Detect+0x34>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	429a      	cmp	r2, r3
 800608a:	d80a      	bhi.n	80060a2 <Principal_Beacon_Detect+0x2a>
		return;

	lapNumber++;
 800608c:	4b08      	ldr	r3, [pc, #32]	; (80060b0 <Principal_Beacon_Detect+0x38>)
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	3301      	adds	r3, #1
 8006092:	b2da      	uxtb	r2, r3
 8006094:	4b06      	ldr	r3, [pc, #24]	; (80060b0 <Principal_Beacon_Detect+0x38>)
 8006096:	701a      	strb	r2, [r3, #0]

	Principal_Transmit_Msg(&hcan1, BEACON_MSG);
 8006098:	2105      	movs	r1, #5
 800609a:	4806      	ldr	r0, [pc, #24]	; (80060b4 <Principal_Beacon_Detect+0x3c>)
 800609c:	f7fc f918 	bl	80022d0 <Principal_Transmit_Msg>
 80060a0:	e000      	b.n	80060a4 <Principal_Beacon_Detect+0x2c>
		return;
 80060a2:	bf00      	nop
}
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	2000252e 	.word	0x2000252e
 80060ac:	200026c8 	.word	0x200026c8
 80060b0:	2000257c 	.word	0x2000257c
 80060b4:	20000304 	.word	0x20000304

080060b8 <HAL_CAN_RxFifo0MsgPendingCallback>:
 */

#include "principal.h"

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK)
 80060c0:	4b28      	ldr	r3, [pc, #160]	; (8006164 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80060c2:	4a29      	ldr	r2, [pc, #164]	; (8006168 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80060c4:	2100      	movs	r1, #0
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f001 fcca 	bl	8007a60 <HAL_CAN_GetRxMessage>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d13d      	bne.n	800614e <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
	{
		verifyCAN |= 2;
 80060d2:	4b26      	ldr	r3, [pc, #152]	; (800616c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	f043 0302 	orr.w	r3, r3, #2
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	4b23      	ldr	r3, [pc, #140]	; (800616c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80060de:	701a      	strb	r2, [r3, #0]

		if((rxHeader.IDE == CAN_ID_STD) && ((rxHeader.StdId & CAN_DAQ_MASK) == CAN_DAQ_FILTER) && (flagDatalogger == DL_SAVE))
 80060e0:	4b21      	ldr	r3, [pc, #132]	; (8006168 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d114      	bne.n	8006112 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
 80060e8:	4b1f      	ldr	r3, [pc, #124]	; (8006168 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060f0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80060f4:	d10d      	bne.n	8006112 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
 80060f6:	4b1e      	ldr	r3, [pc, #120]	; (8006170 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d109      	bne.n	8006112 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
#ifdef DATALOGGER_NO_BUFFER
			Principal_Datalogger_Save_Data(hcan, rxHeader.StdId, rxHeader.DLC, rxData);
 80060fe:	4b1a      	ldr	r3, [pc, #104]	; (8006168 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8006100:	6819      	ldr	r1, [r3, #0]
 8006102:	4b19      	ldr	r3, [pc, #100]	; (8006168 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	b2da      	uxtb	r2, r3
 8006108:	4b16      	ldr	r3, [pc, #88]	; (8006164 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7ff fed2 	bl	8005eb4 <Principal_Datalogger_Save_Data>
		}
	}

	else
		verifyCAN &= 1;
}
 8006110:	e024      	b.n	800615c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
		else if(rxHeader.IDE == CAN_ID_EXT)
 8006112:	4b15      	ldr	r3, [pc, #84]	; (8006168 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	2b04      	cmp	r3, #4
 8006118:	d120      	bne.n	800615c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
			if((rxHeader.ExtId & CAN_CFG_MASK) == CAN_CFG_FILTER)
 800611a:	4b13      	ldr	r3, [pc, #76]	; (8006168 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	4b15      	ldr	r3, [pc, #84]	; (8006174 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8006120:	4013      	ands	r3, r2
 8006122:	4a15      	ldr	r2, [pc, #84]	; (8006178 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d107      	bne.n	8006138 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>
				Principal_Receive_Config(&hi2c1, rxData, rxHeader.DLC);
 8006128:	4b0f      	ldr	r3, [pc, #60]	; (8006168 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	461a      	mov	r2, r3
 800612e:	490d      	ldr	r1, [pc, #52]	; (8006164 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8006130:	4812      	ldr	r0, [pc, #72]	; (800617c <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8006132:	f7fd fbf5 	bl	8003920 <Principal_Receive_Config>
}
 8006136:	e011      	b.n	800615c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
				PDM_CAN_Process_Data(&rxHeader, rxData, &pdmReadings);
 8006138:	4a11      	ldr	r2, [pc, #68]	; (8006180 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 800613a:	490a      	ldr	r1, [pc, #40]	; (8006164 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800613c:	480a      	ldr	r0, [pc, #40]	; (8006168 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 800613e:	f7fb ff83 	bl	8002048 <PDM_CAN_Process_Data>
				FT_CAN_ReceiveData(&rxHeader, rxData, &ecuData);
 8006142:	4a10      	ldr	r2, [pc, #64]	; (8006184 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8006144:	4907      	ldr	r1, [pc, #28]	; (8006164 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8006146:	4808      	ldr	r0, [pc, #32]	; (8006168 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8006148:	f7fa fa6a 	bl	8000620 <FT_CAN_ReceiveData>
}
 800614c:	e006      	b.n	800615c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
		verifyCAN &= 1;
 800614e:	4b07      	ldr	r3, [pc, #28]	; (800616c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	b2da      	uxtb	r2, r3
 8006158:	4b04      	ldr	r3, [pc, #16]	; (800616c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 800615a:	701a      	strb	r2, [r3, #0]
}
 800615c:	bf00      	nop
 800615e:	3708      	adds	r7, #8
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	20002534 	.word	0x20002534
 8006168:	20002548 	.word	0x20002548
 800616c:	200026cc 	.word	0x200026cc
 8006170:	20002642 	.word	0x20002642
 8006174:	1ff80000 	.word	0x1ff80000
 8006178:	1e300000 	.word	0x1e300000
 800617c:	2000032c 	.word	0x2000032c
 8006180:	20002604 	.word	0x20002604
 8006184:	2000259c 	.word	0x2000259c

08006188 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	4603      	mov	r3, r0
 8006190:	80fb      	strh	r3, [r7, #6]
	GPIO_PinState pinLevel;

	if(GPIO_Pin == EXTI0_Pin)
 8006192:	88fb      	ldrh	r3, [r7, #6]
 8006194:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006198:	d13a      	bne.n	8006210 <HAL_GPIO_EXTI_Callback+0x88>
	{
		pinLevel = HAL_GPIO_ReadPin(EXTI0_GPIO_Port, EXTI0_Pin);
 800619a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800619e:	483e      	ldr	r0, [pc, #248]	; (8006298 <HAL_GPIO_EXTI_Callback+0x110>)
 80061a0:	f002 fe30 	bl	8008e04 <HAL_GPIO_ReadPin>
 80061a4:	4603      	mov	r3, r0
 80061a6:	73fb      	strb	r3, [r7, #15]

		if(((inputConfig & 0x01) == INPUT_BEACON_PIN_0)
 80061a8:	4b3c      	ldr	r3, [pc, #240]	; (800629c <HAL_GPIO_EXTI_Callback+0x114>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d113      	bne.n	80061dc <HAL_GPIO_EXTI_Callback+0x54>
				&& ((((inputConfig & 0x04) == INPUT_BEACON_FALLING_EDGE) && (pinLevel == GPIO_PIN_RESET))
 80061b4:	4b39      	ldr	r3, [pc, #228]	; (800629c <HAL_GPIO_EXTI_Callback+0x114>)
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	f003 0304 	and.w	r3, r3, #4
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d102      	bne.n	80061c6 <HAL_GPIO_EXTI_Callback+0x3e>
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d008      	beq.n	80061d8 <HAL_GPIO_EXTI_Callback+0x50>
				|| (((inputConfig & 0x04) == INPUT_BEACON_RISING_EDGE) && (pinLevel == GPIO_PIN_SET))))
 80061c6:	4b35      	ldr	r3, [pc, #212]	; (800629c <HAL_GPIO_EXTI_Callback+0x114>)
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	f003 0304 	and.w	r3, r3, #4
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d004      	beq.n	80061dc <HAL_GPIO_EXTI_Callback+0x54>
 80061d2:	7bfb      	ldrb	r3, [r7, #15]
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d101      	bne.n	80061dc <HAL_GPIO_EXTI_Callback+0x54>
			Principal_Beacon_Detect();
 80061d8:	f7ff ff4e 	bl	8006078 <Principal_Beacon_Detect>

		if(((inputConfig & 0x02) == INPUT_DATALOGGER_PIN_0)
 80061dc:	4b2f      	ldr	r3, [pc, #188]	; (800629c <HAL_GPIO_EXTI_Callback+0x114>)
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d113      	bne.n	8006210 <HAL_GPIO_EXTI_Callback+0x88>
				&& ((((inputConfig & 0x08) == INPUT_DATALOGGER_FALLING_EDGE) && (pinLevel == GPIO_PIN_RESET))
 80061e8:	4b2c      	ldr	r3, [pc, #176]	; (800629c <HAL_GPIO_EXTI_Callback+0x114>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	f003 0308 	and.w	r3, r3, #8
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d102      	bne.n	80061fa <HAL_GPIO_EXTI_Callback+0x72>
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d008      	beq.n	800620c <HAL_GPIO_EXTI_Callback+0x84>
				|| (((inputConfig & 0x08) == INPUT_DATALOGGER_RISING_EDGE) && (pinLevel == GPIO_PIN_SET))))
 80061fa:	4b28      	ldr	r3, [pc, #160]	; (800629c <HAL_GPIO_EXTI_Callback+0x114>)
 80061fc:	781b      	ldrb	r3, [r3, #0]
 80061fe:	f003 0308 	and.w	r3, r3, #8
 8006202:	2b00      	cmp	r3, #0
 8006204:	d004      	beq.n	8006210 <HAL_GPIO_EXTI_Callback+0x88>
 8006206:	7bfb      	ldrb	r3, [r7, #15]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d101      	bne.n	8006210 <HAL_GPIO_EXTI_Callback+0x88>
			Principal_Datalogger_Button();
 800620c:	f7ff feda 	bl	8005fc4 <Principal_Datalogger_Button>
	}

	if(GPIO_Pin == EXTI1_Pin)
 8006210:	88fb      	ldrh	r3, [r7, #6]
 8006212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006216:	d13a      	bne.n	800628e <HAL_GPIO_EXTI_Callback+0x106>
	{
		pinLevel = HAL_GPIO_ReadPin(EXTI1_GPIO_Port, EXTI1_Pin);
 8006218:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800621c:	481e      	ldr	r0, [pc, #120]	; (8006298 <HAL_GPIO_EXTI_Callback+0x110>)
 800621e:	f002 fdf1 	bl	8008e04 <HAL_GPIO_ReadPin>
 8006222:	4603      	mov	r3, r0
 8006224:	73fb      	strb	r3, [r7, #15]

		if(((inputConfig & 0x01) == INPUT_BEACON_PIN_1)
 8006226:	4b1d      	ldr	r3, [pc, #116]	; (800629c <HAL_GPIO_EXTI_Callback+0x114>)
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	2b00      	cmp	r3, #0
 8006230:	d013      	beq.n	800625a <HAL_GPIO_EXTI_Callback+0xd2>
				&& ((((inputConfig & 0x04) == INPUT_BEACON_FALLING_EDGE) && (pinLevel == GPIO_PIN_RESET))
 8006232:	4b1a      	ldr	r3, [pc, #104]	; (800629c <HAL_GPIO_EXTI_Callback+0x114>)
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	f003 0304 	and.w	r3, r3, #4
 800623a:	2b00      	cmp	r3, #0
 800623c:	d102      	bne.n	8006244 <HAL_GPIO_EXTI_Callback+0xbc>
 800623e:	7bfb      	ldrb	r3, [r7, #15]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d008      	beq.n	8006256 <HAL_GPIO_EXTI_Callback+0xce>
				|| (((inputConfig & 0x04) == INPUT_BEACON_RISING_EDGE) && (pinLevel == GPIO_PIN_SET))))
 8006244:	4b15      	ldr	r3, [pc, #84]	; (800629c <HAL_GPIO_EXTI_Callback+0x114>)
 8006246:	781b      	ldrb	r3, [r3, #0]
 8006248:	f003 0304 	and.w	r3, r3, #4
 800624c:	2b00      	cmp	r3, #0
 800624e:	d004      	beq.n	800625a <HAL_GPIO_EXTI_Callback+0xd2>
 8006250:	7bfb      	ldrb	r3, [r7, #15]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d101      	bne.n	800625a <HAL_GPIO_EXTI_Callback+0xd2>
			Principal_Beacon_Detect();
 8006256:	f7ff ff0f 	bl	8006078 <Principal_Beacon_Detect>

		if(((inputConfig & 0x02) == INPUT_DATALOGGER_PIN_1)
 800625a:	4b10      	ldr	r3, [pc, #64]	; (800629c <HAL_GPIO_EXTI_Callback+0x114>)
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	f003 0302 	and.w	r3, r3, #2
 8006262:	2b00      	cmp	r3, #0
 8006264:	d013      	beq.n	800628e <HAL_GPIO_EXTI_Callback+0x106>
				&& ((((inputConfig & 0x08) == INPUT_DATALOGGER_FALLING_EDGE) && (pinLevel == GPIO_PIN_RESET))
 8006266:	4b0d      	ldr	r3, [pc, #52]	; (800629c <HAL_GPIO_EXTI_Callback+0x114>)
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	f003 0308 	and.w	r3, r3, #8
 800626e:	2b00      	cmp	r3, #0
 8006270:	d102      	bne.n	8006278 <HAL_GPIO_EXTI_Callback+0xf0>
 8006272:	7bfb      	ldrb	r3, [r7, #15]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d008      	beq.n	800628a <HAL_GPIO_EXTI_Callback+0x102>
				|| (((inputConfig & 0x08) == INPUT_DATALOGGER_RISING_EDGE) && (pinLevel == GPIO_PIN_SET))))
 8006278:	4b08      	ldr	r3, [pc, #32]	; (800629c <HAL_GPIO_EXTI_Callback+0x114>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	f003 0308 	and.w	r3, r3, #8
 8006280:	2b00      	cmp	r3, #0
 8006282:	d004      	beq.n	800628e <HAL_GPIO_EXTI_Callback+0x106>
 8006284:	7bfb      	ldrb	r3, [r7, #15]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d101      	bne.n	800628e <HAL_GPIO_EXTI_Callback+0x106>
			Principal_Datalogger_Button();
 800628a:	f7ff fe9b 	bl	8005fc4 <Principal_Datalogger_Button>
	}
}
 800628e:	bf00      	nop
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	40020400 	.word	0x40020400
 800629c:	20002644 	.word	0x20002644

080062a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a35      	ldr	r2, [pc, #212]	; (8006384 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d162      	bne.n	8006378 <HAL_TIM_PeriodElapsedCallback+0xd8>
	{
		accDatalogger[DL_ACC_TIMING]++;
 80062b2:	4b35      	ldr	r3, [pc, #212]	; (8006388 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	3301      	adds	r3, #1
 80062b8:	4a33      	ldr	r2, [pc, #204]	; (8006388 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80062ba:	6093      	str	r3, [r2, #8]
		accDatalogger[DL_ACC_TIMEOUT]++;
 80062bc:	4b32      	ldr	r3, [pc, #200]	; (8006388 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	3301      	adds	r3, #1
 80062c2:	4a31      	ldr	r2, [pc, #196]	; (8006388 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80062c4:	6053      	str	r3, [r2, #4]
		if(accDatalogger[DL_ACC_COOLDOWN] > 0) accDatalogger[DL_ACC_COOLDOWN]--;
 80062c6:	4b30      	ldr	r3, [pc, #192]	; (8006388 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d004      	beq.n	80062d8 <HAL_TIM_PeriodElapsedCallback+0x38>
 80062ce:	4b2e      	ldr	r3, [pc, #184]	; (8006388 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	4a2c      	ldr	r2, [pc, #176]	; (8006388 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80062d6:	6013      	str	r3, [r2, #0]

		accCAN[ANALOG_1_4]++;
 80062d8:	4b2c      	ldr	r3, [pc, #176]	; (800638c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	3301      	adds	r3, #1
 80062de:	4a2b      	ldr	r2, [pc, #172]	; (800638c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80062e0:	6013      	str	r3, [r2, #0]
		accCAN[ANALOG_5_8]++;
 80062e2:	4b2a      	ldr	r3, [pc, #168]	; (800638c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	3301      	adds	r3, #1
 80062e8:	4a28      	ldr	r2, [pc, #160]	; (800638c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80062ea:	6053      	str	r3, [r2, #4]
		accCAN[ANALOG_9_12]++;
 80062ec:	4b27      	ldr	r3, [pc, #156]	; (800638c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	3301      	adds	r3, #1
 80062f2:	4a26      	ldr	r2, [pc, #152]	; (800638c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80062f4:	6093      	str	r3, [r2, #8]
		accCAN[RTC_MSG]++;
 80062f6:	4b25      	ldr	r3, [pc, #148]	; (800638c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	3301      	adds	r3, #1
 80062fc:	4a23      	ldr	r2, [pc, #140]	; (800638c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80062fe:	60d3      	str	r3, [r2, #12]
		accCAN[VERIFY_MSG]++;
 8006300:	4b22      	ldr	r3, [pc, #136]	; (800638c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8006302:	691b      	ldr	r3, [r3, #16]
 8006304:	3301      	adds	r3, #1
 8006306:	4a21      	ldr	r2, [pc, #132]	; (800638c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8006308:	6113      	str	r3, [r2, #16]
		accCAN[BEACON_MSG]++;
 800630a:	4b20      	ldr	r3, [pc, #128]	; (800638c <HAL_TIM_PeriodElapsedCallback+0xec>)
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	3301      	adds	r3, #1
 8006310:	4a1e      	ldr	r2, [pc, #120]	; (800638c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8006312:	6153      	str	r3, [r2, #20]

		accMsg[ANALOG_1_4]++;
 8006314:	4b1e      	ldr	r3, [pc, #120]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3301      	adds	r3, #1
 800631a:	4a1d      	ldr	r2, [pc, #116]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800631c:	6013      	str	r3, [r2, #0]
		accMsg[ANALOG_5_8]++;
 800631e:	4b1c      	ldr	r3, [pc, #112]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	3301      	adds	r3, #1
 8006324:	4a1a      	ldr	r2, [pc, #104]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006326:	6053      	str	r3, [r2, #4]
		accMsg[ANALOG_9_12]++;
 8006328:	4b19      	ldr	r3, [pc, #100]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	3301      	adds	r3, #1
 800632e:	4a18      	ldr	r2, [pc, #96]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006330:	6093      	str	r3, [r2, #8]
		accMsg[RTC_MSG]++;
 8006332:	4b17      	ldr	r3, [pc, #92]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	3301      	adds	r3, #1
 8006338:	4a15      	ldr	r2, [pc, #84]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800633a:	60d3      	str	r3, [r2, #12]
		accMsg[VERIFY_MSG]++;
 800633c:	4b14      	ldr	r3, [pc, #80]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	3301      	adds	r3, #1
 8006342:	4a13      	ldr	r2, [pc, #76]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006344:	6113      	str	r3, [r2, #16]
		accMsg[BEACON_MSG]++;
 8006346:	4b12      	ldr	r3, [pc, #72]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	3301      	adds	r3, #1
 800634c:	4a10      	ldr	r2, [pc, #64]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800634e:	6153      	str	r3, [r2, #20]
		accMsg[ECU_SAVE]++;
 8006350:	4b0f      	ldr	r3, [pc, #60]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006352:	699b      	ldr	r3, [r3, #24]
 8006354:	3301      	adds	r3, #1
 8006356:	4a0e      	ldr	r2, [pc, #56]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006358:	6193      	str	r3, [r2, #24]
		accMsg[PDM_SAVE]++;
 800635a:	4b0d      	ldr	r3, [pc, #52]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	3301      	adds	r3, #1
 8006360:	4a0b      	ldr	r2, [pc, #44]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006362:	61d3      	str	r3, [r2, #28]
		accMsg[VERIFY_LEDS]++;
 8006364:	4b0a      	ldr	r3, [pc, #40]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	3301      	adds	r3, #1
 800636a:	4a09      	ldr	r2, [pc, #36]	; (8006390 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800636c:	6213      	str	r3, [r2, #32]

		accLap++;
 800636e:	4b09      	ldr	r3, [pc, #36]	; (8006394 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3301      	adds	r3, #1
 8006374:	4a07      	ldr	r2, [pc, #28]	; (8006394 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8006376:	6013      	str	r3, [r2, #0]
	}
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	40001400 	.word	0x40001400
 8006388:	20002680 	.word	0x20002680
 800638c:	2000268c 	.word	0x2000268c
 8006390:	200026a4 	.word	0x200026a4
 8006394:	200026c8 	.word	0x200026c8

08006398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800639e:	2300      	movs	r3, #0
 80063a0:	607b      	str	r3, [r7, #4]
 80063a2:	4b10      	ldr	r3, [pc, #64]	; (80063e4 <HAL_MspInit+0x4c>)
 80063a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a6:	4a0f      	ldr	r2, [pc, #60]	; (80063e4 <HAL_MspInit+0x4c>)
 80063a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063ac:	6453      	str	r3, [r2, #68]	; 0x44
 80063ae:	4b0d      	ldr	r3, [pc, #52]	; (80063e4 <HAL_MspInit+0x4c>)
 80063b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063b6:	607b      	str	r3, [r7, #4]
 80063b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80063ba:	2300      	movs	r3, #0
 80063bc:	603b      	str	r3, [r7, #0]
 80063be:	4b09      	ldr	r3, [pc, #36]	; (80063e4 <HAL_MspInit+0x4c>)
 80063c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c2:	4a08      	ldr	r2, [pc, #32]	; (80063e4 <HAL_MspInit+0x4c>)
 80063c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063c8:	6413      	str	r3, [r2, #64]	; 0x40
 80063ca:	4b06      	ldr	r3, [pc, #24]	; (80063e4 <HAL_MspInit+0x4c>)
 80063cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063d2:	603b      	str	r3, [r7, #0]
 80063d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80063d6:	bf00      	nop
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	40023800 	.word	0x40023800

080063e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b08e      	sub	sp, #56	; 0x38
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063f4:	2200      	movs	r2, #0
 80063f6:	601a      	str	r2, [r3, #0]
 80063f8:	605a      	str	r2, [r3, #4]
 80063fa:	609a      	str	r2, [r3, #8]
 80063fc:	60da      	str	r2, [r3, #12]
 80063fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a79      	ldr	r2, [pc, #484]	; (80065ec <HAL_ADC_MspInit+0x204>)
 8006406:	4293      	cmp	r3, r2
 8006408:	f040 808d 	bne.w	8006526 <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800640c:	2300      	movs	r3, #0
 800640e:	623b      	str	r3, [r7, #32]
 8006410:	4b77      	ldr	r3, [pc, #476]	; (80065f0 <HAL_ADC_MspInit+0x208>)
 8006412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006414:	4a76      	ldr	r2, [pc, #472]	; (80065f0 <HAL_ADC_MspInit+0x208>)
 8006416:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800641a:	6453      	str	r3, [r2, #68]	; 0x44
 800641c:	4b74      	ldr	r3, [pc, #464]	; (80065f0 <HAL_ADC_MspInit+0x208>)
 800641e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006424:	623b      	str	r3, [r7, #32]
 8006426:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006428:	2300      	movs	r3, #0
 800642a:	61fb      	str	r3, [r7, #28]
 800642c:	4b70      	ldr	r3, [pc, #448]	; (80065f0 <HAL_ADC_MspInit+0x208>)
 800642e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006430:	4a6f      	ldr	r2, [pc, #444]	; (80065f0 <HAL_ADC_MspInit+0x208>)
 8006432:	f043 0301 	orr.w	r3, r3, #1
 8006436:	6313      	str	r3, [r2, #48]	; 0x30
 8006438:	4b6d      	ldr	r3, [pc, #436]	; (80065f0 <HAL_ADC_MspInit+0x208>)
 800643a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	61fb      	str	r3, [r7, #28]
 8006442:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006444:	2300      	movs	r3, #0
 8006446:	61bb      	str	r3, [r7, #24]
 8006448:	4b69      	ldr	r3, [pc, #420]	; (80065f0 <HAL_ADC_MspInit+0x208>)
 800644a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644c:	4a68      	ldr	r2, [pc, #416]	; (80065f0 <HAL_ADC_MspInit+0x208>)
 800644e:	f043 0304 	orr.w	r3, r3, #4
 8006452:	6313      	str	r3, [r2, #48]	; 0x30
 8006454:	4b66      	ldr	r3, [pc, #408]	; (80065f0 <HAL_ADC_MspInit+0x208>)
 8006456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006458:	f003 0304 	and.w	r3, r3, #4
 800645c:	61bb      	str	r3, [r7, #24]
 800645e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006460:	2300      	movs	r3, #0
 8006462:	617b      	str	r3, [r7, #20]
 8006464:	4b62      	ldr	r3, [pc, #392]	; (80065f0 <HAL_ADC_MspInit+0x208>)
 8006466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006468:	4a61      	ldr	r2, [pc, #388]	; (80065f0 <HAL_ADC_MspInit+0x208>)
 800646a:	f043 0302 	orr.w	r3, r3, #2
 800646e:	6313      	str	r3, [r2, #48]	; 0x30
 8006470:	4b5f      	ldr	r3, [pc, #380]	; (80065f0 <HAL_ADC_MspInit+0x208>)
 8006472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	617b      	str	r3, [r7, #20]
 800647a:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800647c:	23c0      	movs	r3, #192	; 0xc0
 800647e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006480:	2303      	movs	r3, #3
 8006482:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006484:	2300      	movs	r3, #0
 8006486:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800648c:	4619      	mov	r1, r3
 800648e:	4859      	ldr	r0, [pc, #356]	; (80065f4 <HAL_ADC_MspInit+0x20c>)
 8006490:	f002 fb24 	bl	8008adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006494:	2330      	movs	r3, #48	; 0x30
 8006496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006498:	2303      	movs	r3, #3
 800649a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800649c:	2300      	movs	r3, #0
 800649e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064a4:	4619      	mov	r1, r3
 80064a6:	4854      	ldr	r0, [pc, #336]	; (80065f8 <HAL_ADC_MspInit+0x210>)
 80064a8:	f002 fb18 	bl	8008adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80064ac:	2303      	movs	r3, #3
 80064ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80064b0:	2303      	movs	r3, #3
 80064b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064b4:	2300      	movs	r3, #0
 80064b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80064b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064bc:	4619      	mov	r1, r3
 80064be:	484f      	ldr	r0, [pc, #316]	; (80065fc <HAL_ADC_MspInit+0x214>)
 80064c0:	f002 fb0c 	bl	8008adc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80064c4:	4b4e      	ldr	r3, [pc, #312]	; (8006600 <HAL_ADC_MspInit+0x218>)
 80064c6:	4a4f      	ldr	r2, [pc, #316]	; (8006604 <HAL_ADC_MspInit+0x21c>)
 80064c8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80064ca:	4b4d      	ldr	r3, [pc, #308]	; (8006600 <HAL_ADC_MspInit+0x218>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80064d0:	4b4b      	ldr	r3, [pc, #300]	; (8006600 <HAL_ADC_MspInit+0x218>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80064d6:	4b4a      	ldr	r3, [pc, #296]	; (8006600 <HAL_ADC_MspInit+0x218>)
 80064d8:	2200      	movs	r2, #0
 80064da:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80064dc:	4b48      	ldr	r3, [pc, #288]	; (8006600 <HAL_ADC_MspInit+0x218>)
 80064de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064e2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80064e4:	4b46      	ldr	r3, [pc, #280]	; (8006600 <HAL_ADC_MspInit+0x218>)
 80064e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064ea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80064ec:	4b44      	ldr	r3, [pc, #272]	; (8006600 <HAL_ADC_MspInit+0x218>)
 80064ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80064f2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80064f4:	4b42      	ldr	r3, [pc, #264]	; (8006600 <HAL_ADC_MspInit+0x218>)
 80064f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064fa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80064fc:	4b40      	ldr	r3, [pc, #256]	; (8006600 <HAL_ADC_MspInit+0x218>)
 80064fe:	2200      	movs	r2, #0
 8006500:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006502:	4b3f      	ldr	r3, [pc, #252]	; (8006600 <HAL_ADC_MspInit+0x218>)
 8006504:	2200      	movs	r2, #0
 8006506:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006508:	483d      	ldr	r0, [pc, #244]	; (8006600 <HAL_ADC_MspInit+0x218>)
 800650a:	f001 ff55 	bl	80083b8 <HAL_DMA_Init>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8006514:	f7fb fb50 	bl	8001bb8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a39      	ldr	r2, [pc, #228]	; (8006600 <HAL_ADC_MspInit+0x218>)
 800651c:	639a      	str	r2, [r3, #56]	; 0x38
 800651e:	4a38      	ldr	r2, [pc, #224]	; (8006600 <HAL_ADC_MspInit+0x218>)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006524:	e05d      	b.n	80065e2 <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a37      	ldr	r2, [pc, #220]	; (8006608 <HAL_ADC_MspInit+0x220>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d158      	bne.n	80065e2 <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006530:	2300      	movs	r3, #0
 8006532:	613b      	str	r3, [r7, #16]
 8006534:	4b2e      	ldr	r3, [pc, #184]	; (80065f0 <HAL_ADC_MspInit+0x208>)
 8006536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006538:	4a2d      	ldr	r2, [pc, #180]	; (80065f0 <HAL_ADC_MspInit+0x208>)
 800653a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800653e:	6453      	str	r3, [r2, #68]	; 0x44
 8006540:	4b2b      	ldr	r3, [pc, #172]	; (80065f0 <HAL_ADC_MspInit+0x208>)
 8006542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006544:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006548:	613b      	str	r3, [r7, #16]
 800654a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800654c:	2300      	movs	r3, #0
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	4b27      	ldr	r3, [pc, #156]	; (80065f0 <HAL_ADC_MspInit+0x208>)
 8006552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006554:	4a26      	ldr	r2, [pc, #152]	; (80065f0 <HAL_ADC_MspInit+0x208>)
 8006556:	f043 0301 	orr.w	r3, r3, #1
 800655a:	6313      	str	r3, [r2, #48]	; 0x30
 800655c:	4b24      	ldr	r3, [pc, #144]	; (80065f0 <HAL_ADC_MspInit+0x208>)
 800655e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	60fb      	str	r3, [r7, #12]
 8006566:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006568:	233f      	movs	r3, #63	; 0x3f
 800656a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800656c:	2303      	movs	r3, #3
 800656e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006570:	2300      	movs	r3, #0
 8006572:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006578:	4619      	mov	r1, r3
 800657a:	481e      	ldr	r0, [pc, #120]	; (80065f4 <HAL_ADC_MspInit+0x20c>)
 800657c:	f002 faae 	bl	8008adc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8006580:	4b22      	ldr	r3, [pc, #136]	; (800660c <HAL_ADC_MspInit+0x224>)
 8006582:	4a23      	ldr	r2, [pc, #140]	; (8006610 <HAL_ADC_MspInit+0x228>)
 8006584:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006586:	4b21      	ldr	r3, [pc, #132]	; (800660c <HAL_ADC_MspInit+0x224>)
 8006588:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800658c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800658e:	4b1f      	ldr	r3, [pc, #124]	; (800660c <HAL_ADC_MspInit+0x224>)
 8006590:	2200      	movs	r2, #0
 8006592:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006594:	4b1d      	ldr	r3, [pc, #116]	; (800660c <HAL_ADC_MspInit+0x224>)
 8006596:	2200      	movs	r2, #0
 8006598:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800659a:	4b1c      	ldr	r3, [pc, #112]	; (800660c <HAL_ADC_MspInit+0x224>)
 800659c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065a0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80065a2:	4b1a      	ldr	r3, [pc, #104]	; (800660c <HAL_ADC_MspInit+0x224>)
 80065a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065a8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80065aa:	4b18      	ldr	r3, [pc, #96]	; (800660c <HAL_ADC_MspInit+0x224>)
 80065ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80065b0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80065b2:	4b16      	ldr	r3, [pc, #88]	; (800660c <HAL_ADC_MspInit+0x224>)
 80065b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065b8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80065ba:	4b14      	ldr	r3, [pc, #80]	; (800660c <HAL_ADC_MspInit+0x224>)
 80065bc:	2200      	movs	r2, #0
 80065be:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80065c0:	4b12      	ldr	r3, [pc, #72]	; (800660c <HAL_ADC_MspInit+0x224>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80065c6:	4811      	ldr	r0, [pc, #68]	; (800660c <HAL_ADC_MspInit+0x224>)
 80065c8:	f001 fef6 	bl	80083b8 <HAL_DMA_Init>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 80065d2:	f7fb faf1 	bl	8001bb8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a0c      	ldr	r2, [pc, #48]	; (800660c <HAL_ADC_MspInit+0x224>)
 80065da:	639a      	str	r2, [r3, #56]	; 0x38
 80065dc:	4a0b      	ldr	r2, [pc, #44]	; (800660c <HAL_ADC_MspInit+0x224>)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80065e2:	bf00      	nop
 80065e4:	3738      	adds	r7, #56	; 0x38
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	40012000 	.word	0x40012000
 80065f0:	40023800 	.word	0x40023800
 80065f4:	40020000 	.word	0x40020000
 80065f8:	40020800 	.word	0x40020800
 80065fc:	40020400 	.word	0x40020400
 8006600:	20000244 	.word	0x20000244
 8006604:	40026410 	.word	0x40026410
 8006608:	40012100 	.word	0x40012100
 800660c:	200002a4 	.word	0x200002a4
 8006610:	40026440 	.word	0x40026440

08006614 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b08a      	sub	sp, #40	; 0x28
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800661c:	f107 0314 	add.w	r3, r7, #20
 8006620:	2200      	movs	r2, #0
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	605a      	str	r2, [r3, #4]
 8006626:	609a      	str	r2, [r3, #8]
 8006628:	60da      	str	r2, [r3, #12]
 800662a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	4a1d      	ldr	r2, [pc, #116]	; (80066a8 <HAL_CAN_MspInit+0x94>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d134      	bne.n	80066a0 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8006636:	2300      	movs	r3, #0
 8006638:	613b      	str	r3, [r7, #16]
 800663a:	4b1c      	ldr	r3, [pc, #112]	; (80066ac <HAL_CAN_MspInit+0x98>)
 800663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663e:	4a1b      	ldr	r2, [pc, #108]	; (80066ac <HAL_CAN_MspInit+0x98>)
 8006640:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006644:	6413      	str	r3, [r2, #64]	; 0x40
 8006646:	4b19      	ldr	r3, [pc, #100]	; (80066ac <HAL_CAN_MspInit+0x98>)
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800664e:	613b      	str	r3, [r7, #16]
 8006650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006652:	2300      	movs	r3, #0
 8006654:	60fb      	str	r3, [r7, #12]
 8006656:	4b15      	ldr	r3, [pc, #84]	; (80066ac <HAL_CAN_MspInit+0x98>)
 8006658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800665a:	4a14      	ldr	r2, [pc, #80]	; (80066ac <HAL_CAN_MspInit+0x98>)
 800665c:	f043 0302 	orr.w	r3, r3, #2
 8006660:	6313      	str	r3, [r2, #48]	; 0x30
 8006662:	4b12      	ldr	r3, [pc, #72]	; (80066ac <HAL_CAN_MspInit+0x98>)
 8006664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	60fb      	str	r3, [r7, #12]
 800666c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800666e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006674:	2302      	movs	r3, #2
 8006676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006678:	2300      	movs	r3, #0
 800667a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800667c:	2303      	movs	r3, #3
 800667e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8006680:	2309      	movs	r3, #9
 8006682:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006684:	f107 0314 	add.w	r3, r7, #20
 8006688:	4619      	mov	r1, r3
 800668a:	4809      	ldr	r0, [pc, #36]	; (80066b0 <HAL_CAN_MspInit+0x9c>)
 800668c:	f002 fa26 	bl	8008adc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 8006690:	2200      	movs	r2, #0
 8006692:	2101      	movs	r1, #1
 8006694:	2014      	movs	r0, #20
 8006696:	f001 fe4a 	bl	800832e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800669a:	2014      	movs	r0, #20
 800669c:	f001 fe63 	bl	8008366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80066a0:	bf00      	nop
 80066a2:	3728      	adds	r7, #40	; 0x28
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	40006400 	.word	0x40006400
 80066ac:	40023800 	.word	0x40023800
 80066b0:	40020400 	.word	0x40020400

080066b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b08a      	sub	sp, #40	; 0x28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066bc:	f107 0314 	add.w	r3, r7, #20
 80066c0:	2200      	movs	r2, #0
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	605a      	str	r2, [r3, #4]
 80066c6:	609a      	str	r2, [r3, #8]
 80066c8:	60da      	str	r2, [r3, #12]
 80066ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a19      	ldr	r2, [pc, #100]	; (8006738 <HAL_I2C_MspInit+0x84>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d12b      	bne.n	800672e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066d6:	2300      	movs	r3, #0
 80066d8:	613b      	str	r3, [r7, #16]
 80066da:	4b18      	ldr	r3, [pc, #96]	; (800673c <HAL_I2C_MspInit+0x88>)
 80066dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066de:	4a17      	ldr	r2, [pc, #92]	; (800673c <HAL_I2C_MspInit+0x88>)
 80066e0:	f043 0302 	orr.w	r3, r3, #2
 80066e4:	6313      	str	r3, [r2, #48]	; 0x30
 80066e6:	4b15      	ldr	r3, [pc, #84]	; (800673c <HAL_I2C_MspInit+0x88>)
 80066e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	613b      	str	r3, [r7, #16]
 80066f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80066f2:	23c0      	movs	r3, #192	; 0xc0
 80066f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80066f6:	2312      	movs	r3, #18
 80066f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066fa:	2300      	movs	r3, #0
 80066fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066fe:	2303      	movs	r3, #3
 8006700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006702:	2304      	movs	r3, #4
 8006704:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006706:	f107 0314 	add.w	r3, r7, #20
 800670a:	4619      	mov	r1, r3
 800670c:	480c      	ldr	r0, [pc, #48]	; (8006740 <HAL_I2C_MspInit+0x8c>)
 800670e:	f002 f9e5 	bl	8008adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006712:	2300      	movs	r3, #0
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	4b09      	ldr	r3, [pc, #36]	; (800673c <HAL_I2C_MspInit+0x88>)
 8006718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671a:	4a08      	ldr	r2, [pc, #32]	; (800673c <HAL_I2C_MspInit+0x88>)
 800671c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006720:	6413      	str	r3, [r2, #64]	; 0x40
 8006722:	4b06      	ldr	r3, [pc, #24]	; (800673c <HAL_I2C_MspInit+0x88>)
 8006724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800672a:	60fb      	str	r3, [r7, #12]
 800672c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800672e:	bf00      	nop
 8006730:	3728      	adds	r7, #40	; 0x28
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	40005400 	.word	0x40005400
 800673c:	40023800 	.word	0x40023800
 8006740:	40020400 	.word	0x40020400

08006744 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b09a      	sub	sp, #104	; 0x68
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800674c:	f107 030c 	add.w	r3, r7, #12
 8006750:	225c      	movs	r2, #92	; 0x5c
 8006752:	2100      	movs	r1, #0
 8006754:	4618      	mov	r0, r3
 8006756:	f011 fd2d 	bl	80181b4 <memset>
  if(hrtc->Instance==RTC)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a0c      	ldr	r2, [pc, #48]	; (8006790 <HAL_RTC_MspInit+0x4c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d111      	bne.n	8006788 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006764:	2320      	movs	r3, #32
 8006766:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006768:	f44f 7380 	mov.w	r3, #256	; 0x100
 800676c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800676e:	f107 030c 	add.w	r3, r7, #12
 8006772:	4618      	mov	r0, r3
 8006774:	f004 ff8c 	bl	800b690 <HAL_RCCEx_PeriphCLKConfig>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800677e:	f7fb fa1b 	bl	8001bb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006782:	4b04      	ldr	r3, [pc, #16]	; (8006794 <HAL_RTC_MspInit+0x50>)
 8006784:	2201      	movs	r2, #1
 8006786:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006788:	bf00      	nop
 800678a:	3768      	adds	r7, #104	; 0x68
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}
 8006790:	40002800 	.word	0x40002800
 8006794:	42470e3c 	.word	0x42470e3c

08006798 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b08a      	sub	sp, #40	; 0x28
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067a0:	f107 0314 	add.w	r3, r7, #20
 80067a4:	2200      	movs	r2, #0
 80067a6:	601a      	str	r2, [r3, #0]
 80067a8:	605a      	str	r2, [r3, #4]
 80067aa:	609a      	str	r2, [r3, #8]
 80067ac:	60da      	str	r2, [r3, #12]
 80067ae:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a2c      	ldr	r2, [pc, #176]	; (8006868 <HAL_SD_MspInit+0xd0>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d152      	bne.n	8006860 <HAL_SD_MspInit+0xc8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80067ba:	2300      	movs	r3, #0
 80067bc:	613b      	str	r3, [r7, #16]
 80067be:	4b2b      	ldr	r3, [pc, #172]	; (800686c <HAL_SD_MspInit+0xd4>)
 80067c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067c2:	4a2a      	ldr	r2, [pc, #168]	; (800686c <HAL_SD_MspInit+0xd4>)
 80067c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80067c8:	6453      	str	r3, [r2, #68]	; 0x44
 80067ca:	4b28      	ldr	r3, [pc, #160]	; (800686c <HAL_SD_MspInit+0xd4>)
 80067cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067d2:	613b      	str	r3, [r7, #16]
 80067d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80067d6:	2300      	movs	r3, #0
 80067d8:	60fb      	str	r3, [r7, #12]
 80067da:	4b24      	ldr	r3, [pc, #144]	; (800686c <HAL_SD_MspInit+0xd4>)
 80067dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067de:	4a23      	ldr	r2, [pc, #140]	; (800686c <HAL_SD_MspInit+0xd4>)
 80067e0:	f043 0304 	orr.w	r3, r3, #4
 80067e4:	6313      	str	r3, [r2, #48]	; 0x30
 80067e6:	4b21      	ldr	r3, [pc, #132]	; (800686c <HAL_SD_MspInit+0xd4>)
 80067e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ea:	f003 0304 	and.w	r3, r3, #4
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80067f2:	2300      	movs	r3, #0
 80067f4:	60bb      	str	r3, [r7, #8]
 80067f6:	4b1d      	ldr	r3, [pc, #116]	; (800686c <HAL_SD_MspInit+0xd4>)
 80067f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fa:	4a1c      	ldr	r2, [pc, #112]	; (800686c <HAL_SD_MspInit+0xd4>)
 80067fc:	f043 0308 	orr.w	r3, r3, #8
 8006800:	6313      	str	r3, [r2, #48]	; 0x30
 8006802:	4b1a      	ldr	r3, [pc, #104]	; (800686c <HAL_SD_MspInit+0xd4>)
 8006804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006806:	f003 0308 	and.w	r3, r3, #8
 800680a:	60bb      	str	r3, [r7, #8]
 800680c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800680e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006812:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006814:	2302      	movs	r3, #2
 8006816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006818:	2300      	movs	r3, #0
 800681a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800681c:	2303      	movs	r3, #3
 800681e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006820:	230c      	movs	r3, #12
 8006822:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006824:	f107 0314 	add.w	r3, r7, #20
 8006828:	4619      	mov	r1, r3
 800682a:	4811      	ldr	r0, [pc, #68]	; (8006870 <HAL_SD_MspInit+0xd8>)
 800682c:	f002 f956 	bl	8008adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006830:	2304      	movs	r3, #4
 8006832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006834:	2302      	movs	r3, #2
 8006836:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006838:	2300      	movs	r3, #0
 800683a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800683c:	2303      	movs	r3, #3
 800683e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006840:	230c      	movs	r3, #12
 8006842:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006844:	f107 0314 	add.w	r3, r7, #20
 8006848:	4619      	mov	r1, r3
 800684a:	480a      	ldr	r0, [pc, #40]	; (8006874 <HAL_SD_MspInit+0xdc>)
 800684c:	f002 f946 	bl	8008adc <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006850:	2200      	movs	r2, #0
 8006852:	2100      	movs	r1, #0
 8006854:	2031      	movs	r0, #49	; 0x31
 8006856:	f001 fd6a 	bl	800832e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800685a:	2031      	movs	r0, #49	; 0x31
 800685c:	f001 fd83 	bl	8008366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006860:	bf00      	nop
 8006862:	3728      	adds	r7, #40	; 0x28
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	40012c00 	.word	0x40012c00
 800686c:	40023800 	.word	0x40023800
 8006870:	40020800 	.word	0x40020800
 8006874:	40020c00 	.word	0x40020c00

08006878 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a0e      	ldr	r2, [pc, #56]	; (80068c0 <HAL_TIM_Base_MspInit+0x48>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d115      	bne.n	80068b6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800688a:	2300      	movs	r3, #0
 800688c:	60fb      	str	r3, [r7, #12]
 800688e:	4b0d      	ldr	r3, [pc, #52]	; (80068c4 <HAL_TIM_Base_MspInit+0x4c>)
 8006890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006892:	4a0c      	ldr	r2, [pc, #48]	; (80068c4 <HAL_TIM_Base_MspInit+0x4c>)
 8006894:	f043 0320 	orr.w	r3, r3, #32
 8006898:	6413      	str	r3, [r2, #64]	; 0x40
 800689a:	4b0a      	ldr	r3, [pc, #40]	; (80068c4 <HAL_TIM_Base_MspInit+0x4c>)
 800689c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689e:	f003 0320 	and.w	r3, r3, #32
 80068a2:	60fb      	str	r3, [r7, #12]
 80068a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80068a6:	2200      	movs	r2, #0
 80068a8:	2100      	movs	r1, #0
 80068aa:	2037      	movs	r0, #55	; 0x37
 80068ac:	f001 fd3f 	bl	800832e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80068b0:	2037      	movs	r0, #55	; 0x37
 80068b2:	f001 fd58 	bl	8008366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80068b6:	bf00      	nop
 80068b8:	3710      	adds	r7, #16
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	40001400 	.word	0x40001400
 80068c4:	40023800 	.word	0x40023800

080068c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80068c8:	b480      	push	{r7}
 80068ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80068cc:	e7fe      	b.n	80068cc <NMI_Handler+0x4>

080068ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80068ce:	b480      	push	{r7}
 80068d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80068d2:	e7fe      	b.n	80068d2 <HardFault_Handler+0x4>

080068d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80068d4:	b480      	push	{r7}
 80068d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80068d8:	e7fe      	b.n	80068d8 <MemManage_Handler+0x4>

080068da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80068da:	b480      	push	{r7}
 80068dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80068de:	e7fe      	b.n	80068de <BusFault_Handler+0x4>

080068e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80068e0:	b480      	push	{r7}
 80068e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80068e4:	e7fe      	b.n	80068e4 <UsageFault_Handler+0x4>

080068e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80068e6:	b480      	push	{r7}
 80068e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80068ea:	bf00      	nop
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80068f4:	b480      	push	{r7}
 80068f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80068f8:	bf00      	nop
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr

08006902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006902:	b480      	push	{r7}
 8006904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006906:	bf00      	nop
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006914:	f000 f90e 	bl	8006b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006918:	bf00      	nop
 800691a:	bd80      	pop	{r7, pc}

0800691c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006920:	4802      	ldr	r0, [pc, #8]	; (800692c <CAN1_RX0_IRQHandler+0x10>)
 8006922:	f001 f9d5 	bl	8007cd0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8006926:	bf00      	nop
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	20000304 	.word	0x20000304

08006930 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI0_Pin);
 8006934:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006938:	f002 fab0 	bl	8008e9c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI1_Pin);
 800693c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006940:	f002 faac 	bl	8008e9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006944:	bf00      	nop
 8006946:	bd80      	pop	{r7, pc}

08006948 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800694c:	4802      	ldr	r0, [pc, #8]	; (8006958 <SDIO_IRQHandler+0x10>)
 800694e:	f006 fddb 	bl	800d508 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8006952:	bf00      	nop
 8006954:	bd80      	pop	{r7, pc}
 8006956:	bf00      	nop
 8006958:	200003a0 	.word	0x200003a0

0800695c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006960:	4802      	ldr	r0, [pc, #8]	; (800696c <TIM7_IRQHandler+0x10>)
 8006962:	f007 fe9b 	bl	800e69c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006966:	bf00      	nop
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	20000424 	.word	0x20000424

08006970 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006974:	4802      	ldr	r0, [pc, #8]	; (8006980 <DMA2_Stream0_IRQHandler+0x10>)
 8006976:	f001 fe47 	bl	8008608 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800697a:	bf00      	nop
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	20000244 	.word	0x20000244

08006984 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006988:	4802      	ldr	r0, [pc, #8]	; (8006994 <DMA2_Stream2_IRQHandler+0x10>)
 800698a:	f001 fe3d 	bl	8008608 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800698e:	bf00      	nop
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	200002a4 	.word	0x200002a4

08006998 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800699c:	4802      	ldr	r0, [pc, #8]	; (80069a8 <OTG_FS_IRQHandler+0x10>)
 800699e:	f003 fb81 	bl	800a0a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80069a2:	bf00      	nop
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	20002dd4 	.word	0x20002dd4

080069ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80069b4:	4a14      	ldr	r2, [pc, #80]	; (8006a08 <_sbrk+0x5c>)
 80069b6:	4b15      	ldr	r3, [pc, #84]	; (8006a0c <_sbrk+0x60>)
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80069c0:	4b13      	ldr	r3, [pc, #76]	; (8006a10 <_sbrk+0x64>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d102      	bne.n	80069ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80069c8:	4b11      	ldr	r3, [pc, #68]	; (8006a10 <_sbrk+0x64>)
 80069ca:	4a12      	ldr	r2, [pc, #72]	; (8006a14 <_sbrk+0x68>)
 80069cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80069ce:	4b10      	ldr	r3, [pc, #64]	; (8006a10 <_sbrk+0x64>)
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4413      	add	r3, r2
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d207      	bcs.n	80069ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80069dc:	f011 fbc0 	bl	8018160 <__errno>
 80069e0:	4603      	mov	r3, r0
 80069e2:	220c      	movs	r2, #12
 80069e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80069e6:	f04f 33ff 	mov.w	r3, #4294967295
 80069ea:	e009      	b.n	8006a00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80069ec:	4b08      	ldr	r3, [pc, #32]	; (8006a10 <_sbrk+0x64>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80069f2:	4b07      	ldr	r3, [pc, #28]	; (8006a10 <_sbrk+0x64>)
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4413      	add	r3, r2
 80069fa:	4a05      	ldr	r2, [pc, #20]	; (8006a10 <_sbrk+0x64>)
 80069fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80069fe:	68fb      	ldr	r3, [r7, #12]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3718      	adds	r7, #24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	20020000 	.word	0x20020000
 8006a0c:	0000ffff 	.word	0x0000ffff
 8006a10:	200026d0 	.word	0x200026d0
 8006a14:	20003568 	.word	0x20003568

08006a18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a1c:	4b06      	ldr	r3, [pc, #24]	; (8006a38 <SystemInit+0x20>)
 8006a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a22:	4a05      	ldr	r2, [pc, #20]	; (8006a38 <SystemInit+0x20>)
 8006a24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006a2c:	bf00      	nop
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop
 8006a38:	e000ed00 	.word	0xe000ed00

08006a3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006a3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006a74 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006a40:	480d      	ldr	r0, [pc, #52]	; (8006a78 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006a42:	490e      	ldr	r1, [pc, #56]	; (8006a7c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006a44:	4a0e      	ldr	r2, [pc, #56]	; (8006a80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006a48:	e002      	b.n	8006a50 <LoopCopyDataInit>

08006a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006a4e:	3304      	adds	r3, #4

08006a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006a54:	d3f9      	bcc.n	8006a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006a56:	4a0b      	ldr	r2, [pc, #44]	; (8006a84 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006a58:	4c0b      	ldr	r4, [pc, #44]	; (8006a88 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006a5c:	e001      	b.n	8006a62 <LoopFillZerobss>

08006a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006a60:	3204      	adds	r2, #4

08006a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006a64:	d3fb      	bcc.n	8006a5e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006a66:	f7ff ffd7 	bl	8006a18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006a6a:	f011 fb7f 	bl	801816c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006a6e:	f7fa fc4d 	bl	800130c <main>
  bx  lr    
 8006a72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006a74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006a78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006a7c:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8006a80:	08019044 	.word	0x08019044
  ldr r2, =_sbss
 8006a84:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8006a88:	20003568 	.word	0x20003568

08006a8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006a8c:	e7fe      	b.n	8006a8c <ADC_IRQHandler>
	...

08006a90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006a94:	4b0e      	ldr	r3, [pc, #56]	; (8006ad0 <HAL_Init+0x40>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a0d      	ldr	r2, [pc, #52]	; (8006ad0 <HAL_Init+0x40>)
 8006a9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006aa0:	4b0b      	ldr	r3, [pc, #44]	; (8006ad0 <HAL_Init+0x40>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a0a      	ldr	r2, [pc, #40]	; (8006ad0 <HAL_Init+0x40>)
 8006aa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006aaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006aac:	4b08      	ldr	r3, [pc, #32]	; (8006ad0 <HAL_Init+0x40>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a07      	ldr	r2, [pc, #28]	; (8006ad0 <HAL_Init+0x40>)
 8006ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ab6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006ab8:	2003      	movs	r0, #3
 8006aba:	f001 fc2d 	bl	8008318 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006abe:	200f      	movs	r0, #15
 8006ac0:	f000 f808 	bl	8006ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006ac4:	f7ff fc68 	bl	8006398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	40023c00 	.word	0x40023c00

08006ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006adc:	4b12      	ldr	r3, [pc, #72]	; (8006b28 <HAL_InitTick+0x54>)
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	4b12      	ldr	r3, [pc, #72]	; (8006b2c <HAL_InitTick+0x58>)
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8006aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af2:	4618      	mov	r0, r3
 8006af4:	f001 fc53 	bl	800839e <HAL_SYSTICK_Config>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e00e      	b.n	8006b20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2b0f      	cmp	r3, #15
 8006b06:	d80a      	bhi.n	8006b1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006b08:	2200      	movs	r2, #0
 8006b0a:	6879      	ldr	r1, [r7, #4]
 8006b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b10:	f001 fc0d 	bl	800832e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006b14:	4a06      	ldr	r2, [pc, #24]	; (8006b30 <HAL_InitTick+0x5c>)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	e000      	b.n	8006b20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	20000000 	.word	0x20000000
 8006b2c:	20000008 	.word	0x20000008
 8006b30:	20000004 	.word	0x20000004

08006b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b34:	b480      	push	{r7}
 8006b36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006b38:	4b06      	ldr	r3, [pc, #24]	; (8006b54 <HAL_IncTick+0x20>)
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	4b06      	ldr	r3, [pc, #24]	; (8006b58 <HAL_IncTick+0x24>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4413      	add	r3, r2
 8006b44:	4a04      	ldr	r2, [pc, #16]	; (8006b58 <HAL_IncTick+0x24>)
 8006b46:	6013      	str	r3, [r2, #0]
}
 8006b48:	bf00      	nop
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	20000008 	.word	0x20000008
 8006b58:	200026d4 	.word	0x200026d4

08006b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8006b60:	4b03      	ldr	r3, [pc, #12]	; (8006b70 <HAL_GetTick+0x14>)
 8006b62:	681b      	ldr	r3, [r3, #0]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	200026d4 	.word	0x200026d4

08006b74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006b7c:	f7ff ffee 	bl	8006b5c <HAL_GetTick>
 8006b80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8c:	d005      	beq.n	8006b9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006b8e:	4b0a      	ldr	r3, [pc, #40]	; (8006bb8 <HAL_Delay+0x44>)
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	461a      	mov	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	4413      	add	r3, r2
 8006b98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006b9a:	bf00      	nop
 8006b9c:	f7ff ffde 	bl	8006b5c <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d8f7      	bhi.n	8006b9c <HAL_Delay+0x28>
  {
  }
}
 8006bac:	bf00      	nop
 8006bae:	bf00      	nop
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	20000008 	.word	0x20000008

08006bbc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d101      	bne.n	8006bd2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e033      	b.n	8006c3a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d109      	bne.n	8006bee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7ff fc04 	bl	80063e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	f003 0310 	and.w	r3, r3, #16
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d118      	bne.n	8006c2c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006c02:	f023 0302 	bic.w	r3, r3, #2
 8006c06:	f043 0202 	orr.w	r2, r3, #2
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fa78 	bl	8007104 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1e:	f023 0303 	bic.w	r3, r3, #3
 8006c22:	f043 0201 	orr.w	r2, r3, #1
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	641a      	str	r2, [r3, #64]	; 0x40
 8006c2a:	e001      	b.n	8006c30 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
	...

08006c44 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006c50:	2300      	movs	r3, #0
 8006c52:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d101      	bne.n	8006c62 <HAL_ADC_Start_DMA+0x1e>
 8006c5e:	2302      	movs	r3, #2
 8006c60:	e0e9      	b.n	8006e36 <HAL_ADC_Start_DMA+0x1f2>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f003 0301 	and.w	r3, r3, #1
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d018      	beq.n	8006caa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	689a      	ldr	r2, [r3, #8]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f042 0201 	orr.w	r2, r2, #1
 8006c86:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006c88:	4b6d      	ldr	r3, [pc, #436]	; (8006e40 <HAL_ADC_Start_DMA+0x1fc>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a6d      	ldr	r2, [pc, #436]	; (8006e44 <HAL_ADC_Start_DMA+0x200>)
 8006c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c92:	0c9a      	lsrs	r2, r3, #18
 8006c94:	4613      	mov	r3, r2
 8006c96:	005b      	lsls	r3, r3, #1
 8006c98:	4413      	add	r3, r2
 8006c9a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006c9c:	e002      	b.n	8006ca4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1f9      	bne.n	8006c9e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cb8:	d107      	bne.n	8006cca <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	689a      	ldr	r2, [r3, #8]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006cc8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f003 0301 	and.w	r3, r3, #1
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	f040 80a1 	bne.w	8006e1c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cde:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006ce2:	f023 0301 	bic.w	r3, r3, #1
 8006ce6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d007      	beq.n	8006d0c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d00:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006d04:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d18:	d106      	bne.n	8006d28 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d1e:	f023 0206 	bic.w	r2, r3, #6
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	645a      	str	r2, [r3, #68]	; 0x44
 8006d26:	e002      	b.n	8006d2e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006d36:	4b44      	ldr	r3, [pc, #272]	; (8006e48 <HAL_ADC_Start_DMA+0x204>)
 8006d38:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3e:	4a43      	ldr	r2, [pc, #268]	; (8006e4c <HAL_ADC_Start_DMA+0x208>)
 8006d40:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d46:	4a42      	ldr	r2, [pc, #264]	; (8006e50 <HAL_ADC_Start_DMA+0x20c>)
 8006d48:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4e:	4a41      	ldr	r2, [pc, #260]	; (8006e54 <HAL_ADC_Start_DMA+0x210>)
 8006d50:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006d5a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006d6a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	689a      	ldr	r2, [r3, #8]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d7a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	334c      	adds	r3, #76	; 0x4c
 8006d86:	4619      	mov	r1, r3
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f001 fbc2 	bl	8008514 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f003 031f 	and.w	r3, r3, #31
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d12a      	bne.n	8006df2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a2d      	ldr	r2, [pc, #180]	; (8006e58 <HAL_ADC_Start_DMA+0x214>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d015      	beq.n	8006dd2 <HAL_ADC_Start_DMA+0x18e>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a2c      	ldr	r2, [pc, #176]	; (8006e5c <HAL_ADC_Start_DMA+0x218>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d105      	bne.n	8006dbc <HAL_ADC_Start_DMA+0x178>
 8006db0:	4b25      	ldr	r3, [pc, #148]	; (8006e48 <HAL_ADC_Start_DMA+0x204>)
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f003 031f 	and.w	r3, r3, #31
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00a      	beq.n	8006dd2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a27      	ldr	r2, [pc, #156]	; (8006e60 <HAL_ADC_Start_DMA+0x21c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d136      	bne.n	8006e34 <HAL_ADC_Start_DMA+0x1f0>
 8006dc6:	4b20      	ldr	r3, [pc, #128]	; (8006e48 <HAL_ADC_Start_DMA+0x204>)
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	f003 0310 	and.w	r3, r3, #16
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d130      	bne.n	8006e34 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d129      	bne.n	8006e34 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	689a      	ldr	r2, [r3, #8]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006dee:	609a      	str	r2, [r3, #8]
 8006df0:	e020      	b.n	8006e34 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a18      	ldr	r2, [pc, #96]	; (8006e58 <HAL_ADC_Start_DMA+0x214>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d11b      	bne.n	8006e34 <HAL_ADC_Start_DMA+0x1f0>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d114      	bne.n	8006e34 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689a      	ldr	r2, [r3, #8]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006e18:	609a      	str	r2, [r3, #8]
 8006e1a:	e00b      	b.n	8006e34 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e20:	f043 0210 	orr.w	r2, r3, #16
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e2c:	f043 0201 	orr.w	r2, r3, #1
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8006e34:	2300      	movs	r3, #0
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3718      	adds	r7, #24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	20000000 	.word	0x20000000
 8006e44:	431bde83 	.word	0x431bde83
 8006e48:	40012300 	.word	0x40012300
 8006e4c:	080072fd 	.word	0x080072fd
 8006e50:	080073b7 	.word	0x080073b7
 8006e54:	080073d3 	.word	0x080073d3
 8006e58:	40012000 	.word	0x40012000
 8006e5c:	40012100 	.word	0x40012100
 8006e60:	40012200 	.word	0x40012200

08006e64 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b083      	sub	sp, #12
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006e6c:	bf00      	nop
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006e80:	bf00      	nop
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b083      	sub	sp, #12
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8006e94:	bf00      	nop
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d101      	bne.n	8006ebc <HAL_ADC_ConfigChannel+0x1c>
 8006eb8:	2302      	movs	r3, #2
 8006eba:	e113      	b.n	80070e4 <HAL_ADC_ConfigChannel+0x244>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2b09      	cmp	r3, #9
 8006eca:	d925      	bls.n	8006f18 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68d9      	ldr	r1, [r3, #12]
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	461a      	mov	r2, r3
 8006eda:	4613      	mov	r3, r2
 8006edc:	005b      	lsls	r3, r3, #1
 8006ede:	4413      	add	r3, r2
 8006ee0:	3b1e      	subs	r3, #30
 8006ee2:	2207      	movs	r2, #7
 8006ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee8:	43da      	mvns	r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	400a      	ands	r2, r1
 8006ef0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68d9      	ldr	r1, [r3, #12]
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	689a      	ldr	r2, [r3, #8]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	4618      	mov	r0, r3
 8006f04:	4603      	mov	r3, r0
 8006f06:	005b      	lsls	r3, r3, #1
 8006f08:	4403      	add	r3, r0
 8006f0a:	3b1e      	subs	r3, #30
 8006f0c:	409a      	lsls	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	430a      	orrs	r2, r1
 8006f14:	60da      	str	r2, [r3, #12]
 8006f16:	e022      	b.n	8006f5e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6919      	ldr	r1, [r3, #16]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	461a      	mov	r2, r3
 8006f26:	4613      	mov	r3, r2
 8006f28:	005b      	lsls	r3, r3, #1
 8006f2a:	4413      	add	r3, r2
 8006f2c:	2207      	movs	r2, #7
 8006f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f32:	43da      	mvns	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	400a      	ands	r2, r1
 8006f3a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6919      	ldr	r1, [r3, #16]
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	689a      	ldr	r2, [r3, #8]
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	4603      	mov	r3, r0
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	4403      	add	r3, r0
 8006f54:	409a      	lsls	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	2b06      	cmp	r3, #6
 8006f64:	d824      	bhi.n	8006fb0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	4613      	mov	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	3b05      	subs	r3, #5
 8006f78:	221f      	movs	r2, #31
 8006f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7e:	43da      	mvns	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	400a      	ands	r2, r1
 8006f86:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	4618      	mov	r0, r3
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	3b05      	subs	r3, #5
 8006fa2:	fa00 f203 	lsl.w	r2, r0, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	635a      	str	r2, [r3, #52]	; 0x34
 8006fae:	e04c      	b.n	800704a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	2b0c      	cmp	r3, #12
 8006fb6:	d824      	bhi.n	8007002 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	3b23      	subs	r3, #35	; 0x23
 8006fca:	221f      	movs	r2, #31
 8006fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd0:	43da      	mvns	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	400a      	ands	r2, r1
 8006fd8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	685a      	ldr	r2, [r3, #4]
 8006fec:	4613      	mov	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	3b23      	subs	r3, #35	; 0x23
 8006ff4:	fa00 f203 	lsl.w	r2, r0, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	631a      	str	r2, [r3, #48]	; 0x30
 8007000:	e023      	b.n	800704a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	4613      	mov	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	3b41      	subs	r3, #65	; 0x41
 8007014:	221f      	movs	r2, #31
 8007016:	fa02 f303 	lsl.w	r3, r2, r3
 800701a:	43da      	mvns	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	400a      	ands	r2, r1
 8007022:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	b29b      	uxth	r3, r3
 8007030:	4618      	mov	r0, r3
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	4613      	mov	r3, r2
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	4413      	add	r3, r2
 800703c:	3b41      	subs	r3, #65	; 0x41
 800703e:	fa00 f203 	lsl.w	r2, r0, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	430a      	orrs	r2, r1
 8007048:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800704a:	4b29      	ldr	r3, [pc, #164]	; (80070f0 <HAL_ADC_ConfigChannel+0x250>)
 800704c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a28      	ldr	r2, [pc, #160]	; (80070f4 <HAL_ADC_ConfigChannel+0x254>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d10f      	bne.n	8007078 <HAL_ADC_ConfigChannel+0x1d8>
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2b12      	cmp	r3, #18
 800705e:	d10b      	bne.n	8007078 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a1d      	ldr	r2, [pc, #116]	; (80070f4 <HAL_ADC_ConfigChannel+0x254>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d12b      	bne.n	80070da <HAL_ADC_ConfigChannel+0x23a>
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a1c      	ldr	r2, [pc, #112]	; (80070f8 <HAL_ADC_ConfigChannel+0x258>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d003      	beq.n	8007094 <HAL_ADC_ConfigChannel+0x1f4>
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b11      	cmp	r3, #17
 8007092:	d122      	bne.n	80070da <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a11      	ldr	r2, [pc, #68]	; (80070f8 <HAL_ADC_ConfigChannel+0x258>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d111      	bne.n	80070da <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80070b6:	4b11      	ldr	r3, [pc, #68]	; (80070fc <HAL_ADC_ConfigChannel+0x25c>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a11      	ldr	r2, [pc, #68]	; (8007100 <HAL_ADC_ConfigChannel+0x260>)
 80070bc:	fba2 2303 	umull	r2, r3, r2, r3
 80070c0:	0c9a      	lsrs	r2, r3, #18
 80070c2:	4613      	mov	r3, r2
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	4413      	add	r3, r2
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80070cc:	e002      	b.n	80070d4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	3b01      	subs	r3, #1
 80070d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d1f9      	bne.n	80070ce <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	40012300 	.word	0x40012300
 80070f4:	40012000 	.word	0x40012000
 80070f8:	10000012 	.word	0x10000012
 80070fc:	20000000 	.word	0x20000000
 8007100:	431bde83 	.word	0x431bde83

08007104 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800710c:	4b79      	ldr	r3, [pc, #484]	; (80072f4 <ADC_Init+0x1f0>)
 800710e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	685a      	ldr	r2, [r3, #4]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	431a      	orrs	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	685a      	ldr	r2, [r3, #4]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007138:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	6859      	ldr	r1, [r3, #4]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	021a      	lsls	r2, r3, #8
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800715c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	6859      	ldr	r1, [r3, #4]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	430a      	orrs	r2, r1
 800716e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	689a      	ldr	r2, [r3, #8]
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800717e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	6899      	ldr	r1, [r3, #8]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68da      	ldr	r2, [r3, #12]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007196:	4a58      	ldr	r2, [pc, #352]	; (80072f8 <ADC_Init+0x1f4>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d022      	beq.n	80071e2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	689a      	ldr	r2, [r3, #8]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80071aa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	6899      	ldr	r1, [r3, #8]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	430a      	orrs	r2, r1
 80071bc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	689a      	ldr	r2, [r3, #8]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80071cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6899      	ldr	r1, [r3, #8]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	430a      	orrs	r2, r1
 80071de:	609a      	str	r2, [r3, #8]
 80071e0:	e00f      	b.n	8007202 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	689a      	ldr	r2, [r3, #8]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80071f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	689a      	ldr	r2, [r3, #8]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007200:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	689a      	ldr	r2, [r3, #8]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 0202 	bic.w	r2, r2, #2
 8007210:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6899      	ldr	r1, [r3, #8]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	7e1b      	ldrb	r3, [r3, #24]
 800721c:	005a      	lsls	r2, r3, #1
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	430a      	orrs	r2, r1
 8007224:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 3020 	ldrb.w	r3, [r3, #32]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d01b      	beq.n	8007268 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	685a      	ldr	r2, [r3, #4]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800723e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800724e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	6859      	ldr	r1, [r3, #4]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725a:	3b01      	subs	r3, #1
 800725c:	035a      	lsls	r2, r3, #13
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	430a      	orrs	r2, r1
 8007264:	605a      	str	r2, [r3, #4]
 8007266:	e007      	b.n	8007278 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007276:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007286:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	3b01      	subs	r3, #1
 8007294:	051a      	lsls	r2, r3, #20
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	430a      	orrs	r2, r1
 800729c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	689a      	ldr	r2, [r3, #8]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80072ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6899      	ldr	r1, [r3, #8]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80072ba:	025a      	lsls	r2, r3, #9
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	430a      	orrs	r2, r1
 80072c2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	689a      	ldr	r2, [r3, #8]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	6899      	ldr	r1, [r3, #8]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	029a      	lsls	r2, r3, #10
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	430a      	orrs	r2, r1
 80072e6:	609a      	str	r2, [r3, #8]
}
 80072e8:	bf00      	nop
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	40012300 	.word	0x40012300
 80072f8:	0f000001 	.word	0x0f000001

080072fc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007308:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007312:	2b00      	cmp	r3, #0
 8007314:	d13c      	bne.n	8007390 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d12b      	bne.n	8007388 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007334:	2b00      	cmp	r3, #0
 8007336:	d127      	bne.n	8007388 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007342:	2b00      	cmp	r3, #0
 8007344:	d006      	beq.n	8007354 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007350:	2b00      	cmp	r3, #0
 8007352:	d119      	bne.n	8007388 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f022 0220 	bic.w	r2, r2, #32
 8007362:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007368:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007374:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d105      	bne.n	8007388 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007380:	f043 0201 	orr.w	r2, r3, #1
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f7ff fd6b 	bl	8006e64 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800738e:	e00e      	b.n	80073ae <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007394:	f003 0310 	and.w	r3, r3, #16
 8007398:	2b00      	cmp	r3, #0
 800739a:	d003      	beq.n	80073a4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800739c:	68f8      	ldr	r0, [r7, #12]
 800739e:	f7ff fd75 	bl	8006e8c <HAL_ADC_ErrorCallback>
}
 80073a2:	e004      	b.n	80073ae <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	4798      	blx	r3
}
 80073ae:	bf00      	nop
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b084      	sub	sp, #16
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f7ff fd57 	bl	8006e78 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80073ca:	bf00      	nop
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b084      	sub	sp, #16
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073de:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2240      	movs	r2, #64	; 0x40
 80073e4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ea:	f043 0204 	orr.w	r2, r3, #4
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f7ff fd4a 	bl	8006e8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80073f8:	bf00      	nop
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d101      	bne.n	8007412 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e0ed      	b.n	80075ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d102      	bne.n	8007424 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7ff f8f8 	bl	8006614 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f042 0201 	orr.w	r2, r2, #1
 8007432:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007434:	f7ff fb92 	bl	8006b5c <HAL_GetTick>
 8007438:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800743a:	e012      	b.n	8007462 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800743c:	f7ff fb8e 	bl	8006b5c <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	2b0a      	cmp	r3, #10
 8007448:	d90b      	bls.n	8007462 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2205      	movs	r2, #5
 800745a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e0c5      	b.n	80075ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	f003 0301 	and.w	r3, r3, #1
 800746c:	2b00      	cmp	r3, #0
 800746e:	d0e5      	beq.n	800743c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f022 0202 	bic.w	r2, r2, #2
 800747e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007480:	f7ff fb6c 	bl	8006b5c <HAL_GetTick>
 8007484:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007486:	e012      	b.n	80074ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007488:	f7ff fb68 	bl	8006b5c <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	2b0a      	cmp	r3, #10
 8007494:	d90b      	bls.n	80074ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800749a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2205      	movs	r2, #5
 80074a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80074aa:	2301      	movs	r3, #1
 80074ac:	e09f      	b.n	80075ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	f003 0302 	and.w	r3, r3, #2
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e5      	bne.n	8007488 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	7e1b      	ldrb	r3, [r3, #24]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d108      	bne.n	80074d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	e007      	b.n	80074e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	7e5b      	ldrb	r3, [r3, #25]
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d108      	bne.n	8007500 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074fc:	601a      	str	r2, [r3, #0]
 80074fe:	e007      	b.n	8007510 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800750e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	7e9b      	ldrb	r3, [r3, #26]
 8007514:	2b01      	cmp	r3, #1
 8007516:	d108      	bne.n	800752a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f042 0220 	orr.w	r2, r2, #32
 8007526:	601a      	str	r2, [r3, #0]
 8007528:	e007      	b.n	800753a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f022 0220 	bic.w	r2, r2, #32
 8007538:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	7edb      	ldrb	r3, [r3, #27]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d108      	bne.n	8007554 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f022 0210 	bic.w	r2, r2, #16
 8007550:	601a      	str	r2, [r3, #0]
 8007552:	e007      	b.n	8007564 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f042 0210 	orr.w	r2, r2, #16
 8007562:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	7f1b      	ldrb	r3, [r3, #28]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d108      	bne.n	800757e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f042 0208 	orr.w	r2, r2, #8
 800757a:	601a      	str	r2, [r3, #0]
 800757c:	e007      	b.n	800758e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f022 0208 	bic.w	r2, r2, #8
 800758c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	7f5b      	ldrb	r3, [r3, #29]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d108      	bne.n	80075a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f042 0204 	orr.w	r2, r2, #4
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	e007      	b.n	80075b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f022 0204 	bic.w	r2, r2, #4
 80075b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	689a      	ldr	r2, [r3, #8]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	431a      	orrs	r2, r3
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	431a      	orrs	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	695b      	ldr	r3, [r3, #20]
 80075cc:	ea42 0103 	orr.w	r1, r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	1e5a      	subs	r2, r3, #1
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	430a      	orrs	r2, r1
 80075dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3710      	adds	r7, #16
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
	...

080075f8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b087      	sub	sp, #28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800760e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007610:	7cfb      	ldrb	r3, [r7, #19]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d003      	beq.n	800761e <HAL_CAN_ConfigFilter+0x26>
 8007616:	7cfb      	ldrb	r3, [r7, #19]
 8007618:	2b02      	cmp	r3, #2
 800761a:	f040 80be 	bne.w	800779a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800761e:	4b65      	ldr	r3, [pc, #404]	; (80077b4 <HAL_CAN_ConfigFilter+0x1bc>)
 8007620:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007628:	f043 0201 	orr.w	r2, r3, #1
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007638:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800764c:	021b      	lsls	r3, r3, #8
 800764e:	431a      	orrs	r2, r3
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	f003 031f 	and.w	r3, r3, #31
 800765e:	2201      	movs	r2, #1
 8007660:	fa02 f303 	lsl.w	r3, r2, r3
 8007664:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	43db      	mvns	r3, r3
 8007670:	401a      	ands	r2, r3
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	69db      	ldr	r3, [r3, #28]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d123      	bne.n	80076c8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	43db      	mvns	r3, r3
 800768a:	401a      	ands	r2, r3
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800769e:	683a      	ldr	r2, [r7, #0]
 80076a0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80076a2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	3248      	adds	r2, #72	; 0x48
 80076a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80076bc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80076be:	6979      	ldr	r1, [r7, #20]
 80076c0:	3348      	adds	r3, #72	; 0x48
 80076c2:	00db      	lsls	r3, r3, #3
 80076c4:	440b      	add	r3, r1
 80076c6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	69db      	ldr	r3, [r3, #28]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d122      	bne.n	8007716 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	431a      	orrs	r2, r3
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80076ec:	683a      	ldr	r2, [r7, #0]
 80076ee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80076f0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	3248      	adds	r2, #72	; 0x48
 80076f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800770a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800770c:	6979      	ldr	r1, [r7, #20]
 800770e:	3348      	adds	r3, #72	; 0x48
 8007710:	00db      	lsls	r3, r3, #3
 8007712:	440b      	add	r3, r1
 8007714:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d109      	bne.n	8007732 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	43db      	mvns	r3, r3
 8007728:	401a      	ands	r2, r3
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007730:	e007      	b.n	8007742 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	431a      	orrs	r2, r3
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	691b      	ldr	r3, [r3, #16]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d109      	bne.n	800775e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	43db      	mvns	r3, r3
 8007754:	401a      	ands	r2, r3
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800775c:	e007      	b.n	800776e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	431a      	orrs	r2, r3
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d107      	bne.n	8007786 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	431a      	orrs	r2, r3
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800778c:	f023 0201 	bic.w	r2, r3, #1
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	e006      	b.n	80077a8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
  }
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	371c      	adds	r7, #28
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr
 80077b4:	40006400 	.word	0x40006400

080077b8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d12e      	bne.n	800782a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2202      	movs	r2, #2
 80077d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f022 0201 	bic.w	r2, r2, #1
 80077e2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80077e4:	f7ff f9ba 	bl	8006b5c <HAL_GetTick>
 80077e8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80077ea:	e012      	b.n	8007812 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80077ec:	f7ff f9b6 	bl	8006b5c <HAL_GetTick>
 80077f0:	4602      	mov	r2, r0
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	1ad3      	subs	r3, r2, r3
 80077f6:	2b0a      	cmp	r3, #10
 80077f8:	d90b      	bls.n	8007812 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2205      	movs	r2, #5
 800780a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e012      	b.n	8007838 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	f003 0301 	and.w	r3, r3, #1
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1e5      	bne.n	80077ec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	e006      	b.n	8007838 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800782e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007836:	2301      	movs	r3, #1
  }
}
 8007838:	4618      	mov	r0, r3
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8007840:	b480      	push	{r7}
 8007842:	b089      	sub	sp, #36	; 0x24
 8007844:	af00      	add	r7, sp, #0
 8007846:	60f8      	str	r0, [r7, #12]
 8007848:	60b9      	str	r1, [r7, #8]
 800784a:	607a      	str	r2, [r7, #4]
 800784c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007854:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800785e:	7ffb      	ldrb	r3, [r7, #31]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d003      	beq.n	800786c <HAL_CAN_AddTxMessage+0x2c>
 8007864:	7ffb      	ldrb	r3, [r7, #31]
 8007866:	2b02      	cmp	r3, #2
 8007868:	f040 80b8 	bne.w	80079dc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10a      	bne.n	800788c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800787c:	2b00      	cmp	r3, #0
 800787e:	d105      	bne.n	800788c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007886:	2b00      	cmp	r3, #0
 8007888:	f000 80a0 	beq.w	80079cc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800788c:	69bb      	ldr	r3, [r7, #24]
 800788e:	0e1b      	lsrs	r3, r3, #24
 8007890:	f003 0303 	and.w	r3, r3, #3
 8007894:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	2b02      	cmp	r3, #2
 800789a:	d907      	bls.n	80078ac <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	e09e      	b.n	80079ea <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80078ac:	2201      	movs	r2, #1
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	409a      	lsls	r2, r3
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	689b      	ldr	r3, [r3, #8]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10d      	bne.n	80078da <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80078c8:	68f9      	ldr	r1, [r7, #12]
 80078ca:	6809      	ldr	r1, [r1, #0]
 80078cc:	431a      	orrs	r2, r3
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	3318      	adds	r3, #24
 80078d2:	011b      	lsls	r3, r3, #4
 80078d4:	440b      	add	r3, r1
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	e00f      	b.n	80078fa <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80078e4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80078ea:	68f9      	ldr	r1, [r7, #12]
 80078ec:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80078ee:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	3318      	adds	r3, #24
 80078f4:	011b      	lsls	r3, r3, #4
 80078f6:	440b      	add	r3, r1
 80078f8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6819      	ldr	r1, [r3, #0]
 80078fe:	68bb      	ldr	r3, [r7, #8]
 8007900:	691a      	ldr	r2, [r3, #16]
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	3318      	adds	r3, #24
 8007906:	011b      	lsls	r3, r3, #4
 8007908:	440b      	add	r3, r1
 800790a:	3304      	adds	r3, #4
 800790c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	7d1b      	ldrb	r3, [r3, #20]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d111      	bne.n	800793a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	3318      	adds	r3, #24
 800791e:	011b      	lsls	r3, r3, #4
 8007920:	4413      	add	r3, r2
 8007922:	3304      	adds	r3, #4
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	6811      	ldr	r1, [r2, #0]
 800792a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	3318      	adds	r3, #24
 8007932:	011b      	lsls	r3, r3, #4
 8007934:	440b      	add	r3, r1
 8007936:	3304      	adds	r3, #4
 8007938:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	3307      	adds	r3, #7
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	061a      	lsls	r2, r3, #24
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	3306      	adds	r3, #6
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	041b      	lsls	r3, r3, #16
 800794a:	431a      	orrs	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	3305      	adds	r3, #5
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	021b      	lsls	r3, r3, #8
 8007954:	4313      	orrs	r3, r2
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	3204      	adds	r2, #4
 800795a:	7812      	ldrb	r2, [r2, #0]
 800795c:	4610      	mov	r0, r2
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	6811      	ldr	r1, [r2, #0]
 8007962:	ea43 0200 	orr.w	r2, r3, r0
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	011b      	lsls	r3, r3, #4
 800796a:	440b      	add	r3, r1
 800796c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007970:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	3303      	adds	r3, #3
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	061a      	lsls	r2, r3, #24
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	3302      	adds	r3, #2
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	041b      	lsls	r3, r3, #16
 8007982:	431a      	orrs	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	3301      	adds	r3, #1
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	021b      	lsls	r3, r3, #8
 800798c:	4313      	orrs	r3, r2
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	7812      	ldrb	r2, [r2, #0]
 8007992:	4610      	mov	r0, r2
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	6811      	ldr	r1, [r2, #0]
 8007998:	ea43 0200 	orr.w	r2, r3, r0
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	011b      	lsls	r3, r3, #4
 80079a0:	440b      	add	r3, r1
 80079a2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80079a6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	3318      	adds	r3, #24
 80079b0:	011b      	lsls	r3, r3, #4
 80079b2:	4413      	add	r3, r2
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	6811      	ldr	r1, [r2, #0]
 80079ba:	f043 0201 	orr.w	r2, r3, #1
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	3318      	adds	r3, #24
 80079c2:	011b      	lsls	r3, r3, #4
 80079c4:	440b      	add	r3, r1
 80079c6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	e00e      	b.n	80079ea <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e006      	b.n	80079ea <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
  }
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3724      	adds	r7, #36	; 0x24
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr

080079f6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80079f6:	b480      	push	{r7}
 80079f8:	b085      	sub	sp, #20
 80079fa:	af00      	add	r7, sp, #0
 80079fc:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80079fe:	2300      	movs	r3, #0
 8007a00:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a08:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8007a0a:	7afb      	ldrb	r3, [r7, #11]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d002      	beq.n	8007a16 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8007a10:	7afb      	ldrb	r3, [r7, #11]
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d11d      	bne.n	8007a52 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d002      	beq.n	8007a2a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	3301      	adds	r3, #1
 8007a28:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d002      	beq.n	8007a3e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d002      	beq.n	8007a52 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8007a52:	68fb      	ldr	r3, [r7, #12]
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3714      	adds	r7, #20
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007a60:	b480      	push	{r7}
 8007a62:	b087      	sub	sp, #28
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
 8007a6c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a74:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007a76:	7dfb      	ldrb	r3, [r7, #23]
 8007a78:	2b01      	cmp	r3, #1
 8007a7a:	d003      	beq.n	8007a84 <HAL_CAN_GetRxMessage+0x24>
 8007a7c:	7dfb      	ldrb	r3, [r7, #23]
 8007a7e:	2b02      	cmp	r3, #2
 8007a80:	f040 80f3 	bne.w	8007c6a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d10e      	bne.n	8007aa8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	f003 0303 	and.w	r3, r3, #3
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d116      	bne.n	8007ac6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e0e7      	b.n	8007c78 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	f003 0303 	and.w	r3, r3, #3
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d107      	bne.n	8007ac6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	e0d8      	b.n	8007c78 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	331b      	adds	r3, #27
 8007ace:	011b      	lsls	r3, r3, #4
 8007ad0:	4413      	add	r3, r2
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0204 	and.w	r2, r3, #4
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d10c      	bne.n	8007afe <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	331b      	adds	r3, #27
 8007aec:	011b      	lsls	r3, r3, #4
 8007aee:	4413      	add	r3, r2
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	0d5b      	lsrs	r3, r3, #21
 8007af4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	601a      	str	r2, [r3, #0]
 8007afc:	e00b      	b.n	8007b16 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	331b      	adds	r3, #27
 8007b06:	011b      	lsls	r3, r3, #4
 8007b08:	4413      	add	r3, r2
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	08db      	lsrs	r3, r3, #3
 8007b0e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	331b      	adds	r3, #27
 8007b1e:	011b      	lsls	r3, r3, #4
 8007b20:	4413      	add	r3, r2
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f003 0202 	and.w	r2, r3, #2
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	331b      	adds	r3, #27
 8007b34:	011b      	lsls	r3, r3, #4
 8007b36:	4413      	add	r3, r2
 8007b38:	3304      	adds	r3, #4
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f003 020f 	and.w	r2, r3, #15
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	331b      	adds	r3, #27
 8007b4c:	011b      	lsls	r3, r3, #4
 8007b4e:	4413      	add	r3, r2
 8007b50:	3304      	adds	r3, #4
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	0a1b      	lsrs	r3, r3, #8
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	331b      	adds	r3, #27
 8007b64:	011b      	lsls	r3, r3, #4
 8007b66:	4413      	add	r3, r2
 8007b68:	3304      	adds	r3, #4
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	0c1b      	lsrs	r3, r3, #16
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681a      	ldr	r2, [r3, #0]
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	011b      	lsls	r3, r3, #4
 8007b7c:	4413      	add	r3, r2
 8007b7e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	b2da      	uxtb	r2, r3
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	011b      	lsls	r3, r3, #4
 8007b92:	4413      	add	r3, r2
 8007b94:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	0a1a      	lsrs	r2, r3, #8
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	b2d2      	uxtb	r2, r2
 8007ba2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	011b      	lsls	r3, r3, #4
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	0c1a      	lsrs	r2, r3, #16
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	3302      	adds	r3, #2
 8007bba:	b2d2      	uxtb	r2, r2
 8007bbc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	011b      	lsls	r3, r3, #4
 8007bc6:	4413      	add	r3, r2
 8007bc8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	0e1a      	lsrs	r2, r3, #24
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	3303      	adds	r3, #3
 8007bd4:	b2d2      	uxtb	r2, r2
 8007bd6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	011b      	lsls	r3, r3, #4
 8007be0:	4413      	add	r3, r2
 8007be2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007be6:	681a      	ldr	r2, [r3, #0]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	3304      	adds	r3, #4
 8007bec:	b2d2      	uxtb	r2, r2
 8007bee:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	011b      	lsls	r3, r3, #4
 8007bf8:	4413      	add	r3, r2
 8007bfa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	0a1a      	lsrs	r2, r3, #8
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	3305      	adds	r3, #5
 8007c06:	b2d2      	uxtb	r2, r2
 8007c08:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	011b      	lsls	r3, r3, #4
 8007c12:	4413      	add	r3, r2
 8007c14:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	0c1a      	lsrs	r2, r3, #16
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	3306      	adds	r3, #6
 8007c20:	b2d2      	uxtb	r2, r2
 8007c22:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	011b      	lsls	r3, r3, #4
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	0e1a      	lsrs	r2, r3, #24
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	3307      	adds	r3, #7
 8007c3a:	b2d2      	uxtb	r2, r2
 8007c3c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d108      	bne.n	8007c56 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	68da      	ldr	r2, [r3, #12]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f042 0220 	orr.w	r2, r2, #32
 8007c52:	60da      	str	r2, [r3, #12]
 8007c54:	e007      	b.n	8007c66 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	691a      	ldr	r2, [r3, #16]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f042 0220 	orr.w	r2, r2, #32
 8007c64:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	e006      	b.n	8007c78 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
  }
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	371c      	adds	r7, #28
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c94:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007c96:	7bfb      	ldrb	r3, [r7, #15]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d002      	beq.n	8007ca2 <HAL_CAN_ActivateNotification+0x1e>
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d109      	bne.n	8007cb6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	6959      	ldr	r1, [r3, #20]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	683a      	ldr	r2, [r7, #0]
 8007cae:	430a      	orrs	r2, r1
 8007cb0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	e006      	b.n	8007cc4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
  }
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b08a      	sub	sp, #40	; 0x28
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007d0c:	6a3b      	ldr	r3, [r7, #32]
 8007d0e:	f003 0301 	and.w	r3, r3, #1
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d07c      	beq.n	8007e10 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	f003 0301 	and.w	r3, r3, #1
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d023      	beq.n	8007d68 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2201      	movs	r2, #1
 8007d26:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	f003 0302 	and.w	r3, r3, #2
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d003      	beq.n	8007d3a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 f983 	bl	800803e <HAL_CAN_TxMailbox0CompleteCallback>
 8007d38:	e016      	b.n	8007d68 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	f003 0304 	and.w	r3, r3, #4
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d004      	beq.n	8007d4e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007d4a:	627b      	str	r3, [r7, #36]	; 0x24
 8007d4c:	e00c      	b.n	8007d68 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	f003 0308 	and.w	r3, r3, #8
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d004      	beq.n	8007d62 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8007d60:	e002      	b.n	8007d68 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f989 	bl	800807a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007d68:	69bb      	ldr	r3, [r7, #24]
 8007d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d024      	beq.n	8007dbc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d7a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007d7c:	69bb      	ldr	r3, [r7, #24]
 8007d7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d003      	beq.n	8007d8e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f963 	bl	8008052 <HAL_CAN_TxMailbox1CompleteCallback>
 8007d8c:	e016      	b.n	8007dbc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d004      	beq.n	8007da2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8007da0:	e00c      	b.n	8007dbc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d004      	beq.n	8007db6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007db2:	627b      	str	r3, [r7, #36]	; 0x24
 8007db4:	e002      	b.n	8007dbc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 f969 	bl	800808e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007dbc:	69bb      	ldr	r3, [r7, #24]
 8007dbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d024      	beq.n	8007e10 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007dce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d003      	beq.n	8007de2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007dda:	6878      	ldr	r0, [r7, #4]
 8007ddc:	f000 f943 	bl	8008066 <HAL_CAN_TxMailbox2CompleteCallback>
 8007de0:	e016      	b.n	8007e10 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d004      	beq.n	8007df6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007df2:	627b      	str	r3, [r7, #36]	; 0x24
 8007df4:	e00c      	b.n	8007e10 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007df6:	69bb      	ldr	r3, [r7, #24]
 8007df8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d004      	beq.n	8007e0a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e06:	627b      	str	r3, [r7, #36]	; 0x24
 8007e08:	e002      	b.n	8007e10 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f949 	bl	80080a2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007e10:	6a3b      	ldr	r3, [r7, #32]
 8007e12:	f003 0308 	and.w	r3, r3, #8
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00c      	beq.n	8007e34 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	f003 0310 	and.w	r3, r3, #16
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d007      	beq.n	8007e34 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e2a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2210      	movs	r2, #16
 8007e32:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007e34:	6a3b      	ldr	r3, [r7, #32]
 8007e36:	f003 0304 	and.w	r3, r3, #4
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d00b      	beq.n	8007e56 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	f003 0308 	and.w	r3, r3, #8
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d006      	beq.n	8007e56 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2208      	movs	r2, #8
 8007e4e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 f930 	bl	80080b6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	f003 0302 	and.w	r3, r3, #2
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d009      	beq.n	8007e74 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	68db      	ldr	r3, [r3, #12]
 8007e66:	f003 0303 	and.w	r3, r3, #3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d002      	beq.n	8007e74 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f7fe f922 	bl	80060b8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007e74:	6a3b      	ldr	r3, [r7, #32]
 8007e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00c      	beq.n	8007e98 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	f003 0310 	and.w	r3, r3, #16
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d007      	beq.n	8007e98 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e8e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2210      	movs	r2, #16
 8007e96:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007e98:	6a3b      	ldr	r3, [r7, #32]
 8007e9a:	f003 0320 	and.w	r3, r3, #32
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00b      	beq.n	8007eba <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	f003 0308 	and.w	r3, r3, #8
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d006      	beq.n	8007eba <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	2208      	movs	r2, #8
 8007eb2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	f000 f912 	bl	80080de <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007eba:	6a3b      	ldr	r3, [r7, #32]
 8007ebc:	f003 0310 	and.w	r3, r3, #16
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d009      	beq.n	8007ed8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	691b      	ldr	r3, [r3, #16]
 8007eca:	f003 0303 	and.w	r3, r3, #3
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d002      	beq.n	8007ed8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f8f9 	bl	80080ca <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007ed8:	6a3b      	ldr	r3, [r7, #32]
 8007eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00b      	beq.n	8007efa <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	f003 0310 	and.w	r3, r3, #16
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d006      	beq.n	8007efa <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2210      	movs	r2, #16
 8007ef2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007ef4:	6878      	ldr	r0, [r7, #4]
 8007ef6:	f000 f8fc 	bl	80080f2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007efa:	6a3b      	ldr	r3, [r7, #32]
 8007efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00b      	beq.n	8007f1c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	f003 0308 	and.w	r3, r3, #8
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d006      	beq.n	8007f1c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2208      	movs	r2, #8
 8007f14:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f8f5 	bl	8008106 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007f1c:	6a3b      	ldr	r3, [r7, #32]
 8007f1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d07b      	beq.n	800801e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	f003 0304 	and.w	r3, r3, #4
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d072      	beq.n	8008016 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007f30:	6a3b      	ldr	r3, [r7, #32]
 8007f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d008      	beq.n	8007f4c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d003      	beq.n	8007f4c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f46:	f043 0301 	orr.w	r3, r3, #1
 8007f4a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007f4c:	6a3b      	ldr	r3, [r7, #32]
 8007f4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d008      	beq.n	8007f68 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d003      	beq.n	8007f68 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f62:	f043 0302 	orr.w	r3, r3, #2
 8007f66:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007f68:	6a3b      	ldr	r3, [r7, #32]
 8007f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d008      	beq.n	8007f84 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d003      	beq.n	8007f84 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7e:	f043 0304 	orr.w	r3, r3, #4
 8007f82:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007f84:	6a3b      	ldr	r3, [r7, #32]
 8007f86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d043      	beq.n	8008016 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d03e      	beq.n	8008016 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f9e:	2b60      	cmp	r3, #96	; 0x60
 8007fa0:	d02b      	beq.n	8007ffa <HAL_CAN_IRQHandler+0x32a>
 8007fa2:	2b60      	cmp	r3, #96	; 0x60
 8007fa4:	d82e      	bhi.n	8008004 <HAL_CAN_IRQHandler+0x334>
 8007fa6:	2b50      	cmp	r3, #80	; 0x50
 8007fa8:	d022      	beq.n	8007ff0 <HAL_CAN_IRQHandler+0x320>
 8007faa:	2b50      	cmp	r3, #80	; 0x50
 8007fac:	d82a      	bhi.n	8008004 <HAL_CAN_IRQHandler+0x334>
 8007fae:	2b40      	cmp	r3, #64	; 0x40
 8007fb0:	d019      	beq.n	8007fe6 <HAL_CAN_IRQHandler+0x316>
 8007fb2:	2b40      	cmp	r3, #64	; 0x40
 8007fb4:	d826      	bhi.n	8008004 <HAL_CAN_IRQHandler+0x334>
 8007fb6:	2b30      	cmp	r3, #48	; 0x30
 8007fb8:	d010      	beq.n	8007fdc <HAL_CAN_IRQHandler+0x30c>
 8007fba:	2b30      	cmp	r3, #48	; 0x30
 8007fbc:	d822      	bhi.n	8008004 <HAL_CAN_IRQHandler+0x334>
 8007fbe:	2b10      	cmp	r3, #16
 8007fc0:	d002      	beq.n	8007fc8 <HAL_CAN_IRQHandler+0x2f8>
 8007fc2:	2b20      	cmp	r3, #32
 8007fc4:	d005      	beq.n	8007fd2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007fc6:	e01d      	b.n	8008004 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fca:	f043 0308 	orr.w	r3, r3, #8
 8007fce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007fd0:	e019      	b.n	8008006 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd4:	f043 0310 	orr.w	r3, r3, #16
 8007fd8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007fda:	e014      	b.n	8008006 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fde:	f043 0320 	orr.w	r3, r3, #32
 8007fe2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007fe4:	e00f      	b.n	8008006 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007fee:	e00a      	b.n	8008006 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ff6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007ff8:	e005      	b.n	8008006 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008000:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008002:	e000      	b.n	8008006 <HAL_CAN_IRQHandler+0x336>
            break;
 8008004:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	699a      	ldr	r2, [r3, #24]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008014:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2204      	movs	r2, #4
 800801c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800801e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008020:	2b00      	cmp	r3, #0
 8008022:	d008      	beq.n	8008036 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802a:	431a      	orrs	r2, r3
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f872 	bl	800811a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8008036:	bf00      	nop
 8008038:	3728      	adds	r7, #40	; 0x28
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800803e:	b480      	push	{r7}
 8008040:	b083      	sub	sp, #12
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8008046:	bf00      	nop
 8008048:	370c      	adds	r7, #12
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr

08008052 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008052:	b480      	push	{r7}
 8008054:	b083      	sub	sp, #12
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800805a:	bf00      	nop
 800805c:	370c      	adds	r7, #12
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr

08008066 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008066:	b480      	push	{r7}
 8008068:	b083      	sub	sp, #12
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800806e:	bf00      	nop
 8008070:	370c      	adds	r7, #12
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr

0800807a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800807a:	b480      	push	{r7}
 800807c:	b083      	sub	sp, #12
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8008082:	bf00      	nop
 8008084:	370c      	adds	r7, #12
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr

0800808e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800808e:	b480      	push	{r7}
 8008090:	b083      	sub	sp, #12
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8008096:	bf00      	nop
 8008098:	370c      	adds	r7, #12
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr

080080a2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80080a2:	b480      	push	{r7}
 80080a4:	b083      	sub	sp, #12
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80080aa:	bf00      	nop
 80080ac:	370c      	adds	r7, #12
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr

080080b6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80080b6:	b480      	push	{r7}
 80080b8:	b083      	sub	sp, #12
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80080be:	bf00      	nop
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80080ca:	b480      	push	{r7}
 80080cc:	b083      	sub	sp, #12
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80080d2:	bf00      	nop
 80080d4:	370c      	adds	r7, #12
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr

080080de <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80080de:	b480      	push	{r7}
 80080e0:	b083      	sub	sp, #12
 80080e2:	af00      	add	r7, sp, #0
 80080e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80080e6:	bf00      	nop
 80080e8:	370c      	adds	r7, #12
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b083      	sub	sp, #12
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80080fa:	bf00      	nop
 80080fc:	370c      	adds	r7, #12
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr

08008106 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8008106:	b480      	push	{r7}
 8008108:	b083      	sub	sp, #12
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800810e:	bf00      	nop
 8008110:	370c      	adds	r7, #12
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr

0800811a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800811a:	b480      	push	{r7}
 800811c:	b083      	sub	sp, #12
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8008122:	bf00      	nop
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr
	...

08008130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008130:	b480      	push	{r7}
 8008132:	b085      	sub	sp, #20
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f003 0307 	and.w	r3, r3, #7
 800813e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008140:	4b0c      	ldr	r3, [pc, #48]	; (8008174 <__NVIC_SetPriorityGrouping+0x44>)
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800814c:	4013      	ands	r3, r2
 800814e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800815c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008162:	4a04      	ldr	r2, [pc, #16]	; (8008174 <__NVIC_SetPriorityGrouping+0x44>)
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	60d3      	str	r3, [r2, #12]
}
 8008168:	bf00      	nop
 800816a:	3714      	adds	r7, #20
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr
 8008174:	e000ed00 	.word	0xe000ed00

08008178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008178:	b480      	push	{r7}
 800817a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800817c:	4b04      	ldr	r3, [pc, #16]	; (8008190 <__NVIC_GetPriorityGrouping+0x18>)
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	0a1b      	lsrs	r3, r3, #8
 8008182:	f003 0307 	and.w	r3, r3, #7
}
 8008186:	4618      	mov	r0, r3
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr
 8008190:	e000ed00 	.word	0xe000ed00

08008194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	4603      	mov	r3, r0
 800819c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800819e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	db0b      	blt.n	80081be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80081a6:	79fb      	ldrb	r3, [r7, #7]
 80081a8:	f003 021f 	and.w	r2, r3, #31
 80081ac:	4907      	ldr	r1, [pc, #28]	; (80081cc <__NVIC_EnableIRQ+0x38>)
 80081ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081b2:	095b      	lsrs	r3, r3, #5
 80081b4:	2001      	movs	r0, #1
 80081b6:	fa00 f202 	lsl.w	r2, r0, r2
 80081ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80081be:	bf00      	nop
 80081c0:	370c      	adds	r7, #12
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr
 80081ca:	bf00      	nop
 80081cc:	e000e100 	.word	0xe000e100

080081d0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	4603      	mov	r3, r0
 80081d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	db12      	blt.n	8008208 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80081e2:	79fb      	ldrb	r3, [r7, #7]
 80081e4:	f003 021f 	and.w	r2, r3, #31
 80081e8:	490a      	ldr	r1, [pc, #40]	; (8008214 <__NVIC_DisableIRQ+0x44>)
 80081ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081ee:	095b      	lsrs	r3, r3, #5
 80081f0:	2001      	movs	r0, #1
 80081f2:	fa00 f202 	lsl.w	r2, r0, r2
 80081f6:	3320      	adds	r3, #32
 80081f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80081fc:	f3bf 8f4f 	dsb	sy
}
 8008200:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008202:	f3bf 8f6f 	isb	sy
}
 8008206:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8008208:	bf00      	nop
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008212:	4770      	bx	lr
 8008214:	e000e100 	.word	0xe000e100

08008218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	4603      	mov	r3, r0
 8008220:	6039      	str	r1, [r7, #0]
 8008222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008228:	2b00      	cmp	r3, #0
 800822a:	db0a      	blt.n	8008242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	b2da      	uxtb	r2, r3
 8008230:	490c      	ldr	r1, [pc, #48]	; (8008264 <__NVIC_SetPriority+0x4c>)
 8008232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008236:	0112      	lsls	r2, r2, #4
 8008238:	b2d2      	uxtb	r2, r2
 800823a:	440b      	add	r3, r1
 800823c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008240:	e00a      	b.n	8008258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	b2da      	uxtb	r2, r3
 8008246:	4908      	ldr	r1, [pc, #32]	; (8008268 <__NVIC_SetPriority+0x50>)
 8008248:	79fb      	ldrb	r3, [r7, #7]
 800824a:	f003 030f 	and.w	r3, r3, #15
 800824e:	3b04      	subs	r3, #4
 8008250:	0112      	lsls	r2, r2, #4
 8008252:	b2d2      	uxtb	r2, r2
 8008254:	440b      	add	r3, r1
 8008256:	761a      	strb	r2, [r3, #24]
}
 8008258:	bf00      	nop
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr
 8008264:	e000e100 	.word	0xe000e100
 8008268:	e000ed00 	.word	0xe000ed00

0800826c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800826c:	b480      	push	{r7}
 800826e:	b089      	sub	sp, #36	; 0x24
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	f003 0307 	and.w	r3, r3, #7
 800827e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	f1c3 0307 	rsb	r3, r3, #7
 8008286:	2b04      	cmp	r3, #4
 8008288:	bf28      	it	cs
 800828a:	2304      	movcs	r3, #4
 800828c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	3304      	adds	r3, #4
 8008292:	2b06      	cmp	r3, #6
 8008294:	d902      	bls.n	800829c <NVIC_EncodePriority+0x30>
 8008296:	69fb      	ldr	r3, [r7, #28]
 8008298:	3b03      	subs	r3, #3
 800829a:	e000      	b.n	800829e <NVIC_EncodePriority+0x32>
 800829c:	2300      	movs	r3, #0
 800829e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80082a0:	f04f 32ff 	mov.w	r2, #4294967295
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	fa02 f303 	lsl.w	r3, r2, r3
 80082aa:	43da      	mvns	r2, r3
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	401a      	ands	r2, r3
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80082b4:	f04f 31ff 	mov.w	r1, #4294967295
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	fa01 f303 	lsl.w	r3, r1, r3
 80082be:	43d9      	mvns	r1, r3
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80082c4:	4313      	orrs	r3, r2
         );
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3724      	adds	r7, #36	; 0x24
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
	...

080082d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	3b01      	subs	r3, #1
 80082e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80082e4:	d301      	bcc.n	80082ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80082e6:	2301      	movs	r3, #1
 80082e8:	e00f      	b.n	800830a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80082ea:	4a0a      	ldr	r2, [pc, #40]	; (8008314 <SysTick_Config+0x40>)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	3b01      	subs	r3, #1
 80082f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80082f2:	210f      	movs	r1, #15
 80082f4:	f04f 30ff 	mov.w	r0, #4294967295
 80082f8:	f7ff ff8e 	bl	8008218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80082fc:	4b05      	ldr	r3, [pc, #20]	; (8008314 <SysTick_Config+0x40>)
 80082fe:	2200      	movs	r2, #0
 8008300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008302:	4b04      	ldr	r3, [pc, #16]	; (8008314 <SysTick_Config+0x40>)
 8008304:	2207      	movs	r2, #7
 8008306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3708      	adds	r7, #8
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}
 8008312:	bf00      	nop
 8008314:	e000e010 	.word	0xe000e010

08008318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f7ff ff05 	bl	8008130 <__NVIC_SetPriorityGrouping>
}
 8008326:	bf00      	nop
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800832e:	b580      	push	{r7, lr}
 8008330:	b086      	sub	sp, #24
 8008332:	af00      	add	r7, sp, #0
 8008334:	4603      	mov	r3, r0
 8008336:	60b9      	str	r1, [r7, #8]
 8008338:	607a      	str	r2, [r7, #4]
 800833a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800833c:	2300      	movs	r3, #0
 800833e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008340:	f7ff ff1a 	bl	8008178 <__NVIC_GetPriorityGrouping>
 8008344:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	68b9      	ldr	r1, [r7, #8]
 800834a:	6978      	ldr	r0, [r7, #20]
 800834c:	f7ff ff8e 	bl	800826c <NVIC_EncodePriority>
 8008350:	4602      	mov	r2, r0
 8008352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008356:	4611      	mov	r1, r2
 8008358:	4618      	mov	r0, r3
 800835a:	f7ff ff5d 	bl	8008218 <__NVIC_SetPriority>
}
 800835e:	bf00      	nop
 8008360:	3718      	adds	r7, #24
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b082      	sub	sp, #8
 800836a:	af00      	add	r7, sp, #0
 800836c:	4603      	mov	r3, r0
 800836e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008374:	4618      	mov	r0, r3
 8008376:	f7ff ff0d 	bl	8008194 <__NVIC_EnableIRQ>
}
 800837a:	bf00      	nop
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b082      	sub	sp, #8
 8008386:	af00      	add	r7, sp, #0
 8008388:	4603      	mov	r3, r0
 800838a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800838c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008390:	4618      	mov	r0, r3
 8008392:	f7ff ff1d 	bl	80081d0 <__NVIC_DisableIRQ>
}
 8008396:	bf00      	nop
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b082      	sub	sp, #8
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f7ff ff94 	bl	80082d4 <SysTick_Config>
 80083ac:	4603      	mov	r3, r0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
	...

080083b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b086      	sub	sp, #24
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80083c0:	2300      	movs	r3, #0
 80083c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80083c4:	f7fe fbca 	bl	8006b5c <HAL_GetTick>
 80083c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d101      	bne.n	80083d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e099      	b.n	8008508 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2202      	movs	r2, #2
 80083d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f022 0201 	bic.w	r2, r2, #1
 80083f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80083f4:	e00f      	b.n	8008416 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80083f6:	f7fe fbb1 	bl	8006b5c <HAL_GetTick>
 80083fa:	4602      	mov	r2, r0
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	2b05      	cmp	r3, #5
 8008402:	d908      	bls.n	8008416 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2220      	movs	r2, #32
 8008408:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2203      	movs	r2, #3
 800840e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e078      	b.n	8008508 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0301 	and.w	r3, r3, #1
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1e8      	bne.n	80083f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800842c:	697a      	ldr	r2, [r7, #20]
 800842e:	4b38      	ldr	r3, [pc, #224]	; (8008510 <HAL_DMA_Init+0x158>)
 8008430:	4013      	ands	r3, r2
 8008432:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	685a      	ldr	r2, [r3, #4]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008442:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800844e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	699b      	ldr	r3, [r3, #24]
 8008454:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800845a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a1b      	ldr	r3, [r3, #32]
 8008460:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008462:	697a      	ldr	r2, [r7, #20]
 8008464:	4313      	orrs	r3, r2
 8008466:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800846c:	2b04      	cmp	r3, #4
 800846e:	d107      	bne.n	8008480 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008478:	4313      	orrs	r3, r2
 800847a:	697a      	ldr	r2, [r7, #20]
 800847c:	4313      	orrs	r3, r2
 800847e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	695b      	ldr	r3, [r3, #20]
 800848e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	f023 0307 	bic.w	r3, r3, #7
 8008496:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	4313      	orrs	r3, r2
 80084a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a6:	2b04      	cmp	r3, #4
 80084a8:	d117      	bne.n	80084da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ae:	697a      	ldr	r2, [r7, #20]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d00e      	beq.n	80084da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 fa91 	bl	80089e4 <DMA_CheckFifoParam>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d008      	beq.n	80084da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2240      	movs	r2, #64	; 0x40
 80084cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2201      	movs	r2, #1
 80084d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80084d6:	2301      	movs	r3, #1
 80084d8:	e016      	b.n	8008508 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	697a      	ldr	r2, [r7, #20]
 80084e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fa48 	bl	8008978 <DMA_CalcBaseAndBitshift>
 80084e8:	4603      	mov	r3, r0
 80084ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084f0:	223f      	movs	r2, #63	; 0x3f
 80084f2:	409a      	lsls	r2, r3
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2201      	movs	r2, #1
 8008502:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3718      	adds	r7, #24
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}
 8008510:	f010803f 	.word	0xf010803f

08008514 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b086      	sub	sp, #24
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
 8008520:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008522:	2300      	movs	r3, #0
 8008524:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800852a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008532:	2b01      	cmp	r3, #1
 8008534:	d101      	bne.n	800853a <HAL_DMA_Start_IT+0x26>
 8008536:	2302      	movs	r3, #2
 8008538:	e040      	b.n	80085bc <HAL_DMA_Start_IT+0xa8>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2201      	movs	r2, #1
 800853e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b01      	cmp	r3, #1
 800854c:	d12f      	bne.n	80085ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2202      	movs	r2, #2
 8008552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2200      	movs	r2, #0
 800855a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	68b9      	ldr	r1, [r7, #8]
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f000 f9da 	bl	800891c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800856c:	223f      	movs	r2, #63	; 0x3f
 800856e:	409a      	lsls	r2, r3
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681a      	ldr	r2, [r3, #0]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f042 0216 	orr.w	r2, r2, #22
 8008582:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008588:	2b00      	cmp	r3, #0
 800858a:	d007      	beq.n	800859c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	f042 0208 	orr.w	r2, r2, #8
 800859a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f042 0201 	orr.w	r2, r2, #1
 80085aa:	601a      	str	r2, [r3, #0]
 80085ac:	e005      	b.n	80085ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80085b6:	2302      	movs	r3, #2
 80085b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80085ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3718      	adds	r7, #24
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d004      	beq.n	80085e2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2280      	movs	r2, #128	; 0x80
 80085dc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e00c      	b.n	80085fc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2205      	movs	r2, #5
 80085e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f022 0201 	bic.w	r2, r2, #1
 80085f8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	370c      	adds	r7, #12
 8008600:	46bd      	mov	sp, r7
 8008602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008606:	4770      	bx	lr

08008608 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008610:	2300      	movs	r3, #0
 8008612:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008614:	4b8e      	ldr	r3, [pc, #568]	; (8008850 <HAL_DMA_IRQHandler+0x248>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a8e      	ldr	r2, [pc, #568]	; (8008854 <HAL_DMA_IRQHandler+0x24c>)
 800861a:	fba2 2303 	umull	r2, r3, r2, r3
 800861e:	0a9b      	lsrs	r3, r3, #10
 8008620:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008626:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008632:	2208      	movs	r2, #8
 8008634:	409a      	lsls	r2, r3
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	4013      	ands	r3, r2
 800863a:	2b00      	cmp	r3, #0
 800863c:	d01a      	beq.n	8008674 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f003 0304 	and.w	r3, r3, #4
 8008648:	2b00      	cmp	r3, #0
 800864a:	d013      	beq.n	8008674 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f022 0204 	bic.w	r2, r2, #4
 800865a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008660:	2208      	movs	r2, #8
 8008662:	409a      	lsls	r2, r3
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800866c:	f043 0201 	orr.w	r2, r3, #1
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008678:	2201      	movs	r2, #1
 800867a:	409a      	lsls	r2, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	4013      	ands	r3, r2
 8008680:	2b00      	cmp	r3, #0
 8008682:	d012      	beq.n	80086aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	695b      	ldr	r3, [r3, #20]
 800868a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00b      	beq.n	80086aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008696:	2201      	movs	r2, #1
 8008698:	409a      	lsls	r2, r3
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086a2:	f043 0202 	orr.w	r2, r3, #2
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086ae:	2204      	movs	r2, #4
 80086b0:	409a      	lsls	r2, r3
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	4013      	ands	r3, r2
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d012      	beq.n	80086e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 0302 	and.w	r3, r3, #2
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00b      	beq.n	80086e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086cc:	2204      	movs	r2, #4
 80086ce:	409a      	lsls	r2, r3
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086d8:	f043 0204 	orr.w	r2, r3, #4
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086e4:	2210      	movs	r2, #16
 80086e6:	409a      	lsls	r2, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	4013      	ands	r3, r2
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d043      	beq.n	8008778 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 0308 	and.w	r3, r3, #8
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d03c      	beq.n	8008778 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008702:	2210      	movs	r2, #16
 8008704:	409a      	lsls	r2, r3
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008714:	2b00      	cmp	r3, #0
 8008716:	d018      	beq.n	800874a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008722:	2b00      	cmp	r3, #0
 8008724:	d108      	bne.n	8008738 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872a:	2b00      	cmp	r3, #0
 800872c:	d024      	beq.n	8008778 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	4798      	blx	r3
 8008736:	e01f      	b.n	8008778 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800873c:	2b00      	cmp	r3, #0
 800873e:	d01b      	beq.n	8008778 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	4798      	blx	r3
 8008748:	e016      	b.n	8008778 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008754:	2b00      	cmp	r3, #0
 8008756:	d107      	bne.n	8008768 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f022 0208 	bic.w	r2, r2, #8
 8008766:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876c:	2b00      	cmp	r3, #0
 800876e:	d003      	beq.n	8008778 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800877c:	2220      	movs	r2, #32
 800877e:	409a      	lsls	r2, r3
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	4013      	ands	r3, r2
 8008784:	2b00      	cmp	r3, #0
 8008786:	f000 808f 	beq.w	80088a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 0310 	and.w	r3, r3, #16
 8008794:	2b00      	cmp	r3, #0
 8008796:	f000 8087 	beq.w	80088a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800879e:	2220      	movs	r2, #32
 80087a0:	409a      	lsls	r2, r3
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b05      	cmp	r3, #5
 80087b0:	d136      	bne.n	8008820 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f022 0216 	bic.w	r2, r2, #22
 80087c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	695a      	ldr	r2, [r3, #20]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80087d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d103      	bne.n	80087e2 <HAL_DMA_IRQHandler+0x1da>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d007      	beq.n	80087f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681a      	ldr	r2, [r3, #0]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f022 0208 	bic.w	r2, r2, #8
 80087f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087f6:	223f      	movs	r2, #63	; 0x3f
 80087f8:	409a      	lsls	r2, r3
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2201      	movs	r2, #1
 8008802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008812:	2b00      	cmp	r3, #0
 8008814:	d07e      	beq.n	8008914 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	4798      	blx	r3
        }
        return;
 800881e:	e079      	b.n	8008914 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800882a:	2b00      	cmp	r3, #0
 800882c:	d01d      	beq.n	800886a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d10d      	bne.n	8008858 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008840:	2b00      	cmp	r3, #0
 8008842:	d031      	beq.n	80088a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	4798      	blx	r3
 800884c:	e02c      	b.n	80088a8 <HAL_DMA_IRQHandler+0x2a0>
 800884e:	bf00      	nop
 8008850:	20000000 	.word	0x20000000
 8008854:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800885c:	2b00      	cmp	r3, #0
 800885e:	d023      	beq.n	80088a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	4798      	blx	r3
 8008868:	e01e      	b.n	80088a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008874:	2b00      	cmp	r3, #0
 8008876:	d10f      	bne.n	8008898 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f022 0210 	bic.w	r2, r2, #16
 8008886:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800889c:	2b00      	cmp	r3, #0
 800889e:	d003      	beq.n	80088a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d032      	beq.n	8008916 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088b4:	f003 0301 	and.w	r3, r3, #1
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d022      	beq.n	8008902 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2205      	movs	r2, #5
 80088c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f022 0201 	bic.w	r2, r2, #1
 80088d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	3301      	adds	r3, #1
 80088d8:	60bb      	str	r3, [r7, #8]
 80088da:	697a      	ldr	r2, [r7, #20]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d307      	bcc.n	80088f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 0301 	and.w	r3, r3, #1
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d1f2      	bne.n	80088d4 <HAL_DMA_IRQHandler+0x2cc>
 80088ee:	e000      	b.n	80088f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80088f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2201      	movs	r2, #1
 80088f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008906:	2b00      	cmp	r3, #0
 8008908:	d005      	beq.n	8008916 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	4798      	blx	r3
 8008912:	e000      	b.n	8008916 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008914:	bf00      	nop
    }
  }
}
 8008916:	3718      	adds	r7, #24
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800891c:	b480      	push	{r7}
 800891e:	b085      	sub	sp, #20
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	607a      	str	r2, [r7, #4]
 8008928:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008938:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	683a      	ldr	r2, [r7, #0]
 8008940:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	689b      	ldr	r3, [r3, #8]
 8008946:	2b40      	cmp	r3, #64	; 0x40
 8008948:	d108      	bne.n	800895c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	68ba      	ldr	r2, [r7, #8]
 8008958:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800895a:	e007      	b.n	800896c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	60da      	str	r2, [r3, #12]
}
 800896c:	bf00      	nop
 800896e:	3714      	adds	r7, #20
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008978:	b480      	push	{r7}
 800897a:	b085      	sub	sp, #20
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	b2db      	uxtb	r3, r3
 8008986:	3b10      	subs	r3, #16
 8008988:	4a14      	ldr	r2, [pc, #80]	; (80089dc <DMA_CalcBaseAndBitshift+0x64>)
 800898a:	fba2 2303 	umull	r2, r3, r2, r3
 800898e:	091b      	lsrs	r3, r3, #4
 8008990:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008992:	4a13      	ldr	r2, [pc, #76]	; (80089e0 <DMA_CalcBaseAndBitshift+0x68>)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	4413      	add	r3, r2
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	461a      	mov	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	2b03      	cmp	r3, #3
 80089a4:	d909      	bls.n	80089ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80089ae:	f023 0303 	bic.w	r3, r3, #3
 80089b2:	1d1a      	adds	r2, r3, #4
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	659a      	str	r2, [r3, #88]	; 0x58
 80089b8:	e007      	b.n	80089ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80089c2:	f023 0303 	bic.w	r3, r3, #3
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3714      	adds	r7, #20
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	aaaaaaab 	.word	0xaaaaaaab
 80089e0:	08018b80 	.word	0x08018b80

080089e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089ec:	2300      	movs	r3, #0
 80089ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	699b      	ldr	r3, [r3, #24]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d11f      	bne.n	8008a3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	2b03      	cmp	r3, #3
 8008a02:	d856      	bhi.n	8008ab2 <DMA_CheckFifoParam+0xce>
 8008a04:	a201      	add	r2, pc, #4	; (adr r2, 8008a0c <DMA_CheckFifoParam+0x28>)
 8008a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a0a:	bf00      	nop
 8008a0c:	08008a1d 	.word	0x08008a1d
 8008a10:	08008a2f 	.word	0x08008a2f
 8008a14:	08008a1d 	.word	0x08008a1d
 8008a18:	08008ab3 	.word	0x08008ab3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d046      	beq.n	8008ab6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a2c:	e043      	b.n	8008ab6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008a36:	d140      	bne.n	8008aba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a3c:	e03d      	b.n	8008aba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	699b      	ldr	r3, [r3, #24]
 8008a42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a46:	d121      	bne.n	8008a8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	2b03      	cmp	r3, #3
 8008a4c:	d837      	bhi.n	8008abe <DMA_CheckFifoParam+0xda>
 8008a4e:	a201      	add	r2, pc, #4	; (adr r2, 8008a54 <DMA_CheckFifoParam+0x70>)
 8008a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a54:	08008a65 	.word	0x08008a65
 8008a58:	08008a6b 	.word	0x08008a6b
 8008a5c:	08008a65 	.word	0x08008a65
 8008a60:	08008a7d 	.word	0x08008a7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	73fb      	strb	r3, [r7, #15]
      break;
 8008a68:	e030      	b.n	8008acc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d025      	beq.n	8008ac2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a7a:	e022      	b.n	8008ac2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008a84:	d11f      	bne.n	8008ac6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008a8a:	e01c      	b.n	8008ac6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	2b02      	cmp	r3, #2
 8008a90:	d903      	bls.n	8008a9a <DMA_CheckFifoParam+0xb6>
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	2b03      	cmp	r3, #3
 8008a96:	d003      	beq.n	8008aa0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008a98:	e018      	b.n	8008acc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a9e:	e015      	b.n	8008acc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00e      	beq.n	8008aca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	73fb      	strb	r3, [r7, #15]
      break;
 8008ab0:	e00b      	b.n	8008aca <DMA_CheckFifoParam+0xe6>
      break;
 8008ab2:	bf00      	nop
 8008ab4:	e00a      	b.n	8008acc <DMA_CheckFifoParam+0xe8>
      break;
 8008ab6:	bf00      	nop
 8008ab8:	e008      	b.n	8008acc <DMA_CheckFifoParam+0xe8>
      break;
 8008aba:	bf00      	nop
 8008abc:	e006      	b.n	8008acc <DMA_CheckFifoParam+0xe8>
      break;
 8008abe:	bf00      	nop
 8008ac0:	e004      	b.n	8008acc <DMA_CheckFifoParam+0xe8>
      break;
 8008ac2:	bf00      	nop
 8008ac4:	e002      	b.n	8008acc <DMA_CheckFifoParam+0xe8>
      break;   
 8008ac6:	bf00      	nop
 8008ac8:	e000      	b.n	8008acc <DMA_CheckFifoParam+0xe8>
      break;
 8008aca:	bf00      	nop
    }
  } 
  
  return status; 
 8008acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3714      	adds	r7, #20
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr
 8008ada:	bf00      	nop

08008adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b089      	sub	sp, #36	; 0x24
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008aea:	2300      	movs	r3, #0
 8008aec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008aee:	2300      	movs	r3, #0
 8008af0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008af2:	2300      	movs	r3, #0
 8008af4:	61fb      	str	r3, [r7, #28]
 8008af6:	e165      	b.n	8008dc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008af8:	2201      	movs	r2, #1
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	fa02 f303 	lsl.w	r3, r2, r3
 8008b00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	697a      	ldr	r2, [r7, #20]
 8008b08:	4013      	ands	r3, r2
 8008b0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008b0c:	693a      	ldr	r2, [r7, #16]
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	429a      	cmp	r2, r3
 8008b12:	f040 8154 	bne.w	8008dbe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	f003 0303 	and.w	r3, r3, #3
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d005      	beq.n	8008b2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008b2a:	2b02      	cmp	r3, #2
 8008b2c:	d130      	bne.n	8008b90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	005b      	lsls	r3, r3, #1
 8008b38:	2203      	movs	r2, #3
 8008b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b3e:	43db      	mvns	r3, r3
 8008b40:	69ba      	ldr	r2, [r7, #24]
 8008b42:	4013      	ands	r3, r2
 8008b44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	68da      	ldr	r2, [r3, #12]
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	005b      	lsls	r3, r3, #1
 8008b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b52:	69ba      	ldr	r2, [r7, #24]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	69ba      	ldr	r2, [r7, #24]
 8008b5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008b64:	2201      	movs	r2, #1
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	fa02 f303 	lsl.w	r3, r2, r3
 8008b6c:	43db      	mvns	r3, r3
 8008b6e:	69ba      	ldr	r2, [r7, #24]
 8008b70:	4013      	ands	r3, r2
 8008b72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	091b      	lsrs	r3, r3, #4
 8008b7a:	f003 0201 	and.w	r2, r3, #1
 8008b7e:	69fb      	ldr	r3, [r7, #28]
 8008b80:	fa02 f303 	lsl.w	r3, r2, r3
 8008b84:	69ba      	ldr	r2, [r7, #24]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	69ba      	ldr	r2, [r7, #24]
 8008b8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	f003 0303 	and.w	r3, r3, #3
 8008b98:	2b03      	cmp	r3, #3
 8008b9a:	d017      	beq.n	8008bcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	68db      	ldr	r3, [r3, #12]
 8008ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	005b      	lsls	r3, r3, #1
 8008ba6:	2203      	movs	r2, #3
 8008ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bac:	43db      	mvns	r3, r3
 8008bae:	69ba      	ldr	r2, [r7, #24]
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	689a      	ldr	r2, [r3, #8]
 8008bb8:	69fb      	ldr	r3, [r7, #28]
 8008bba:	005b      	lsls	r3, r3, #1
 8008bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc0:	69ba      	ldr	r2, [r7, #24]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	69ba      	ldr	r2, [r7, #24]
 8008bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	f003 0303 	and.w	r3, r3, #3
 8008bd4:	2b02      	cmp	r3, #2
 8008bd6:	d123      	bne.n	8008c20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	08da      	lsrs	r2, r3, #3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	3208      	adds	r2, #8
 8008be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008be4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	f003 0307 	and.w	r3, r3, #7
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	220f      	movs	r2, #15
 8008bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bf4:	43db      	mvns	r3, r3
 8008bf6:	69ba      	ldr	r2, [r7, #24]
 8008bf8:	4013      	ands	r3, r2
 8008bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	691a      	ldr	r2, [r3, #16]
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	f003 0307 	and.w	r3, r3, #7
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	fa02 f303 	lsl.w	r3, r2, r3
 8008c0c:	69ba      	ldr	r2, [r7, #24]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	08da      	lsrs	r2, r3, #3
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	3208      	adds	r2, #8
 8008c1a:	69b9      	ldr	r1, [r7, #24]
 8008c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	005b      	lsls	r3, r3, #1
 8008c2a:	2203      	movs	r2, #3
 8008c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008c30:	43db      	mvns	r3, r3
 8008c32:	69ba      	ldr	r2, [r7, #24]
 8008c34:	4013      	ands	r3, r2
 8008c36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	f003 0203 	and.w	r2, r3, #3
 8008c40:	69fb      	ldr	r3, [r7, #28]
 8008c42:	005b      	lsls	r3, r3, #1
 8008c44:	fa02 f303 	lsl.w	r3, r2, r3
 8008c48:	69ba      	ldr	r2, [r7, #24]
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	69ba      	ldr	r2, [r7, #24]
 8008c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	f000 80ae 	beq.w	8008dbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c62:	2300      	movs	r3, #0
 8008c64:	60fb      	str	r3, [r7, #12]
 8008c66:	4b5d      	ldr	r3, [pc, #372]	; (8008ddc <HAL_GPIO_Init+0x300>)
 8008c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c6a:	4a5c      	ldr	r2, [pc, #368]	; (8008ddc <HAL_GPIO_Init+0x300>)
 8008c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c70:	6453      	str	r3, [r2, #68]	; 0x44
 8008c72:	4b5a      	ldr	r3, [pc, #360]	; (8008ddc <HAL_GPIO_Init+0x300>)
 8008c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c7a:	60fb      	str	r3, [r7, #12]
 8008c7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008c7e:	4a58      	ldr	r2, [pc, #352]	; (8008de0 <HAL_GPIO_Init+0x304>)
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	089b      	lsrs	r3, r3, #2
 8008c84:	3302      	adds	r3, #2
 8008c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	f003 0303 	and.w	r3, r3, #3
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	220f      	movs	r2, #15
 8008c96:	fa02 f303 	lsl.w	r3, r2, r3
 8008c9a:	43db      	mvns	r3, r3
 8008c9c:	69ba      	ldr	r2, [r7, #24]
 8008c9e:	4013      	ands	r3, r2
 8008ca0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4a4f      	ldr	r2, [pc, #316]	; (8008de4 <HAL_GPIO_Init+0x308>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d025      	beq.n	8008cf6 <HAL_GPIO_Init+0x21a>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a4e      	ldr	r2, [pc, #312]	; (8008de8 <HAL_GPIO_Init+0x30c>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d01f      	beq.n	8008cf2 <HAL_GPIO_Init+0x216>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a4d      	ldr	r2, [pc, #308]	; (8008dec <HAL_GPIO_Init+0x310>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d019      	beq.n	8008cee <HAL_GPIO_Init+0x212>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a4c      	ldr	r2, [pc, #304]	; (8008df0 <HAL_GPIO_Init+0x314>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d013      	beq.n	8008cea <HAL_GPIO_Init+0x20e>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a4b      	ldr	r2, [pc, #300]	; (8008df4 <HAL_GPIO_Init+0x318>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d00d      	beq.n	8008ce6 <HAL_GPIO_Init+0x20a>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a4a      	ldr	r2, [pc, #296]	; (8008df8 <HAL_GPIO_Init+0x31c>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d007      	beq.n	8008ce2 <HAL_GPIO_Init+0x206>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a49      	ldr	r2, [pc, #292]	; (8008dfc <HAL_GPIO_Init+0x320>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d101      	bne.n	8008cde <HAL_GPIO_Init+0x202>
 8008cda:	2306      	movs	r3, #6
 8008cdc:	e00c      	b.n	8008cf8 <HAL_GPIO_Init+0x21c>
 8008cde:	2307      	movs	r3, #7
 8008ce0:	e00a      	b.n	8008cf8 <HAL_GPIO_Init+0x21c>
 8008ce2:	2305      	movs	r3, #5
 8008ce4:	e008      	b.n	8008cf8 <HAL_GPIO_Init+0x21c>
 8008ce6:	2304      	movs	r3, #4
 8008ce8:	e006      	b.n	8008cf8 <HAL_GPIO_Init+0x21c>
 8008cea:	2303      	movs	r3, #3
 8008cec:	e004      	b.n	8008cf8 <HAL_GPIO_Init+0x21c>
 8008cee:	2302      	movs	r3, #2
 8008cf0:	e002      	b.n	8008cf8 <HAL_GPIO_Init+0x21c>
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	e000      	b.n	8008cf8 <HAL_GPIO_Init+0x21c>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	69fa      	ldr	r2, [r7, #28]
 8008cfa:	f002 0203 	and.w	r2, r2, #3
 8008cfe:	0092      	lsls	r2, r2, #2
 8008d00:	4093      	lsls	r3, r2
 8008d02:	69ba      	ldr	r2, [r7, #24]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008d08:	4935      	ldr	r1, [pc, #212]	; (8008de0 <HAL_GPIO_Init+0x304>)
 8008d0a:	69fb      	ldr	r3, [r7, #28]
 8008d0c:	089b      	lsrs	r3, r3, #2
 8008d0e:	3302      	adds	r3, #2
 8008d10:	69ba      	ldr	r2, [r7, #24]
 8008d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008d16:	4b3a      	ldr	r3, [pc, #232]	; (8008e00 <HAL_GPIO_Init+0x324>)
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	43db      	mvns	r3, r3
 8008d20:	69ba      	ldr	r2, [r7, #24]
 8008d22:	4013      	ands	r3, r2
 8008d24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d003      	beq.n	8008d3a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008d32:	69ba      	ldr	r2, [r7, #24]
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008d3a:	4a31      	ldr	r2, [pc, #196]	; (8008e00 <HAL_GPIO_Init+0x324>)
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008d40:	4b2f      	ldr	r3, [pc, #188]	; (8008e00 <HAL_GPIO_Init+0x324>)
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	43db      	mvns	r3, r3
 8008d4a:	69ba      	ldr	r2, [r7, #24]
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d003      	beq.n	8008d64 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008d5c:	69ba      	ldr	r2, [r7, #24]
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008d64:	4a26      	ldr	r2, [pc, #152]	; (8008e00 <HAL_GPIO_Init+0x324>)
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008d6a:	4b25      	ldr	r3, [pc, #148]	; (8008e00 <HAL_GPIO_Init+0x324>)
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	43db      	mvns	r3, r3
 8008d74:	69ba      	ldr	r2, [r7, #24]
 8008d76:	4013      	ands	r3, r2
 8008d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d003      	beq.n	8008d8e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8008d86:	69ba      	ldr	r2, [r7, #24]
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008d8e:	4a1c      	ldr	r2, [pc, #112]	; (8008e00 <HAL_GPIO_Init+0x324>)
 8008d90:	69bb      	ldr	r3, [r7, #24]
 8008d92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008d94:	4b1a      	ldr	r3, [pc, #104]	; (8008e00 <HAL_GPIO_Init+0x324>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	43db      	mvns	r3, r3
 8008d9e:	69ba      	ldr	r2, [r7, #24]
 8008da0:	4013      	ands	r3, r2
 8008da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d003      	beq.n	8008db8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008db0:	69ba      	ldr	r2, [r7, #24]
 8008db2:	693b      	ldr	r3, [r7, #16]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008db8:	4a11      	ldr	r2, [pc, #68]	; (8008e00 <HAL_GPIO_Init+0x324>)
 8008dba:	69bb      	ldr	r3, [r7, #24]
 8008dbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	61fb      	str	r3, [r7, #28]
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	2b0f      	cmp	r3, #15
 8008dc8:	f67f ae96 	bls.w	8008af8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008dcc:	bf00      	nop
 8008dce:	bf00      	nop
 8008dd0:	3724      	adds	r7, #36	; 0x24
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	40023800 	.word	0x40023800
 8008de0:	40013800 	.word	0x40013800
 8008de4:	40020000 	.word	0x40020000
 8008de8:	40020400 	.word	0x40020400
 8008dec:	40020800 	.word	0x40020800
 8008df0:	40020c00 	.word	0x40020c00
 8008df4:	40021000 	.word	0x40021000
 8008df8:	40021400 	.word	0x40021400
 8008dfc:	40021800 	.word	0x40021800
 8008e00:	40013c00 	.word	0x40013c00

08008e04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	460b      	mov	r3, r1
 8008e0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	691a      	ldr	r2, [r3, #16]
 8008e14:	887b      	ldrh	r3, [r7, #2]
 8008e16:	4013      	ands	r3, r2
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d002      	beq.n	8008e22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	73fb      	strb	r3, [r7, #15]
 8008e20:	e001      	b.n	8008e26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008e22:	2300      	movs	r3, #0
 8008e24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3714      	adds	r7, #20
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr

08008e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	460b      	mov	r3, r1
 8008e3e:	807b      	strh	r3, [r7, #2]
 8008e40:	4613      	mov	r3, r2
 8008e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008e44:	787b      	ldrb	r3, [r7, #1]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d003      	beq.n	8008e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008e4a:	887a      	ldrh	r2, [r7, #2]
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008e50:	e003      	b.n	8008e5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008e52:	887b      	ldrh	r3, [r7, #2]
 8008e54:	041a      	lsls	r2, r3, #16
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	619a      	str	r2, [r3, #24]
}
 8008e5a:	bf00      	nop
 8008e5c:	370c      	adds	r7, #12
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e64:	4770      	bx	lr

08008e66 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008e66:	b480      	push	{r7}
 8008e68:	b085      	sub	sp, #20
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
 8008e6e:	460b      	mov	r3, r1
 8008e70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	695b      	ldr	r3, [r3, #20]
 8008e76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008e78:	887a      	ldrh	r2, [r7, #2]
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	041a      	lsls	r2, r3, #16
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	43d9      	mvns	r1, r3
 8008e84:	887b      	ldrh	r3, [r7, #2]
 8008e86:	400b      	ands	r3, r1
 8008e88:	431a      	orrs	r2, r3
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	619a      	str	r2, [r3, #24]
}
 8008e8e:	bf00      	nop
 8008e90:	3714      	adds	r7, #20
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
	...

08008e9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008ea6:	4b08      	ldr	r3, [pc, #32]	; (8008ec8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008ea8:	695a      	ldr	r2, [r3, #20]
 8008eaa:	88fb      	ldrh	r3, [r7, #6]
 8008eac:	4013      	ands	r3, r2
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d006      	beq.n	8008ec0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008eb2:	4a05      	ldr	r2, [pc, #20]	; (8008ec8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008eb4:	88fb      	ldrh	r3, [r7, #6]
 8008eb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008eb8:	88fb      	ldrh	r3, [r7, #6]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f7fd f964 	bl	8006188 <HAL_GPIO_EXTI_Callback>
  }
}
 8008ec0:	bf00      	nop
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	40013c00 	.word	0x40013c00

08008ecc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d101      	bne.n	8008ede <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e12b      	b.n	8009136 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d106      	bne.n	8008ef8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f7fd fbde 	bl	80066b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2224      	movs	r2, #36	; 0x24
 8008efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f022 0201 	bic.w	r2, r2, #1
 8008f0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681a      	ldr	r2, [r3, #0]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008f2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008f30:	f002 fb9a 	bl	800b668 <HAL_RCC_GetPCLK1Freq>
 8008f34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	4a81      	ldr	r2, [pc, #516]	; (8009140 <HAL_I2C_Init+0x274>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d807      	bhi.n	8008f50 <HAL_I2C_Init+0x84>
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	4a80      	ldr	r2, [pc, #512]	; (8009144 <HAL_I2C_Init+0x278>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	bf94      	ite	ls
 8008f48:	2301      	movls	r3, #1
 8008f4a:	2300      	movhi	r3, #0
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	e006      	b.n	8008f5e <HAL_I2C_Init+0x92>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	4a7d      	ldr	r2, [pc, #500]	; (8009148 <HAL_I2C_Init+0x27c>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	bf94      	ite	ls
 8008f58:	2301      	movls	r3, #1
 8008f5a:	2300      	movhi	r3, #0
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d001      	beq.n	8008f66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	e0e7      	b.n	8009136 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	4a78      	ldr	r2, [pc, #480]	; (800914c <HAL_I2C_Init+0x280>)
 8008f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8008f6e:	0c9b      	lsrs	r3, r3, #18
 8008f70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68ba      	ldr	r2, [r7, #8]
 8008f82:	430a      	orrs	r2, r1
 8008f84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	6a1b      	ldr	r3, [r3, #32]
 8008f8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	4a6a      	ldr	r2, [pc, #424]	; (8009140 <HAL_I2C_Init+0x274>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d802      	bhi.n	8008fa0 <HAL_I2C_Init+0xd4>
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	e009      	b.n	8008fb4 <HAL_I2C_Init+0xe8>
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008fa6:	fb02 f303 	mul.w	r3, r2, r3
 8008faa:	4a69      	ldr	r2, [pc, #420]	; (8009150 <HAL_I2C_Init+0x284>)
 8008fac:	fba2 2303 	umull	r2, r3, r2, r3
 8008fb0:	099b      	lsrs	r3, r3, #6
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	6812      	ldr	r2, [r2, #0]
 8008fb8:	430b      	orrs	r3, r1
 8008fba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	69db      	ldr	r3, [r3, #28]
 8008fc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008fc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	495c      	ldr	r1, [pc, #368]	; (8009140 <HAL_I2C_Init+0x274>)
 8008fd0:	428b      	cmp	r3, r1
 8008fd2:	d819      	bhi.n	8009008 <HAL_I2C_Init+0x13c>
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	1e59      	subs	r1, r3, #1
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	005b      	lsls	r3, r3, #1
 8008fde:	fbb1 f3f3 	udiv	r3, r1, r3
 8008fe2:	1c59      	adds	r1, r3, #1
 8008fe4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008fe8:	400b      	ands	r3, r1
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00a      	beq.n	8009004 <HAL_I2C_Init+0x138>
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	1e59      	subs	r1, r3, #1
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	005b      	lsls	r3, r3, #1
 8008ff8:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ffc:	3301      	adds	r3, #1
 8008ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009002:	e051      	b.n	80090a8 <HAL_I2C_Init+0x1dc>
 8009004:	2304      	movs	r3, #4
 8009006:	e04f      	b.n	80090a8 <HAL_I2C_Init+0x1dc>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d111      	bne.n	8009034 <HAL_I2C_Init+0x168>
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	1e58      	subs	r0, r3, #1
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6859      	ldr	r1, [r3, #4]
 8009018:	460b      	mov	r3, r1
 800901a:	005b      	lsls	r3, r3, #1
 800901c:	440b      	add	r3, r1
 800901e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009022:	3301      	adds	r3, #1
 8009024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009028:	2b00      	cmp	r3, #0
 800902a:	bf0c      	ite	eq
 800902c:	2301      	moveq	r3, #1
 800902e:	2300      	movne	r3, #0
 8009030:	b2db      	uxtb	r3, r3
 8009032:	e012      	b.n	800905a <HAL_I2C_Init+0x18e>
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	1e58      	subs	r0, r3, #1
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6859      	ldr	r1, [r3, #4]
 800903c:	460b      	mov	r3, r1
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	440b      	add	r3, r1
 8009042:	0099      	lsls	r1, r3, #2
 8009044:	440b      	add	r3, r1
 8009046:	fbb0 f3f3 	udiv	r3, r0, r3
 800904a:	3301      	adds	r3, #1
 800904c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009050:	2b00      	cmp	r3, #0
 8009052:	bf0c      	ite	eq
 8009054:	2301      	moveq	r3, #1
 8009056:	2300      	movne	r3, #0
 8009058:	b2db      	uxtb	r3, r3
 800905a:	2b00      	cmp	r3, #0
 800905c:	d001      	beq.n	8009062 <HAL_I2C_Init+0x196>
 800905e:	2301      	movs	r3, #1
 8009060:	e022      	b.n	80090a8 <HAL_I2C_Init+0x1dc>
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d10e      	bne.n	8009088 <HAL_I2C_Init+0x1bc>
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	1e58      	subs	r0, r3, #1
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6859      	ldr	r1, [r3, #4]
 8009072:	460b      	mov	r3, r1
 8009074:	005b      	lsls	r3, r3, #1
 8009076:	440b      	add	r3, r1
 8009078:	fbb0 f3f3 	udiv	r3, r0, r3
 800907c:	3301      	adds	r3, #1
 800907e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009086:	e00f      	b.n	80090a8 <HAL_I2C_Init+0x1dc>
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	1e58      	subs	r0, r3, #1
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6859      	ldr	r1, [r3, #4]
 8009090:	460b      	mov	r3, r1
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	440b      	add	r3, r1
 8009096:	0099      	lsls	r1, r3, #2
 8009098:	440b      	add	r3, r1
 800909a:	fbb0 f3f3 	udiv	r3, r0, r3
 800909e:	3301      	adds	r3, #1
 80090a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80090a8:	6879      	ldr	r1, [r7, #4]
 80090aa:	6809      	ldr	r1, [r1, #0]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	69da      	ldr	r2, [r3, #28]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a1b      	ldr	r3, [r3, #32]
 80090c2:	431a      	orrs	r2, r3
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	430a      	orrs	r2, r1
 80090ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80090d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80090da:	687a      	ldr	r2, [r7, #4]
 80090dc:	6911      	ldr	r1, [r2, #16]
 80090de:	687a      	ldr	r2, [r7, #4]
 80090e0:	68d2      	ldr	r2, [r2, #12]
 80090e2:	4311      	orrs	r1, r2
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	6812      	ldr	r2, [r2, #0]
 80090e8:	430b      	orrs	r3, r1
 80090ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	695a      	ldr	r2, [r3, #20]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	699b      	ldr	r3, [r3, #24]
 80090fe:	431a      	orrs	r2, r3
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	430a      	orrs	r2, r1
 8009106:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f042 0201 	orr.w	r2, r2, #1
 8009116:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2220      	movs	r2, #32
 8009122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}
 800913e:	bf00      	nop
 8009140:	000186a0 	.word	0x000186a0
 8009144:	001e847f 	.word	0x001e847f
 8009148:	003d08ff 	.word	0x003d08ff
 800914c:	431bde83 	.word	0x431bde83
 8009150:	10624dd3 	.word	0x10624dd3

08009154 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b088      	sub	sp, #32
 8009158:	af02      	add	r7, sp, #8
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	607a      	str	r2, [r7, #4]
 800915e:	461a      	mov	r2, r3
 8009160:	460b      	mov	r3, r1
 8009162:	817b      	strh	r3, [r7, #10]
 8009164:	4613      	mov	r3, r2
 8009166:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009168:	f7fd fcf8 	bl	8006b5c <HAL_GetTick>
 800916c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009174:	b2db      	uxtb	r3, r3
 8009176:	2b20      	cmp	r3, #32
 8009178:	f040 80e0 	bne.w	800933c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	9300      	str	r3, [sp, #0]
 8009180:	2319      	movs	r3, #25
 8009182:	2201      	movs	r2, #1
 8009184:	4970      	ldr	r1, [pc, #448]	; (8009348 <HAL_I2C_Master_Transmit+0x1f4>)
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f000 fc58 	bl	8009a3c <I2C_WaitOnFlagUntilTimeout>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d001      	beq.n	8009196 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009192:	2302      	movs	r3, #2
 8009194:	e0d3      	b.n	800933e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800919c:	2b01      	cmp	r3, #1
 800919e:	d101      	bne.n	80091a4 <HAL_I2C_Master_Transmit+0x50>
 80091a0:	2302      	movs	r3, #2
 80091a2:	e0cc      	b.n	800933e <HAL_I2C_Master_Transmit+0x1ea>
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f003 0301 	and.w	r3, r3, #1
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d007      	beq.n	80091ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	681a      	ldr	r2, [r3, #0]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f042 0201 	orr.w	r2, r2, #1
 80091c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	681a      	ldr	r2, [r3, #0]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2221      	movs	r2, #33	; 0x21
 80091de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2210      	movs	r2, #16
 80091e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2200      	movs	r2, #0
 80091ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	893a      	ldrh	r2, [r7, #8]
 80091fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009200:	b29a      	uxth	r2, r3
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	4a50      	ldr	r2, [pc, #320]	; (800934c <HAL_I2C_Master_Transmit+0x1f8>)
 800920a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800920c:	8979      	ldrh	r1, [r7, #10]
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	6a3a      	ldr	r2, [r7, #32]
 8009212:	68f8      	ldr	r0, [r7, #12]
 8009214:	f000 fac2 	bl	800979c <I2C_MasterRequestWrite>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	e08d      	b.n	800933e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009222:	2300      	movs	r3, #0
 8009224:	613b      	str	r3, [r7, #16]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	695b      	ldr	r3, [r3, #20]
 800922c:	613b      	str	r3, [r7, #16]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	699b      	ldr	r3, [r3, #24]
 8009234:	613b      	str	r3, [r7, #16]
 8009236:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009238:	e066      	b.n	8009308 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800923a:	697a      	ldr	r2, [r7, #20]
 800923c:	6a39      	ldr	r1, [r7, #32]
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f000 fcd2 	bl	8009be8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d00d      	beq.n	8009266 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800924e:	2b04      	cmp	r3, #4
 8009250:	d107      	bne.n	8009262 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009260:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	e06b      	b.n	800933e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926a:	781a      	ldrb	r2, [r3, #0]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009276:	1c5a      	adds	r2, r3, #1
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009280:	b29b      	uxth	r3, r3
 8009282:	3b01      	subs	r3, #1
 8009284:	b29a      	uxth	r2, r3
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800928e:	3b01      	subs	r3, #1
 8009290:	b29a      	uxth	r2, r3
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	695b      	ldr	r3, [r3, #20]
 800929c:	f003 0304 	and.w	r3, r3, #4
 80092a0:	2b04      	cmp	r3, #4
 80092a2:	d11b      	bne.n	80092dc <HAL_I2C_Master_Transmit+0x188>
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d017      	beq.n	80092dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b0:	781a      	ldrb	r2, [r3, #0]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092bc:	1c5a      	adds	r2, r3, #1
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	3b01      	subs	r3, #1
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092d4:	3b01      	subs	r3, #1
 80092d6:	b29a      	uxth	r2, r3
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092dc:	697a      	ldr	r2, [r7, #20]
 80092de:	6a39      	ldr	r1, [r7, #32]
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f000 fcc2 	bl	8009c6a <I2C_WaitOnBTFFlagUntilTimeout>
 80092e6:	4603      	mov	r3, r0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d00d      	beq.n	8009308 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f0:	2b04      	cmp	r3, #4
 80092f2:	d107      	bne.n	8009304 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009302:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	e01a      	b.n	800933e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800930c:	2b00      	cmp	r3, #0
 800930e:	d194      	bne.n	800923a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681a      	ldr	r2, [r3, #0]
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800931e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2220      	movs	r2, #32
 8009324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009338:	2300      	movs	r3, #0
 800933a:	e000      	b.n	800933e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800933c:	2302      	movs	r3, #2
  }
}
 800933e:	4618      	mov	r0, r3
 8009340:	3718      	adds	r7, #24
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	00100002 	.word	0x00100002
 800934c:	ffff0000 	.word	0xffff0000

08009350 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b08c      	sub	sp, #48	; 0x30
 8009354:	af02      	add	r7, sp, #8
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	607a      	str	r2, [r7, #4]
 800935a:	461a      	mov	r2, r3
 800935c:	460b      	mov	r3, r1
 800935e:	817b      	strh	r3, [r7, #10]
 8009360:	4613      	mov	r3, r2
 8009362:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009364:	f7fd fbfa 	bl	8006b5c <HAL_GetTick>
 8009368:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009370:	b2db      	uxtb	r3, r3
 8009372:	2b20      	cmp	r3, #32
 8009374:	f040 820b 	bne.w	800978e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937a:	9300      	str	r3, [sp, #0]
 800937c:	2319      	movs	r3, #25
 800937e:	2201      	movs	r2, #1
 8009380:	497c      	ldr	r1, [pc, #496]	; (8009574 <HAL_I2C_Master_Receive+0x224>)
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f000 fb5a 	bl	8009a3c <I2C_WaitOnFlagUntilTimeout>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d001      	beq.n	8009392 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800938e:	2302      	movs	r3, #2
 8009390:	e1fe      	b.n	8009790 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009398:	2b01      	cmp	r3, #1
 800939a:	d101      	bne.n	80093a0 <HAL_I2C_Master_Receive+0x50>
 800939c:	2302      	movs	r3, #2
 800939e:	e1f7      	b.n	8009790 <HAL_I2C_Master_Receive+0x440>
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f003 0301 	and.w	r3, r3, #1
 80093b2:	2b01      	cmp	r3, #1
 80093b4:	d007      	beq.n	80093c6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f042 0201 	orr.w	r2, r2, #1
 80093c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2222      	movs	r2, #34	; 0x22
 80093da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2210      	movs	r2, #16
 80093e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2200      	movs	r2, #0
 80093ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	893a      	ldrh	r2, [r7, #8]
 80093f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093fc:	b29a      	uxth	r2, r3
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	4a5c      	ldr	r2, [pc, #368]	; (8009578 <HAL_I2C_Master_Receive+0x228>)
 8009406:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009408:	8979      	ldrh	r1, [r7, #10]
 800940a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800940e:	68f8      	ldr	r0, [r7, #12]
 8009410:	f000 fa46 	bl	80098a0 <I2C_MasterRequestRead>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800941a:	2301      	movs	r3, #1
 800941c:	e1b8      	b.n	8009790 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009422:	2b00      	cmp	r3, #0
 8009424:	d113      	bne.n	800944e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009426:	2300      	movs	r3, #0
 8009428:	623b      	str	r3, [r7, #32]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	695b      	ldr	r3, [r3, #20]
 8009430:	623b      	str	r3, [r7, #32]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	623b      	str	r3, [r7, #32]
 800943a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800944a:	601a      	str	r2, [r3, #0]
 800944c:	e18c      	b.n	8009768 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009452:	2b01      	cmp	r3, #1
 8009454:	d11b      	bne.n	800948e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009464:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009466:	2300      	movs	r3, #0
 8009468:	61fb      	str	r3, [r7, #28]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	695b      	ldr	r3, [r3, #20]
 8009470:	61fb      	str	r3, [r7, #28]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	699b      	ldr	r3, [r3, #24]
 8009478:	61fb      	str	r3, [r7, #28]
 800947a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800948a:	601a      	str	r2, [r3, #0]
 800948c:	e16c      	b.n	8009768 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009492:	2b02      	cmp	r3, #2
 8009494:	d11b      	bne.n	80094ce <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80094a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094b6:	2300      	movs	r3, #0
 80094b8:	61bb      	str	r3, [r7, #24]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	695b      	ldr	r3, [r3, #20]
 80094c0:	61bb      	str	r3, [r7, #24]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	699b      	ldr	r3, [r3, #24]
 80094c8:	61bb      	str	r3, [r7, #24]
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	e14c      	b.n	8009768 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	681a      	ldr	r2, [r3, #0]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80094dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80094de:	2300      	movs	r3, #0
 80094e0:	617b      	str	r3, [r7, #20]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	695b      	ldr	r3, [r3, #20]
 80094e8:	617b      	str	r3, [r7, #20]
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	617b      	str	r3, [r7, #20]
 80094f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80094f4:	e138      	b.n	8009768 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094fa:	2b03      	cmp	r3, #3
 80094fc:	f200 80f1 	bhi.w	80096e2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009504:	2b01      	cmp	r3, #1
 8009506:	d123      	bne.n	8009550 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800950a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	f000 fbed 	bl	8009cec <I2C_WaitOnRXNEFlagUntilTimeout>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d001      	beq.n	800951c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	e139      	b.n	8009790 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	691a      	ldr	r2, [r3, #16]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009526:	b2d2      	uxtb	r2, r2
 8009528:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800952e:	1c5a      	adds	r2, r3, #1
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009538:	3b01      	subs	r3, #1
 800953a:	b29a      	uxth	r2, r3
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009544:	b29b      	uxth	r3, r3
 8009546:	3b01      	subs	r3, #1
 8009548:	b29a      	uxth	r2, r3
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800954e:	e10b      	b.n	8009768 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009554:	2b02      	cmp	r3, #2
 8009556:	d14e      	bne.n	80095f6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955a:	9300      	str	r3, [sp, #0]
 800955c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955e:	2200      	movs	r2, #0
 8009560:	4906      	ldr	r1, [pc, #24]	; (800957c <HAL_I2C_Master_Receive+0x22c>)
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f000 fa6a 	bl	8009a3c <I2C_WaitOnFlagUntilTimeout>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d008      	beq.n	8009580 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	e10e      	b.n	8009790 <HAL_I2C_Master_Receive+0x440>
 8009572:	bf00      	nop
 8009574:	00100002 	.word	0x00100002
 8009578:	ffff0000 	.word	0xffff0000
 800957c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800958e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	691a      	ldr	r2, [r3, #16]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959a:	b2d2      	uxtb	r2, r2
 800959c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a2:	1c5a      	adds	r2, r3, #1
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095ac:	3b01      	subs	r3, #1
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	3b01      	subs	r3, #1
 80095bc:	b29a      	uxth	r2, r3
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	691a      	ldr	r2, [r3, #16]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095cc:	b2d2      	uxtb	r2, r2
 80095ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d4:	1c5a      	adds	r2, r3, #1
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095de:	3b01      	subs	r3, #1
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	3b01      	subs	r3, #1
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80095f4:	e0b8      	b.n	8009768 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80095f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f8:	9300      	str	r3, [sp, #0]
 80095fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fc:	2200      	movs	r2, #0
 80095fe:	4966      	ldr	r1, [pc, #408]	; (8009798 <HAL_I2C_Master_Receive+0x448>)
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	f000 fa1b 	bl	8009a3c <I2C_WaitOnFlagUntilTimeout>
 8009606:	4603      	mov	r3, r0
 8009608:	2b00      	cmp	r3, #0
 800960a:	d001      	beq.n	8009610 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800960c:	2301      	movs	r3, #1
 800960e:	e0bf      	b.n	8009790 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800961e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	691a      	ldr	r2, [r3, #16]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962a:	b2d2      	uxtb	r2, r2
 800962c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009632:	1c5a      	adds	r2, r3, #1
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800963c:	3b01      	subs	r3, #1
 800963e:	b29a      	uxth	r2, r3
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009648:	b29b      	uxth	r3, r3
 800964a:	3b01      	subs	r3, #1
 800964c:	b29a      	uxth	r2, r3
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009654:	9300      	str	r3, [sp, #0]
 8009656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009658:	2200      	movs	r2, #0
 800965a:	494f      	ldr	r1, [pc, #316]	; (8009798 <HAL_I2C_Master_Receive+0x448>)
 800965c:	68f8      	ldr	r0, [r7, #12]
 800965e:	f000 f9ed 	bl	8009a3c <I2C_WaitOnFlagUntilTimeout>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d001      	beq.n	800966c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	e091      	b.n	8009790 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	681a      	ldr	r2, [r3, #0]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800967a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	691a      	ldr	r2, [r3, #16]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009686:	b2d2      	uxtb	r2, r2
 8009688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968e:	1c5a      	adds	r2, r3, #1
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009698:	3b01      	subs	r3, #1
 800969a:	b29a      	uxth	r2, r3
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	3b01      	subs	r3, #1
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	691a      	ldr	r2, [r3, #16]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b8:	b2d2      	uxtb	r2, r2
 80096ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c0:	1c5a      	adds	r2, r3, #1
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096ca:	3b01      	subs	r3, #1
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	3b01      	subs	r3, #1
 80096da:	b29a      	uxth	r2, r3
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80096e0:	e042      	b.n	8009768 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80096e6:	68f8      	ldr	r0, [r7, #12]
 80096e8:	f000 fb00 	bl	8009cec <I2C_WaitOnRXNEFlagUntilTimeout>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d001      	beq.n	80096f6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e04c      	b.n	8009790 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	691a      	ldr	r2, [r3, #16]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009700:	b2d2      	uxtb	r2, r2
 8009702:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009708:	1c5a      	adds	r2, r3, #1
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009712:	3b01      	subs	r3, #1
 8009714:	b29a      	uxth	r2, r3
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800971e:	b29b      	uxth	r3, r3
 8009720:	3b01      	subs	r3, #1
 8009722:	b29a      	uxth	r2, r3
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	695b      	ldr	r3, [r3, #20]
 800972e:	f003 0304 	and.w	r3, r3, #4
 8009732:	2b04      	cmp	r3, #4
 8009734:	d118      	bne.n	8009768 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	691a      	ldr	r2, [r3, #16]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009740:	b2d2      	uxtb	r2, r2
 8009742:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009748:	1c5a      	adds	r2, r3, #1
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009752:	3b01      	subs	r3, #1
 8009754:	b29a      	uxth	r2, r3
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800975e:	b29b      	uxth	r3, r3
 8009760:	3b01      	subs	r3, #1
 8009762:	b29a      	uxth	r2, r3
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800976c:	2b00      	cmp	r3, #0
 800976e:	f47f aec2 	bne.w	80094f6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2220      	movs	r2, #32
 8009776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2200      	movs	r2, #0
 8009786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800978a:	2300      	movs	r3, #0
 800978c:	e000      	b.n	8009790 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800978e:	2302      	movs	r3, #2
  }
}
 8009790:	4618      	mov	r0, r3
 8009792:	3728      	adds	r7, #40	; 0x28
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	00010004 	.word	0x00010004

0800979c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b088      	sub	sp, #32
 80097a0:	af02      	add	r7, sp, #8
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	607a      	str	r2, [r7, #4]
 80097a6:	603b      	str	r3, [r7, #0]
 80097a8:	460b      	mov	r3, r1
 80097aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	2b08      	cmp	r3, #8
 80097b6:	d006      	beq.n	80097c6 <I2C_MasterRequestWrite+0x2a>
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d003      	beq.n	80097c6 <I2C_MasterRequestWrite+0x2a>
 80097be:	697b      	ldr	r3, [r7, #20]
 80097c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80097c4:	d108      	bne.n	80097d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097d4:	601a      	str	r2, [r3, #0]
 80097d6:	e00b      	b.n	80097f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097dc:	2b12      	cmp	r3, #18
 80097de:	d107      	bne.n	80097f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2200      	movs	r2, #0
 80097f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f000 f91d 	bl	8009a3c <I2C_WaitOnFlagUntilTimeout>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d00d      	beq.n	8009824 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009816:	d103      	bne.n	8009820 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800981e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009820:	2303      	movs	r3, #3
 8009822:	e035      	b.n	8009890 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800982c:	d108      	bne.n	8009840 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800982e:	897b      	ldrh	r3, [r7, #10]
 8009830:	b2db      	uxtb	r3, r3
 8009832:	461a      	mov	r2, r3
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800983c:	611a      	str	r2, [r3, #16]
 800983e:	e01b      	b.n	8009878 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009840:	897b      	ldrh	r3, [r7, #10]
 8009842:	11db      	asrs	r3, r3, #7
 8009844:	b2db      	uxtb	r3, r3
 8009846:	f003 0306 	and.w	r3, r3, #6
 800984a:	b2db      	uxtb	r3, r3
 800984c:	f063 030f 	orn	r3, r3, #15
 8009850:	b2da      	uxtb	r2, r3
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	490e      	ldr	r1, [pc, #56]	; (8009898 <I2C_MasterRequestWrite+0xfc>)
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	f000 f943 	bl	8009aea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d001      	beq.n	800986e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	e010      	b.n	8009890 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800986e:	897b      	ldrh	r3, [r7, #10]
 8009870:	b2da      	uxtb	r2, r3
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	4907      	ldr	r1, [pc, #28]	; (800989c <I2C_MasterRequestWrite+0x100>)
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f000 f933 	bl	8009aea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d001      	beq.n	800988e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800988a:	2301      	movs	r3, #1
 800988c:	e000      	b.n	8009890 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3718      	adds	r7, #24
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	00010008 	.word	0x00010008
 800989c:	00010002 	.word	0x00010002

080098a0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b088      	sub	sp, #32
 80098a4:	af02      	add	r7, sp, #8
 80098a6:	60f8      	str	r0, [r7, #12]
 80098a8:	607a      	str	r2, [r7, #4]
 80098aa:	603b      	str	r3, [r7, #0]
 80098ac:	460b      	mov	r3, r1
 80098ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80098c4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	2b08      	cmp	r3, #8
 80098ca:	d006      	beq.n	80098da <I2C_MasterRequestRead+0x3a>
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d003      	beq.n	80098da <I2C_MasterRequestRead+0x3a>
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80098d8:	d108      	bne.n	80098ec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098e8:	601a      	str	r2, [r3, #0]
 80098ea:	e00b      	b.n	8009904 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f0:	2b11      	cmp	r3, #17
 80098f2:	d107      	bne.n	8009904 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009902:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	9300      	str	r3, [sp, #0]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2200      	movs	r2, #0
 800990c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009910:	68f8      	ldr	r0, [r7, #12]
 8009912:	f000 f893 	bl	8009a3c <I2C_WaitOnFlagUntilTimeout>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d00d      	beq.n	8009938 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800992a:	d103      	bne.n	8009934 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009932:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009934:	2303      	movs	r3, #3
 8009936:	e079      	b.n	8009a2c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009940:	d108      	bne.n	8009954 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009942:	897b      	ldrh	r3, [r7, #10]
 8009944:	b2db      	uxtb	r3, r3
 8009946:	f043 0301 	orr.w	r3, r3, #1
 800994a:	b2da      	uxtb	r2, r3
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	611a      	str	r2, [r3, #16]
 8009952:	e05f      	b.n	8009a14 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009954:	897b      	ldrh	r3, [r7, #10]
 8009956:	11db      	asrs	r3, r3, #7
 8009958:	b2db      	uxtb	r3, r3
 800995a:	f003 0306 	and.w	r3, r3, #6
 800995e:	b2db      	uxtb	r3, r3
 8009960:	f063 030f 	orn	r3, r3, #15
 8009964:	b2da      	uxtb	r2, r3
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	4930      	ldr	r1, [pc, #192]	; (8009a34 <I2C_MasterRequestRead+0x194>)
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f000 f8b9 	bl	8009aea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d001      	beq.n	8009982 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800997e:	2301      	movs	r3, #1
 8009980:	e054      	b.n	8009a2c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009982:	897b      	ldrh	r3, [r7, #10]
 8009984:	b2da      	uxtb	r2, r3
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	4929      	ldr	r1, [pc, #164]	; (8009a38 <I2C_MasterRequestRead+0x198>)
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f000 f8a9 	bl	8009aea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d001      	beq.n	80099a2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	e044      	b.n	8009a2c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80099a2:	2300      	movs	r3, #0
 80099a4:	613b      	str	r3, [r7, #16]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	695b      	ldr	r3, [r3, #20]
 80099ac:	613b      	str	r3, [r7, #16]
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	699b      	ldr	r3, [r3, #24]
 80099b4:	613b      	str	r3, [r7, #16]
 80099b6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099c6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	9300      	str	r3, [sp, #0]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f000 f831 	bl	8009a3c <I2C_WaitOnFlagUntilTimeout>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00d      	beq.n	80099fc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099ee:	d103      	bne.n	80099f8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099f6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80099f8:	2303      	movs	r3, #3
 80099fa:	e017      	b.n	8009a2c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80099fc:	897b      	ldrh	r3, [r7, #10]
 80099fe:	11db      	asrs	r3, r3, #7
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	f003 0306 	and.w	r3, r3, #6
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	f063 030e 	orn	r3, r3, #14
 8009a0c:	b2da      	uxtb	r2, r3
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	4907      	ldr	r1, [pc, #28]	; (8009a38 <I2C_MasterRequestRead+0x198>)
 8009a1a:	68f8      	ldr	r0, [r7, #12]
 8009a1c:	f000 f865 	bl	8009aea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d001      	beq.n	8009a2a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009a26:	2301      	movs	r3, #1
 8009a28:	e000      	b.n	8009a2c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3718      	adds	r7, #24
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	00010008 	.word	0x00010008
 8009a38:	00010002 	.word	0x00010002

08009a3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	603b      	str	r3, [r7, #0]
 8009a48:	4613      	mov	r3, r2
 8009a4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a4c:	e025      	b.n	8009a9a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a54:	d021      	beq.n	8009a9a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a56:	f7fd f881 	bl	8006b5c <HAL_GetTick>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	69bb      	ldr	r3, [r7, #24]
 8009a5e:	1ad3      	subs	r3, r2, r3
 8009a60:	683a      	ldr	r2, [r7, #0]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	d302      	bcc.n	8009a6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d116      	bne.n	8009a9a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	2220      	movs	r2, #32
 8009a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a86:	f043 0220 	orr.w	r2, r3, #32
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e023      	b.n	8009ae2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a9a:	68bb      	ldr	r3, [r7, #8]
 8009a9c:	0c1b      	lsrs	r3, r3, #16
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d10d      	bne.n	8009ac0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	695b      	ldr	r3, [r3, #20]
 8009aaa:	43da      	mvns	r2, r3
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	4013      	ands	r3, r2
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	bf0c      	ite	eq
 8009ab6:	2301      	moveq	r3, #1
 8009ab8:	2300      	movne	r3, #0
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	461a      	mov	r2, r3
 8009abe:	e00c      	b.n	8009ada <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	699b      	ldr	r3, [r3, #24]
 8009ac6:	43da      	mvns	r2, r3
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	4013      	ands	r3, r2
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	bf0c      	ite	eq
 8009ad2:	2301      	moveq	r3, #1
 8009ad4:	2300      	movne	r3, #0
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	461a      	mov	r2, r3
 8009ada:	79fb      	ldrb	r3, [r7, #7]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d0b6      	beq.n	8009a4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b084      	sub	sp, #16
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	60f8      	str	r0, [r7, #12]
 8009af2:	60b9      	str	r1, [r7, #8]
 8009af4:	607a      	str	r2, [r7, #4]
 8009af6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009af8:	e051      	b.n	8009b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	695b      	ldr	r3, [r3, #20]
 8009b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b08:	d123      	bne.n	8009b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b18:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009b22:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2200      	movs	r2, #0
 8009b28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2220      	movs	r2, #32
 8009b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	2200      	movs	r2, #0
 8009b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b3e:	f043 0204 	orr.w	r2, r3, #4
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e046      	b.n	8009be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b58:	d021      	beq.n	8009b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b5a:	f7fc ffff 	bl	8006b5c <HAL_GetTick>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	1ad3      	subs	r3, r2, r3
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d302      	bcc.n	8009b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d116      	bne.n	8009b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2200      	movs	r2, #0
 8009b74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2220      	movs	r2, #32
 8009b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2200      	movs	r2, #0
 8009b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b8a:	f043 0220 	orr.w	r2, r3, #32
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2200      	movs	r2, #0
 8009b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	e020      	b.n	8009be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	0c1b      	lsrs	r3, r3, #16
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d10c      	bne.n	8009bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	695b      	ldr	r3, [r3, #20]
 8009bae:	43da      	mvns	r2, r3
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	4013      	ands	r3, r2
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	bf14      	ite	ne
 8009bba:	2301      	movne	r3, #1
 8009bbc:	2300      	moveq	r3, #0
 8009bbe:	b2db      	uxtb	r3, r3
 8009bc0:	e00b      	b.n	8009bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	699b      	ldr	r3, [r3, #24]
 8009bc8:	43da      	mvns	r2, r3
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	4013      	ands	r3, r2
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	bf14      	ite	ne
 8009bd4:	2301      	movne	r3, #1
 8009bd6:	2300      	moveq	r3, #0
 8009bd8:	b2db      	uxtb	r3, r3
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d18d      	bne.n	8009afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009bde:	2300      	movs	r3, #0
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3710      	adds	r7, #16
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd80      	pop	{r7, pc}

08009be8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009bf4:	e02d      	b.n	8009c52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009bf6:	68f8      	ldr	r0, [r7, #12]
 8009bf8:	f000 f8ce 	bl	8009d98 <I2C_IsAcknowledgeFailed>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d001      	beq.n	8009c06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009c02:	2301      	movs	r3, #1
 8009c04:	e02d      	b.n	8009c62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c0c:	d021      	beq.n	8009c52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c0e:	f7fc ffa5 	bl	8006b5c <HAL_GetTick>
 8009c12:	4602      	mov	r2, r0
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	1ad3      	subs	r3, r2, r3
 8009c18:	68ba      	ldr	r2, [r7, #8]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d302      	bcc.n	8009c24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d116      	bne.n	8009c52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2200      	movs	r2, #0
 8009c28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2220      	movs	r2, #32
 8009c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2200      	movs	r2, #0
 8009c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c3e:	f043 0220 	orr.w	r2, r3, #32
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	e007      	b.n	8009c62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	695b      	ldr	r3, [r3, #20]
 8009c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c5c:	2b80      	cmp	r3, #128	; 0x80
 8009c5e:	d1ca      	bne.n	8009bf6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009c60:	2300      	movs	r3, #0
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3710      	adds	r7, #16
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b084      	sub	sp, #16
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	60f8      	str	r0, [r7, #12]
 8009c72:	60b9      	str	r1, [r7, #8]
 8009c74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009c76:	e02d      	b.n	8009cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009c78:	68f8      	ldr	r0, [r7, #12]
 8009c7a:	f000 f88d 	bl	8009d98 <I2C_IsAcknowledgeFailed>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d001      	beq.n	8009c88 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	e02d      	b.n	8009ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c8e:	d021      	beq.n	8009cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c90:	f7fc ff64 	bl	8006b5c <HAL_GetTick>
 8009c94:	4602      	mov	r2, r0
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	1ad3      	subs	r3, r2, r3
 8009c9a:	68ba      	ldr	r2, [r7, #8]
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d302      	bcc.n	8009ca6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d116      	bne.n	8009cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2220      	movs	r2, #32
 8009cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc0:	f043 0220 	orr.w	r2, r3, #32
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	e007      	b.n	8009ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	695b      	ldr	r3, [r3, #20]
 8009cda:	f003 0304 	and.w	r3, r3, #4
 8009cde:	2b04      	cmp	r3, #4
 8009ce0:	d1ca      	bne.n	8009c78 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009ce2:	2300      	movs	r3, #0
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009cf8:	e042      	b.n	8009d80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	695b      	ldr	r3, [r3, #20]
 8009d00:	f003 0310 	and.w	r3, r3, #16
 8009d04:	2b10      	cmp	r3, #16
 8009d06:	d119      	bne.n	8009d3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f06f 0210 	mvn.w	r2, #16
 8009d10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2220      	movs	r2, #32
 8009d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2200      	movs	r2, #0
 8009d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	e029      	b.n	8009d90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d3c:	f7fc ff0e 	bl	8006b5c <HAL_GetTick>
 8009d40:	4602      	mov	r2, r0
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	1ad3      	subs	r3, r2, r3
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d302      	bcc.n	8009d52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d116      	bne.n	8009d80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2200      	movs	r2, #0
 8009d56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2220      	movs	r2, #32
 8009d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6c:	f043 0220 	orr.w	r2, r3, #32
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2200      	movs	r2, #0
 8009d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	e007      	b.n	8009d90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	695b      	ldr	r3, [r3, #20]
 8009d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d8a:	2b40      	cmp	r3, #64	; 0x40
 8009d8c:	d1b5      	bne.n	8009cfa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009d8e:	2300      	movs	r3, #0
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	3710      	adds	r7, #16
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	695b      	ldr	r3, [r3, #20]
 8009da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009dae:	d11b      	bne.n	8009de8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009db8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2220      	movs	r2, #32
 8009dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd4:	f043 0204 	orr.w	r2, r3, #4
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009de4:	2301      	movs	r3, #1
 8009de6:	e000      	b.n	8009dea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	370c      	adds	r7, #12
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr

08009df6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009df6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009df8:	b08f      	sub	sp, #60	; 0x3c
 8009dfa:	af0a      	add	r7, sp, #40	; 0x28
 8009dfc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d101      	bne.n	8009e08 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	e116      	b.n	800a036 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d106      	bne.n	8009e28 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009e22:	6878      	ldr	r0, [r7, #4]
 8009e24:	f00d fe0c 	bl	8017a40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2203      	movs	r2, #3
 8009e2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d102      	bne.n	8009e42 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4618      	mov	r0, r3
 8009e48:	f005 fd11 	bl	800f86e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	603b      	str	r3, [r7, #0]
 8009e52:	687e      	ldr	r6, [r7, #4]
 8009e54:	466d      	mov	r5, sp
 8009e56:	f106 0410 	add.w	r4, r6, #16
 8009e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009e5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009e5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009e60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009e62:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009e66:	e885 0003 	stmia.w	r5, {r0, r1}
 8009e6a:	1d33      	adds	r3, r6, #4
 8009e6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009e6e:	6838      	ldr	r0, [r7, #0]
 8009e70:	f005 fbe8 	bl	800f644 <USB_CoreInit>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d005      	beq.n	8009e86 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2202      	movs	r2, #2
 8009e7e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	e0d7      	b.n	800a036 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2100      	movs	r1, #0
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f005 fcff 	bl	800f890 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009e92:	2300      	movs	r3, #0
 8009e94:	73fb      	strb	r3, [r7, #15]
 8009e96:	e04a      	b.n	8009f2e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009e98:	7bfa      	ldrb	r2, [r7, #15]
 8009e9a:	6879      	ldr	r1, [r7, #4]
 8009e9c:	4613      	mov	r3, r2
 8009e9e:	00db      	lsls	r3, r3, #3
 8009ea0:	4413      	add	r3, r2
 8009ea2:	009b      	lsls	r3, r3, #2
 8009ea4:	440b      	add	r3, r1
 8009ea6:	333d      	adds	r3, #61	; 0x3d
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009eac:	7bfa      	ldrb	r2, [r7, #15]
 8009eae:	6879      	ldr	r1, [r7, #4]
 8009eb0:	4613      	mov	r3, r2
 8009eb2:	00db      	lsls	r3, r3, #3
 8009eb4:	4413      	add	r3, r2
 8009eb6:	009b      	lsls	r3, r3, #2
 8009eb8:	440b      	add	r3, r1
 8009eba:	333c      	adds	r3, #60	; 0x3c
 8009ebc:	7bfa      	ldrb	r2, [r7, #15]
 8009ebe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009ec0:	7bfa      	ldrb	r2, [r7, #15]
 8009ec2:	7bfb      	ldrb	r3, [r7, #15]
 8009ec4:	b298      	uxth	r0, r3
 8009ec6:	6879      	ldr	r1, [r7, #4]
 8009ec8:	4613      	mov	r3, r2
 8009eca:	00db      	lsls	r3, r3, #3
 8009ecc:	4413      	add	r3, r2
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	440b      	add	r3, r1
 8009ed2:	3344      	adds	r3, #68	; 0x44
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009ed8:	7bfa      	ldrb	r2, [r7, #15]
 8009eda:	6879      	ldr	r1, [r7, #4]
 8009edc:	4613      	mov	r3, r2
 8009ede:	00db      	lsls	r3, r3, #3
 8009ee0:	4413      	add	r3, r2
 8009ee2:	009b      	lsls	r3, r3, #2
 8009ee4:	440b      	add	r3, r1
 8009ee6:	3340      	adds	r3, #64	; 0x40
 8009ee8:	2200      	movs	r2, #0
 8009eea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009eec:	7bfa      	ldrb	r2, [r7, #15]
 8009eee:	6879      	ldr	r1, [r7, #4]
 8009ef0:	4613      	mov	r3, r2
 8009ef2:	00db      	lsls	r3, r3, #3
 8009ef4:	4413      	add	r3, r2
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	440b      	add	r3, r1
 8009efa:	3348      	adds	r3, #72	; 0x48
 8009efc:	2200      	movs	r2, #0
 8009efe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009f00:	7bfa      	ldrb	r2, [r7, #15]
 8009f02:	6879      	ldr	r1, [r7, #4]
 8009f04:	4613      	mov	r3, r2
 8009f06:	00db      	lsls	r3, r3, #3
 8009f08:	4413      	add	r3, r2
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	440b      	add	r3, r1
 8009f0e:	334c      	adds	r3, #76	; 0x4c
 8009f10:	2200      	movs	r2, #0
 8009f12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009f14:	7bfa      	ldrb	r2, [r7, #15]
 8009f16:	6879      	ldr	r1, [r7, #4]
 8009f18:	4613      	mov	r3, r2
 8009f1a:	00db      	lsls	r3, r3, #3
 8009f1c:	4413      	add	r3, r2
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	440b      	add	r3, r1
 8009f22:	3354      	adds	r3, #84	; 0x54
 8009f24:	2200      	movs	r2, #0
 8009f26:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f28:	7bfb      	ldrb	r3, [r7, #15]
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	73fb      	strb	r3, [r7, #15]
 8009f2e:	7bfa      	ldrb	r2, [r7, #15]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d3af      	bcc.n	8009e98 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f38:	2300      	movs	r3, #0
 8009f3a:	73fb      	strb	r3, [r7, #15]
 8009f3c:	e044      	b.n	8009fc8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009f3e:	7bfa      	ldrb	r2, [r7, #15]
 8009f40:	6879      	ldr	r1, [r7, #4]
 8009f42:	4613      	mov	r3, r2
 8009f44:	00db      	lsls	r3, r3, #3
 8009f46:	4413      	add	r3, r2
 8009f48:	009b      	lsls	r3, r3, #2
 8009f4a:	440b      	add	r3, r1
 8009f4c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8009f50:	2200      	movs	r2, #0
 8009f52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009f54:	7bfa      	ldrb	r2, [r7, #15]
 8009f56:	6879      	ldr	r1, [r7, #4]
 8009f58:	4613      	mov	r3, r2
 8009f5a:	00db      	lsls	r3, r3, #3
 8009f5c:	4413      	add	r3, r2
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	440b      	add	r3, r1
 8009f62:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8009f66:	7bfa      	ldrb	r2, [r7, #15]
 8009f68:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009f6a:	7bfa      	ldrb	r2, [r7, #15]
 8009f6c:	6879      	ldr	r1, [r7, #4]
 8009f6e:	4613      	mov	r3, r2
 8009f70:	00db      	lsls	r3, r3, #3
 8009f72:	4413      	add	r3, r2
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	440b      	add	r3, r1
 8009f78:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009f80:	7bfa      	ldrb	r2, [r7, #15]
 8009f82:	6879      	ldr	r1, [r7, #4]
 8009f84:	4613      	mov	r3, r2
 8009f86:	00db      	lsls	r3, r3, #3
 8009f88:	4413      	add	r3, r2
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	440b      	add	r3, r1
 8009f8e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8009f92:	2200      	movs	r2, #0
 8009f94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009f96:	7bfa      	ldrb	r2, [r7, #15]
 8009f98:	6879      	ldr	r1, [r7, #4]
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	00db      	lsls	r3, r3, #3
 8009f9e:	4413      	add	r3, r2
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	440b      	add	r3, r1
 8009fa4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009fa8:	2200      	movs	r2, #0
 8009faa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009fac:	7bfa      	ldrb	r2, [r7, #15]
 8009fae:	6879      	ldr	r1, [r7, #4]
 8009fb0:	4613      	mov	r3, r2
 8009fb2:	00db      	lsls	r3, r3, #3
 8009fb4:	4413      	add	r3, r2
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	440b      	add	r3, r1
 8009fba:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009fc2:	7bfb      	ldrb	r3, [r7, #15]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	73fb      	strb	r3, [r7, #15]
 8009fc8:	7bfa      	ldrb	r2, [r7, #15]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d3b5      	bcc.n	8009f3e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	603b      	str	r3, [r7, #0]
 8009fd8:	687e      	ldr	r6, [r7, #4]
 8009fda:	466d      	mov	r5, sp
 8009fdc:	f106 0410 	add.w	r4, r6, #16
 8009fe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009fe2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009fe4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009fe6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009fe8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009fec:	e885 0003 	stmia.w	r5, {r0, r1}
 8009ff0:	1d33      	adds	r3, r6, #4
 8009ff2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009ff4:	6838      	ldr	r0, [r7, #0]
 8009ff6:	f005 fc97 	bl	800f928 <USB_DevInit>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d005      	beq.n	800a00c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2202      	movs	r2, #2
 800a004:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800a008:	2301      	movs	r3, #1
 800a00a:	e014      	b.n	800a036 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2200      	movs	r2, #0
 800a010:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2201      	movs	r2, #1
 800a018:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a020:	2b01      	cmp	r3, #1
 800a022:	d102      	bne.n	800a02a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	f001 f9b9 	bl	800b39c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4618      	mov	r0, r3
 800a030:	f006 fdd9 	bl	8010be6 <USB_DevDisconnect>

  return HAL_OK;
 800a034:	2300      	movs	r3, #0
}
 800a036:	4618      	mov	r0, r3
 800a038:	3714      	adds	r7, #20
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a03e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b084      	sub	sp, #16
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a052:	2b01      	cmp	r3, #1
 800a054:	d101      	bne.n	800a05a <HAL_PCD_Start+0x1c>
 800a056:	2302      	movs	r3, #2
 800a058:	e020      	b.n	800a09c <HAL_PCD_Start+0x5e>
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2201      	movs	r2, #1
 800a05e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a066:	2b01      	cmp	r3, #1
 800a068:	d109      	bne.n	800a07e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d005      	beq.n	800a07e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a076:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4618      	mov	r0, r3
 800a084:	f005 fbe2 	bl	800f84c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4618      	mov	r0, r3
 800a08e:	f006 fd89 	bl	8010ba4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a09a:	2300      	movs	r3, #0
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3710      	adds	r7, #16
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a0a4:	b590      	push	{r4, r7, lr}
 800a0a6:	b08d      	sub	sp, #52	; 0x34
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0b2:	6a3b      	ldr	r3, [r7, #32]
 800a0b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f006 fe47 	bl	8010d4e <USB_GetMode>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	f040 84b7 	bne.w	800aa36 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f006 fdab 	bl	8010c28 <USB_ReadInterrupts>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	f000 84ad 	beq.w	800aa34 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800a0da:	69fb      	ldr	r3, [r7, #28]
 800a0dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0e0:	689b      	ldr	r3, [r3, #8]
 800a0e2:	0a1b      	lsrs	r3, r3, #8
 800a0e4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f006 fd98 	bl	8010c28 <USB_ReadInterrupts>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	f003 0302 	and.w	r3, r3, #2
 800a0fe:	2b02      	cmp	r3, #2
 800a100:	d107      	bne.n	800a112 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	695a      	ldr	r2, [r3, #20]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f002 0202 	and.w	r2, r2, #2
 800a110:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4618      	mov	r0, r3
 800a118:	f006 fd86 	bl	8010c28 <USB_ReadInterrupts>
 800a11c:	4603      	mov	r3, r0
 800a11e:	f003 0310 	and.w	r3, r3, #16
 800a122:	2b10      	cmp	r3, #16
 800a124:	d161      	bne.n	800a1ea <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	699a      	ldr	r2, [r3, #24]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	f022 0210 	bic.w	r2, r2, #16
 800a134:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800a136:	6a3b      	ldr	r3, [r7, #32]
 800a138:	6a1b      	ldr	r3, [r3, #32]
 800a13a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800a13c:	69bb      	ldr	r3, [r7, #24]
 800a13e:	f003 020f 	and.w	r2, r3, #15
 800a142:	4613      	mov	r3, r2
 800a144:	00db      	lsls	r3, r3, #3
 800a146:	4413      	add	r3, r2
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	4413      	add	r3, r2
 800a152:	3304      	adds	r3, #4
 800a154:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	0c5b      	lsrs	r3, r3, #17
 800a15a:	f003 030f 	and.w	r3, r3, #15
 800a15e:	2b02      	cmp	r3, #2
 800a160:	d124      	bne.n	800a1ac <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a162:	69ba      	ldr	r2, [r7, #24]
 800a164:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800a168:	4013      	ands	r3, r2
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d035      	beq.n	800a1da <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	091b      	lsrs	r3, r3, #4
 800a176:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a178:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	461a      	mov	r2, r3
 800a180:	6a38      	ldr	r0, [r7, #32]
 800a182:	f006 fbbd 	bl	8010900 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	691a      	ldr	r2, [r3, #16]
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	091b      	lsrs	r3, r3, #4
 800a18e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a192:	441a      	add	r2, r3
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	6a1a      	ldr	r2, [r3, #32]
 800a19c:	69bb      	ldr	r3, [r7, #24]
 800a19e:	091b      	lsrs	r3, r3, #4
 800a1a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a1a4:	441a      	add	r2, r3
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	621a      	str	r2, [r3, #32]
 800a1aa:	e016      	b.n	800a1da <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800a1ac:	69bb      	ldr	r3, [r7, #24]
 800a1ae:	0c5b      	lsrs	r3, r3, #17
 800a1b0:	f003 030f 	and.w	r3, r3, #15
 800a1b4:	2b06      	cmp	r3, #6
 800a1b6:	d110      	bne.n	800a1da <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a1be:	2208      	movs	r2, #8
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	6a38      	ldr	r0, [r7, #32]
 800a1c4:	f006 fb9c 	bl	8010900 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	6a1a      	ldr	r2, [r3, #32]
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	091b      	lsrs	r3, r3, #4
 800a1d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a1d4:	441a      	add	r2, r3
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	699a      	ldr	r2, [r3, #24]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f042 0210 	orr.w	r2, r2, #16
 800a1e8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	f006 fd1a 	bl	8010c28 <USB_ReadInterrupts>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a1fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a1fe:	f040 80a7 	bne.w	800a350 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800a202:	2300      	movs	r3, #0
 800a204:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	4618      	mov	r0, r3
 800a20c:	f006 fd1f 	bl	8010c4e <USB_ReadDevAllOutEpInterrupt>
 800a210:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800a212:	e099      	b.n	800a348 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800a214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a216:	f003 0301 	and.w	r3, r3, #1
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f000 808e 	beq.w	800a33c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a226:	b2d2      	uxtb	r2, r2
 800a228:	4611      	mov	r1, r2
 800a22a:	4618      	mov	r0, r3
 800a22c:	f006 fd43 	bl	8010cb6 <USB_ReadDevOutEPInterrupt>
 800a230:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a232:	693b      	ldr	r3, [r7, #16]
 800a234:	f003 0301 	and.w	r3, r3, #1
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d00c      	beq.n	800a256 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23e:	015a      	lsls	r2, r3, #5
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	4413      	add	r3, r2
 800a244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a248:	461a      	mov	r2, r3
 800a24a:	2301      	movs	r3, #1
 800a24c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800a24e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f000 ff1d 	bl	800b090 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	f003 0308 	and.w	r3, r3, #8
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d00c      	beq.n	800a27a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a262:	015a      	lsls	r2, r3, #5
 800a264:	69fb      	ldr	r3, [r7, #28]
 800a266:	4413      	add	r3, r2
 800a268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a26c:	461a      	mov	r2, r3
 800a26e:	2308      	movs	r3, #8
 800a270:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800a272:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 fff3 	bl	800b260 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a27a:	693b      	ldr	r3, [r7, #16]
 800a27c:	f003 0310 	and.w	r3, r3, #16
 800a280:	2b00      	cmp	r3, #0
 800a282:	d008      	beq.n	800a296 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a286:	015a      	lsls	r2, r3, #5
 800a288:	69fb      	ldr	r3, [r7, #28]
 800a28a:	4413      	add	r3, r2
 800a28c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a290:	461a      	mov	r2, r3
 800a292:	2310      	movs	r3, #16
 800a294:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	f003 0302 	and.w	r3, r3, #2
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d030      	beq.n	800a302 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800a2a0:	6a3b      	ldr	r3, [r7, #32]
 800a2a2:	695b      	ldr	r3, [r3, #20]
 800a2a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2a8:	2b80      	cmp	r3, #128	; 0x80
 800a2aa:	d109      	bne.n	800a2c0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800a2ac:	69fb      	ldr	r3, [r7, #28]
 800a2ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	69fa      	ldr	r2, [r7, #28]
 800a2b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a2be:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800a2c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2c2:	4613      	mov	r3, r2
 800a2c4:	00db      	lsls	r3, r3, #3
 800a2c6:	4413      	add	r3, r2
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	3304      	adds	r3, #4
 800a2d4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	78db      	ldrb	r3, [r3, #3]
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d108      	bne.n	800a2f0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f00d fcbc 	bl	8017c68 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800a2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f2:	015a      	lsls	r2, r3, #5
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	4413      	add	r3, r2
 800a2f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2fc:	461a      	mov	r2, r3
 800a2fe:	2302      	movs	r3, #2
 800a300:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	f003 0320 	and.w	r3, r3, #32
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d008      	beq.n	800a31e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30e:	015a      	lsls	r2, r3, #5
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	4413      	add	r3, r2
 800a314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a318:	461a      	mov	r2, r3
 800a31a:	2320      	movs	r3, #32
 800a31c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a324:	2b00      	cmp	r3, #0
 800a326:	d009      	beq.n	800a33c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32a:	015a      	lsls	r2, r3, #5
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	4413      	add	r3, r2
 800a330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a334:	461a      	mov	r2, r3
 800a336:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a33a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800a33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a33e:	3301      	adds	r3, #1
 800a340:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a344:	085b      	lsrs	r3, r3, #1
 800a346:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f47f af62 	bne.w	800a214 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	4618      	mov	r0, r3
 800a356:	f006 fc67 	bl	8010c28 <USB_ReadInterrupts>
 800a35a:	4603      	mov	r3, r0
 800a35c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a360:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a364:	f040 80db 	bne.w	800a51e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f006 fc88 	bl	8010c82 <USB_ReadDevAllInEpInterrupt>
 800a372:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800a374:	2300      	movs	r3, #0
 800a376:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800a378:	e0cd      	b.n	800a516 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a37c:	f003 0301 	and.w	r3, r3, #1
 800a380:	2b00      	cmp	r3, #0
 800a382:	f000 80c2 	beq.w	800a50a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a38c:	b2d2      	uxtb	r2, r2
 800a38e:	4611      	mov	r1, r2
 800a390:	4618      	mov	r0, r3
 800a392:	f006 fcae 	bl	8010cf2 <USB_ReadDevInEPInterrupt>
 800a396:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	f003 0301 	and.w	r3, r3, #1
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d057      	beq.n	800a452 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a4:	f003 030f 	and.w	r3, r3, #15
 800a3a8:	2201      	movs	r2, #1
 800a3aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a3b0:	69fb      	ldr	r3, [r7, #28]
 800a3b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	43db      	mvns	r3, r3
 800a3bc:	69f9      	ldr	r1, [r7, #28]
 800a3be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3c2:	4013      	ands	r3, r2
 800a3c4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3c8:	015a      	lsls	r2, r3, #5
 800a3ca:	69fb      	ldr	r3, [r7, #28]
 800a3cc:	4413      	add	r3, r2
 800a3ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	2301      	movs	r3, #1
 800a3d6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d132      	bne.n	800a446 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a3e0:	6879      	ldr	r1, [r7, #4]
 800a3e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3e4:	4613      	mov	r3, r2
 800a3e6:	00db      	lsls	r3, r3, #3
 800a3e8:	4413      	add	r3, r2
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	440b      	add	r3, r1
 800a3ee:	334c      	adds	r3, #76	; 0x4c
 800a3f0:	6819      	ldr	r1, [r3, #0]
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3f6:	4613      	mov	r3, r2
 800a3f8:	00db      	lsls	r3, r3, #3
 800a3fa:	4413      	add	r3, r2
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	4403      	add	r3, r0
 800a400:	3348      	adds	r3, #72	; 0x48
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4419      	add	r1, r3
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a40a:	4613      	mov	r3, r2
 800a40c:	00db      	lsls	r3, r3, #3
 800a40e:	4413      	add	r3, r2
 800a410:	009b      	lsls	r3, r3, #2
 800a412:	4403      	add	r3, r0
 800a414:	334c      	adds	r3, #76	; 0x4c
 800a416:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d113      	bne.n	800a446 <HAL_PCD_IRQHandler+0x3a2>
 800a41e:	6879      	ldr	r1, [r7, #4]
 800a420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a422:	4613      	mov	r3, r2
 800a424:	00db      	lsls	r3, r3, #3
 800a426:	4413      	add	r3, r2
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	440b      	add	r3, r1
 800a42c:	3354      	adds	r3, #84	; 0x54
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d108      	bne.n	800a446 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	6818      	ldr	r0, [r3, #0]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a43e:	461a      	mov	r2, r3
 800a440:	2101      	movs	r1, #1
 800a442:	f006 fcb5 	bl	8010db0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	4619      	mov	r1, r3
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f00d fb86 	bl	8017b5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	f003 0308 	and.w	r3, r3, #8
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d008      	beq.n	800a46e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45e:	015a      	lsls	r2, r3, #5
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	4413      	add	r3, r2
 800a464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a468:	461a      	mov	r2, r3
 800a46a:	2308      	movs	r3, #8
 800a46c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	f003 0310 	and.w	r3, r3, #16
 800a474:	2b00      	cmp	r3, #0
 800a476:	d008      	beq.n	800a48a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47a:	015a      	lsls	r2, r3, #5
 800a47c:	69fb      	ldr	r3, [r7, #28]
 800a47e:	4413      	add	r3, r2
 800a480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a484:	461a      	mov	r2, r3
 800a486:	2310      	movs	r3, #16
 800a488:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a490:	2b00      	cmp	r3, #0
 800a492:	d008      	beq.n	800a4a6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a496:	015a      	lsls	r2, r3, #5
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	4413      	add	r3, r2
 800a49c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4a0:	461a      	mov	r2, r3
 800a4a2:	2340      	movs	r3, #64	; 0x40
 800a4a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	f003 0302 	and.w	r3, r3, #2
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d023      	beq.n	800a4f8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800a4b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a4b2:	6a38      	ldr	r0, [r7, #32]
 800a4b4:	f005 fb96 	bl	800fbe4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800a4b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	00db      	lsls	r3, r3, #3
 800a4be:	4413      	add	r3, r2
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	3338      	adds	r3, #56	; 0x38
 800a4c4:	687a      	ldr	r2, [r7, #4]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	3304      	adds	r3, #4
 800a4ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	78db      	ldrb	r3, [r3, #3]
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d108      	bne.n	800a4e6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	4619      	mov	r1, r3
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f00d fbd3 	bl	8017c8c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e8:	015a      	lsls	r2, r3, #5
 800a4ea:	69fb      	ldr	r3, [r7, #28]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	2302      	movs	r3, #2
 800a4f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d003      	beq.n	800a50a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a502:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 fd35 	bl	800af74 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a50c:	3301      	adds	r3, #1
 800a50e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a512:	085b      	lsrs	r3, r3, #1
 800a514:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a518:	2b00      	cmp	r3, #0
 800a51a:	f47f af2e 	bne.w	800a37a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	4618      	mov	r0, r3
 800a524:	f006 fb80 	bl	8010c28 <USB_ReadInterrupts>
 800a528:	4603      	mov	r3, r0
 800a52a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a52e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a532:	d122      	bne.n	800a57a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	69fa      	ldr	r2, [r7, #28]
 800a53e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a542:	f023 0301 	bic.w	r3, r3, #1
 800a546:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d108      	bne.n	800a564 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a55a:	2100      	movs	r1, #0
 800a55c:	6878      	ldr	r0, [r7, #4]
 800a55e:	f00d fd6d 	bl	801803c <HAL_PCDEx_LPM_Callback>
 800a562:	e002      	b.n	800a56a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f00d fb71 	bl	8017c4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	695a      	ldr	r2, [r3, #20]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a578:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4618      	mov	r0, r3
 800a580:	f006 fb52 	bl	8010c28 <USB_ReadInterrupts>
 800a584:	4603      	mov	r3, r0
 800a586:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a58a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a58e:	d112      	bne.n	800a5b6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a590:	69fb      	ldr	r3, [r7, #28]
 800a592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	f003 0301 	and.w	r3, r3, #1
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d102      	bne.n	800a5a6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f00d fb2d 	bl	8017c00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	695a      	ldr	r2, [r3, #20]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a5b4:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f006 fb34 	bl	8010c28 <USB_ReadInterrupts>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a5ca:	d121      	bne.n	800a610 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	695a      	ldr	r2, [r3, #20]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800a5da:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d111      	bne.n	800a60a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2201      	movs	r2, #1
 800a5ea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5f4:	089b      	lsrs	r3, r3, #2
 800a5f6:	f003 020f 	and.w	r2, r3, #15
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a600:	2101      	movs	r1, #1
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f00d fd1a 	bl	801803c <HAL_PCDEx_LPM_Callback>
 800a608:	e002      	b.n	800a610 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f00d faf8 	bl	8017c00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4618      	mov	r0, r3
 800a616:	f006 fb07 	bl	8010c28 <USB_ReadInterrupts>
 800a61a:	4603      	mov	r3, r0
 800a61c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a624:	f040 80b7 	bne.w	800a796 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	69fa      	ldr	r2, [r7, #28]
 800a632:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a636:	f023 0301 	bic.w	r3, r3, #1
 800a63a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	2110      	movs	r1, #16
 800a642:	4618      	mov	r0, r3
 800a644:	f005 face 	bl	800fbe4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a648:	2300      	movs	r3, #0
 800a64a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a64c:	e046      	b.n	800a6dc <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a650:	015a      	lsls	r2, r3, #5
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	4413      	add	r3, r2
 800a656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a65a:	461a      	mov	r2, r3
 800a65c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a660:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a664:	015a      	lsls	r2, r3, #5
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	4413      	add	r3, r2
 800a66a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a672:	0151      	lsls	r1, r2, #5
 800a674:	69fa      	ldr	r2, [r7, #28]
 800a676:	440a      	add	r2, r1
 800a678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a67c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a680:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a684:	015a      	lsls	r2, r3, #5
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	4413      	add	r3, r2
 800a68a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a68e:	461a      	mov	r2, r3
 800a690:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a694:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a698:	015a      	lsls	r2, r3, #5
 800a69a:	69fb      	ldr	r3, [r7, #28]
 800a69c:	4413      	add	r3, r2
 800a69e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6a6:	0151      	lsls	r1, r2, #5
 800a6a8:	69fa      	ldr	r2, [r7, #28]
 800a6aa:	440a      	add	r2, r1
 800a6ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a6b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b8:	015a      	lsls	r2, r3, #5
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	4413      	add	r3, r2
 800a6be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6c6:	0151      	lsls	r1, r2, #5
 800a6c8:	69fa      	ldr	r2, [r7, #28]
 800a6ca:	440a      	add	r2, r1
 800a6cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a6d4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d8:	3301      	adds	r3, #1
 800a6da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	685b      	ldr	r3, [r3, #4]
 800a6e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6e2:	429a      	cmp	r2, r3
 800a6e4:	d3b3      	bcc.n	800a64e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a6e6:	69fb      	ldr	r3, [r7, #28]
 800a6e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6ec:	69db      	ldr	r3, [r3, #28]
 800a6ee:	69fa      	ldr	r2, [r7, #28]
 800a6f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6f4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a6f8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d016      	beq.n	800a730 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a702:	69fb      	ldr	r3, [r7, #28]
 800a704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a708:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a70c:	69fa      	ldr	r2, [r7, #28]
 800a70e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a712:	f043 030b 	orr.w	r3, r3, #11
 800a716:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a71a:	69fb      	ldr	r3, [r7, #28]
 800a71c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a722:	69fa      	ldr	r2, [r7, #28]
 800a724:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a728:	f043 030b 	orr.w	r3, r3, #11
 800a72c:	6453      	str	r3, [r2, #68]	; 0x44
 800a72e:	e015      	b.n	800a75c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a730:	69fb      	ldr	r3, [r7, #28]
 800a732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a736:	695b      	ldr	r3, [r3, #20]
 800a738:	69fa      	ldr	r2, [r7, #28]
 800a73a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a73e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a742:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a746:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a74e:	691b      	ldr	r3, [r3, #16]
 800a750:	69fa      	ldr	r2, [r7, #28]
 800a752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a756:	f043 030b 	orr.w	r3, r3, #11
 800a75a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	69fa      	ldr	r2, [r7, #28]
 800a766:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a76a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a76e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6818      	ldr	r0, [r3, #0]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	691b      	ldr	r3, [r3, #16]
 800a778:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a780:	461a      	mov	r2, r3
 800a782:	f006 fb15 	bl	8010db0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	695a      	ldr	r2, [r3, #20]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a794:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4618      	mov	r0, r3
 800a79c:	f006 fa44 	bl	8010c28 <USB_ReadInterrupts>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a7a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7aa:	d124      	bne.n	800a7f6 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f006 fada 	bl	8010d6a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f005 fa8f 	bl	800fcde <USB_GetDevSpeed>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681c      	ldr	r4, [r3, #0]
 800a7cc:	f000 ff40 	bl	800b650 <HAL_RCC_GetHCLKFreq>
 800a7d0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	461a      	mov	r2, r3
 800a7da:	4620      	mov	r0, r4
 800a7dc:	f004 ff94 	bl	800f708 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f00d f9e4 	bl	8017bae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	695a      	ldr	r2, [r3, #20]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a7f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f006 fa14 	bl	8010c28 <USB_ReadInterrupts>
 800a800:	4603      	mov	r3, r0
 800a802:	f003 0308 	and.w	r3, r3, #8
 800a806:	2b08      	cmp	r3, #8
 800a808:	d10a      	bne.n	800a820 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f00d f9c1 	bl	8017b92 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	695a      	ldr	r2, [r3, #20]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f002 0208 	and.w	r2, r2, #8
 800a81e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	4618      	mov	r0, r3
 800a826:	f006 f9ff 	bl	8010c28 <USB_ReadInterrupts>
 800a82a:	4603      	mov	r3, r0
 800a82c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a830:	2b80      	cmp	r3, #128	; 0x80
 800a832:	d122      	bne.n	800a87a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800a834:	6a3b      	ldr	r3, [r7, #32]
 800a836:	699b      	ldr	r3, [r3, #24]
 800a838:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a83c:	6a3b      	ldr	r3, [r7, #32]
 800a83e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a840:	2301      	movs	r3, #1
 800a842:	627b      	str	r3, [r7, #36]	; 0x24
 800a844:	e014      	b.n	800a870 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800a846:	6879      	ldr	r1, [r7, #4]
 800a848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a84a:	4613      	mov	r3, r2
 800a84c:	00db      	lsls	r3, r3, #3
 800a84e:	4413      	add	r3, r2
 800a850:	009b      	lsls	r3, r3, #2
 800a852:	440b      	add	r3, r1
 800a854:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d105      	bne.n	800a86a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800a85e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a860:	b2db      	uxtb	r3, r3
 800a862:	4619      	mov	r1, r3
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 fb27 	bl	800aeb8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a86c:	3301      	adds	r3, #1
 800a86e:	627b      	str	r3, [r7, #36]	; 0x24
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a876:	429a      	cmp	r2, r3
 800a878:	d3e5      	bcc.n	800a846 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	4618      	mov	r0, r3
 800a880:	f006 f9d2 	bl	8010c28 <USB_ReadInterrupts>
 800a884:	4603      	mov	r3, r0
 800a886:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a88a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a88e:	d13b      	bne.n	800a908 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a890:	2301      	movs	r3, #1
 800a892:	627b      	str	r3, [r7, #36]	; 0x24
 800a894:	e02b      	b.n	800a8ee <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800a896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a898:	015a      	lsls	r2, r3, #5
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	4413      	add	r3, r2
 800a89e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a8a6:	6879      	ldr	r1, [r7, #4]
 800a8a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8aa:	4613      	mov	r3, r2
 800a8ac:	00db      	lsls	r3, r3, #3
 800a8ae:	4413      	add	r3, r2
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	440b      	add	r3, r1
 800a8b4:	3340      	adds	r3, #64	; 0x40
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d115      	bne.n	800a8e8 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800a8bc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	da12      	bge.n	800a8e8 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800a8c2:	6879      	ldr	r1, [r7, #4]
 800a8c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	00db      	lsls	r3, r3, #3
 800a8ca:	4413      	add	r3, r2
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	440b      	add	r3, r1
 800a8d0:	333f      	adds	r3, #63	; 0x3f
 800a8d2:	2201      	movs	r2, #1
 800a8d4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800a8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d8:	b2db      	uxtb	r3, r3
 800a8da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a8de:	b2db      	uxtb	r3, r3
 800a8e0:	4619      	mov	r1, r3
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 fae8 	bl	800aeb8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	627b      	str	r3, [r7, #36]	; 0x24
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d3ce      	bcc.n	800a896 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	695a      	ldr	r2, [r3, #20]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a906:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4618      	mov	r0, r3
 800a90e:	f006 f98b 	bl	8010c28 <USB_ReadInterrupts>
 800a912:	4603      	mov	r3, r0
 800a914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a918:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a91c:	d155      	bne.n	800a9ca <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a91e:	2301      	movs	r3, #1
 800a920:	627b      	str	r3, [r7, #36]	; 0x24
 800a922:	e045      	b.n	800a9b0 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800a924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a926:	015a      	lsls	r2, r3, #5
 800a928:	69fb      	ldr	r3, [r7, #28]
 800a92a:	4413      	add	r3, r2
 800a92c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a934:	6879      	ldr	r1, [r7, #4]
 800a936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a938:	4613      	mov	r3, r2
 800a93a:	00db      	lsls	r3, r3, #3
 800a93c:	4413      	add	r3, r2
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	440b      	add	r3, r1
 800a942:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a946:	781b      	ldrb	r3, [r3, #0]
 800a948:	2b01      	cmp	r3, #1
 800a94a:	d12e      	bne.n	800a9aa <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a94c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800a94e:	2b00      	cmp	r3, #0
 800a950:	da2b      	bge.n	800a9aa <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800a952:	69bb      	ldr	r3, [r7, #24]
 800a954:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800a95e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800a962:	429a      	cmp	r2, r3
 800a964:	d121      	bne.n	800a9aa <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800a966:	6879      	ldr	r1, [r7, #4]
 800a968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a96a:	4613      	mov	r3, r2
 800a96c:	00db      	lsls	r3, r3, #3
 800a96e:	4413      	add	r3, r2
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	440b      	add	r3, r1
 800a974:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800a978:	2201      	movs	r2, #1
 800a97a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800a97c:	6a3b      	ldr	r3, [r7, #32]
 800a97e:	699b      	ldr	r3, [r3, #24]
 800a980:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a984:	6a3b      	ldr	r3, [r7, #32]
 800a986:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800a988:	6a3b      	ldr	r3, [r7, #32]
 800a98a:	695b      	ldr	r3, [r3, #20]
 800a98c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a990:	2b00      	cmp	r3, #0
 800a992:	d10a      	bne.n	800a9aa <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800a994:	69fb      	ldr	r3, [r7, #28]
 800a996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	69fa      	ldr	r2, [r7, #28]
 800a99e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a9a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a9a6:	6053      	str	r3, [r2, #4]
            break;
 800a9a8:	e007      	b.n	800a9ba <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800a9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	627b      	str	r3, [r7, #36]	; 0x24
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d3b4      	bcc.n	800a924 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	695a      	ldr	r2, [r3, #20]
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a9c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f006 f92a 	bl	8010c28 <USB_ReadInterrupts>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a9da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9de:	d10a      	bne.n	800a9f6 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f00d f965 	bl	8017cb0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	695a      	ldr	r2, [r3, #20]
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a9f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f006 f914 	bl	8010c28 <USB_ReadInterrupts>
 800aa00:	4603      	mov	r3, r0
 800aa02:	f003 0304 	and.w	r3, r3, #4
 800aa06:	2b04      	cmp	r3, #4
 800aa08:	d115      	bne.n	800aa36 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	f003 0304 	and.w	r3, r3, #4
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d002      	beq.n	800aa22 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f00d f955 	bl	8017ccc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	6859      	ldr	r1, [r3, #4]
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	69ba      	ldr	r2, [r7, #24]
 800aa2e:	430a      	orrs	r2, r1
 800aa30:	605a      	str	r2, [r3, #4]
 800aa32:	e000      	b.n	800aa36 <HAL_PCD_IRQHandler+0x992>
      return;
 800aa34:	bf00      	nop
    }
  }
}
 800aa36:	3734      	adds	r7, #52	; 0x34
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd90      	pop	{r4, r7, pc}

0800aa3c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	460b      	mov	r3, r1
 800aa46:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800aa4e:	2b01      	cmp	r3, #1
 800aa50:	d101      	bne.n	800aa56 <HAL_PCD_SetAddress+0x1a>
 800aa52:	2302      	movs	r3, #2
 800aa54:	e013      	b.n	800aa7e <HAL_PCD_SetAddress+0x42>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2201      	movs	r2, #1
 800aa5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	78fa      	ldrb	r2, [r7, #3]
 800aa62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	78fa      	ldrb	r2, [r7, #3]
 800aa6c:	4611      	mov	r1, r2
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f006 f872 	bl	8010b58 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2200      	movs	r2, #0
 800aa78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800aa7c:	2300      	movs	r3, #0
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b084      	sub	sp, #16
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	4608      	mov	r0, r1
 800aa90:	4611      	mov	r1, r2
 800aa92:	461a      	mov	r2, r3
 800aa94:	4603      	mov	r3, r0
 800aa96:	70fb      	strb	r3, [r7, #3]
 800aa98:	460b      	mov	r3, r1
 800aa9a:	803b      	strh	r3, [r7, #0]
 800aa9c:	4613      	mov	r3, r2
 800aa9e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800aaa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	da0f      	bge.n	800aacc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aaac:	78fb      	ldrb	r3, [r7, #3]
 800aaae:	f003 020f 	and.w	r2, r3, #15
 800aab2:	4613      	mov	r3, r2
 800aab4:	00db      	lsls	r3, r3, #3
 800aab6:	4413      	add	r3, r2
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	3338      	adds	r3, #56	; 0x38
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	4413      	add	r3, r2
 800aac0:	3304      	adds	r3, #4
 800aac2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2201      	movs	r2, #1
 800aac8:	705a      	strb	r2, [r3, #1]
 800aaca:	e00f      	b.n	800aaec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aacc:	78fb      	ldrb	r3, [r7, #3]
 800aace:	f003 020f 	and.w	r2, r3, #15
 800aad2:	4613      	mov	r3, r2
 800aad4:	00db      	lsls	r3, r3, #3
 800aad6:	4413      	add	r3, r2
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	4413      	add	r3, r2
 800aae2:	3304      	adds	r3, #4
 800aae4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	2200      	movs	r2, #0
 800aaea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800aaec:	78fb      	ldrb	r3, [r7, #3]
 800aaee:	f003 030f 	and.w	r3, r3, #15
 800aaf2:	b2da      	uxtb	r2, r3
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800aaf8:	883a      	ldrh	r2, [r7, #0]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	78ba      	ldrb	r2, [r7, #2]
 800ab02:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	785b      	ldrb	r3, [r3, #1]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d004      	beq.n	800ab16 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	b29a      	uxth	r2, r3
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ab16:	78bb      	ldrb	r3, [r7, #2]
 800ab18:	2b02      	cmp	r3, #2
 800ab1a:	d102      	bne.n	800ab22 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	2200      	movs	r2, #0
 800ab20:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d101      	bne.n	800ab30 <HAL_PCD_EP_Open+0xaa>
 800ab2c:	2302      	movs	r3, #2
 800ab2e:	e00e      	b.n	800ab4e <HAL_PCD_EP_Open+0xc8>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2201      	movs	r2, #1
 800ab34:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	68f9      	ldr	r1, [r7, #12]
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f005 f8f2 	bl	800fd28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	2200      	movs	r2, #0
 800ab48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800ab4c:	7afb      	ldrb	r3, [r7, #11]
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3710      	adds	r7, #16
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}

0800ab56 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ab56:	b580      	push	{r7, lr}
 800ab58:	b084      	sub	sp, #16
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
 800ab5e:	460b      	mov	r3, r1
 800ab60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ab62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	da0f      	bge.n	800ab8a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ab6a:	78fb      	ldrb	r3, [r7, #3]
 800ab6c:	f003 020f 	and.w	r2, r3, #15
 800ab70:	4613      	mov	r3, r2
 800ab72:	00db      	lsls	r3, r3, #3
 800ab74:	4413      	add	r3, r2
 800ab76:	009b      	lsls	r3, r3, #2
 800ab78:	3338      	adds	r3, #56	; 0x38
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	4413      	add	r3, r2
 800ab7e:	3304      	adds	r3, #4
 800ab80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2201      	movs	r2, #1
 800ab86:	705a      	strb	r2, [r3, #1]
 800ab88:	e00f      	b.n	800abaa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ab8a:	78fb      	ldrb	r3, [r7, #3]
 800ab8c:	f003 020f 	and.w	r2, r3, #15
 800ab90:	4613      	mov	r3, r2
 800ab92:	00db      	lsls	r3, r3, #3
 800ab94:	4413      	add	r3, r2
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	4413      	add	r3, r2
 800aba0:	3304      	adds	r3, #4
 800aba2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2200      	movs	r2, #0
 800aba8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800abaa:	78fb      	ldrb	r3, [r7, #3]
 800abac:	f003 030f 	and.w	r3, r3, #15
 800abb0:	b2da      	uxtb	r2, r3
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d101      	bne.n	800abc4 <HAL_PCD_EP_Close+0x6e>
 800abc0:	2302      	movs	r3, #2
 800abc2:	e00e      	b.n	800abe2 <HAL_PCD_EP_Close+0x8c>
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2201      	movs	r2, #1
 800abc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	68f9      	ldr	r1, [r7, #12]
 800abd2:	4618      	mov	r0, r3
 800abd4:	f005 f930 	bl	800fe38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2200      	movs	r2, #0
 800abdc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800abe0:	2300      	movs	r3, #0
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3710      	adds	r7, #16
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd80      	pop	{r7, pc}

0800abea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800abea:	b580      	push	{r7, lr}
 800abec:	b086      	sub	sp, #24
 800abee:	af00      	add	r7, sp, #0
 800abf0:	60f8      	str	r0, [r7, #12]
 800abf2:	607a      	str	r2, [r7, #4]
 800abf4:	603b      	str	r3, [r7, #0]
 800abf6:	460b      	mov	r3, r1
 800abf8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800abfa:	7afb      	ldrb	r3, [r7, #11]
 800abfc:	f003 020f 	and.w	r2, r3, #15
 800ac00:	4613      	mov	r3, r2
 800ac02:	00db      	lsls	r3, r3, #3
 800ac04:	4413      	add	r3, r2
 800ac06:	009b      	lsls	r3, r3, #2
 800ac08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	4413      	add	r3, r2
 800ac10:	3304      	adds	r3, #4
 800ac12:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	683a      	ldr	r2, [r7, #0]
 800ac1e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	2200      	movs	r2, #0
 800ac24:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ac2c:	7afb      	ldrb	r3, [r7, #11]
 800ac2e:	f003 030f 	and.w	r3, r3, #15
 800ac32:	b2da      	uxtb	r2, r3
 800ac34:	697b      	ldr	r3, [r7, #20]
 800ac36:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d102      	bne.n	800ac46 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ac46:	7afb      	ldrb	r3, [r7, #11]
 800ac48:	f003 030f 	and.w	r3, r3, #15
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d109      	bne.n	800ac64 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	6818      	ldr	r0, [r3, #0]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	691b      	ldr	r3, [r3, #16]
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	6979      	ldr	r1, [r7, #20]
 800ac5e:	f005 fc0f 	bl	8010480 <USB_EP0StartXfer>
 800ac62:	e008      	b.n	800ac76 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6818      	ldr	r0, [r3, #0]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	691b      	ldr	r3, [r3, #16]
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	461a      	mov	r2, r3
 800ac70:	6979      	ldr	r1, [r7, #20]
 800ac72:	f005 f9bd 	bl	800fff0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3718      	adds	r7, #24
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ac80:	b480      	push	{r7}
 800ac82:	b083      	sub	sp, #12
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	460b      	mov	r3, r1
 800ac8a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ac8c:	78fb      	ldrb	r3, [r7, #3]
 800ac8e:	f003 020f 	and.w	r2, r3, #15
 800ac92:	6879      	ldr	r1, [r7, #4]
 800ac94:	4613      	mov	r3, r2
 800ac96:	00db      	lsls	r3, r3, #3
 800ac98:	4413      	add	r3, r2
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	440b      	add	r3, r1
 800ac9e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800aca2:	681b      	ldr	r3, [r3, #0]
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b086      	sub	sp, #24
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	60f8      	str	r0, [r7, #12]
 800acb8:	607a      	str	r2, [r7, #4]
 800acba:	603b      	str	r3, [r7, #0]
 800acbc:	460b      	mov	r3, r1
 800acbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800acc0:	7afb      	ldrb	r3, [r7, #11]
 800acc2:	f003 020f 	and.w	r2, r3, #15
 800acc6:	4613      	mov	r3, r2
 800acc8:	00db      	lsls	r3, r3, #3
 800acca:	4413      	add	r3, r2
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	3338      	adds	r3, #56	; 0x38
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	4413      	add	r3, r2
 800acd4:	3304      	adds	r3, #4
 800acd6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	683a      	ldr	r2, [r7, #0]
 800ace2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	2200      	movs	r2, #0
 800ace8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	2201      	movs	r2, #1
 800acee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800acf0:	7afb      	ldrb	r3, [r7, #11]
 800acf2:	f003 030f 	and.w	r3, r3, #15
 800acf6:	b2da      	uxtb	r2, r3
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	691b      	ldr	r3, [r3, #16]
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d102      	bne.n	800ad0a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ad0a:	7afb      	ldrb	r3, [r7, #11]
 800ad0c:	f003 030f 	and.w	r3, r3, #15
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d109      	bne.n	800ad28 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	6818      	ldr	r0, [r3, #0]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	691b      	ldr	r3, [r3, #16]
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	461a      	mov	r2, r3
 800ad20:	6979      	ldr	r1, [r7, #20]
 800ad22:	f005 fbad 	bl	8010480 <USB_EP0StartXfer>
 800ad26:	e008      	b.n	800ad3a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	6818      	ldr	r0, [r3, #0]
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	691b      	ldr	r3, [r3, #16]
 800ad30:	b2db      	uxtb	r3, r3
 800ad32:	461a      	mov	r2, r3
 800ad34:	6979      	ldr	r1, [r7, #20]
 800ad36:	f005 f95b 	bl	800fff0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ad3a:	2300      	movs	r3, #0
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3718      	adds	r7, #24
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ad50:	78fb      	ldrb	r3, [r7, #3]
 800ad52:	f003 020f 	and.w	r2, r3, #15
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d901      	bls.n	800ad62 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e050      	b.n	800ae04 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ad62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	da0f      	bge.n	800ad8a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad6a:	78fb      	ldrb	r3, [r7, #3]
 800ad6c:	f003 020f 	and.w	r2, r3, #15
 800ad70:	4613      	mov	r3, r2
 800ad72:	00db      	lsls	r3, r3, #3
 800ad74:	4413      	add	r3, r2
 800ad76:	009b      	lsls	r3, r3, #2
 800ad78:	3338      	adds	r3, #56	; 0x38
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	3304      	adds	r3, #4
 800ad80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2201      	movs	r2, #1
 800ad86:	705a      	strb	r2, [r3, #1]
 800ad88:	e00d      	b.n	800ada6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ad8a:	78fa      	ldrb	r2, [r7, #3]
 800ad8c:	4613      	mov	r3, r2
 800ad8e:	00db      	lsls	r3, r3, #3
 800ad90:	4413      	add	r3, r2
 800ad92:	009b      	lsls	r3, r3, #2
 800ad94:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ad98:	687a      	ldr	r2, [r7, #4]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	3304      	adds	r3, #4
 800ad9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2200      	movs	r2, #0
 800ada4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2201      	movs	r2, #1
 800adaa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800adac:	78fb      	ldrb	r3, [r7, #3]
 800adae:	f003 030f 	and.w	r3, r3, #15
 800adb2:	b2da      	uxtb	r2, r3
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d101      	bne.n	800adc6 <HAL_PCD_EP_SetStall+0x82>
 800adc2:	2302      	movs	r3, #2
 800adc4:	e01e      	b.n	800ae04 <HAL_PCD_EP_SetStall+0xc0>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2201      	movs	r2, #1
 800adca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	68f9      	ldr	r1, [r7, #12]
 800add4:	4618      	mov	r0, r3
 800add6:	f005 fdeb 	bl	80109b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800adda:	78fb      	ldrb	r3, [r7, #3]
 800addc:	f003 030f 	and.w	r3, r3, #15
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10a      	bne.n	800adfa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6818      	ldr	r0, [r3, #0]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	691b      	ldr	r3, [r3, #16]
 800adec:	b2d9      	uxtb	r1, r3
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800adf4:	461a      	mov	r2, r3
 800adf6:	f005 ffdb 	bl	8010db0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2200      	movs	r2, #0
 800adfe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800ae02:	2300      	movs	r3, #0
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	3710      	adds	r7, #16
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	bd80      	pop	{r7, pc}

0800ae0c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b084      	sub	sp, #16
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
 800ae14:	460b      	mov	r3, r1
 800ae16:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ae18:	78fb      	ldrb	r3, [r7, #3]
 800ae1a:	f003 020f 	and.w	r2, r3, #15
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	685b      	ldr	r3, [r3, #4]
 800ae22:	429a      	cmp	r2, r3
 800ae24:	d901      	bls.n	800ae2a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800ae26:	2301      	movs	r3, #1
 800ae28:	e042      	b.n	800aeb0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ae2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	da0f      	bge.n	800ae52 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ae32:	78fb      	ldrb	r3, [r7, #3]
 800ae34:	f003 020f 	and.w	r2, r3, #15
 800ae38:	4613      	mov	r3, r2
 800ae3a:	00db      	lsls	r3, r3, #3
 800ae3c:	4413      	add	r3, r2
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	3338      	adds	r3, #56	; 0x38
 800ae42:	687a      	ldr	r2, [r7, #4]
 800ae44:	4413      	add	r3, r2
 800ae46:	3304      	adds	r3, #4
 800ae48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	705a      	strb	r2, [r3, #1]
 800ae50:	e00f      	b.n	800ae72 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ae52:	78fb      	ldrb	r3, [r7, #3]
 800ae54:	f003 020f 	and.w	r2, r3, #15
 800ae58:	4613      	mov	r3, r2
 800ae5a:	00db      	lsls	r3, r3, #3
 800ae5c:	4413      	add	r3, r2
 800ae5e:	009b      	lsls	r3, r3, #2
 800ae60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	4413      	add	r3, r2
 800ae68:	3304      	adds	r3, #4
 800ae6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2200      	movs	r2, #0
 800ae76:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ae78:	78fb      	ldrb	r3, [r7, #3]
 800ae7a:	f003 030f 	and.w	r3, r3, #15
 800ae7e:	b2da      	uxtb	r2, r3
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d101      	bne.n	800ae92 <HAL_PCD_EP_ClrStall+0x86>
 800ae8e:	2302      	movs	r3, #2
 800ae90:	e00e      	b.n	800aeb0 <HAL_PCD_EP_ClrStall+0xa4>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2201      	movs	r2, #1
 800ae96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	68f9      	ldr	r1, [r7, #12]
 800aea0:	4618      	mov	r0, r3
 800aea2:	f005 fdf3 	bl	8010a8c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800aeae:	2300      	movs	r3, #0
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3710      	adds	r7, #16
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	460b      	mov	r3, r1
 800aec2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800aec4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	da0c      	bge.n	800aee6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aecc:	78fb      	ldrb	r3, [r7, #3]
 800aece:	f003 020f 	and.w	r2, r3, #15
 800aed2:	4613      	mov	r3, r2
 800aed4:	00db      	lsls	r3, r3, #3
 800aed6:	4413      	add	r3, r2
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	3338      	adds	r3, #56	; 0x38
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	4413      	add	r3, r2
 800aee0:	3304      	adds	r3, #4
 800aee2:	60fb      	str	r3, [r7, #12]
 800aee4:	e00c      	b.n	800af00 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800aee6:	78fb      	ldrb	r3, [r7, #3]
 800aee8:	f003 020f 	and.w	r2, r3, #15
 800aeec:	4613      	mov	r3, r2
 800aeee:	00db      	lsls	r3, r3, #3
 800aef0:	4413      	add	r3, r2
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800aef8:	687a      	ldr	r2, [r7, #4]
 800aefa:	4413      	add	r3, r2
 800aefc:	3304      	adds	r3, #4
 800aefe:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	68f9      	ldr	r1, [r7, #12]
 800af06:	4618      	mov	r0, r3
 800af08:	f005 fc12 	bl	8010730 <USB_EPStopXfer>
 800af0c:	4603      	mov	r3, r0
 800af0e:	72fb      	strb	r3, [r7, #11]

  return ret;
 800af10:	7afb      	ldrb	r3, [r7, #11]
}
 800af12:	4618      	mov	r0, r3
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b082      	sub	sp, #8
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
 800af22:	460b      	mov	r3, r1
 800af24:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d101      	bne.n	800af34 <HAL_PCD_EP_Flush+0x1a>
 800af30:	2302      	movs	r3, #2
 800af32:	e01b      	b.n	800af6c <HAL_PCD_EP_Flush+0x52>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2201      	movs	r2, #1
 800af38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 800af3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af40:	2b00      	cmp	r3, #0
 800af42:	da09      	bge.n	800af58 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681a      	ldr	r2, [r3, #0]
 800af48:	78fb      	ldrb	r3, [r7, #3]
 800af4a:	f003 030f 	and.w	r3, r3, #15
 800af4e:	4619      	mov	r1, r3
 800af50:	4610      	mov	r0, r2
 800af52:	f004 fe47 	bl	800fbe4 <USB_FlushTxFifo>
 800af56:	e004      	b.n	800af62 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	4618      	mov	r0, r3
 800af5e:	f004 fe75 	bl	800fc4c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800af6a:	2300      	movs	r3, #0
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3708      	adds	r7, #8
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b08a      	sub	sp, #40	; 0x28
 800af78:	af02      	add	r7, sp, #8
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800af88:	683a      	ldr	r2, [r7, #0]
 800af8a:	4613      	mov	r3, r2
 800af8c:	00db      	lsls	r3, r3, #3
 800af8e:	4413      	add	r3, r2
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	3338      	adds	r3, #56	; 0x38
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	4413      	add	r3, r2
 800af98:	3304      	adds	r3, #4
 800af9a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	6a1a      	ldr	r2, [r3, #32]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	699b      	ldr	r3, [r3, #24]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d901      	bls.n	800afac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800afa8:	2301      	movs	r3, #1
 800afaa:	e06c      	b.n	800b086 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	699a      	ldr	r2, [r3, #24]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	6a1b      	ldr	r3, [r3, #32]
 800afb4:	1ad3      	subs	r3, r2, r3
 800afb6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	68db      	ldr	r3, [r3, #12]
 800afbc:	69fa      	ldr	r2, [r7, #28]
 800afbe:	429a      	cmp	r2, r3
 800afc0:	d902      	bls.n	800afc8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	68db      	ldr	r3, [r3, #12]
 800afc6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800afc8:	69fb      	ldr	r3, [r7, #28]
 800afca:	3303      	adds	r3, #3
 800afcc:	089b      	lsrs	r3, r3, #2
 800afce:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800afd0:	e02b      	b.n	800b02a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	699a      	ldr	r2, [r3, #24]
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	6a1b      	ldr	r3, [r3, #32]
 800afda:	1ad3      	subs	r3, r2, r3
 800afdc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	68db      	ldr	r3, [r3, #12]
 800afe2:	69fa      	ldr	r2, [r7, #28]
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d902      	bls.n	800afee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800afee:	69fb      	ldr	r3, [r7, #28]
 800aff0:	3303      	adds	r3, #3
 800aff2:	089b      	lsrs	r3, r3, #2
 800aff4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	6919      	ldr	r1, [r3, #16]
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	b2da      	uxtb	r2, r3
 800affe:	69fb      	ldr	r3, [r7, #28]
 800b000:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b006:	b2db      	uxtb	r3, r3
 800b008:	9300      	str	r3, [sp, #0]
 800b00a:	4603      	mov	r3, r0
 800b00c:	6978      	ldr	r0, [r7, #20]
 800b00e:	f005 fc39 	bl	8010884 <USB_WritePacket>

    ep->xfer_buff  += len;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	691a      	ldr	r2, [r3, #16]
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	441a      	add	r2, r3
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	6a1a      	ldr	r2, [r3, #32]
 800b022:	69fb      	ldr	r3, [r7, #28]
 800b024:	441a      	add	r2, r3
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	015a      	lsls	r2, r3, #5
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	4413      	add	r3, r2
 800b032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b036:	699b      	ldr	r3, [r3, #24]
 800b038:	b29b      	uxth	r3, r3
 800b03a:	69ba      	ldr	r2, [r7, #24]
 800b03c:	429a      	cmp	r2, r3
 800b03e:	d809      	bhi.n	800b054 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	6a1a      	ldr	r2, [r3, #32]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b048:	429a      	cmp	r2, r3
 800b04a:	d203      	bcs.n	800b054 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	699b      	ldr	r3, [r3, #24]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d1be      	bne.n	800afd2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	699a      	ldr	r2, [r3, #24]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	6a1b      	ldr	r3, [r3, #32]
 800b05c:	429a      	cmp	r2, r3
 800b05e:	d811      	bhi.n	800b084 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	f003 030f 	and.w	r3, r3, #15
 800b066:	2201      	movs	r2, #1
 800b068:	fa02 f303 	lsl.w	r3, r2, r3
 800b06c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b074:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	43db      	mvns	r3, r3
 800b07a:	6939      	ldr	r1, [r7, #16]
 800b07c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b080:	4013      	ands	r3, r2
 800b082:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800b084:	2300      	movs	r3, #0
}
 800b086:	4618      	mov	r0, r3
 800b088:	3720      	adds	r7, #32
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
	...

0800b090 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b088      	sub	sp, #32
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0a0:	69fb      	ldr	r3, [r7, #28]
 800b0a2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b0a4:	69fb      	ldr	r3, [r7, #28]
 800b0a6:	333c      	adds	r3, #60	; 0x3c
 800b0a8:	3304      	adds	r3, #4
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	015a      	lsls	r2, r3, #5
 800b0b2:	69bb      	ldr	r3, [r7, #24]
 800b0b4:	4413      	add	r3, r2
 800b0b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0ba:	689b      	ldr	r3, [r3, #8]
 800b0bc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	691b      	ldr	r3, [r3, #16]
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d17b      	bne.n	800b1be <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	f003 0308 	and.w	r3, r3, #8
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d015      	beq.n	800b0fc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	4a61      	ldr	r2, [pc, #388]	; (800b258 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	f240 80b9 	bls.w	800b24c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f000 80b3 	beq.w	800b24c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	015a      	lsls	r2, r3, #5
 800b0ea:	69bb      	ldr	r3, [r7, #24]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0f8:	6093      	str	r3, [r2, #8]
 800b0fa:	e0a7      	b.n	800b24c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	f003 0320 	and.w	r3, r3, #32
 800b102:	2b00      	cmp	r3, #0
 800b104:	d009      	beq.n	800b11a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	015a      	lsls	r2, r3, #5
 800b10a:	69bb      	ldr	r3, [r7, #24]
 800b10c:	4413      	add	r3, r2
 800b10e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b112:	461a      	mov	r2, r3
 800b114:	2320      	movs	r3, #32
 800b116:	6093      	str	r3, [r2, #8]
 800b118:	e098      	b.n	800b24c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800b11a:	693b      	ldr	r3, [r7, #16]
 800b11c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b120:	2b00      	cmp	r3, #0
 800b122:	f040 8093 	bne.w	800b24c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	4a4b      	ldr	r2, [pc, #300]	; (800b258 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d90f      	bls.n	800b14e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b134:	2b00      	cmp	r3, #0
 800b136:	d00a      	beq.n	800b14e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	015a      	lsls	r2, r3, #5
 800b13c:	69bb      	ldr	r3, [r7, #24]
 800b13e:	4413      	add	r3, r2
 800b140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b144:	461a      	mov	r2, r3
 800b146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b14a:	6093      	str	r3, [r2, #8]
 800b14c:	e07e      	b.n	800b24c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800b14e:	683a      	ldr	r2, [r7, #0]
 800b150:	4613      	mov	r3, r2
 800b152:	00db      	lsls	r3, r3, #3
 800b154:	4413      	add	r3, r2
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b15c:	687a      	ldr	r2, [r7, #4]
 800b15e:	4413      	add	r3, r2
 800b160:	3304      	adds	r3, #4
 800b162:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	69da      	ldr	r2, [r3, #28]
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	0159      	lsls	r1, r3, #5
 800b16c:	69bb      	ldr	r3, [r7, #24]
 800b16e:	440b      	add	r3, r1
 800b170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b174:	691b      	ldr	r3, [r3, #16]
 800b176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b17a:	1ad2      	subs	r2, r2, r3
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d114      	bne.n	800b1b0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	699b      	ldr	r3, [r3, #24]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d109      	bne.n	800b1a2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6818      	ldr	r0, [r3, #0]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b198:	461a      	mov	r2, r3
 800b19a:	2101      	movs	r1, #1
 800b19c:	f005 fe08 	bl	8010db0 <USB_EP0_OutStart>
 800b1a0:	e006      	b.n	800b1b0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	691a      	ldr	r2, [r3, #16]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	6a1b      	ldr	r3, [r3, #32]
 800b1aa:	441a      	add	r2, r3
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f00c fcb6 	bl	8017b28 <HAL_PCD_DataOutStageCallback>
 800b1bc:	e046      	b.n	800b24c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	4a26      	ldr	r2, [pc, #152]	; (800b25c <PCD_EP_OutXfrComplete_int+0x1cc>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d124      	bne.n	800b210 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d00a      	beq.n	800b1e6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	015a      	lsls	r2, r3, #5
 800b1d4:	69bb      	ldr	r3, [r7, #24]
 800b1d6:	4413      	add	r3, r2
 800b1d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1dc:	461a      	mov	r2, r3
 800b1de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b1e2:	6093      	str	r3, [r2, #8]
 800b1e4:	e032      	b.n	800b24c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	f003 0320 	and.w	r3, r3, #32
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d008      	beq.n	800b202 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	015a      	lsls	r2, r3, #5
 800b1f4:	69bb      	ldr	r3, [r7, #24]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	2320      	movs	r3, #32
 800b200:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	b2db      	uxtb	r3, r3
 800b206:	4619      	mov	r1, r3
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f00c fc8d 	bl	8017b28 <HAL_PCD_DataOutStageCallback>
 800b20e:	e01d      	b.n	800b24c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d114      	bne.n	800b240 <PCD_EP_OutXfrComplete_int+0x1b0>
 800b216:	6879      	ldr	r1, [r7, #4]
 800b218:	683a      	ldr	r2, [r7, #0]
 800b21a:	4613      	mov	r3, r2
 800b21c:	00db      	lsls	r3, r3, #3
 800b21e:	4413      	add	r3, r2
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	440b      	add	r3, r1
 800b224:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d108      	bne.n	800b240 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6818      	ldr	r0, [r3, #0]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b238:	461a      	mov	r2, r3
 800b23a:	2100      	movs	r1, #0
 800b23c:	f005 fdb8 	bl	8010db0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	b2db      	uxtb	r3, r3
 800b244:	4619      	mov	r1, r3
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f00c fc6e 	bl	8017b28 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800b24c:	2300      	movs	r3, #0
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3720      	adds	r7, #32
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	4f54300a 	.word	0x4f54300a
 800b25c:	4f54310a 	.word	0x4f54310a

0800b260 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b086      	sub	sp, #24
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	333c      	adds	r3, #60	; 0x3c
 800b278:	3304      	adds	r3, #4
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	015a      	lsls	r2, r3, #5
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	4413      	add	r3, r2
 800b286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b28a:	689b      	ldr	r3, [r3, #8]
 800b28c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	4a15      	ldr	r2, [pc, #84]	; (800b2e8 <PCD_EP_OutSetupPacket_int+0x88>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d90e      	bls.n	800b2b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d009      	beq.n	800b2b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	015a      	lsls	r2, r3, #5
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	4413      	add	r3, r2
 800b2a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ac:	461a      	mov	r2, r3
 800b2ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f00c fc25 	bl	8017b04 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	4a0a      	ldr	r2, [pc, #40]	; (800b2e8 <PCD_EP_OutSetupPacket_int+0x88>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d90c      	bls.n	800b2dc <PCD_EP_OutSetupPacket_int+0x7c>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	691b      	ldr	r3, [r3, #16]
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d108      	bne.n	800b2dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6818      	ldr	r0, [r3, #0]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b2d4:	461a      	mov	r2, r3
 800b2d6:	2101      	movs	r1, #1
 800b2d8:	f005 fd6a 	bl	8010db0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800b2dc:	2300      	movs	r3, #0
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3718      	adds	r7, #24
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	4f54300a 	.word	0x4f54300a

0800b2ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b085      	sub	sp, #20
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	460b      	mov	r3, r1
 800b2f6:	70fb      	strb	r3, [r7, #3]
 800b2f8:	4613      	mov	r3, r2
 800b2fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b302:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800b304:	78fb      	ldrb	r3, [r7, #3]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d107      	bne.n	800b31a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b30a:	883b      	ldrh	r3, [r7, #0]
 800b30c:	0419      	lsls	r1, r3, #16
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	68ba      	ldr	r2, [r7, #8]
 800b314:	430a      	orrs	r2, r1
 800b316:	629a      	str	r2, [r3, #40]	; 0x28
 800b318:	e028      	b.n	800b36c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b320:	0c1b      	lsrs	r3, r3, #16
 800b322:	68ba      	ldr	r2, [r7, #8]
 800b324:	4413      	add	r3, r2
 800b326:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b328:	2300      	movs	r3, #0
 800b32a:	73fb      	strb	r3, [r7, #15]
 800b32c:	e00d      	b.n	800b34a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	7bfb      	ldrb	r3, [r7, #15]
 800b334:	3340      	adds	r3, #64	; 0x40
 800b336:	009b      	lsls	r3, r3, #2
 800b338:	4413      	add	r3, r2
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	0c1b      	lsrs	r3, r3, #16
 800b33e:	68ba      	ldr	r2, [r7, #8]
 800b340:	4413      	add	r3, r2
 800b342:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b344:	7bfb      	ldrb	r3, [r7, #15]
 800b346:	3301      	adds	r3, #1
 800b348:	73fb      	strb	r3, [r7, #15]
 800b34a:	7bfa      	ldrb	r2, [r7, #15]
 800b34c:	78fb      	ldrb	r3, [r7, #3]
 800b34e:	3b01      	subs	r3, #1
 800b350:	429a      	cmp	r2, r3
 800b352:	d3ec      	bcc.n	800b32e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b354:	883b      	ldrh	r3, [r7, #0]
 800b356:	0418      	lsls	r0, r3, #16
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6819      	ldr	r1, [r3, #0]
 800b35c:	78fb      	ldrb	r3, [r7, #3]
 800b35e:	3b01      	subs	r3, #1
 800b360:	68ba      	ldr	r2, [r7, #8]
 800b362:	4302      	orrs	r2, r0
 800b364:	3340      	adds	r3, #64	; 0x40
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	440b      	add	r3, r1
 800b36a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b36c:	2300      	movs	r3, #0
}
 800b36e:	4618      	mov	r0, r3
 800b370:	3714      	adds	r7, #20
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr

0800b37a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b37a:	b480      	push	{r7}
 800b37c:	b083      	sub	sp, #12
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
 800b382:	460b      	mov	r3, r1
 800b384:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	887a      	ldrh	r2, [r7, #2]
 800b38c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b38e:	2300      	movs	r3, #0
}
 800b390:	4618      	mov	r0, r3
 800b392:	370c      	adds	r7, #12
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr

0800b39c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b085      	sub	sp, #20
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2201      	movs	r2, #1
 800b3ae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	699b      	ldr	r3, [r3, #24]
 800b3be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3ce:	f043 0303 	orr.w	r3, r3, #3
 800b3d2:	68fa      	ldr	r2, [r7, #12]
 800b3d4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800b3d6:	2300      	movs	r3, #0
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3714      	adds	r7, #20
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr

0800b3e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b082      	sub	sp, #8
 800b3e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	603b      	str	r3, [r7, #0]
 800b3f2:	4b20      	ldr	r3, [pc, #128]	; (800b474 <HAL_PWREx_EnableOverDrive+0x90>)
 800b3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3f6:	4a1f      	ldr	r2, [pc, #124]	; (800b474 <HAL_PWREx_EnableOverDrive+0x90>)
 800b3f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3fc:	6413      	str	r3, [r2, #64]	; 0x40
 800b3fe:	4b1d      	ldr	r3, [pc, #116]	; (800b474 <HAL_PWREx_EnableOverDrive+0x90>)
 800b400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b406:	603b      	str	r3, [r7, #0]
 800b408:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b40a:	4b1b      	ldr	r3, [pc, #108]	; (800b478 <HAL_PWREx_EnableOverDrive+0x94>)
 800b40c:	2201      	movs	r2, #1
 800b40e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b410:	f7fb fba4 	bl	8006b5c <HAL_GetTick>
 800b414:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b416:	e009      	b.n	800b42c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b418:	f7fb fba0 	bl	8006b5c <HAL_GetTick>
 800b41c:	4602      	mov	r2, r0
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	1ad3      	subs	r3, r2, r3
 800b422:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b426:	d901      	bls.n	800b42c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800b428:	2303      	movs	r3, #3
 800b42a:	e01f      	b.n	800b46c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b42c:	4b13      	ldr	r3, [pc, #76]	; (800b47c <HAL_PWREx_EnableOverDrive+0x98>)
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b438:	d1ee      	bne.n	800b418 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b43a:	4b11      	ldr	r3, [pc, #68]	; (800b480 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b43c:	2201      	movs	r2, #1
 800b43e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b440:	f7fb fb8c 	bl	8006b5c <HAL_GetTick>
 800b444:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b446:	e009      	b.n	800b45c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b448:	f7fb fb88 	bl	8006b5c <HAL_GetTick>
 800b44c:	4602      	mov	r2, r0
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	1ad3      	subs	r3, r2, r3
 800b452:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b456:	d901      	bls.n	800b45c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800b458:	2303      	movs	r3, #3
 800b45a:	e007      	b.n	800b46c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b45c:	4b07      	ldr	r3, [pc, #28]	; (800b47c <HAL_PWREx_EnableOverDrive+0x98>)
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b464:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b468:	d1ee      	bne.n	800b448 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800b46a:	2300      	movs	r3, #0
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	3708      	adds	r7, #8
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}
 800b474:	40023800 	.word	0x40023800
 800b478:	420e0040 	.word	0x420e0040
 800b47c:	40007000 	.word	0x40007000
 800b480:	420e0044 	.word	0x420e0044

0800b484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b084      	sub	sp, #16
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d101      	bne.n	800b498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b494:	2301      	movs	r3, #1
 800b496:	e0cc      	b.n	800b632 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b498:	4b68      	ldr	r3, [pc, #416]	; (800b63c <HAL_RCC_ClockConfig+0x1b8>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f003 030f 	and.w	r3, r3, #15
 800b4a0:	683a      	ldr	r2, [r7, #0]
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d90c      	bls.n	800b4c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4a6:	4b65      	ldr	r3, [pc, #404]	; (800b63c <HAL_RCC_ClockConfig+0x1b8>)
 800b4a8:	683a      	ldr	r2, [r7, #0]
 800b4aa:	b2d2      	uxtb	r2, r2
 800b4ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4ae:	4b63      	ldr	r3, [pc, #396]	; (800b63c <HAL_RCC_ClockConfig+0x1b8>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f003 030f 	and.w	r3, r3, #15
 800b4b6:	683a      	ldr	r2, [r7, #0]
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d001      	beq.n	800b4c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	e0b8      	b.n	800b632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f003 0302 	and.w	r3, r3, #2
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d020      	beq.n	800b50e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f003 0304 	and.w	r3, r3, #4
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d005      	beq.n	800b4e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b4d8:	4b59      	ldr	r3, [pc, #356]	; (800b640 <HAL_RCC_ClockConfig+0x1bc>)
 800b4da:	689b      	ldr	r3, [r3, #8]
 800b4dc:	4a58      	ldr	r2, [pc, #352]	; (800b640 <HAL_RCC_ClockConfig+0x1bc>)
 800b4de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b4e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f003 0308 	and.w	r3, r3, #8
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d005      	beq.n	800b4fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b4f0:	4b53      	ldr	r3, [pc, #332]	; (800b640 <HAL_RCC_ClockConfig+0x1bc>)
 800b4f2:	689b      	ldr	r3, [r3, #8]
 800b4f4:	4a52      	ldr	r2, [pc, #328]	; (800b640 <HAL_RCC_ClockConfig+0x1bc>)
 800b4f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b4fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b4fc:	4b50      	ldr	r3, [pc, #320]	; (800b640 <HAL_RCC_ClockConfig+0x1bc>)
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	494d      	ldr	r1, [pc, #308]	; (800b640 <HAL_RCC_ClockConfig+0x1bc>)
 800b50a:	4313      	orrs	r3, r2
 800b50c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f003 0301 	and.w	r3, r3, #1
 800b516:	2b00      	cmp	r3, #0
 800b518:	d044      	beq.n	800b5a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d107      	bne.n	800b532 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b522:	4b47      	ldr	r3, [pc, #284]	; (800b640 <HAL_RCC_ClockConfig+0x1bc>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d119      	bne.n	800b562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b52e:	2301      	movs	r3, #1
 800b530:	e07f      	b.n	800b632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	685b      	ldr	r3, [r3, #4]
 800b536:	2b02      	cmp	r3, #2
 800b538:	d003      	beq.n	800b542 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b53e:	2b03      	cmp	r3, #3
 800b540:	d107      	bne.n	800b552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b542:	4b3f      	ldr	r3, [pc, #252]	; (800b640 <HAL_RCC_ClockConfig+0x1bc>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d109      	bne.n	800b562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	e06f      	b.n	800b632 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b552:	4b3b      	ldr	r3, [pc, #236]	; (800b640 <HAL_RCC_ClockConfig+0x1bc>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	f003 0302 	and.w	r3, r3, #2
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d101      	bne.n	800b562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b55e:	2301      	movs	r3, #1
 800b560:	e067      	b.n	800b632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b562:	4b37      	ldr	r3, [pc, #220]	; (800b640 <HAL_RCC_ClockConfig+0x1bc>)
 800b564:	689b      	ldr	r3, [r3, #8]
 800b566:	f023 0203 	bic.w	r2, r3, #3
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	4934      	ldr	r1, [pc, #208]	; (800b640 <HAL_RCC_ClockConfig+0x1bc>)
 800b570:	4313      	orrs	r3, r2
 800b572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b574:	f7fb faf2 	bl	8006b5c <HAL_GetTick>
 800b578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b57a:	e00a      	b.n	800b592 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b57c:	f7fb faee 	bl	8006b5c <HAL_GetTick>
 800b580:	4602      	mov	r2, r0
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	1ad3      	subs	r3, r2, r3
 800b586:	f241 3288 	movw	r2, #5000	; 0x1388
 800b58a:	4293      	cmp	r3, r2
 800b58c:	d901      	bls.n	800b592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b58e:	2303      	movs	r3, #3
 800b590:	e04f      	b.n	800b632 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b592:	4b2b      	ldr	r3, [pc, #172]	; (800b640 <HAL_RCC_ClockConfig+0x1bc>)
 800b594:	689b      	ldr	r3, [r3, #8]
 800b596:	f003 020c 	and.w	r2, r3, #12
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	009b      	lsls	r3, r3, #2
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d1eb      	bne.n	800b57c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b5a4:	4b25      	ldr	r3, [pc, #148]	; (800b63c <HAL_RCC_ClockConfig+0x1b8>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f003 030f 	and.w	r3, r3, #15
 800b5ac:	683a      	ldr	r2, [r7, #0]
 800b5ae:	429a      	cmp	r2, r3
 800b5b0:	d20c      	bcs.n	800b5cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b5b2:	4b22      	ldr	r3, [pc, #136]	; (800b63c <HAL_RCC_ClockConfig+0x1b8>)
 800b5b4:	683a      	ldr	r2, [r7, #0]
 800b5b6:	b2d2      	uxtb	r2, r2
 800b5b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b5ba:	4b20      	ldr	r3, [pc, #128]	; (800b63c <HAL_RCC_ClockConfig+0x1b8>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f003 030f 	and.w	r3, r3, #15
 800b5c2:	683a      	ldr	r2, [r7, #0]
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d001      	beq.n	800b5cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	e032      	b.n	800b632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f003 0304 	and.w	r3, r3, #4
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d008      	beq.n	800b5ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b5d8:	4b19      	ldr	r3, [pc, #100]	; (800b640 <HAL_RCC_ClockConfig+0x1bc>)
 800b5da:	689b      	ldr	r3, [r3, #8]
 800b5dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	4916      	ldr	r1, [pc, #88]	; (800b640 <HAL_RCC_ClockConfig+0x1bc>)
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f003 0308 	and.w	r3, r3, #8
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d009      	beq.n	800b60a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b5f6:	4b12      	ldr	r3, [pc, #72]	; (800b640 <HAL_RCC_ClockConfig+0x1bc>)
 800b5f8:	689b      	ldr	r3, [r3, #8]
 800b5fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	691b      	ldr	r3, [r3, #16]
 800b602:	00db      	lsls	r3, r3, #3
 800b604:	490e      	ldr	r1, [pc, #56]	; (800b640 <HAL_RCC_ClockConfig+0x1bc>)
 800b606:	4313      	orrs	r3, r2
 800b608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b60a:	f000 fb6b 	bl	800bce4 <HAL_RCC_GetSysClockFreq>
 800b60e:	4602      	mov	r2, r0
 800b610:	4b0b      	ldr	r3, [pc, #44]	; (800b640 <HAL_RCC_ClockConfig+0x1bc>)
 800b612:	689b      	ldr	r3, [r3, #8]
 800b614:	091b      	lsrs	r3, r3, #4
 800b616:	f003 030f 	and.w	r3, r3, #15
 800b61a:	490a      	ldr	r1, [pc, #40]	; (800b644 <HAL_RCC_ClockConfig+0x1c0>)
 800b61c:	5ccb      	ldrb	r3, [r1, r3]
 800b61e:	fa22 f303 	lsr.w	r3, r2, r3
 800b622:	4a09      	ldr	r2, [pc, #36]	; (800b648 <HAL_RCC_ClockConfig+0x1c4>)
 800b624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b626:	4b09      	ldr	r3, [pc, #36]	; (800b64c <HAL_RCC_ClockConfig+0x1c8>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7fb fa52 	bl	8006ad4 <HAL_InitTick>

  return HAL_OK;
 800b630:	2300      	movs	r3, #0
}
 800b632:	4618      	mov	r0, r3
 800b634:	3710      	adds	r7, #16
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	40023c00 	.word	0x40023c00
 800b640:	40023800 	.word	0x40023800
 800b644:	08018b68 	.word	0x08018b68
 800b648:	20000000 	.word	0x20000000
 800b64c:	20000004 	.word	0x20000004

0800b650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b650:	b480      	push	{r7}
 800b652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b654:	4b03      	ldr	r3, [pc, #12]	; (800b664 <HAL_RCC_GetHCLKFreq+0x14>)
 800b656:	681b      	ldr	r3, [r3, #0]
}
 800b658:	4618      	mov	r0, r3
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr
 800b662:	bf00      	nop
 800b664:	20000000 	.word	0x20000000

0800b668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b66c:	f7ff fff0 	bl	800b650 <HAL_RCC_GetHCLKFreq>
 800b670:	4602      	mov	r2, r0
 800b672:	4b05      	ldr	r3, [pc, #20]	; (800b688 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	0a9b      	lsrs	r3, r3, #10
 800b678:	f003 0307 	and.w	r3, r3, #7
 800b67c:	4903      	ldr	r1, [pc, #12]	; (800b68c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b67e:	5ccb      	ldrb	r3, [r1, r3]
 800b680:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b684:	4618      	mov	r0, r3
 800b686:	bd80      	pop	{r7, pc}
 800b688:	40023800 	.word	0x40023800
 800b68c:	08018b78 	.word	0x08018b78

0800b690 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b08c      	sub	sp, #48	; 0x30
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b698:	2300      	movs	r3, #0
 800b69a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800b69c:	2300      	movs	r3, #0
 800b69e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f003 0301 	and.w	r3, r3, #1
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d010      	beq.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800b6c8:	4b6f      	ldr	r3, [pc, #444]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b6ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6ce:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d6:	496c      	ldr	r1, [pc, #432]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d101      	bne.n	800b6ea <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f003 0302 	and.w	r3, r3, #2
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d010      	beq.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800b6f6:	4b64      	ldr	r3, [pc, #400]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b6f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6fc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b704:	4960      	ldr	r1, [pc, #384]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b706:	4313      	orrs	r3, r2
 800b708:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b710:	2b00      	cmp	r3, #0
 800b712:	d101      	bne.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800b714:	2301      	movs	r3, #1
 800b716:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f003 0304 	and.w	r3, r3, #4
 800b720:	2b00      	cmp	r3, #0
 800b722:	d017      	beq.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b724:	4b58      	ldr	r3, [pc, #352]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b72a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b732:	4955      	ldr	r1, [pc, #340]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b734:	4313      	orrs	r3, r2
 800b736:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b73e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b742:	d101      	bne.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800b744:	2301      	movs	r3, #1
 800b746:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d101      	bne.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800b750:	2301      	movs	r3, #1
 800b752:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f003 0308 	and.w	r3, r3, #8
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d017      	beq.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b760:	4b49      	ldr	r3, [pc, #292]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b762:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b766:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b76e:	4946      	ldr	r1, [pc, #280]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b770:	4313      	orrs	r3, r2
 800b772:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b77a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b77e:	d101      	bne.n	800b784 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800b780:	2301      	movs	r3, #1
 800b782:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d101      	bne.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800b78c:	2301      	movs	r3, #1
 800b78e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f003 0320 	and.w	r3, r3, #32
 800b798:	2b00      	cmp	r3, #0
 800b79a:	f000 808a 	beq.w	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b79e:	2300      	movs	r3, #0
 800b7a0:	60bb      	str	r3, [r7, #8]
 800b7a2:	4b39      	ldr	r3, [pc, #228]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b7a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7a6:	4a38      	ldr	r2, [pc, #224]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b7a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7ac:	6413      	str	r3, [r2, #64]	; 0x40
 800b7ae:	4b36      	ldr	r3, [pc, #216]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7b6:	60bb      	str	r3, [r7, #8]
 800b7b8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b7ba:	4b34      	ldr	r3, [pc, #208]	; (800b88c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	4a33      	ldr	r2, [pc, #204]	; (800b88c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b7c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b7c6:	f7fb f9c9 	bl	8006b5c <HAL_GetTick>
 800b7ca:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b7cc:	e008      	b.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b7ce:	f7fb f9c5 	bl	8006b5c <HAL_GetTick>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d6:	1ad3      	subs	r3, r2, r3
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	d901      	bls.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800b7dc:	2303      	movs	r3, #3
 800b7de:	e278      	b.n	800bcd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b7e0:	4b2a      	ldr	r3, [pc, #168]	; (800b88c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d0f0      	beq.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b7ec:	4b26      	ldr	r3, [pc, #152]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b7ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7f4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b7f6:	6a3b      	ldr	r3, [r7, #32]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d02f      	beq.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b800:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b804:	6a3a      	ldr	r2, [r7, #32]
 800b806:	429a      	cmp	r2, r3
 800b808:	d028      	beq.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b80a:	4b1f      	ldr	r3, [pc, #124]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b80c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b80e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b812:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b814:	4b1e      	ldr	r3, [pc, #120]	; (800b890 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800b816:	2201      	movs	r2, #1
 800b818:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b81a:	4b1d      	ldr	r3, [pc, #116]	; (800b890 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800b81c:	2200      	movs	r2, #0
 800b81e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b820:	4a19      	ldr	r2, [pc, #100]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b822:	6a3b      	ldr	r3, [r7, #32]
 800b824:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b826:	4b18      	ldr	r3, [pc, #96]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b82a:	f003 0301 	and.w	r3, r3, #1
 800b82e:	2b01      	cmp	r3, #1
 800b830:	d114      	bne.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b832:	f7fb f993 	bl	8006b5c <HAL_GetTick>
 800b836:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b838:	e00a      	b.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b83a:	f7fb f98f 	bl	8006b5c <HAL_GetTick>
 800b83e:	4602      	mov	r2, r0
 800b840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b842:	1ad3      	subs	r3, r2, r3
 800b844:	f241 3288 	movw	r2, #5000	; 0x1388
 800b848:	4293      	cmp	r3, r2
 800b84a:	d901      	bls.n	800b850 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800b84c:	2303      	movs	r3, #3
 800b84e:	e240      	b.n	800bcd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b850:	4b0d      	ldr	r3, [pc, #52]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b854:	f003 0302 	and.w	r3, r3, #2
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d0ee      	beq.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b864:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b868:	d114      	bne.n	800b894 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800b86a:	4b07      	ldr	r3, [pc, #28]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b86c:	689b      	ldr	r3, [r3, #8]
 800b86e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b876:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b87a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b87e:	4902      	ldr	r1, [pc, #8]	; (800b888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b880:	4313      	orrs	r3, r2
 800b882:	608b      	str	r3, [r1, #8]
 800b884:	e00c      	b.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800b886:	bf00      	nop
 800b888:	40023800 	.word	0x40023800
 800b88c:	40007000 	.word	0x40007000
 800b890:	42470e40 	.word	0x42470e40
 800b894:	4b4a      	ldr	r3, [pc, #296]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b896:	689b      	ldr	r3, [r3, #8]
 800b898:	4a49      	ldr	r2, [pc, #292]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b89a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b89e:	6093      	str	r3, [r2, #8]
 800b8a0:	4b47      	ldr	r3, [pc, #284]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b8a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b8ac:	4944      	ldr	r1, [pc, #272]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f003 0310 	and.w	r3, r3, #16
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d004      	beq.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800b8c4:	4b3f      	ldr	r3, [pc, #252]	; (800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800b8c6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d00a      	beq.n	800b8ea <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800b8d4:	4b3a      	ldr	r3, [pc, #232]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b8d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b8da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8e2:	4937      	ldr	r1, [pc, #220]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b8e4:	4313      	orrs	r3, r2
 800b8e6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d00a      	beq.n	800b90c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b8f6:	4b32      	ldr	r3, [pc, #200]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b8f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b8fc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b904:	492e      	ldr	r1, [pc, #184]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b906:	4313      	orrs	r3, r2
 800b908:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b914:	2b00      	cmp	r3, #0
 800b916:	d011      	beq.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b918:	4b29      	ldr	r3, [pc, #164]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b91a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b91e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b926:	4926      	ldr	r1, [pc, #152]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b928:	4313      	orrs	r3, r2
 800b92a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b932:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b936:	d101      	bne.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800b938:	2301      	movs	r3, #1
 800b93a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b944:	2b00      	cmp	r3, #0
 800b946:	d00a      	beq.n	800b95e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800b948:	4b1d      	ldr	r3, [pc, #116]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b94a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b94e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b956:	491a      	ldr	r1, [pc, #104]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b958:	4313      	orrs	r3, r2
 800b95a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b966:	2b00      	cmp	r3, #0
 800b968:	d011      	beq.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800b96a:	4b15      	ldr	r3, [pc, #84]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b96c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b970:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b978:	4911      	ldr	r1, [pc, #68]	; (800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b97a:	4313      	orrs	r3, r2
 800b97c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b988:	d101      	bne.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800b98a:	2301      	movs	r3, #1
 800b98c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800b98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b990:	2b01      	cmp	r3, #1
 800b992:	d005      	beq.n	800b9a0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b99c:	f040 80ff 	bne.w	800bb9e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b9a0:	4b09      	ldr	r3, [pc, #36]	; (800b9c8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b9a6:	f7fb f8d9 	bl	8006b5c <HAL_GetTick>
 800b9aa:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b9ac:	e00e      	b.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b9ae:	f7fb f8d5 	bl	8006b5c <HAL_GetTick>
 800b9b2:	4602      	mov	r2, r0
 800b9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b6:	1ad3      	subs	r3, r2, r3
 800b9b8:	2b02      	cmp	r3, #2
 800b9ba:	d907      	bls.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b9bc:	2303      	movs	r3, #3
 800b9be:	e188      	b.n	800bcd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800b9c0:	40023800 	.word	0x40023800
 800b9c4:	424711e0 	.word	0x424711e0
 800b9c8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b9cc:	4b7e      	ldr	r3, [pc, #504]	; (800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d1ea      	bne.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	f003 0301 	and.w	r3, r3, #1
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d003      	beq.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d009      	beq.n	800ba00 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d028      	beq.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d124      	bne.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800ba00:	4b71      	ldr	r3, [pc, #452]	; (800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800ba02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba06:	0c1b      	lsrs	r3, r3, #16
 800ba08:	f003 0303 	and.w	r3, r3, #3
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	005b      	lsls	r3, r3, #1
 800ba10:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ba12:	4b6d      	ldr	r3, [pc, #436]	; (800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800ba14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba18:	0e1b      	lsrs	r3, r3, #24
 800ba1a:	f003 030f 	and.w	r3, r3, #15
 800ba1e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	685a      	ldr	r2, [r3, #4]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	689b      	ldr	r3, [r3, #8]
 800ba28:	019b      	lsls	r3, r3, #6
 800ba2a:	431a      	orrs	r2, r3
 800ba2c:	69fb      	ldr	r3, [r7, #28]
 800ba2e:	085b      	lsrs	r3, r3, #1
 800ba30:	3b01      	subs	r3, #1
 800ba32:	041b      	lsls	r3, r3, #16
 800ba34:	431a      	orrs	r2, r3
 800ba36:	69bb      	ldr	r3, [r7, #24]
 800ba38:	061b      	lsls	r3, r3, #24
 800ba3a:	431a      	orrs	r2, r3
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	695b      	ldr	r3, [r3, #20]
 800ba40:	071b      	lsls	r3, r3, #28
 800ba42:	4961      	ldr	r1, [pc, #388]	; (800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800ba44:	4313      	orrs	r3, r2
 800ba46:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f003 0304 	and.w	r3, r3, #4
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d004      	beq.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba5e:	d00a      	beq.n	800ba76 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d035      	beq.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba74:	d130      	bne.n	800bad8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800ba76:	4b54      	ldr	r3, [pc, #336]	; (800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800ba78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba7c:	0c1b      	lsrs	r3, r3, #16
 800ba7e:	f003 0303 	and.w	r3, r3, #3
 800ba82:	3301      	adds	r3, #1
 800ba84:	005b      	lsls	r3, r3, #1
 800ba86:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ba88:	4b4f      	ldr	r3, [pc, #316]	; (800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800ba8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba8e:	0f1b      	lsrs	r3, r3, #28
 800ba90:	f003 0307 	and.w	r3, r3, #7
 800ba94:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	685a      	ldr	r2, [r3, #4]
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	689b      	ldr	r3, [r3, #8]
 800ba9e:	019b      	lsls	r3, r3, #6
 800baa0:	431a      	orrs	r2, r3
 800baa2:	69fb      	ldr	r3, [r7, #28]
 800baa4:	085b      	lsrs	r3, r3, #1
 800baa6:	3b01      	subs	r3, #1
 800baa8:	041b      	lsls	r3, r3, #16
 800baaa:	431a      	orrs	r2, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	691b      	ldr	r3, [r3, #16]
 800bab0:	061b      	lsls	r3, r3, #24
 800bab2:	431a      	orrs	r2, r3
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	071b      	lsls	r3, r3, #28
 800bab8:	4943      	ldr	r1, [pc, #268]	; (800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800baba:	4313      	orrs	r3, r2
 800babc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800bac0:	4b41      	ldr	r3, [pc, #260]	; (800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bac6:	f023 021f 	bic.w	r2, r3, #31
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bace:	3b01      	subs	r3, #1
 800bad0:	493d      	ldr	r1, [pc, #244]	; (800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bad2:	4313      	orrs	r3, r2
 800bad4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d029      	beq.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800baec:	d124      	bne.n	800bb38 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800baee:	4b36      	ldr	r3, [pc, #216]	; (800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800baf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800baf4:	0c1b      	lsrs	r3, r3, #16
 800baf6:	f003 0303 	and.w	r3, r3, #3
 800bafa:	3301      	adds	r3, #1
 800bafc:	005b      	lsls	r3, r3, #1
 800bafe:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bb00:	4b31      	ldr	r3, [pc, #196]	; (800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bb02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb06:	0f1b      	lsrs	r3, r3, #28
 800bb08:	f003 0307 	and.w	r3, r3, #7
 800bb0c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	685a      	ldr	r2, [r3, #4]
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	689b      	ldr	r3, [r3, #8]
 800bb16:	019b      	lsls	r3, r3, #6
 800bb18:	431a      	orrs	r2, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	68db      	ldr	r3, [r3, #12]
 800bb1e:	085b      	lsrs	r3, r3, #1
 800bb20:	3b01      	subs	r3, #1
 800bb22:	041b      	lsls	r3, r3, #16
 800bb24:	431a      	orrs	r2, r3
 800bb26:	69bb      	ldr	r3, [r7, #24]
 800bb28:	061b      	lsls	r3, r3, #24
 800bb2a:	431a      	orrs	r2, r3
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	071b      	lsls	r3, r3, #28
 800bb30:	4925      	ldr	r1, [pc, #148]	; (800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bb32:	4313      	orrs	r3, r2
 800bb34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d016      	beq.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	685a      	ldr	r2, [r3, #4]
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	689b      	ldr	r3, [r3, #8]
 800bb4c:	019b      	lsls	r3, r3, #6
 800bb4e:	431a      	orrs	r2, r3
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	085b      	lsrs	r3, r3, #1
 800bb56:	3b01      	subs	r3, #1
 800bb58:	041b      	lsls	r3, r3, #16
 800bb5a:	431a      	orrs	r2, r3
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	691b      	ldr	r3, [r3, #16]
 800bb60:	061b      	lsls	r3, r3, #24
 800bb62:	431a      	orrs	r2, r3
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	695b      	ldr	r3, [r3, #20]
 800bb68:	071b      	lsls	r3, r3, #28
 800bb6a:	4917      	ldr	r1, [pc, #92]	; (800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800bb72:	4b16      	ldr	r3, [pc, #88]	; (800bbcc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800bb74:	2201      	movs	r2, #1
 800bb76:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bb78:	f7fa fff0 	bl	8006b5c <HAL_GetTick>
 800bb7c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bb7e:	e008      	b.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800bb80:	f7fa ffec 	bl	8006b5c <HAL_GetTick>
 800bb84:	4602      	mov	r2, r0
 800bb86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb88:	1ad3      	subs	r3, r2, r3
 800bb8a:	2b02      	cmp	r3, #2
 800bb8c:	d901      	bls.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bb8e:	2303      	movs	r3, #3
 800bb90:	e09f      	b.n	800bcd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bb92:	4b0d      	ldr	r3, [pc, #52]	; (800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d0f0      	beq.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800bb9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	f040 8095 	bne.w	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800bba6:	4b0a      	ldr	r3, [pc, #40]	; (800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800bba8:	2200      	movs	r2, #0
 800bbaa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bbac:	f7fa ffd6 	bl	8006b5c <HAL_GetTick>
 800bbb0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bbb2:	e00f      	b.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800bbb4:	f7fa ffd2 	bl	8006b5c <HAL_GetTick>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbbc:	1ad3      	subs	r3, r2, r3
 800bbbe:	2b02      	cmp	r3, #2
 800bbc0:	d908      	bls.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bbc2:	2303      	movs	r3, #3
 800bbc4:	e085      	b.n	800bcd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800bbc6:	bf00      	nop
 800bbc8:	40023800 	.word	0x40023800
 800bbcc:	42470068 	.word	0x42470068
 800bbd0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bbd4:	4b41      	ldr	r3, [pc, #260]	; (800bcdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bbdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbe0:	d0e8      	beq.n	800bbb4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	f003 0304 	and.w	r3, r3, #4
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d003      	beq.n	800bbf6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d009      	beq.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d02b      	beq.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d127      	bne.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800bc0a:	4b34      	ldr	r3, [pc, #208]	; (800bcdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bc0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc10:	0c1b      	lsrs	r3, r3, #16
 800bc12:	f003 0303 	and.w	r3, r3, #3
 800bc16:	3301      	adds	r3, #1
 800bc18:	005b      	lsls	r3, r3, #1
 800bc1a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	699a      	ldr	r2, [r3, #24]
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	69db      	ldr	r3, [r3, #28]
 800bc24:	019b      	lsls	r3, r3, #6
 800bc26:	431a      	orrs	r2, r3
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	085b      	lsrs	r3, r3, #1
 800bc2c:	3b01      	subs	r3, #1
 800bc2e:	041b      	lsls	r3, r3, #16
 800bc30:	431a      	orrs	r2, r3
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc36:	061b      	lsls	r3, r3, #24
 800bc38:	4928      	ldr	r1, [pc, #160]	; (800bcdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800bc40:	4b26      	ldr	r3, [pc, #152]	; (800bcdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bc42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc46:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc4e:	3b01      	subs	r3, #1
 800bc50:	021b      	lsls	r3, r3, #8
 800bc52:	4922      	ldr	r1, [pc, #136]	; (800bcdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bc54:	4313      	orrs	r3, r2
 800bc56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d01d      	beq.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc6e:	d118      	bne.n	800bca2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800bc70:	4b1a      	ldr	r3, [pc, #104]	; (800bcdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bc72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc76:	0e1b      	lsrs	r3, r3, #24
 800bc78:	f003 030f 	and.w	r3, r3, #15
 800bc7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	699a      	ldr	r2, [r3, #24]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	69db      	ldr	r3, [r3, #28]
 800bc86:	019b      	lsls	r3, r3, #6
 800bc88:	431a      	orrs	r2, r3
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	6a1b      	ldr	r3, [r3, #32]
 800bc8e:	085b      	lsrs	r3, r3, #1
 800bc90:	3b01      	subs	r3, #1
 800bc92:	041b      	lsls	r3, r3, #16
 800bc94:	431a      	orrs	r2, r3
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	061b      	lsls	r3, r3, #24
 800bc9a:	4910      	ldr	r1, [pc, #64]	; (800bcdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bc9c:	4313      	orrs	r3, r2
 800bc9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800bca2:	4b0f      	ldr	r3, [pc, #60]	; (800bce0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800bca4:	2201      	movs	r2, #1
 800bca6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bca8:	f7fa ff58 	bl	8006b5c <HAL_GetTick>
 800bcac:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bcae:	e008      	b.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800bcb0:	f7fa ff54 	bl	8006b5c <HAL_GetTick>
 800bcb4:	4602      	mov	r2, r0
 800bcb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb8:	1ad3      	subs	r3, r2, r3
 800bcba:	2b02      	cmp	r3, #2
 800bcbc:	d901      	bls.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bcbe:	2303      	movs	r3, #3
 800bcc0:	e007      	b.n	800bcd2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bcc2:	4b06      	ldr	r3, [pc, #24]	; (800bcdc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bcca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcce:	d1ef      	bne.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800bcd0:	2300      	movs	r3, #0
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3730      	adds	r7, #48	; 0x30
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	40023800 	.word	0x40023800
 800bce0:	42470070 	.word	0x42470070

0800bce4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bce8:	b0ae      	sub	sp, #184	; 0xb8
 800bcea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800bcec:	2300      	movs	r3, #0
 800bcee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800bd04:	2300      	movs	r3, #0
 800bd06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bd0a:	4bcb      	ldr	r3, [pc, #812]	; (800c038 <HAL_RCC_GetSysClockFreq+0x354>)
 800bd0c:	689b      	ldr	r3, [r3, #8]
 800bd0e:	f003 030c 	and.w	r3, r3, #12
 800bd12:	2b0c      	cmp	r3, #12
 800bd14:	f200 8206 	bhi.w	800c124 <HAL_RCC_GetSysClockFreq+0x440>
 800bd18:	a201      	add	r2, pc, #4	; (adr r2, 800bd20 <HAL_RCC_GetSysClockFreq+0x3c>)
 800bd1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd1e:	bf00      	nop
 800bd20:	0800bd55 	.word	0x0800bd55
 800bd24:	0800c125 	.word	0x0800c125
 800bd28:	0800c125 	.word	0x0800c125
 800bd2c:	0800c125 	.word	0x0800c125
 800bd30:	0800bd5d 	.word	0x0800bd5d
 800bd34:	0800c125 	.word	0x0800c125
 800bd38:	0800c125 	.word	0x0800c125
 800bd3c:	0800c125 	.word	0x0800c125
 800bd40:	0800bd65 	.word	0x0800bd65
 800bd44:	0800c125 	.word	0x0800c125
 800bd48:	0800c125 	.word	0x0800c125
 800bd4c:	0800c125 	.word	0x0800c125
 800bd50:	0800bf55 	.word	0x0800bf55
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bd54:	4bb9      	ldr	r3, [pc, #740]	; (800c03c <HAL_RCC_GetSysClockFreq+0x358>)
 800bd56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800bd5a:	e1e7      	b.n	800c12c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bd5c:	4bb8      	ldr	r3, [pc, #736]	; (800c040 <HAL_RCC_GetSysClockFreq+0x35c>)
 800bd5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800bd62:	e1e3      	b.n	800c12c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bd64:	4bb4      	ldr	r3, [pc, #720]	; (800c038 <HAL_RCC_GetSysClockFreq+0x354>)
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bd70:	4bb1      	ldr	r3, [pc, #708]	; (800c038 <HAL_RCC_GetSysClockFreq+0x354>)
 800bd72:	685b      	ldr	r3, [r3, #4]
 800bd74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d071      	beq.n	800be60 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bd7c:	4bae      	ldr	r3, [pc, #696]	; (800c038 <HAL_RCC_GetSysClockFreq+0x354>)
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	099b      	lsrs	r3, r3, #6
 800bd82:	2200      	movs	r2, #0
 800bd84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bd88:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800bd8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bd90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bd98:	2300      	movs	r3, #0
 800bd9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bd9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bda2:	4622      	mov	r2, r4
 800bda4:	462b      	mov	r3, r5
 800bda6:	f04f 0000 	mov.w	r0, #0
 800bdaa:	f04f 0100 	mov.w	r1, #0
 800bdae:	0159      	lsls	r1, r3, #5
 800bdb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bdb4:	0150      	lsls	r0, r2, #5
 800bdb6:	4602      	mov	r2, r0
 800bdb8:	460b      	mov	r3, r1
 800bdba:	4621      	mov	r1, r4
 800bdbc:	1a51      	subs	r1, r2, r1
 800bdbe:	6439      	str	r1, [r7, #64]	; 0x40
 800bdc0:	4629      	mov	r1, r5
 800bdc2:	eb63 0301 	sbc.w	r3, r3, r1
 800bdc6:	647b      	str	r3, [r7, #68]	; 0x44
 800bdc8:	f04f 0200 	mov.w	r2, #0
 800bdcc:	f04f 0300 	mov.w	r3, #0
 800bdd0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800bdd4:	4649      	mov	r1, r9
 800bdd6:	018b      	lsls	r3, r1, #6
 800bdd8:	4641      	mov	r1, r8
 800bdda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800bdde:	4641      	mov	r1, r8
 800bde0:	018a      	lsls	r2, r1, #6
 800bde2:	4641      	mov	r1, r8
 800bde4:	1a51      	subs	r1, r2, r1
 800bde6:	63b9      	str	r1, [r7, #56]	; 0x38
 800bde8:	4649      	mov	r1, r9
 800bdea:	eb63 0301 	sbc.w	r3, r3, r1
 800bdee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bdf0:	f04f 0200 	mov.w	r2, #0
 800bdf4:	f04f 0300 	mov.w	r3, #0
 800bdf8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800bdfc:	4649      	mov	r1, r9
 800bdfe:	00cb      	lsls	r3, r1, #3
 800be00:	4641      	mov	r1, r8
 800be02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800be06:	4641      	mov	r1, r8
 800be08:	00ca      	lsls	r2, r1, #3
 800be0a:	4610      	mov	r0, r2
 800be0c:	4619      	mov	r1, r3
 800be0e:	4603      	mov	r3, r0
 800be10:	4622      	mov	r2, r4
 800be12:	189b      	adds	r3, r3, r2
 800be14:	633b      	str	r3, [r7, #48]	; 0x30
 800be16:	462b      	mov	r3, r5
 800be18:	460a      	mov	r2, r1
 800be1a:	eb42 0303 	adc.w	r3, r2, r3
 800be1e:	637b      	str	r3, [r7, #52]	; 0x34
 800be20:	f04f 0200 	mov.w	r2, #0
 800be24:	f04f 0300 	mov.w	r3, #0
 800be28:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800be2c:	4629      	mov	r1, r5
 800be2e:	024b      	lsls	r3, r1, #9
 800be30:	4621      	mov	r1, r4
 800be32:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800be36:	4621      	mov	r1, r4
 800be38:	024a      	lsls	r2, r1, #9
 800be3a:	4610      	mov	r0, r2
 800be3c:	4619      	mov	r1, r3
 800be3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800be42:	2200      	movs	r2, #0
 800be44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800be48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800be4c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800be50:	f7f4 fa2e 	bl	80002b0 <__aeabi_uldivmod>
 800be54:	4602      	mov	r2, r0
 800be56:	460b      	mov	r3, r1
 800be58:	4613      	mov	r3, r2
 800be5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800be5e:	e067      	b.n	800bf30 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800be60:	4b75      	ldr	r3, [pc, #468]	; (800c038 <HAL_RCC_GetSysClockFreq+0x354>)
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	099b      	lsrs	r3, r3, #6
 800be66:	2200      	movs	r2, #0
 800be68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800be6c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800be70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800be74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be78:	67bb      	str	r3, [r7, #120]	; 0x78
 800be7a:	2300      	movs	r3, #0
 800be7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800be7e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800be82:	4622      	mov	r2, r4
 800be84:	462b      	mov	r3, r5
 800be86:	f04f 0000 	mov.w	r0, #0
 800be8a:	f04f 0100 	mov.w	r1, #0
 800be8e:	0159      	lsls	r1, r3, #5
 800be90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800be94:	0150      	lsls	r0, r2, #5
 800be96:	4602      	mov	r2, r0
 800be98:	460b      	mov	r3, r1
 800be9a:	4621      	mov	r1, r4
 800be9c:	1a51      	subs	r1, r2, r1
 800be9e:	62b9      	str	r1, [r7, #40]	; 0x28
 800bea0:	4629      	mov	r1, r5
 800bea2:	eb63 0301 	sbc.w	r3, r3, r1
 800bea6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bea8:	f04f 0200 	mov.w	r2, #0
 800beac:	f04f 0300 	mov.w	r3, #0
 800beb0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800beb4:	4649      	mov	r1, r9
 800beb6:	018b      	lsls	r3, r1, #6
 800beb8:	4641      	mov	r1, r8
 800beba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800bebe:	4641      	mov	r1, r8
 800bec0:	018a      	lsls	r2, r1, #6
 800bec2:	4641      	mov	r1, r8
 800bec4:	ebb2 0a01 	subs.w	sl, r2, r1
 800bec8:	4649      	mov	r1, r9
 800beca:	eb63 0b01 	sbc.w	fp, r3, r1
 800bece:	f04f 0200 	mov.w	r2, #0
 800bed2:	f04f 0300 	mov.w	r3, #0
 800bed6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800beda:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bede:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bee2:	4692      	mov	sl, r2
 800bee4:	469b      	mov	fp, r3
 800bee6:	4623      	mov	r3, r4
 800bee8:	eb1a 0303 	adds.w	r3, sl, r3
 800beec:	623b      	str	r3, [r7, #32]
 800beee:	462b      	mov	r3, r5
 800bef0:	eb4b 0303 	adc.w	r3, fp, r3
 800bef4:	627b      	str	r3, [r7, #36]	; 0x24
 800bef6:	f04f 0200 	mov.w	r2, #0
 800befa:	f04f 0300 	mov.w	r3, #0
 800befe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800bf02:	4629      	mov	r1, r5
 800bf04:	028b      	lsls	r3, r1, #10
 800bf06:	4621      	mov	r1, r4
 800bf08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800bf0c:	4621      	mov	r1, r4
 800bf0e:	028a      	lsls	r2, r1, #10
 800bf10:	4610      	mov	r0, r2
 800bf12:	4619      	mov	r1, r3
 800bf14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bf18:	2200      	movs	r2, #0
 800bf1a:	673b      	str	r3, [r7, #112]	; 0x70
 800bf1c:	677a      	str	r2, [r7, #116]	; 0x74
 800bf1e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800bf22:	f7f4 f9c5 	bl	80002b0 <__aeabi_uldivmod>
 800bf26:	4602      	mov	r2, r0
 800bf28:	460b      	mov	r3, r1
 800bf2a:	4613      	mov	r3, r2
 800bf2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800bf30:	4b41      	ldr	r3, [pc, #260]	; (800c038 <HAL_RCC_GetSysClockFreq+0x354>)
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	0c1b      	lsrs	r3, r3, #16
 800bf36:	f003 0303 	and.w	r3, r3, #3
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	005b      	lsls	r3, r3, #1
 800bf3e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800bf42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bf46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bf4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800bf52:	e0eb      	b.n	800c12c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bf54:	4b38      	ldr	r3, [pc, #224]	; (800c038 <HAL_RCC_GetSysClockFreq+0x354>)
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bf60:	4b35      	ldr	r3, [pc, #212]	; (800c038 <HAL_RCC_GetSysClockFreq+0x354>)
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d06b      	beq.n	800c044 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bf6c:	4b32      	ldr	r3, [pc, #200]	; (800c038 <HAL_RCC_GetSysClockFreq+0x354>)
 800bf6e:	685b      	ldr	r3, [r3, #4]
 800bf70:	099b      	lsrs	r3, r3, #6
 800bf72:	2200      	movs	r2, #0
 800bf74:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf76:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bf78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bf7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf7e:	663b      	str	r3, [r7, #96]	; 0x60
 800bf80:	2300      	movs	r3, #0
 800bf82:	667b      	str	r3, [r7, #100]	; 0x64
 800bf84:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800bf88:	4622      	mov	r2, r4
 800bf8a:	462b      	mov	r3, r5
 800bf8c:	f04f 0000 	mov.w	r0, #0
 800bf90:	f04f 0100 	mov.w	r1, #0
 800bf94:	0159      	lsls	r1, r3, #5
 800bf96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bf9a:	0150      	lsls	r0, r2, #5
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	4621      	mov	r1, r4
 800bfa2:	1a51      	subs	r1, r2, r1
 800bfa4:	61b9      	str	r1, [r7, #24]
 800bfa6:	4629      	mov	r1, r5
 800bfa8:	eb63 0301 	sbc.w	r3, r3, r1
 800bfac:	61fb      	str	r3, [r7, #28]
 800bfae:	f04f 0200 	mov.w	r2, #0
 800bfb2:	f04f 0300 	mov.w	r3, #0
 800bfb6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800bfba:	4659      	mov	r1, fp
 800bfbc:	018b      	lsls	r3, r1, #6
 800bfbe:	4651      	mov	r1, sl
 800bfc0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800bfc4:	4651      	mov	r1, sl
 800bfc6:	018a      	lsls	r2, r1, #6
 800bfc8:	4651      	mov	r1, sl
 800bfca:	ebb2 0801 	subs.w	r8, r2, r1
 800bfce:	4659      	mov	r1, fp
 800bfd0:	eb63 0901 	sbc.w	r9, r3, r1
 800bfd4:	f04f 0200 	mov.w	r2, #0
 800bfd8:	f04f 0300 	mov.w	r3, #0
 800bfdc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800bfe0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800bfe4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800bfe8:	4690      	mov	r8, r2
 800bfea:	4699      	mov	r9, r3
 800bfec:	4623      	mov	r3, r4
 800bfee:	eb18 0303 	adds.w	r3, r8, r3
 800bff2:	613b      	str	r3, [r7, #16]
 800bff4:	462b      	mov	r3, r5
 800bff6:	eb49 0303 	adc.w	r3, r9, r3
 800bffa:	617b      	str	r3, [r7, #20]
 800bffc:	f04f 0200 	mov.w	r2, #0
 800c000:	f04f 0300 	mov.w	r3, #0
 800c004:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800c008:	4629      	mov	r1, r5
 800c00a:	024b      	lsls	r3, r1, #9
 800c00c:	4621      	mov	r1, r4
 800c00e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c012:	4621      	mov	r1, r4
 800c014:	024a      	lsls	r2, r1, #9
 800c016:	4610      	mov	r0, r2
 800c018:	4619      	mov	r1, r3
 800c01a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c01e:	2200      	movs	r2, #0
 800c020:	65bb      	str	r3, [r7, #88]	; 0x58
 800c022:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c024:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c028:	f7f4 f942 	bl	80002b0 <__aeabi_uldivmod>
 800c02c:	4602      	mov	r2, r0
 800c02e:	460b      	mov	r3, r1
 800c030:	4613      	mov	r3, r2
 800c032:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c036:	e065      	b.n	800c104 <HAL_RCC_GetSysClockFreq+0x420>
 800c038:	40023800 	.word	0x40023800
 800c03c:	00f42400 	.word	0x00f42400
 800c040:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c044:	4b3d      	ldr	r3, [pc, #244]	; (800c13c <HAL_RCC_GetSysClockFreq+0x458>)
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	099b      	lsrs	r3, r3, #6
 800c04a:	2200      	movs	r2, #0
 800c04c:	4618      	mov	r0, r3
 800c04e:	4611      	mov	r1, r2
 800c050:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800c054:	653b      	str	r3, [r7, #80]	; 0x50
 800c056:	2300      	movs	r3, #0
 800c058:	657b      	str	r3, [r7, #84]	; 0x54
 800c05a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800c05e:	4642      	mov	r2, r8
 800c060:	464b      	mov	r3, r9
 800c062:	f04f 0000 	mov.w	r0, #0
 800c066:	f04f 0100 	mov.w	r1, #0
 800c06a:	0159      	lsls	r1, r3, #5
 800c06c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c070:	0150      	lsls	r0, r2, #5
 800c072:	4602      	mov	r2, r0
 800c074:	460b      	mov	r3, r1
 800c076:	4641      	mov	r1, r8
 800c078:	1a51      	subs	r1, r2, r1
 800c07a:	60b9      	str	r1, [r7, #8]
 800c07c:	4649      	mov	r1, r9
 800c07e:	eb63 0301 	sbc.w	r3, r3, r1
 800c082:	60fb      	str	r3, [r7, #12]
 800c084:	f04f 0200 	mov.w	r2, #0
 800c088:	f04f 0300 	mov.w	r3, #0
 800c08c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800c090:	4659      	mov	r1, fp
 800c092:	018b      	lsls	r3, r1, #6
 800c094:	4651      	mov	r1, sl
 800c096:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c09a:	4651      	mov	r1, sl
 800c09c:	018a      	lsls	r2, r1, #6
 800c09e:	4651      	mov	r1, sl
 800c0a0:	1a54      	subs	r4, r2, r1
 800c0a2:	4659      	mov	r1, fp
 800c0a4:	eb63 0501 	sbc.w	r5, r3, r1
 800c0a8:	f04f 0200 	mov.w	r2, #0
 800c0ac:	f04f 0300 	mov.w	r3, #0
 800c0b0:	00eb      	lsls	r3, r5, #3
 800c0b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c0b6:	00e2      	lsls	r2, r4, #3
 800c0b8:	4614      	mov	r4, r2
 800c0ba:	461d      	mov	r5, r3
 800c0bc:	4643      	mov	r3, r8
 800c0be:	18e3      	adds	r3, r4, r3
 800c0c0:	603b      	str	r3, [r7, #0]
 800c0c2:	464b      	mov	r3, r9
 800c0c4:	eb45 0303 	adc.w	r3, r5, r3
 800c0c8:	607b      	str	r3, [r7, #4]
 800c0ca:	f04f 0200 	mov.w	r2, #0
 800c0ce:	f04f 0300 	mov.w	r3, #0
 800c0d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c0d6:	4629      	mov	r1, r5
 800c0d8:	028b      	lsls	r3, r1, #10
 800c0da:	4621      	mov	r1, r4
 800c0dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c0e0:	4621      	mov	r1, r4
 800c0e2:	028a      	lsls	r2, r1, #10
 800c0e4:	4610      	mov	r0, r2
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	64bb      	str	r3, [r7, #72]	; 0x48
 800c0f0:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c0f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c0f6:	f7f4 f8db 	bl	80002b0 <__aeabi_uldivmod>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	460b      	mov	r3, r1
 800c0fe:	4613      	mov	r3, r2
 800c100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800c104:	4b0d      	ldr	r3, [pc, #52]	; (800c13c <HAL_RCC_GetSysClockFreq+0x458>)
 800c106:	685b      	ldr	r3, [r3, #4]
 800c108:	0f1b      	lsrs	r3, r3, #28
 800c10a:	f003 0307 	and.w	r3, r3, #7
 800c10e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800c112:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c116:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c11a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c11e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c122:	e003      	b.n	800c12c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c124:	4b06      	ldr	r3, [pc, #24]	; (800c140 <HAL_RCC_GetSysClockFreq+0x45c>)
 800c126:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c12a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c12c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800c130:	4618      	mov	r0, r3
 800c132:	37b8      	adds	r7, #184	; 0xb8
 800c134:	46bd      	mov	sp, r7
 800c136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c13a:	bf00      	nop
 800c13c:	40023800 	.word	0x40023800
 800c140:	00f42400 	.word	0x00f42400

0800c144 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b086      	sub	sp, #24
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d101      	bne.n	800c156 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c152:	2301      	movs	r3, #1
 800c154:	e28d      	b.n	800c672 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	f003 0301 	and.w	r3, r3, #1
 800c15e:	2b00      	cmp	r3, #0
 800c160:	f000 8083 	beq.w	800c26a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c164:	4b94      	ldr	r3, [pc, #592]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c166:	689b      	ldr	r3, [r3, #8]
 800c168:	f003 030c 	and.w	r3, r3, #12
 800c16c:	2b04      	cmp	r3, #4
 800c16e:	d019      	beq.n	800c1a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c170:	4b91      	ldr	r3, [pc, #580]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c172:	689b      	ldr	r3, [r3, #8]
 800c174:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c178:	2b08      	cmp	r3, #8
 800c17a:	d106      	bne.n	800c18a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c17c:	4b8e      	ldr	r3, [pc, #568]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c184:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c188:	d00c      	beq.n	800c1a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c18a:	4b8b      	ldr	r3, [pc, #556]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c18c:	689b      	ldr	r3, [r3, #8]
 800c18e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c192:	2b0c      	cmp	r3, #12
 800c194:	d112      	bne.n	800c1bc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c196:	4b88      	ldr	r3, [pc, #544]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c19e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c1a2:	d10b      	bne.n	800c1bc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c1a4:	4b84      	ldr	r3, [pc, #528]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d05b      	beq.n	800c268 <HAL_RCC_OscConfig+0x124>
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d157      	bne.n	800c268 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	e25a      	b.n	800c672 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1c4:	d106      	bne.n	800c1d4 <HAL_RCC_OscConfig+0x90>
 800c1c6:	4b7c      	ldr	r3, [pc, #496]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	4a7b      	ldr	r2, [pc, #492]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c1cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c1d0:	6013      	str	r3, [r2, #0]
 800c1d2:	e01d      	b.n	800c210 <HAL_RCC_OscConfig+0xcc>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	685b      	ldr	r3, [r3, #4]
 800c1d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c1dc:	d10c      	bne.n	800c1f8 <HAL_RCC_OscConfig+0xb4>
 800c1de:	4b76      	ldr	r3, [pc, #472]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	4a75      	ldr	r2, [pc, #468]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c1e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c1e8:	6013      	str	r3, [r2, #0]
 800c1ea:	4b73      	ldr	r3, [pc, #460]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	4a72      	ldr	r2, [pc, #456]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c1f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c1f4:	6013      	str	r3, [r2, #0]
 800c1f6:	e00b      	b.n	800c210 <HAL_RCC_OscConfig+0xcc>
 800c1f8:	4b6f      	ldr	r3, [pc, #444]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	4a6e      	ldr	r2, [pc, #440]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c1fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c202:	6013      	str	r3, [r2, #0]
 800c204:	4b6c      	ldr	r3, [pc, #432]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	4a6b      	ldr	r2, [pc, #428]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c20a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c20e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	685b      	ldr	r3, [r3, #4]
 800c214:	2b00      	cmp	r3, #0
 800c216:	d013      	beq.n	800c240 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c218:	f7fa fca0 	bl	8006b5c <HAL_GetTick>
 800c21c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c21e:	e008      	b.n	800c232 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c220:	f7fa fc9c 	bl	8006b5c <HAL_GetTick>
 800c224:	4602      	mov	r2, r0
 800c226:	693b      	ldr	r3, [r7, #16]
 800c228:	1ad3      	subs	r3, r2, r3
 800c22a:	2b64      	cmp	r3, #100	; 0x64
 800c22c:	d901      	bls.n	800c232 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800c22e:	2303      	movs	r3, #3
 800c230:	e21f      	b.n	800c672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c232:	4b61      	ldr	r3, [pc, #388]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d0f0      	beq.n	800c220 <HAL_RCC_OscConfig+0xdc>
 800c23e:	e014      	b.n	800c26a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c240:	f7fa fc8c 	bl	8006b5c <HAL_GetTick>
 800c244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c246:	e008      	b.n	800c25a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c248:	f7fa fc88 	bl	8006b5c <HAL_GetTick>
 800c24c:	4602      	mov	r2, r0
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	1ad3      	subs	r3, r2, r3
 800c252:	2b64      	cmp	r3, #100	; 0x64
 800c254:	d901      	bls.n	800c25a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800c256:	2303      	movs	r3, #3
 800c258:	e20b      	b.n	800c672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c25a:	4b57      	ldr	r3, [pc, #348]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c262:	2b00      	cmp	r3, #0
 800c264:	d1f0      	bne.n	800c248 <HAL_RCC_OscConfig+0x104>
 800c266:	e000      	b.n	800c26a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f003 0302 	and.w	r3, r3, #2
 800c272:	2b00      	cmp	r3, #0
 800c274:	d06f      	beq.n	800c356 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c276:	4b50      	ldr	r3, [pc, #320]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c278:	689b      	ldr	r3, [r3, #8]
 800c27a:	f003 030c 	and.w	r3, r3, #12
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d017      	beq.n	800c2b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c282:	4b4d      	ldr	r3, [pc, #308]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c284:	689b      	ldr	r3, [r3, #8]
 800c286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c28a:	2b08      	cmp	r3, #8
 800c28c:	d105      	bne.n	800c29a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c28e:	4b4a      	ldr	r3, [pc, #296]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c296:	2b00      	cmp	r3, #0
 800c298:	d00b      	beq.n	800c2b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c29a:	4b47      	ldr	r3, [pc, #284]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c29c:	689b      	ldr	r3, [r3, #8]
 800c29e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c2a2:	2b0c      	cmp	r3, #12
 800c2a4:	d11c      	bne.n	800c2e0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c2a6:	4b44      	ldr	r3, [pc, #272]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c2a8:	685b      	ldr	r3, [r3, #4]
 800c2aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d116      	bne.n	800c2e0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c2b2:	4b41      	ldr	r3, [pc, #260]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f003 0302 	and.w	r3, r3, #2
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d005      	beq.n	800c2ca <HAL_RCC_OscConfig+0x186>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	68db      	ldr	r3, [r3, #12]
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	d001      	beq.n	800c2ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	e1d3      	b.n	800c672 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c2ca:	4b3b      	ldr	r3, [pc, #236]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	691b      	ldr	r3, [r3, #16]
 800c2d6:	00db      	lsls	r3, r3, #3
 800c2d8:	4937      	ldr	r1, [pc, #220]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c2da:	4313      	orrs	r3, r2
 800c2dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c2de:	e03a      	b.n	800c356 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d020      	beq.n	800c32a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c2e8:	4b34      	ldr	r3, [pc, #208]	; (800c3bc <HAL_RCC_OscConfig+0x278>)
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2ee:	f7fa fc35 	bl	8006b5c <HAL_GetTick>
 800c2f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c2f4:	e008      	b.n	800c308 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c2f6:	f7fa fc31 	bl	8006b5c <HAL_GetTick>
 800c2fa:	4602      	mov	r2, r0
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	1ad3      	subs	r3, r2, r3
 800c300:	2b02      	cmp	r3, #2
 800c302:	d901      	bls.n	800c308 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800c304:	2303      	movs	r3, #3
 800c306:	e1b4      	b.n	800c672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c308:	4b2b      	ldr	r3, [pc, #172]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f003 0302 	and.w	r3, r3, #2
 800c310:	2b00      	cmp	r3, #0
 800c312:	d0f0      	beq.n	800c2f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c314:	4b28      	ldr	r3, [pc, #160]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	691b      	ldr	r3, [r3, #16]
 800c320:	00db      	lsls	r3, r3, #3
 800c322:	4925      	ldr	r1, [pc, #148]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c324:	4313      	orrs	r3, r2
 800c326:	600b      	str	r3, [r1, #0]
 800c328:	e015      	b.n	800c356 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c32a:	4b24      	ldr	r3, [pc, #144]	; (800c3bc <HAL_RCC_OscConfig+0x278>)
 800c32c:	2200      	movs	r2, #0
 800c32e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c330:	f7fa fc14 	bl	8006b5c <HAL_GetTick>
 800c334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c336:	e008      	b.n	800c34a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c338:	f7fa fc10 	bl	8006b5c <HAL_GetTick>
 800c33c:	4602      	mov	r2, r0
 800c33e:	693b      	ldr	r3, [r7, #16]
 800c340:	1ad3      	subs	r3, r2, r3
 800c342:	2b02      	cmp	r3, #2
 800c344:	d901      	bls.n	800c34a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c346:	2303      	movs	r3, #3
 800c348:	e193      	b.n	800c672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c34a:	4b1b      	ldr	r3, [pc, #108]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f003 0302 	and.w	r3, r3, #2
 800c352:	2b00      	cmp	r3, #0
 800c354:	d1f0      	bne.n	800c338 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f003 0308 	and.w	r3, r3, #8
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d036      	beq.n	800c3d0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	695b      	ldr	r3, [r3, #20]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d016      	beq.n	800c398 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c36a:	4b15      	ldr	r3, [pc, #84]	; (800c3c0 <HAL_RCC_OscConfig+0x27c>)
 800c36c:	2201      	movs	r2, #1
 800c36e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c370:	f7fa fbf4 	bl	8006b5c <HAL_GetTick>
 800c374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c376:	e008      	b.n	800c38a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c378:	f7fa fbf0 	bl	8006b5c <HAL_GetTick>
 800c37c:	4602      	mov	r2, r0
 800c37e:	693b      	ldr	r3, [r7, #16]
 800c380:	1ad3      	subs	r3, r2, r3
 800c382:	2b02      	cmp	r3, #2
 800c384:	d901      	bls.n	800c38a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800c386:	2303      	movs	r3, #3
 800c388:	e173      	b.n	800c672 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c38a:	4b0b      	ldr	r3, [pc, #44]	; (800c3b8 <HAL_RCC_OscConfig+0x274>)
 800c38c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c38e:	f003 0302 	and.w	r3, r3, #2
 800c392:	2b00      	cmp	r3, #0
 800c394:	d0f0      	beq.n	800c378 <HAL_RCC_OscConfig+0x234>
 800c396:	e01b      	b.n	800c3d0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c398:	4b09      	ldr	r3, [pc, #36]	; (800c3c0 <HAL_RCC_OscConfig+0x27c>)
 800c39a:	2200      	movs	r2, #0
 800c39c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c39e:	f7fa fbdd 	bl	8006b5c <HAL_GetTick>
 800c3a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c3a4:	e00e      	b.n	800c3c4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c3a6:	f7fa fbd9 	bl	8006b5c <HAL_GetTick>
 800c3aa:	4602      	mov	r2, r0
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	1ad3      	subs	r3, r2, r3
 800c3b0:	2b02      	cmp	r3, #2
 800c3b2:	d907      	bls.n	800c3c4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800c3b4:	2303      	movs	r3, #3
 800c3b6:	e15c      	b.n	800c672 <HAL_RCC_OscConfig+0x52e>
 800c3b8:	40023800 	.word	0x40023800
 800c3bc:	42470000 	.word	0x42470000
 800c3c0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c3c4:	4b8a      	ldr	r3, [pc, #552]	; (800c5f0 <HAL_RCC_OscConfig+0x4ac>)
 800c3c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c3c8:	f003 0302 	and.w	r3, r3, #2
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d1ea      	bne.n	800c3a6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f003 0304 	and.w	r3, r3, #4
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	f000 8097 	beq.w	800c50c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c3e2:	4b83      	ldr	r3, [pc, #524]	; (800c5f0 <HAL_RCC_OscConfig+0x4ac>)
 800c3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d10f      	bne.n	800c40e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	60bb      	str	r3, [r7, #8]
 800c3f2:	4b7f      	ldr	r3, [pc, #508]	; (800c5f0 <HAL_RCC_OscConfig+0x4ac>)
 800c3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3f6:	4a7e      	ldr	r2, [pc, #504]	; (800c5f0 <HAL_RCC_OscConfig+0x4ac>)
 800c3f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3fc:	6413      	str	r3, [r2, #64]	; 0x40
 800c3fe:	4b7c      	ldr	r3, [pc, #496]	; (800c5f0 <HAL_RCC_OscConfig+0x4ac>)
 800c400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c402:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c406:	60bb      	str	r3, [r7, #8]
 800c408:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c40a:	2301      	movs	r3, #1
 800c40c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c40e:	4b79      	ldr	r3, [pc, #484]	; (800c5f4 <HAL_RCC_OscConfig+0x4b0>)
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c416:	2b00      	cmp	r3, #0
 800c418:	d118      	bne.n	800c44c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c41a:	4b76      	ldr	r3, [pc, #472]	; (800c5f4 <HAL_RCC_OscConfig+0x4b0>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4a75      	ldr	r2, [pc, #468]	; (800c5f4 <HAL_RCC_OscConfig+0x4b0>)
 800c420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c424:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c426:	f7fa fb99 	bl	8006b5c <HAL_GetTick>
 800c42a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c42c:	e008      	b.n	800c440 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c42e:	f7fa fb95 	bl	8006b5c <HAL_GetTick>
 800c432:	4602      	mov	r2, r0
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	1ad3      	subs	r3, r2, r3
 800c438:	2b02      	cmp	r3, #2
 800c43a:	d901      	bls.n	800c440 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800c43c:	2303      	movs	r3, #3
 800c43e:	e118      	b.n	800c672 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c440:	4b6c      	ldr	r3, [pc, #432]	; (800c5f4 <HAL_RCC_OscConfig+0x4b0>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d0f0      	beq.n	800c42e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	689b      	ldr	r3, [r3, #8]
 800c450:	2b01      	cmp	r3, #1
 800c452:	d106      	bne.n	800c462 <HAL_RCC_OscConfig+0x31e>
 800c454:	4b66      	ldr	r3, [pc, #408]	; (800c5f0 <HAL_RCC_OscConfig+0x4ac>)
 800c456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c458:	4a65      	ldr	r2, [pc, #404]	; (800c5f0 <HAL_RCC_OscConfig+0x4ac>)
 800c45a:	f043 0301 	orr.w	r3, r3, #1
 800c45e:	6713      	str	r3, [r2, #112]	; 0x70
 800c460:	e01c      	b.n	800c49c <HAL_RCC_OscConfig+0x358>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	689b      	ldr	r3, [r3, #8]
 800c466:	2b05      	cmp	r3, #5
 800c468:	d10c      	bne.n	800c484 <HAL_RCC_OscConfig+0x340>
 800c46a:	4b61      	ldr	r3, [pc, #388]	; (800c5f0 <HAL_RCC_OscConfig+0x4ac>)
 800c46c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c46e:	4a60      	ldr	r2, [pc, #384]	; (800c5f0 <HAL_RCC_OscConfig+0x4ac>)
 800c470:	f043 0304 	orr.w	r3, r3, #4
 800c474:	6713      	str	r3, [r2, #112]	; 0x70
 800c476:	4b5e      	ldr	r3, [pc, #376]	; (800c5f0 <HAL_RCC_OscConfig+0x4ac>)
 800c478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c47a:	4a5d      	ldr	r2, [pc, #372]	; (800c5f0 <HAL_RCC_OscConfig+0x4ac>)
 800c47c:	f043 0301 	orr.w	r3, r3, #1
 800c480:	6713      	str	r3, [r2, #112]	; 0x70
 800c482:	e00b      	b.n	800c49c <HAL_RCC_OscConfig+0x358>
 800c484:	4b5a      	ldr	r3, [pc, #360]	; (800c5f0 <HAL_RCC_OscConfig+0x4ac>)
 800c486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c488:	4a59      	ldr	r2, [pc, #356]	; (800c5f0 <HAL_RCC_OscConfig+0x4ac>)
 800c48a:	f023 0301 	bic.w	r3, r3, #1
 800c48e:	6713      	str	r3, [r2, #112]	; 0x70
 800c490:	4b57      	ldr	r3, [pc, #348]	; (800c5f0 <HAL_RCC_OscConfig+0x4ac>)
 800c492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c494:	4a56      	ldr	r2, [pc, #344]	; (800c5f0 <HAL_RCC_OscConfig+0x4ac>)
 800c496:	f023 0304 	bic.w	r3, r3, #4
 800c49a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	689b      	ldr	r3, [r3, #8]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d015      	beq.n	800c4d0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4a4:	f7fa fb5a 	bl	8006b5c <HAL_GetTick>
 800c4a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c4aa:	e00a      	b.n	800c4c2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c4ac:	f7fa fb56 	bl	8006b5c <HAL_GetTick>
 800c4b0:	4602      	mov	r2, r0
 800c4b2:	693b      	ldr	r3, [r7, #16]
 800c4b4:	1ad3      	subs	r3, r2, r3
 800c4b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4ba:	4293      	cmp	r3, r2
 800c4bc:	d901      	bls.n	800c4c2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800c4be:	2303      	movs	r3, #3
 800c4c0:	e0d7      	b.n	800c672 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c4c2:	4b4b      	ldr	r3, [pc, #300]	; (800c5f0 <HAL_RCC_OscConfig+0x4ac>)
 800c4c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4c6:	f003 0302 	and.w	r3, r3, #2
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d0ee      	beq.n	800c4ac <HAL_RCC_OscConfig+0x368>
 800c4ce:	e014      	b.n	800c4fa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4d0:	f7fa fb44 	bl	8006b5c <HAL_GetTick>
 800c4d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c4d6:	e00a      	b.n	800c4ee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c4d8:	f7fa fb40 	bl	8006b5c <HAL_GetTick>
 800c4dc:	4602      	mov	r2, r0
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	1ad3      	subs	r3, r2, r3
 800c4e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d901      	bls.n	800c4ee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800c4ea:	2303      	movs	r3, #3
 800c4ec:	e0c1      	b.n	800c672 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c4ee:	4b40      	ldr	r3, [pc, #256]	; (800c5f0 <HAL_RCC_OscConfig+0x4ac>)
 800c4f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4f2:	f003 0302 	and.w	r3, r3, #2
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d1ee      	bne.n	800c4d8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c4fa:	7dfb      	ldrb	r3, [r7, #23]
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	d105      	bne.n	800c50c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c500:	4b3b      	ldr	r3, [pc, #236]	; (800c5f0 <HAL_RCC_OscConfig+0x4ac>)
 800c502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c504:	4a3a      	ldr	r2, [pc, #232]	; (800c5f0 <HAL_RCC_OscConfig+0x4ac>)
 800c506:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c50a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	699b      	ldr	r3, [r3, #24]
 800c510:	2b00      	cmp	r3, #0
 800c512:	f000 80ad 	beq.w	800c670 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c516:	4b36      	ldr	r3, [pc, #216]	; (800c5f0 <HAL_RCC_OscConfig+0x4ac>)
 800c518:	689b      	ldr	r3, [r3, #8]
 800c51a:	f003 030c 	and.w	r3, r3, #12
 800c51e:	2b08      	cmp	r3, #8
 800c520:	d060      	beq.n	800c5e4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	699b      	ldr	r3, [r3, #24]
 800c526:	2b02      	cmp	r3, #2
 800c528:	d145      	bne.n	800c5b6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c52a:	4b33      	ldr	r3, [pc, #204]	; (800c5f8 <HAL_RCC_OscConfig+0x4b4>)
 800c52c:	2200      	movs	r2, #0
 800c52e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c530:	f7fa fb14 	bl	8006b5c <HAL_GetTick>
 800c534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c536:	e008      	b.n	800c54a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c538:	f7fa fb10 	bl	8006b5c <HAL_GetTick>
 800c53c:	4602      	mov	r2, r0
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	1ad3      	subs	r3, r2, r3
 800c542:	2b02      	cmp	r3, #2
 800c544:	d901      	bls.n	800c54a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800c546:	2303      	movs	r3, #3
 800c548:	e093      	b.n	800c672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c54a:	4b29      	ldr	r3, [pc, #164]	; (800c5f0 <HAL_RCC_OscConfig+0x4ac>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c552:	2b00      	cmp	r3, #0
 800c554:	d1f0      	bne.n	800c538 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	69da      	ldr	r2, [r3, #28]
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6a1b      	ldr	r3, [r3, #32]
 800c55e:	431a      	orrs	r2, r3
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c564:	019b      	lsls	r3, r3, #6
 800c566:	431a      	orrs	r2, r3
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c56c:	085b      	lsrs	r3, r3, #1
 800c56e:	3b01      	subs	r3, #1
 800c570:	041b      	lsls	r3, r3, #16
 800c572:	431a      	orrs	r2, r3
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c578:	061b      	lsls	r3, r3, #24
 800c57a:	431a      	orrs	r2, r3
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c580:	071b      	lsls	r3, r3, #28
 800c582:	491b      	ldr	r1, [pc, #108]	; (800c5f0 <HAL_RCC_OscConfig+0x4ac>)
 800c584:	4313      	orrs	r3, r2
 800c586:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c588:	4b1b      	ldr	r3, [pc, #108]	; (800c5f8 <HAL_RCC_OscConfig+0x4b4>)
 800c58a:	2201      	movs	r2, #1
 800c58c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c58e:	f7fa fae5 	bl	8006b5c <HAL_GetTick>
 800c592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c594:	e008      	b.n	800c5a8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c596:	f7fa fae1 	bl	8006b5c <HAL_GetTick>
 800c59a:	4602      	mov	r2, r0
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	1ad3      	subs	r3, r2, r3
 800c5a0:	2b02      	cmp	r3, #2
 800c5a2:	d901      	bls.n	800c5a8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800c5a4:	2303      	movs	r3, #3
 800c5a6:	e064      	b.n	800c672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c5a8:	4b11      	ldr	r3, [pc, #68]	; (800c5f0 <HAL_RCC_OscConfig+0x4ac>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d0f0      	beq.n	800c596 <HAL_RCC_OscConfig+0x452>
 800c5b4:	e05c      	b.n	800c670 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c5b6:	4b10      	ldr	r3, [pc, #64]	; (800c5f8 <HAL_RCC_OscConfig+0x4b4>)
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5bc:	f7fa face 	bl	8006b5c <HAL_GetTick>
 800c5c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c5c2:	e008      	b.n	800c5d6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c5c4:	f7fa faca 	bl	8006b5c <HAL_GetTick>
 800c5c8:	4602      	mov	r2, r0
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	1ad3      	subs	r3, r2, r3
 800c5ce:	2b02      	cmp	r3, #2
 800c5d0:	d901      	bls.n	800c5d6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800c5d2:	2303      	movs	r3, #3
 800c5d4:	e04d      	b.n	800c672 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c5d6:	4b06      	ldr	r3, [pc, #24]	; (800c5f0 <HAL_RCC_OscConfig+0x4ac>)
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d1f0      	bne.n	800c5c4 <HAL_RCC_OscConfig+0x480>
 800c5e2:	e045      	b.n	800c670 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	699b      	ldr	r3, [r3, #24]
 800c5e8:	2b01      	cmp	r3, #1
 800c5ea:	d107      	bne.n	800c5fc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	e040      	b.n	800c672 <HAL_RCC_OscConfig+0x52e>
 800c5f0:	40023800 	.word	0x40023800
 800c5f4:	40007000 	.word	0x40007000
 800c5f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c5fc:	4b1f      	ldr	r3, [pc, #124]	; (800c67c <HAL_RCC_OscConfig+0x538>)
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	699b      	ldr	r3, [r3, #24]
 800c606:	2b01      	cmp	r3, #1
 800c608:	d030      	beq.n	800c66c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c614:	429a      	cmp	r2, r3
 800c616:	d129      	bne.n	800c66c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c622:	429a      	cmp	r2, r3
 800c624:	d122      	bne.n	800c66c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c626:	68fa      	ldr	r2, [r7, #12]
 800c628:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c62c:	4013      	ands	r3, r2
 800c62e:	687a      	ldr	r2, [r7, #4]
 800c630:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c632:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c634:	4293      	cmp	r3, r2
 800c636:	d119      	bne.n	800c66c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c642:	085b      	lsrs	r3, r3, #1
 800c644:	3b01      	subs	r3, #1
 800c646:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c648:	429a      	cmp	r2, r3
 800c64a:	d10f      	bne.n	800c66c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c656:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c658:	429a      	cmp	r2, r3
 800c65a:	d107      	bne.n	800c66c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c666:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c668:	429a      	cmp	r2, r3
 800c66a:	d001      	beq.n	800c670 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800c66c:	2301      	movs	r3, #1
 800c66e:	e000      	b.n	800c672 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800c670:	2300      	movs	r3, #0
}
 800c672:	4618      	mov	r0, r3
 800c674:	3718      	adds	r7, #24
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop
 800c67c:	40023800 	.word	0x40023800

0800c680 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c688:	2301      	movs	r3, #1
 800c68a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d101      	bne.n	800c696 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800c692:	2301      	movs	r3, #1
 800c694:	e066      	b.n	800c764 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	7f5b      	ldrb	r3, [r3, #29]
 800c69a:	b2db      	uxtb	r3, r3
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d105      	bne.n	800c6ac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f7fa f84c 	bl	8006744 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	2202      	movs	r2, #2
 800c6b0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	22ca      	movs	r2, #202	; 0xca
 800c6b8:	625a      	str	r2, [r3, #36]	; 0x24
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	2253      	movs	r2, #83	; 0x53
 800c6c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f000 fa45 	bl	800cb52 <RTC_EnterInitMode>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800c6cc:	7bfb      	ldrb	r3, [r7, #15]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d12c      	bne.n	800c72c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	689b      	ldr	r3, [r3, #8]
 800c6d8:	687a      	ldr	r2, [r7, #4]
 800c6da:	6812      	ldr	r2, [r2, #0]
 800c6dc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c6e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6e4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	6899      	ldr	r1, [r3, #8]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	685a      	ldr	r2, [r3, #4]
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	691b      	ldr	r3, [r3, #16]
 800c6f4:	431a      	orrs	r2, r3
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	695b      	ldr	r3, [r3, #20]
 800c6fa:	431a      	orrs	r2, r3
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	430a      	orrs	r2, r1
 800c702:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	687a      	ldr	r2, [r7, #4]
 800c70a:	68d2      	ldr	r2, [r2, #12]
 800c70c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	6919      	ldr	r1, [r3, #16]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	689b      	ldr	r3, [r3, #8]
 800c718:	041a      	lsls	r2, r3, #16
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	430a      	orrs	r2, r1
 800c720:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f000 fa4c 	bl	800cbc0 <RTC_ExitInitMode>
 800c728:	4603      	mov	r3, r0
 800c72a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800c72c:	7bfb      	ldrb	r3, [r7, #15]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d113      	bne.n	800c75a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c740:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	699a      	ldr	r2, [r3, #24]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	430a      	orrs	r2, r1
 800c752:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2201      	movs	r2, #1
 800c758:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	22ff      	movs	r2, #255	; 0xff
 800c760:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800c762:	7bfb      	ldrb	r3, [r7, #15]
}
 800c764:	4618      	mov	r0, r3
 800c766:	3710      	adds	r7, #16
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}

0800c76c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c76c:	b590      	push	{r4, r7, lr}
 800c76e:	b087      	sub	sp, #28
 800c770:	af00      	add	r7, sp, #0
 800c772:	60f8      	str	r0, [r7, #12]
 800c774:	60b9      	str	r1, [r7, #8]
 800c776:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c778:	2300      	movs	r3, #0
 800c77a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	7f1b      	ldrb	r3, [r3, #28]
 800c780:	2b01      	cmp	r3, #1
 800c782:	d101      	bne.n	800c788 <HAL_RTC_SetTime+0x1c>
 800c784:	2302      	movs	r3, #2
 800c786:	e087      	b.n	800c898 <HAL_RTC_SetTime+0x12c>
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	2201      	movs	r2, #1
 800c78c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	2202      	movs	r2, #2
 800c792:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d126      	bne.n	800c7e8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	689b      	ldr	r3, [r3, #8]
 800c7a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d102      	bne.n	800c7ae <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c7a8:	68bb      	ldr	r3, [r7, #8]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f000 fa29 	bl	800cc0a <RTC_ByteToBcd2>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	785b      	ldrb	r3, [r3, #1]
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f000 fa22 	bl	800cc0a <RTC_ByteToBcd2>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c7ca:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	789b      	ldrb	r3, [r3, #2]
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f000 fa1a 	bl	800cc0a <RTC_ByteToBcd2>
 800c7d6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c7d8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	78db      	ldrb	r3, [r3, #3]
 800c7e0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c7e2:	4313      	orrs	r3, r2
 800c7e4:	617b      	str	r3, [r7, #20]
 800c7e6:	e018      	b.n	800c81a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	689b      	ldr	r3, [r3, #8]
 800c7ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d102      	bne.n	800c7fc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	785b      	ldrb	r3, [r3, #1]
 800c806:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c808:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800c80a:	68ba      	ldr	r2, [r7, #8]
 800c80c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800c80e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	78db      	ldrb	r3, [r3, #3]
 800c814:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800c816:	4313      	orrs	r3, r2
 800c818:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	22ca      	movs	r2, #202	; 0xca
 800c820:	625a      	str	r2, [r3, #36]	; 0x24
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	2253      	movs	r2, #83	; 0x53
 800c828:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c82a:	68f8      	ldr	r0, [r7, #12]
 800c82c:	f000 f991 	bl	800cb52 <RTC_EnterInitMode>
 800c830:	4603      	mov	r3, r0
 800c832:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800c834:	7cfb      	ldrb	r3, [r7, #19]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d120      	bne.n	800c87c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681a      	ldr	r2, [r3, #0]
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c844:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c848:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	689a      	ldr	r2, [r3, #8]
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c858:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	6899      	ldr	r1, [r3, #8]
 800c860:	68bb      	ldr	r3, [r7, #8]
 800c862:	68da      	ldr	r2, [r3, #12]
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	691b      	ldr	r3, [r3, #16]
 800c868:	431a      	orrs	r2, r3
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	430a      	orrs	r2, r1
 800c870:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c872:	68f8      	ldr	r0, [r7, #12]
 800c874:	f000 f9a4 	bl	800cbc0 <RTC_ExitInitMode>
 800c878:	4603      	mov	r3, r0
 800c87a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800c87c:	7cfb      	ldrb	r3, [r7, #19]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d102      	bne.n	800c888 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	2201      	movs	r2, #1
 800c886:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	22ff      	movs	r2, #255	; 0xff
 800c88e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	2200      	movs	r2, #0
 800c894:	771a      	strb	r2, [r3, #28]

  return status;
 800c896:	7cfb      	ldrb	r3, [r7, #19]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	371c      	adds	r7, #28
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd90      	pop	{r4, r7, pc}

0800c8a0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b086      	sub	sp, #24
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	60f8      	str	r0, [r7, #12]
 800c8a8:	60b9      	str	r1, [r7, #8]
 800c8aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	691b      	ldr	r3, [r3, #16]
 800c8c0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800c8d2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800c8d6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	0c1b      	lsrs	r3, r3, #16
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8e2:	b2da      	uxtb	r2, r3
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	0a1b      	lsrs	r3, r3, #8
 800c8ec:	b2db      	uxtb	r3, r3
 800c8ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8f2:	b2da      	uxtb	r2, r3
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	b2db      	uxtb	r3, r3
 800c8fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c900:	b2da      	uxtb	r2, r3
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	0d9b      	lsrs	r3, r3, #22
 800c90a:	b2db      	uxtb	r3, r3
 800c90c:	f003 0301 	and.w	r3, r3, #1
 800c910:	b2da      	uxtb	r2, r3
 800c912:	68bb      	ldr	r3, [r7, #8]
 800c914:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d11a      	bne.n	800c952 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	781b      	ldrb	r3, [r3, #0]
 800c920:	4618      	mov	r0, r3
 800c922:	f000 f98f 	bl	800cc44 <RTC_Bcd2ToByte>
 800c926:	4603      	mov	r3, r0
 800c928:	461a      	mov	r2, r3
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	785b      	ldrb	r3, [r3, #1]
 800c932:	4618      	mov	r0, r3
 800c934:	f000 f986 	bl	800cc44 <RTC_Bcd2ToByte>
 800c938:	4603      	mov	r3, r0
 800c93a:	461a      	mov	r2, r3
 800c93c:	68bb      	ldr	r3, [r7, #8]
 800c93e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	789b      	ldrb	r3, [r3, #2]
 800c944:	4618      	mov	r0, r3
 800c946:	f000 f97d 	bl	800cc44 <RTC_Bcd2ToByte>
 800c94a:	4603      	mov	r3, r0
 800c94c:	461a      	mov	r2, r3
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c952:	2300      	movs	r3, #0
}
 800c954:	4618      	mov	r0, r3
 800c956:	3718      	adds	r7, #24
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}

0800c95c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c95c:	b590      	push	{r4, r7, lr}
 800c95e:	b087      	sub	sp, #28
 800c960:	af00      	add	r7, sp, #0
 800c962:	60f8      	str	r0, [r7, #12]
 800c964:	60b9      	str	r1, [r7, #8]
 800c966:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800c968:	2300      	movs	r3, #0
 800c96a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	7f1b      	ldrb	r3, [r3, #28]
 800c970:	2b01      	cmp	r3, #1
 800c972:	d101      	bne.n	800c978 <HAL_RTC_SetDate+0x1c>
 800c974:	2302      	movs	r3, #2
 800c976:	e071      	b.n	800ca5c <HAL_RTC_SetDate+0x100>
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	2201      	movs	r2, #1
 800c97c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	2202      	movs	r2, #2
 800c982:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d10e      	bne.n	800c9a8 <HAL_RTC_SetDate+0x4c>
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	785b      	ldrb	r3, [r3, #1]
 800c98e:	f003 0310 	and.w	r3, r3, #16
 800c992:	2b00      	cmp	r3, #0
 800c994:	d008      	beq.n	800c9a8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	785b      	ldrb	r3, [r3, #1]
 800c99a:	f023 0310 	bic.w	r3, r3, #16
 800c99e:	b2db      	uxtb	r3, r3
 800c9a0:	330a      	adds	r3, #10
 800c9a2:	b2da      	uxtb	r2, r3
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d11c      	bne.n	800c9e8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	78db      	ldrb	r3, [r3, #3]
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f000 f929 	bl	800cc0a <RTC_ByteToBcd2>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	785b      	ldrb	r3, [r3, #1]
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f000 f922 	bl	800cc0a <RTC_ByteToBcd2>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c9ca:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800c9cc:	68bb      	ldr	r3, [r7, #8]
 800c9ce:	789b      	ldrb	r3, [r3, #2]
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f000 f91a 	bl	800cc0a <RTC_ByteToBcd2>
 800c9d6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c9d8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c9e2:	4313      	orrs	r3, r2
 800c9e4:	617b      	str	r3, [r7, #20]
 800c9e6:	e00e      	b.n	800ca06 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	78db      	ldrb	r3, [r3, #3]
 800c9ec:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	785b      	ldrb	r3, [r3, #1]
 800c9f2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c9f4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800c9f6:	68ba      	ldr	r2, [r7, #8]
 800c9f8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c9fa:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800ca02:	4313      	orrs	r3, r2
 800ca04:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	22ca      	movs	r2, #202	; 0xca
 800ca0c:	625a      	str	r2, [r3, #36]	; 0x24
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	2253      	movs	r2, #83	; 0x53
 800ca14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ca16:	68f8      	ldr	r0, [r7, #12]
 800ca18:	f000 f89b 	bl	800cb52 <RTC_EnterInitMode>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800ca20:	7cfb      	ldrb	r3, [r7, #19]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d10c      	bne.n	800ca40 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681a      	ldr	r2, [r3, #0]
 800ca2a:	697b      	ldr	r3, [r7, #20]
 800ca2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ca30:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ca34:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ca36:	68f8      	ldr	r0, [r7, #12]
 800ca38:	f000 f8c2 	bl	800cbc0 <RTC_ExitInitMode>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800ca40:	7cfb      	ldrb	r3, [r7, #19]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d102      	bne.n	800ca4c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	2201      	movs	r2, #1
 800ca4a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	22ff      	movs	r2, #255	; 0xff
 800ca52:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	2200      	movs	r2, #0
 800ca58:	771a      	strb	r2, [r3, #28]

  return status;
 800ca5a:	7cfb      	ldrb	r3, [r7, #19]
}
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	371c      	adds	r7, #28
 800ca60:	46bd      	mov	sp, r7
 800ca62:	bd90      	pop	{r4, r7, pc}

0800ca64 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b086      	sub	sp, #24
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800ca70:	2300      	movs	r3, #0
 800ca72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	685b      	ldr	r3, [r3, #4]
 800ca7a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ca7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ca82:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	0c1b      	lsrs	r3, r3, #16
 800ca88:	b2da      	uxtb	r2, r3
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	0a1b      	lsrs	r3, r3, #8
 800ca92:	b2db      	uxtb	r3, r3
 800ca94:	f003 031f 	and.w	r3, r3, #31
 800ca98:	b2da      	uxtb	r2, r3
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800caa6:	b2da      	uxtb	r2, r3
 800caa8:	68bb      	ldr	r3, [r7, #8]
 800caaa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	0b5b      	lsrs	r3, r3, #13
 800cab0:	b2db      	uxtb	r3, r3
 800cab2:	f003 0307 	and.w	r3, r3, #7
 800cab6:	b2da      	uxtb	r2, r3
 800cab8:	68bb      	ldr	r3, [r7, #8]
 800caba:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d11a      	bne.n	800caf8 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	78db      	ldrb	r3, [r3, #3]
 800cac6:	4618      	mov	r0, r3
 800cac8:	f000 f8bc 	bl	800cc44 <RTC_Bcd2ToByte>
 800cacc:	4603      	mov	r3, r0
 800cace:	461a      	mov	r2, r3
 800cad0:	68bb      	ldr	r3, [r7, #8]
 800cad2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800cad4:	68bb      	ldr	r3, [r7, #8]
 800cad6:	785b      	ldrb	r3, [r3, #1]
 800cad8:	4618      	mov	r0, r3
 800cada:	f000 f8b3 	bl	800cc44 <RTC_Bcd2ToByte>
 800cade:	4603      	mov	r3, r0
 800cae0:	461a      	mov	r2, r3
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	789b      	ldrb	r3, [r3, #2]
 800caea:	4618      	mov	r0, r3
 800caec:	f000 f8aa 	bl	800cc44 <RTC_Bcd2ToByte>
 800caf0:	4603      	mov	r3, r0
 800caf2:	461a      	mov	r2, r3
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800caf8:	2300      	movs	r3, #0
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3718      	adds	r7, #24
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b084      	sub	sp, #16
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	68da      	ldr	r2, [r3, #12]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800cb1c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cb1e:	f7fa f81d 	bl	8006b5c <HAL_GetTick>
 800cb22:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cb24:	e009      	b.n	800cb3a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cb26:	f7fa f819 	bl	8006b5c <HAL_GetTick>
 800cb2a:	4602      	mov	r2, r0
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	1ad3      	subs	r3, r2, r3
 800cb30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb34:	d901      	bls.n	800cb3a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800cb36:	2303      	movs	r3, #3
 800cb38:	e007      	b.n	800cb4a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	68db      	ldr	r3, [r3, #12]
 800cb40:	f003 0320 	and.w	r3, r3, #32
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d0ee      	beq.n	800cb26 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800cb48:	2300      	movs	r3, #0
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3710      	adds	r7, #16
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}

0800cb52 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cb52:	b580      	push	{r7, lr}
 800cb54:	b084      	sub	sp, #16
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d122      	bne.n	800cbb6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	68da      	ldr	r2, [r3, #12]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cb7e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cb80:	f7f9 ffec 	bl	8006b5c <HAL_GetTick>
 800cb84:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800cb86:	e00c      	b.n	800cba2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cb88:	f7f9 ffe8 	bl	8006b5c <HAL_GetTick>
 800cb8c:	4602      	mov	r2, r0
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	1ad3      	subs	r3, r2, r3
 800cb92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb96:	d904      	bls.n	800cba2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2204      	movs	r2, #4
 800cb9c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800cb9e:	2301      	movs	r3, #1
 800cba0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	68db      	ldr	r3, [r3, #12]
 800cba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d102      	bne.n	800cbb6 <RTC_EnterInitMode+0x64>
 800cbb0:	7bfb      	ldrb	r3, [r7, #15]
 800cbb2:	2b01      	cmp	r3, #1
 800cbb4:	d1e8      	bne.n	800cb88 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800cbb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3710      	adds	r7, #16
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}

0800cbc0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b084      	sub	sp, #16
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	68da      	ldr	r2, [r3, #12]
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cbda:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	689b      	ldr	r3, [r3, #8]
 800cbe2:	f003 0320 	and.w	r3, r3, #32
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d10a      	bne.n	800cc00 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f7ff ff89 	bl	800cb02 <HAL_RTC_WaitForSynchro>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d004      	beq.n	800cc00 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2204      	movs	r2, #4
 800cbfa:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800cc00:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3710      	adds	r7, #16
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}

0800cc0a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800cc0a:	b480      	push	{r7}
 800cc0c:	b085      	sub	sp, #20
 800cc0e:	af00      	add	r7, sp, #0
 800cc10:	4603      	mov	r3, r0
 800cc12:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800cc14:	2300      	movs	r3, #0
 800cc16:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800cc18:	e005      	b.n	800cc26 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800cc1a:	7bfb      	ldrb	r3, [r7, #15]
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800cc20:	79fb      	ldrb	r3, [r7, #7]
 800cc22:	3b0a      	subs	r3, #10
 800cc24:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800cc26:	79fb      	ldrb	r3, [r7, #7]
 800cc28:	2b09      	cmp	r3, #9
 800cc2a:	d8f6      	bhi.n	800cc1a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800cc2c:	7bfb      	ldrb	r3, [r7, #15]
 800cc2e:	011b      	lsls	r3, r3, #4
 800cc30:	b2da      	uxtb	r2, r3
 800cc32:	79fb      	ldrb	r3, [r7, #7]
 800cc34:	4313      	orrs	r3, r2
 800cc36:	b2db      	uxtb	r3, r3
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3714      	adds	r7, #20
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr

0800cc44 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b085      	sub	sp, #20
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800cc52:	79fb      	ldrb	r3, [r7, #7]
 800cc54:	091b      	lsrs	r3, r3, #4
 800cc56:	b2db      	uxtb	r3, r3
 800cc58:	461a      	mov	r2, r3
 800cc5a:	0092      	lsls	r2, r2, #2
 800cc5c:	4413      	add	r3, r2
 800cc5e:	005b      	lsls	r3, r3, #1
 800cc60:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800cc62:	79fb      	ldrb	r3, [r7, #7]
 800cc64:	f003 030f 	and.w	r3, r3, #15
 800cc68:	b2da      	uxtb	r2, r3
 800cc6a:	7bfb      	ldrb	r3, [r7, #15]
 800cc6c:	4413      	add	r3, r2
 800cc6e:	b2db      	uxtb	r3, r3
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3714      	adds	r7, #20
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr

0800cc7c <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b087      	sub	sp, #28
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	60b9      	str	r1, [r7, #8]
 800cc86:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800cc88:	2300      	movs	r3, #0
 800cc8a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	3350      	adds	r3, #80	; 0x50
 800cc92:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	009b      	lsls	r3, r3, #2
 800cc98:	697a      	ldr	r2, [r7, #20]
 800cc9a:	4413      	add	r3, r2
 800cc9c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	687a      	ldr	r2, [r7, #4]
 800cca2:	601a      	str	r2, [r3, #0]
}
 800cca4:	bf00      	nop
 800cca6:	371c      	adds	r7, #28
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccae:	4770      	bx	lr

0800ccb0 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	b085      	sub	sp, #20
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	3350      	adds	r3, #80	; 0x50
 800ccc4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	009b      	lsls	r3, r3, #2
 800ccca:	68fa      	ldr	r2, [r7, #12]
 800cccc:	4413      	add	r3, r2
 800ccce:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3714      	adds	r7, #20
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr

0800cce0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b082      	sub	sp, #8
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d101      	bne.n	800ccf2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ccee:	2301      	movs	r3, #1
 800ccf0:	e022      	b.n	800cd38 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ccf8:	b2db      	uxtb	r3, r3
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d105      	bne.n	800cd0a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2200      	movs	r2, #0
 800cd02:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f7f9 fd47 	bl	8006798 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2203      	movs	r2, #3
 800cd0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f000 f814 	bl	800cd40 <HAL_SD_InitCard>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d001      	beq.n	800cd22 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cd1e:	2301      	movs	r3, #1
 800cd20:	e00a      	b.n	800cd38 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2200      	movs	r2, #0
 800cd26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2201      	movs	r2, #1
 800cd32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cd36:	2300      	movs	r3, #0
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3708      	adds	r7, #8
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cd40:	b5b0      	push	{r4, r5, r7, lr}
 800cd42:	b08e      	sub	sp, #56	; 0x38
 800cd44:	af04      	add	r7, sp, #16
 800cd46:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800cd50:	2300      	movs	r3, #0
 800cd52:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800cd54:	2300      	movs	r3, #0
 800cd56:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800cd5c:	2376      	movs	r3, #118	; 0x76
 800cd5e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681d      	ldr	r5, [r3, #0]
 800cd64:	466c      	mov	r4, sp
 800cd66:	f107 0314 	add.w	r3, r7, #20
 800cd6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cd6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cd72:	f107 0308 	add.w	r3, r7, #8
 800cd76:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cd78:	4628      	mov	r0, r5
 800cd7a:	f001 feef 	bl	800eb5c <SDIO_Init>
 800cd7e:	4603      	mov	r3, r0
 800cd80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800cd84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d001      	beq.n	800cd90 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	e04f      	b.n	800ce30 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800cd90:	4b29      	ldr	r3, [pc, #164]	; (800ce38 <HAL_SD_InitCard+0xf8>)
 800cd92:	2200      	movs	r2, #0
 800cd94:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f001 ff27 	bl	800ebee <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800cda0:	4b25      	ldr	r3, [pc, #148]	; (800ce38 <HAL_SD_InitCard+0xf8>)
 800cda2:	2201      	movs	r2, #1
 800cda4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800cda6:	2002      	movs	r0, #2
 800cda8:	f7f9 fee4 	bl	8006b74 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f001 f8f1 	bl	800df94 <SD_PowerON>
 800cdb2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cdb4:	6a3b      	ldr	r3, [r7, #32]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d00b      	beq.n	800cdd2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdc6:	6a3b      	ldr	r3, [r7, #32]
 800cdc8:	431a      	orrs	r2, r3
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cdce:	2301      	movs	r3, #1
 800cdd0:	e02e      	b.n	800ce30 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f001 f810 	bl	800ddf8 <SD_InitCard>
 800cdd8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cdda:	6a3b      	ldr	r3, [r7, #32]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d00b      	beq.n	800cdf8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2201      	movs	r2, #1
 800cde4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cdec:	6a3b      	ldr	r3, [r7, #32]
 800cdee:	431a      	orrs	r2, r3
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	e01b      	b.n	800ce30 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ce00:	4618      	mov	r0, r3
 800ce02:	f001 ff86 	bl	800ed12 <SDMMC_CmdBlockLength>
 800ce06:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce08:	6a3b      	ldr	r3, [r7, #32]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d00f      	beq.n	800ce2e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	4a0a      	ldr	r2, [pc, #40]	; (800ce3c <HAL_SD_InitCard+0xfc>)
 800ce14:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce1a:	6a3b      	ldr	r3, [r7, #32]
 800ce1c:	431a      	orrs	r2, r3
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2201      	movs	r2, #1
 800ce26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	e000      	b.n	800ce30 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800ce2e:	2300      	movs	r3, #0
}
 800ce30:	4618      	mov	r0, r3
 800ce32:	3728      	adds	r7, #40	; 0x28
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bdb0      	pop	{r4, r5, r7, pc}
 800ce38:	422580a0 	.word	0x422580a0
 800ce3c:	004005ff 	.word	0x004005ff

0800ce40 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b092      	sub	sp, #72	; 0x48
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	60f8      	str	r0, [r7, #12]
 800ce48:	60b9      	str	r1, [r7, #8]
 800ce4a:	607a      	str	r2, [r7, #4]
 800ce4c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ce4e:	f7f9 fe85 	bl	8006b5c <HAL_GetTick>
 800ce52:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d107      	bne.n	800ce72 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce66:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ce6e:	2301      	movs	r3, #1
 800ce70:	e1bd      	b.n	800d1ee <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ce78:	b2db      	uxtb	r3, r3
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	f040 81b0 	bne.w	800d1e0 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2200      	movs	r2, #0
 800ce84:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ce86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	441a      	add	r2, r3
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d907      	bls.n	800cea4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce98:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cea0:	2301      	movs	r3, #1
 800cea2:	e1a4      	b.n	800d1ee <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2203      	movs	r2, #3
 800cea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d002      	beq.n	800cec2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800cebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cebe:	025b      	lsls	r3, r3, #9
 800cec0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cec2:	f04f 33ff 	mov.w	r3, #4294967295
 800cec6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	025b      	lsls	r3, r3, #9
 800cecc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cece:	2390      	movs	r3, #144	; 0x90
 800ced0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800ced2:	2302      	movs	r3, #2
 800ced4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ced6:	2300      	movs	r3, #0
 800ced8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800ceda:	2301      	movs	r3, #1
 800cedc:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f107 0214 	add.w	r2, r7, #20
 800cee6:	4611      	mov	r1, r2
 800cee8:	4618      	mov	r0, r3
 800ceea:	f001 fee6 	bl	800ecba <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	d90a      	bls.n	800cf0a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	2202      	movs	r2, #2
 800cef8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf00:	4618      	mov	r0, r3
 800cf02:	f001 ff4a 	bl	800ed9a <SDMMC_CmdReadMultiBlock>
 800cf06:	6478      	str	r0, [r7, #68]	; 0x44
 800cf08:	e009      	b.n	800cf1e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf16:	4618      	mov	r0, r3
 800cf18:	f001 ff1d 	bl	800ed56 <SDMMC_CmdReadSingleBlock>
 800cf1c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cf1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d012      	beq.n	800cf4a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	4a7a      	ldr	r2, [pc, #488]	; (800d114 <HAL_SD_ReadBlocks+0x2d4>)
 800cf2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf32:	431a      	orrs	r2, r3
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	2200      	movs	r2, #0
 800cf44:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cf46:	2301      	movs	r3, #1
 800cf48:	e151      	b.n	800d1ee <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800cf4a:	69bb      	ldr	r3, [r7, #24]
 800cf4c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800cf4e:	e061      	b.n	800d014 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d03c      	beq.n	800cfd8 <HAL_SD_ReadBlocks+0x198>
 800cf5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d039      	beq.n	800cfd8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800cf64:	2300      	movs	r3, #0
 800cf66:	643b      	str	r3, [r7, #64]	; 0x40
 800cf68:	e033      	b.n	800cfd2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	4618      	mov	r0, r3
 800cf70:	f001 fe1f 	bl	800ebb2 <SDIO_ReadFIFO>
 800cf74:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800cf76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf78:	b2da      	uxtb	r2, r3
 800cf7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf7c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cf7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf80:	3301      	adds	r3, #1
 800cf82:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cf84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf86:	3b01      	subs	r3, #1
 800cf88:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800cf8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf8c:	0a1b      	lsrs	r3, r3, #8
 800cf8e:	b2da      	uxtb	r2, r3
 800cf90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf92:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cf94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf96:	3301      	adds	r3, #1
 800cf98:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cf9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf9c:	3b01      	subs	r3, #1
 800cf9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800cfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa2:	0c1b      	lsrs	r3, r3, #16
 800cfa4:	b2da      	uxtb	r2, r3
 800cfa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfa8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cfaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfac:	3301      	adds	r3, #1
 800cfae:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cfb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfb2:	3b01      	subs	r3, #1
 800cfb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800cfb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb8:	0e1b      	lsrs	r3, r3, #24
 800cfba:	b2da      	uxtb	r2, r3
 800cfbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfbe:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cfc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfc2:	3301      	adds	r3, #1
 800cfc4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800cfc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfc8:	3b01      	subs	r3, #1
 800cfca:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800cfcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfce:	3301      	adds	r3, #1
 800cfd0:	643b      	str	r3, [r7, #64]	; 0x40
 800cfd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfd4:	2b07      	cmp	r3, #7
 800cfd6:	d9c8      	bls.n	800cf6a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800cfd8:	f7f9 fdc0 	bl	8006b5c <HAL_GetTick>
 800cfdc:	4602      	mov	r2, r0
 800cfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe0:	1ad3      	subs	r3, r2, r3
 800cfe2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d902      	bls.n	800cfee <HAL_SD_ReadBlocks+0x1ae>
 800cfe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d112      	bne.n	800d014 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	4a48      	ldr	r2, [pc, #288]	; (800d114 <HAL_SD_ReadBlocks+0x2d4>)
 800cff4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cffa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	2201      	movs	r2, #1
 800d006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	2200      	movs	r2, #0
 800d00e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d010:	2303      	movs	r3, #3
 800d012:	e0ec      	b.n	800d1ee <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d01a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d096      	beq.n	800cf50 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d022      	beq.n	800d076 <HAL_SD_ReadBlocks+0x236>
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	2b01      	cmp	r3, #1
 800d034:	d91f      	bls.n	800d076 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d03a:	2b03      	cmp	r3, #3
 800d03c:	d01b      	beq.n	800d076 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	4618      	mov	r0, r3
 800d044:	f001 ff10 	bl	800ee68 <SDMMC_CmdStopTransfer>
 800d048:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d04a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d012      	beq.n	800d076 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	4a2f      	ldr	r2, [pc, #188]	; (800d114 <HAL_SD_ReadBlocks+0x2d4>)
 800d056:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d05c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d05e:	431a      	orrs	r2, r3
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2201      	movs	r2, #1
 800d068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2200      	movs	r2, #0
 800d070:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d072:	2301      	movs	r3, #1
 800d074:	e0bb      	b.n	800d1ee <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d07c:	f003 0308 	and.w	r3, r3, #8
 800d080:	2b00      	cmp	r3, #0
 800d082:	d012      	beq.n	800d0aa <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4a22      	ldr	r2, [pc, #136]	; (800d114 <HAL_SD_ReadBlocks+0x2d4>)
 800d08a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d090:	f043 0208 	orr.w	r2, r3, #8
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	2201      	movs	r2, #1
 800d09c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	e0a1      	b.n	800d1ee <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0b0:	f003 0302 	and.w	r3, r3, #2
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d012      	beq.n	800d0de <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	4a15      	ldr	r2, [pc, #84]	; (800d114 <HAL_SD_ReadBlocks+0x2d4>)
 800d0be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0c4:	f043 0202 	orr.w	r2, r3, #2
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d0da:	2301      	movs	r3, #1
 800d0dc:	e087      	b.n	800d1ee <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0e4:	f003 0320 	and.w	r3, r3, #32
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d064      	beq.n	800d1b6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4a08      	ldr	r2, [pc, #32]	; (800d114 <HAL_SD_ReadBlocks+0x2d4>)
 800d0f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0f8:	f043 0220 	orr.w	r2, r3, #32
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2201      	movs	r2, #1
 800d104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	2200      	movs	r2, #0
 800d10c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d10e:	2301      	movs	r3, #1
 800d110:	e06d      	b.n	800d1ee <HAL_SD_ReadBlocks+0x3ae>
 800d112:	bf00      	nop
 800d114:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4618      	mov	r0, r3
 800d11e:	f001 fd48 	bl	800ebb2 <SDIO_ReadFIFO>
 800d122:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800d124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d126:	b2da      	uxtb	r2, r3
 800d128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d12a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d12c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d12e:	3301      	adds	r3, #1
 800d130:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d134:	3b01      	subs	r3, #1
 800d136:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800d138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d13a:	0a1b      	lsrs	r3, r3, #8
 800d13c:	b2da      	uxtb	r2, r3
 800d13e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d140:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d144:	3301      	adds	r3, #1
 800d146:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d14a:	3b01      	subs	r3, #1
 800d14c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800d14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d150:	0c1b      	lsrs	r3, r3, #16
 800d152:	b2da      	uxtb	r2, r3
 800d154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d156:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d15a:	3301      	adds	r3, #1
 800d15c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d15e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d160:	3b01      	subs	r3, #1
 800d162:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800d164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d166:	0e1b      	lsrs	r3, r3, #24
 800d168:	b2da      	uxtb	r2, r3
 800d16a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d16c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d16e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d170:	3301      	adds	r3, #1
 800d172:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d176:	3b01      	subs	r3, #1
 800d178:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d17a:	f7f9 fcef 	bl	8006b5c <HAL_GetTick>
 800d17e:	4602      	mov	r2, r0
 800d180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d182:	1ad3      	subs	r3, r2, r3
 800d184:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d186:	429a      	cmp	r2, r3
 800d188:	d902      	bls.n	800d190 <HAL_SD_ReadBlocks+0x350>
 800d18a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d112      	bne.n	800d1b6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	4a18      	ldr	r2, [pc, #96]	; (800d1f8 <HAL_SD_ReadBlocks+0x3b8>)
 800d196:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d19c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	e01b      	b.n	800d1ee <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d002      	beq.n	800d1ca <HAL_SD_ReadBlocks+0x38a>
 800d1c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d1a6      	bne.n	800d118 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	f240 523a 	movw	r2, #1338	; 0x53a
 800d1d2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	e006      	b.n	800d1ee <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d1ec:	2301      	movs	r3, #1
  }
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3748      	adds	r7, #72	; 0x48
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}
 800d1f6:	bf00      	nop
 800d1f8:	004005ff 	.word	0x004005ff

0800d1fc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b092      	sub	sp, #72	; 0x48
 800d200:	af00      	add	r7, sp, #0
 800d202:	60f8      	str	r0, [r7, #12]
 800d204:	60b9      	str	r1, [r7, #8]
 800d206:	607a      	str	r2, [r7, #4]
 800d208:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d20a:	f7f9 fca7 	bl	8006b5c <HAL_GetTick>
 800d20e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d107      	bne.n	800d22e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d222:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d22a:	2301      	movs	r3, #1
 800d22c:	e165      	b.n	800d4fa <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d234:	b2db      	uxtb	r3, r3
 800d236:	2b01      	cmp	r3, #1
 800d238:	f040 8158 	bne.w	800d4ec <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	2200      	movs	r2, #0
 800d240:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d242:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	441a      	add	r2, r3
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d24c:	429a      	cmp	r2, r3
 800d24e:	d907      	bls.n	800d260 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d254:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d25c:	2301      	movs	r3, #1
 800d25e:	e14c      	b.n	800d4fa <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	2203      	movs	r2, #3
 800d264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	2200      	movs	r2, #0
 800d26e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d274:	2b01      	cmp	r3, #1
 800d276:	d002      	beq.n	800d27e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800d278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d27a:	025b      	lsls	r3, r3, #9
 800d27c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d27e:	f04f 33ff 	mov.w	r3, #4294967295
 800d282:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	025b      	lsls	r3, r3, #9
 800d288:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d28a:	2390      	movs	r3, #144	; 0x90
 800d28c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d28e:	2300      	movs	r3, #0
 800d290:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d292:	2300      	movs	r3, #0
 800d294:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800d296:	2301      	movs	r3, #1
 800d298:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f107 0218 	add.w	r2, r7, #24
 800d2a2:	4611      	mov	r1, r2
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f001 fd08 	bl	800ecba <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	2b01      	cmp	r3, #1
 800d2ae:	d90a      	bls.n	800d2c6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2220      	movs	r2, #32
 800d2b4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f001 fdb0 	bl	800ee22 <SDMMC_CmdWriteMultiBlock>
 800d2c2:	6478      	str	r0, [r7, #68]	; 0x44
 800d2c4:	e009      	b.n	800d2da <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2210      	movs	r2, #16
 800d2ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f001 fd83 	bl	800edde <SDMMC_CmdWriteSingleBlock>
 800d2d8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d2da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d012      	beq.n	800d306 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4a87      	ldr	r2, [pc, #540]	; (800d504 <HAL_SD_WriteBlocks+0x308>)
 800d2e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d2ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2ee:	431a      	orrs	r2, r3
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	2200      	movs	r2, #0
 800d300:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d302:	2301      	movs	r3, #1
 800d304:	e0f9      	b.n	800d4fa <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800d306:	69fb      	ldr	r3, [r7, #28]
 800d308:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800d30a:	e065      	b.n	800d3d8 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d312:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d316:	2b00      	cmp	r3, #0
 800d318:	d040      	beq.n	800d39c <HAL_SD_WriteBlocks+0x1a0>
 800d31a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d03d      	beq.n	800d39c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800d320:	2300      	movs	r3, #0
 800d322:	643b      	str	r3, [r7, #64]	; 0x40
 800d324:	e037      	b.n	800d396 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800d326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d328:	781b      	ldrb	r3, [r3, #0]
 800d32a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d32c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d32e:	3301      	adds	r3, #1
 800d330:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d334:	3b01      	subs	r3, #1
 800d336:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800d338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d33a:	781b      	ldrb	r3, [r3, #0]
 800d33c:	021a      	lsls	r2, r3, #8
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	4313      	orrs	r3, r2
 800d342:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d346:	3301      	adds	r3, #1
 800d348:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d34a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d34c:	3b01      	subs	r3, #1
 800d34e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800d350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d352:	781b      	ldrb	r3, [r3, #0]
 800d354:	041a      	lsls	r2, r3, #16
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	4313      	orrs	r3, r2
 800d35a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d35c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d35e:	3301      	adds	r3, #1
 800d360:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d364:	3b01      	subs	r3, #1
 800d366:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800d368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	061a      	lsls	r2, r3, #24
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	4313      	orrs	r3, r2
 800d372:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d376:	3301      	adds	r3, #1
 800d378:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d37a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d37c:	3b01      	subs	r3, #1
 800d37e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	f107 0214 	add.w	r2, r7, #20
 800d388:	4611      	mov	r1, r2
 800d38a:	4618      	mov	r0, r3
 800d38c:	f001 fc1e 	bl	800ebcc <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800d390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d392:	3301      	adds	r3, #1
 800d394:	643b      	str	r3, [r7, #64]	; 0x40
 800d396:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d398:	2b07      	cmp	r3, #7
 800d39a:	d9c4      	bls.n	800d326 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d39c:	f7f9 fbde 	bl	8006b5c <HAL_GetTick>
 800d3a0:	4602      	mov	r2, r0
 800d3a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3a4:	1ad3      	subs	r3, r2, r3
 800d3a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d3a8:	429a      	cmp	r2, r3
 800d3aa:	d902      	bls.n	800d3b2 <HAL_SD_WriteBlocks+0x1b6>
 800d3ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d112      	bne.n	800d3d8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	4a53      	ldr	r2, [pc, #332]	; (800d504 <HAL_SD_WriteBlocks+0x308>)
 800d3b8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d3c0:	431a      	orrs	r2, r3
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	2201      	movs	r2, #1
 800d3ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d3d4:	2303      	movs	r3, #3
 800d3d6:	e090      	b.n	800d4fa <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3de:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d092      	beq.n	800d30c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d022      	beq.n	800d43a <HAL_SD_WriteBlocks+0x23e>
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	2b01      	cmp	r3, #1
 800d3f8:	d91f      	bls.n	800d43a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3fe:	2b03      	cmp	r3, #3
 800d400:	d01b      	beq.n	800d43a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	4618      	mov	r0, r3
 800d408:	f001 fd2e 	bl	800ee68 <SDMMC_CmdStopTransfer>
 800d40c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d40e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d410:	2b00      	cmp	r3, #0
 800d412:	d012      	beq.n	800d43a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	4a3a      	ldr	r2, [pc, #232]	; (800d504 <HAL_SD_WriteBlocks+0x308>)
 800d41a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d422:	431a      	orrs	r2, r3
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	2201      	movs	r2, #1
 800d42c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	2200      	movs	r2, #0
 800d434:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d436:	2301      	movs	r3, #1
 800d438:	e05f      	b.n	800d4fa <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d440:	f003 0308 	and.w	r3, r3, #8
 800d444:	2b00      	cmp	r3, #0
 800d446:	d012      	beq.n	800d46e <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	4a2d      	ldr	r2, [pc, #180]	; (800d504 <HAL_SD_WriteBlocks+0x308>)
 800d44e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d454:	f043 0208 	orr.w	r2, r3, #8
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2201      	movs	r2, #1
 800d460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2200      	movs	r2, #0
 800d468:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d46a:	2301      	movs	r3, #1
 800d46c:	e045      	b.n	800d4fa <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d474:	f003 0302 	and.w	r3, r3, #2
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d012      	beq.n	800d4a2 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4a20      	ldr	r2, [pc, #128]	; (800d504 <HAL_SD_WriteBlocks+0x308>)
 800d482:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d488:	f043 0202 	orr.w	r2, r3, #2
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	2201      	movs	r2, #1
 800d494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2200      	movs	r2, #0
 800d49c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d49e:	2301      	movs	r3, #1
 800d4a0:	e02b      	b.n	800d4fa <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4a8:	f003 0310 	and.w	r3, r3, #16
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d012      	beq.n	800d4d6 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	4a13      	ldr	r2, [pc, #76]	; (800d504 <HAL_SD_WriteBlocks+0x308>)
 800d4b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4bc:	f043 0210 	orr.w	r2, r3, #16
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	2201      	movs	r2, #1
 800d4c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	e011      	b.n	800d4fa <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	f240 523a 	movw	r2, #1338	; 0x53a
 800d4de:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	e006      	b.n	800d4fa <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4f0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d4f8:	2301      	movs	r3, #1
  }
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3748      	adds	r7, #72	; 0x48
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}
 800d502:	bf00      	nop
 800d504:	004005ff 	.word	0x004005ff

0800d508 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b084      	sub	sp, #16
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d514:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d51c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d520:	2b00      	cmp	r3, #0
 800d522:	d008      	beq.n	800d536 <HAL_SD_IRQHandler+0x2e>
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	f003 0308 	and.w	r3, r3, #8
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d003      	beq.n	800d536 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f000 ff4f 	bl	800e3d2 <SD_Read_IT>
 800d534:	e155      	b.n	800d7e2 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d53c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d540:	2b00      	cmp	r3, #0
 800d542:	f000 808f 	beq.w	800d664 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d54e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d556:	687a      	ldr	r2, [r7, #4]
 800d558:	6812      	ldr	r2, [r2, #0]
 800d55a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800d55e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800d562:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f022 0201 	bic.w	r2, r2, #1
 800d572:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f003 0308 	and.w	r3, r3, #8
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d039      	beq.n	800d5f2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	f003 0302 	and.w	r3, r3, #2
 800d584:	2b00      	cmp	r3, #0
 800d586:	d104      	bne.n	800d592 <HAL_SD_IRQHandler+0x8a>
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	f003 0320 	and.w	r3, r3, #32
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d011      	beq.n	800d5b6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	4618      	mov	r0, r3
 800d598:	f001 fc66 	bl	800ee68 <SDMMC_CmdStopTransfer>
 800d59c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d008      	beq.n	800d5b6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	431a      	orrs	r2, r3
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f000 f91f 	bl	800d7f4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f240 523a 	movw	r2, #1338	; 0x53a
 800d5be:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	f003 0301 	and.w	r3, r3, #1
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d104      	bne.n	800d5e2 <HAL_SD_IRQHandler+0xda>
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	f003 0302 	and.w	r3, r3, #2
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d003      	beq.n	800d5ea <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f003 fd50 	bl	8011088 <HAL_SD_RxCpltCallback>
 800d5e8:	e0fb      	b.n	800d7e2 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f003 fd42 	bl	8011074 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d5f0:	e0f7      	b.n	800d7e2 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	f000 80f2 	beq.w	800d7e2 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	f003 0320 	and.w	r3, r3, #32
 800d604:	2b00      	cmp	r3, #0
 800d606:	d011      	beq.n	800d62c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	4618      	mov	r0, r3
 800d60e:	f001 fc2b 	bl	800ee68 <SDMMC_CmdStopTransfer>
 800d612:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d008      	beq.n	800d62c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	431a      	orrs	r2, r3
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f000 f8e4 	bl	800d7f4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	f003 0301 	and.w	r3, r3, #1
 800d632:	2b00      	cmp	r3, #0
 800d634:	f040 80d5 	bne.w	800d7e2 <HAL_SD_IRQHandler+0x2da>
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	f003 0302 	and.w	r3, r3, #2
 800d63e:	2b00      	cmp	r3, #0
 800d640:	f040 80cf 	bne.w	800d7e2 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	f022 0208 	bic.w	r2, r2, #8
 800d652:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2201      	movs	r2, #1
 800d658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f003 fd09 	bl	8011074 <HAL_SD_TxCpltCallback>
}
 800d662:	e0be      	b.n	800d7e2 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d66a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d008      	beq.n	800d684 <HAL_SD_IRQHandler+0x17c>
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	f003 0308 	and.w	r3, r3, #8
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d003      	beq.n	800d684 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f000 fef9 	bl	800e474 <SD_Write_IT>
 800d682:	e0ae      	b.n	800d7e2 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d68a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d68e:	2b00      	cmp	r3, #0
 800d690:	f000 80a7 	beq.w	800d7e2 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d69a:	f003 0302 	and.w	r3, r3, #2
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d005      	beq.n	800d6ae <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6a6:	f043 0202 	orr.w	r2, r3, #2
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6b4:	f003 0308 	and.w	r3, r3, #8
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d005      	beq.n	800d6c8 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6c0:	f043 0208 	orr.w	r2, r3, #8
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ce:	f003 0320 	and.w	r3, r3, #32
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d005      	beq.n	800d6e2 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6da:	f043 0220 	orr.w	r2, r3, #32
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6e8:	f003 0310 	and.w	r3, r3, #16
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d005      	beq.n	800d6fc <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6f4:	f043 0210 	orr.w	r2, r3, #16
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f240 523a 	movw	r2, #1338	; 0x53a
 800d704:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d714:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	4618      	mov	r0, r3
 800d71c:	f001 fba4 	bl	800ee68 <SDMMC_CmdStopTransfer>
 800d720:	4602      	mov	r2, r0
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d726:	431a      	orrs	r2, r3
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	f003 0308 	and.w	r3, r3, #8
 800d732:	2b00      	cmp	r3, #0
 800d734:	d00a      	beq.n	800d74c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	2201      	movs	r2, #1
 800d73a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2200      	movs	r2, #0
 800d742:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f000 f855 	bl	800d7f4 <HAL_SD_ErrorCallback>
}
 800d74a:	e04a      	b.n	800d7e2 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d752:	2b00      	cmp	r3, #0
 800d754:	d045      	beq.n	800d7e2 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	f003 0310 	and.w	r3, r3, #16
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d104      	bne.n	800d76a <HAL_SD_IRQHandler+0x262>
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	f003 0320 	and.w	r3, r3, #32
 800d766:	2b00      	cmp	r3, #0
 800d768:	d011      	beq.n	800d78e <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d76e:	4a1f      	ldr	r2, [pc, #124]	; (800d7ec <HAL_SD_IRQHandler+0x2e4>)
 800d770:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d776:	4618      	mov	r0, r3
 800d778:	f7fa ff24 	bl	80085c4 <HAL_DMA_Abort_IT>
 800d77c:	4603      	mov	r3, r0
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d02f      	beq.n	800d7e2 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d786:	4618      	mov	r0, r3
 800d788:	f000 fac8 	bl	800dd1c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d78c:	e029      	b.n	800d7e2 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	f003 0301 	and.w	r3, r3, #1
 800d794:	2b00      	cmp	r3, #0
 800d796:	d104      	bne.n	800d7a2 <HAL_SD_IRQHandler+0x29a>
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f003 0302 	and.w	r3, r3, #2
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d011      	beq.n	800d7c6 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7a6:	4a12      	ldr	r2, [pc, #72]	; (800d7f0 <HAL_SD_IRQHandler+0x2e8>)
 800d7a8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f7fa ff08 	bl	80085c4 <HAL_DMA_Abort_IT>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d013      	beq.n	800d7e2 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f000 fae3 	bl	800dd8a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d7c4:	e00d      	b.n	800d7e2 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f003 fc40 	bl	8011060 <HAL_SD_AbortCallback>
}
 800d7e0:	e7ff      	b.n	800d7e2 <HAL_SD_IRQHandler+0x2da>
 800d7e2:	bf00      	nop
 800d7e4:	3710      	adds	r7, #16
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	bd80      	pop	{r7, pc}
 800d7ea:	bf00      	nop
 800d7ec:	0800dd1d 	.word	0x0800dd1d
 800d7f0:	0800dd8b 	.word	0x0800dd8b

0800d7f4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b083      	sub	sp, #12
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d7fc:	bf00      	nop
 800d7fe:	370c      	adds	r7, #12
 800d800:	46bd      	mov	sp, r7
 800d802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d806:	4770      	bx	lr

0800d808 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d808:	b480      	push	{r7}
 800d80a:	b083      	sub	sp, #12
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d816:	0f9b      	lsrs	r3, r3, #30
 800d818:	b2da      	uxtb	r2, r3
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d822:	0e9b      	lsrs	r3, r3, #26
 800d824:	b2db      	uxtb	r3, r3
 800d826:	f003 030f 	and.w	r3, r3, #15
 800d82a:	b2da      	uxtb	r2, r3
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d834:	0e1b      	lsrs	r3, r3, #24
 800d836:	b2db      	uxtb	r3, r3
 800d838:	f003 0303 	and.w	r3, r3, #3
 800d83c:	b2da      	uxtb	r2, r3
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d846:	0c1b      	lsrs	r3, r3, #16
 800d848:	b2da      	uxtb	r2, r3
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d852:	0a1b      	lsrs	r3, r3, #8
 800d854:	b2da      	uxtb	r2, r3
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d85e:	b2da      	uxtb	r2, r3
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d868:	0d1b      	lsrs	r3, r3, #20
 800d86a:	b29a      	uxth	r2, r3
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d874:	0c1b      	lsrs	r3, r3, #16
 800d876:	b2db      	uxtb	r3, r3
 800d878:	f003 030f 	and.w	r3, r3, #15
 800d87c:	b2da      	uxtb	r2, r3
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d886:	0bdb      	lsrs	r3, r3, #15
 800d888:	b2db      	uxtb	r3, r3
 800d88a:	f003 0301 	and.w	r3, r3, #1
 800d88e:	b2da      	uxtb	r2, r3
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d898:	0b9b      	lsrs	r3, r3, #14
 800d89a:	b2db      	uxtb	r3, r3
 800d89c:	f003 0301 	and.w	r3, r3, #1
 800d8a0:	b2da      	uxtb	r2, r3
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8aa:	0b5b      	lsrs	r3, r3, #13
 800d8ac:	b2db      	uxtb	r3, r3
 800d8ae:	f003 0301 	and.w	r3, r3, #1
 800d8b2:	b2da      	uxtb	r2, r3
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8bc:	0b1b      	lsrs	r3, r3, #12
 800d8be:	b2db      	uxtb	r3, r3
 800d8c0:	f003 0301 	and.w	r3, r3, #1
 800d8c4:	b2da      	uxtb	r2, r3
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d163      	bne.n	800d9a0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d8dc:	009a      	lsls	r2, r3, #2
 800d8de:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d8e2:	4013      	ands	r3, r2
 800d8e4:	687a      	ldr	r2, [r7, #4]
 800d8e6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d8e8:	0f92      	lsrs	r2, r2, #30
 800d8ea:	431a      	orrs	r2, r3
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8f4:	0edb      	lsrs	r3, r3, #27
 800d8f6:	b2db      	uxtb	r3, r3
 800d8f8:	f003 0307 	and.w	r3, r3, #7
 800d8fc:	b2da      	uxtb	r2, r3
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d906:	0e1b      	lsrs	r3, r3, #24
 800d908:	b2db      	uxtb	r3, r3
 800d90a:	f003 0307 	and.w	r3, r3, #7
 800d90e:	b2da      	uxtb	r2, r3
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d918:	0d5b      	lsrs	r3, r3, #21
 800d91a:	b2db      	uxtb	r3, r3
 800d91c:	f003 0307 	and.w	r3, r3, #7
 800d920:	b2da      	uxtb	r2, r3
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d92a:	0c9b      	lsrs	r3, r3, #18
 800d92c:	b2db      	uxtb	r3, r3
 800d92e:	f003 0307 	and.w	r3, r3, #7
 800d932:	b2da      	uxtb	r2, r3
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d93c:	0bdb      	lsrs	r3, r3, #15
 800d93e:	b2db      	uxtb	r3, r3
 800d940:	f003 0307 	and.w	r3, r3, #7
 800d944:	b2da      	uxtb	r2, r3
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	691b      	ldr	r3, [r3, #16]
 800d94e:	1c5a      	adds	r2, r3, #1
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	7e1b      	ldrb	r3, [r3, #24]
 800d958:	b2db      	uxtb	r3, r3
 800d95a:	f003 0307 	and.w	r3, r3, #7
 800d95e:	3302      	adds	r3, #2
 800d960:	2201      	movs	r2, #1
 800d962:	fa02 f303 	lsl.w	r3, r2, r3
 800d966:	687a      	ldr	r2, [r7, #4]
 800d968:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d96a:	fb03 f202 	mul.w	r2, r3, r2
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	7a1b      	ldrb	r3, [r3, #8]
 800d976:	b2db      	uxtb	r3, r3
 800d978:	f003 030f 	and.w	r3, r3, #15
 800d97c:	2201      	movs	r2, #1
 800d97e:	409a      	lsls	r2, r3
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d988:	687a      	ldr	r2, [r7, #4]
 800d98a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d98c:	0a52      	lsrs	r2, r2, #9
 800d98e:	fb03 f202 	mul.w	r2, r3, r2
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d99c:	661a      	str	r2, [r3, #96]	; 0x60
 800d99e:	e031      	b.n	800da04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9a4:	2b01      	cmp	r3, #1
 800d9a6:	d11d      	bne.n	800d9e4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9ac:	041b      	lsls	r3, r3, #16
 800d9ae:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d9b6:	0c1b      	lsrs	r3, r3, #16
 800d9b8:	431a      	orrs	r2, r3
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	691b      	ldr	r3, [r3, #16]
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	029a      	lsls	r2, r3, #10
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d9d8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	661a      	str	r2, [r3, #96]	; 0x60
 800d9e2:	e00f      	b.n	800da04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	4a58      	ldr	r2, [pc, #352]	; (800db4c <HAL_SD_GetCardCSD+0x344>)
 800d9ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800da00:	2301      	movs	r3, #1
 800da02:	e09d      	b.n	800db40 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da08:	0b9b      	lsrs	r3, r3, #14
 800da0a:	b2db      	uxtb	r3, r3
 800da0c:	f003 0301 	and.w	r3, r3, #1
 800da10:	b2da      	uxtb	r2, r3
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da1a:	09db      	lsrs	r3, r3, #7
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da22:	b2da      	uxtb	r2, r3
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da2c:	b2db      	uxtb	r3, r3
 800da2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da32:	b2da      	uxtb	r2, r3
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da3c:	0fdb      	lsrs	r3, r3, #31
 800da3e:	b2da      	uxtb	r2, r3
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da48:	0f5b      	lsrs	r3, r3, #29
 800da4a:	b2db      	uxtb	r3, r3
 800da4c:	f003 0303 	and.w	r3, r3, #3
 800da50:	b2da      	uxtb	r2, r3
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da5a:	0e9b      	lsrs	r3, r3, #26
 800da5c:	b2db      	uxtb	r3, r3
 800da5e:	f003 0307 	and.w	r3, r3, #7
 800da62:	b2da      	uxtb	r2, r3
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da6c:	0d9b      	lsrs	r3, r3, #22
 800da6e:	b2db      	uxtb	r3, r3
 800da70:	f003 030f 	and.w	r3, r3, #15
 800da74:	b2da      	uxtb	r2, r3
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da7e:	0d5b      	lsrs	r3, r3, #21
 800da80:	b2db      	uxtb	r3, r3
 800da82:	f003 0301 	and.w	r3, r3, #1
 800da86:	b2da      	uxtb	r2, r3
 800da88:	683b      	ldr	r3, [r7, #0]
 800da8a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	2200      	movs	r2, #0
 800da92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da9a:	0c1b      	lsrs	r3, r3, #16
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	f003 0301 	and.w	r3, r3, #1
 800daa2:	b2da      	uxtb	r2, r3
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daae:	0bdb      	lsrs	r3, r3, #15
 800dab0:	b2db      	uxtb	r3, r3
 800dab2:	f003 0301 	and.w	r3, r3, #1
 800dab6:	b2da      	uxtb	r2, r3
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dac2:	0b9b      	lsrs	r3, r3, #14
 800dac4:	b2db      	uxtb	r3, r3
 800dac6:	f003 0301 	and.w	r3, r3, #1
 800daca:	b2da      	uxtb	r2, r3
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dad6:	0b5b      	lsrs	r3, r3, #13
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	f003 0301 	and.w	r3, r3, #1
 800dade:	b2da      	uxtb	r2, r3
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800daea:	0b1b      	lsrs	r3, r3, #12
 800daec:	b2db      	uxtb	r3, r3
 800daee:	f003 0301 	and.w	r3, r3, #1
 800daf2:	b2da      	uxtb	r2, r3
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dafe:	0a9b      	lsrs	r3, r3, #10
 800db00:	b2db      	uxtb	r3, r3
 800db02:	f003 0303 	and.w	r3, r3, #3
 800db06:	b2da      	uxtb	r2, r3
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db12:	0a1b      	lsrs	r3, r3, #8
 800db14:	b2db      	uxtb	r3, r3
 800db16:	f003 0303 	and.w	r3, r3, #3
 800db1a:	b2da      	uxtb	r2, r3
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800db26:	085b      	lsrs	r3, r3, #1
 800db28:	b2db      	uxtb	r3, r3
 800db2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db2e:	b2da      	uxtb	r2, r3
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	2201      	movs	r2, #1
 800db3a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800db3e:	2300      	movs	r3, #0
}
 800db40:	4618      	mov	r0, r3
 800db42:	370c      	adds	r7, #12
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr
 800db4c:	004005ff 	.word	0x004005ff

0800db50 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800db50:	b480      	push	{r7}
 800db52:	b083      	sub	sp, #12
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800db9a:	2300      	movs	r3, #0
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	370c      	adds	r7, #12
 800dba0:	46bd      	mov	sp, r7
 800dba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba6:	4770      	bx	lr

0800dba8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dba8:	b5b0      	push	{r4, r5, r7, lr}
 800dbaa:	b08e      	sub	sp, #56	; 0x38
 800dbac:	af04      	add	r7, sp, #16
 800dbae:	6078      	str	r0, [r7, #4]
 800dbb0:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2203      	movs	r2, #3
 800dbbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbc4:	2b03      	cmp	r3, #3
 800dbc6:	d02e      	beq.n	800dc26 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800dbc8:	683b      	ldr	r3, [r7, #0]
 800dbca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dbce:	d106      	bne.n	800dbde <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbd4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	639a      	str	r2, [r3, #56]	; 0x38
 800dbdc:	e029      	b.n	800dc32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dbe4:	d10a      	bne.n	800dbfc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f000 fa8a 	bl	800e100 <SD_WideBus_Enable>
 800dbec:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbf2:	6a3b      	ldr	r3, [r7, #32]
 800dbf4:	431a      	orrs	r2, r3
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	639a      	str	r2, [r3, #56]	; 0x38
 800dbfa:	e01a      	b.n	800dc32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800dbfc:	683b      	ldr	r3, [r7, #0]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d10a      	bne.n	800dc18 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 fac7 	bl	800e196 <SD_WideBus_Disable>
 800dc08:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc0e:	6a3b      	ldr	r3, [r7, #32]
 800dc10:	431a      	orrs	r2, r3
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	639a      	str	r2, [r3, #56]	; 0x38
 800dc16:	e00c      	b.n	800dc32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc1c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	639a      	str	r2, [r3, #56]	; 0x38
 800dc24:	e005      	b.n	800dc32 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc2a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d00b      	beq.n	800dc52 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	4a26      	ldr	r2, [pc, #152]	; (800dcd8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800dc40:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2201      	movs	r2, #1
 800dc46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dc50:	e01f      	b.n	800dc92 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	685b      	ldr	r3, [r3, #4]
 800dc56:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	689b      	ldr	r3, [r3, #8]
 800dc5c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	68db      	ldr	r3, [r3, #12]
 800dc62:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	695b      	ldr	r3, [r3, #20]
 800dc6c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	699b      	ldr	r3, [r3, #24]
 800dc72:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681d      	ldr	r5, [r3, #0]
 800dc78:	466c      	mov	r4, sp
 800dc7a:	f107 0314 	add.w	r3, r7, #20
 800dc7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dc82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dc86:	f107 0308 	add.w	r3, r7, #8
 800dc8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dc8c:	4628      	mov	r0, r5
 800dc8e:	f000 ff65 	bl	800eb5c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	f001 f839 	bl	800ed12 <SDMMC_CmdBlockLength>
 800dca0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dca2:	6a3b      	ldr	r3, [r7, #32]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d00c      	beq.n	800dcc2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	4a0a      	ldr	r2, [pc, #40]	; (800dcd8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800dcae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcb4:	6a3b      	ldr	r3, [r7, #32]
 800dcb6:	431a      	orrs	r2, r3
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2201      	movs	r2, #1
 800dcc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800dcca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3728      	adds	r7, #40	; 0x28
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bdb0      	pop	{r4, r5, r7, pc}
 800dcd6:	bf00      	nop
 800dcd8:	004005ff 	.word	0x004005ff

0800dcdc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b086      	sub	sp, #24
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dce4:	2300      	movs	r3, #0
 800dce6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dce8:	f107 030c 	add.w	r3, r7, #12
 800dcec:	4619      	mov	r1, r3
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f000 f9de 	bl	800e0b0 <SD_SendStatus>
 800dcf4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dcf6:	697b      	ldr	r3, [r7, #20]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d005      	beq.n	800dd08 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	431a      	orrs	r2, r3
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	0a5b      	lsrs	r3, r3, #9
 800dd0c:	f003 030f 	and.w	r3, r3, #15
 800dd10:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800dd12:	693b      	ldr	r3, [r7, #16]
}
 800dd14:	4618      	mov	r0, r3
 800dd16:	3718      	adds	r7, #24
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}

0800dd1c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b084      	sub	sp, #16
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd28:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f240 523a 	movw	r2, #1338	; 0x53a
 800dd32:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800dd34:	68f8      	ldr	r0, [r7, #12]
 800dd36:	f7ff ffd1 	bl	800dcdc <HAL_SD_GetCardState>
 800dd3a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2201      	movs	r2, #1
 800dd40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	2200      	movs	r2, #0
 800dd48:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	2b06      	cmp	r3, #6
 800dd4e:	d002      	beq.n	800dd56 <SD_DMATxAbort+0x3a>
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	2b05      	cmp	r3, #5
 800dd54:	d10a      	bne.n	800dd6c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f001 f884 	bl	800ee68 <SDMMC_CmdStopTransfer>
 800dd60:	4602      	mov	r2, r0
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd66:	431a      	orrs	r2, r3
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d103      	bne.n	800dd7c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800dd74:	68f8      	ldr	r0, [r7, #12]
 800dd76:	f003 f973 	bl	8011060 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800dd7a:	e002      	b.n	800dd82 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800dd7c:	68f8      	ldr	r0, [r7, #12]
 800dd7e:	f7ff fd39 	bl	800d7f4 <HAL_SD_ErrorCallback>
}
 800dd82:	bf00      	nop
 800dd84:	3710      	adds	r7, #16
 800dd86:	46bd      	mov	sp, r7
 800dd88:	bd80      	pop	{r7, pc}

0800dd8a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800dd8a:	b580      	push	{r7, lr}
 800dd8c:	b084      	sub	sp, #16
 800dd8e:	af00      	add	r7, sp, #0
 800dd90:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd96:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f240 523a 	movw	r2, #1338	; 0x53a
 800dda0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800dda2:	68f8      	ldr	r0, [r7, #12]
 800dda4:	f7ff ff9a 	bl	800dcdc <HAL_SD_GetCardState>
 800dda8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	2201      	movs	r2, #1
 800ddae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	2b06      	cmp	r3, #6
 800ddbc:	d002      	beq.n	800ddc4 <SD_DMARxAbort+0x3a>
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	2b05      	cmp	r3, #5
 800ddc2:	d10a      	bne.n	800ddda <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f001 f84d 	bl	800ee68 <SDMMC_CmdStopTransfer>
 800ddce:	4602      	mov	r2, r0
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddd4:	431a      	orrs	r2, r3
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d103      	bne.n	800ddea <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800dde2:	68f8      	ldr	r0, [r7, #12]
 800dde4:	f003 f93c 	bl	8011060 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800dde8:	e002      	b.n	800ddf0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800ddea:	68f8      	ldr	r0, [r7, #12]
 800ddec:	f7ff fd02 	bl	800d7f4 <HAL_SD_ErrorCallback>
}
 800ddf0:	bf00      	nop
 800ddf2:	3710      	adds	r7, #16
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}

0800ddf8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800ddf8:	b5b0      	push	{r4, r5, r7, lr}
 800ddfa:	b094      	sub	sp, #80	; 0x50
 800ddfc:	af04      	add	r7, sp, #16
 800ddfe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800de00:	2301      	movs	r3, #1
 800de02:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	4618      	mov	r0, r3
 800de0a:	f000 fefe 	bl	800ec0a <SDIO_GetPowerState>
 800de0e:	4603      	mov	r3, r0
 800de10:	2b00      	cmp	r3, #0
 800de12:	d102      	bne.n	800de1a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800de14:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800de18:	e0b8      	b.n	800df8c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de1e:	2b03      	cmp	r3, #3
 800de20:	d02f      	beq.n	800de82 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	4618      	mov	r0, r3
 800de28:	f001 f928 	bl	800f07c <SDMMC_CmdSendCID>
 800de2c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800de2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de30:	2b00      	cmp	r3, #0
 800de32:	d001      	beq.n	800de38 <SD_InitCard+0x40>
    {
      return errorstate;
 800de34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de36:	e0a9      	b.n	800df8c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	2100      	movs	r1, #0
 800de3e:	4618      	mov	r0, r3
 800de40:	f000 ff28 	bl	800ec94 <SDIO_GetResponse>
 800de44:	4602      	mov	r2, r0
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2104      	movs	r1, #4
 800de50:	4618      	mov	r0, r3
 800de52:	f000 ff1f 	bl	800ec94 <SDIO_GetResponse>
 800de56:	4602      	mov	r2, r0
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	2108      	movs	r1, #8
 800de62:	4618      	mov	r0, r3
 800de64:	f000 ff16 	bl	800ec94 <SDIO_GetResponse>
 800de68:	4602      	mov	r2, r0
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	210c      	movs	r1, #12
 800de74:	4618      	mov	r0, r3
 800de76:	f000 ff0d 	bl	800ec94 <SDIO_GetResponse>
 800de7a:	4602      	mov	r2, r0
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de86:	2b03      	cmp	r3, #3
 800de88:	d00d      	beq.n	800dea6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f107 020e 	add.w	r2, r7, #14
 800de92:	4611      	mov	r1, r2
 800de94:	4618      	mov	r0, r3
 800de96:	f001 f92e 	bl	800f0f6 <SDMMC_CmdSetRelAdd>
 800de9a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800de9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d001      	beq.n	800dea6 <SD_InitCard+0xae>
    {
      return errorstate;
 800dea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dea4:	e072      	b.n	800df8c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800deaa:	2b03      	cmp	r3, #3
 800deac:	d036      	beq.n	800df1c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800deae:	89fb      	ldrh	r3, [r7, #14]
 800deb0:	461a      	mov	r2, r3
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681a      	ldr	r2, [r3, #0]
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800debe:	041b      	lsls	r3, r3, #16
 800dec0:	4619      	mov	r1, r3
 800dec2:	4610      	mov	r0, r2
 800dec4:	f001 f8f8 	bl	800f0b8 <SDMMC_CmdSendCSD>
 800dec8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800deca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800decc:	2b00      	cmp	r3, #0
 800dece:	d001      	beq.n	800ded4 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ded0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ded2:	e05b      	b.n	800df8c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	2100      	movs	r1, #0
 800deda:	4618      	mov	r0, r3
 800dedc:	f000 feda 	bl	800ec94 <SDIO_GetResponse>
 800dee0:	4602      	mov	r2, r0
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	2104      	movs	r1, #4
 800deec:	4618      	mov	r0, r3
 800deee:	f000 fed1 	bl	800ec94 <SDIO_GetResponse>
 800def2:	4602      	mov	r2, r0
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	2108      	movs	r1, #8
 800defe:	4618      	mov	r0, r3
 800df00:	f000 fec8 	bl	800ec94 <SDIO_GetResponse>
 800df04:	4602      	mov	r2, r0
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	210c      	movs	r1, #12
 800df10:	4618      	mov	r0, r3
 800df12:	f000 febf 	bl	800ec94 <SDIO_GetResponse>
 800df16:	4602      	mov	r2, r0
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	2104      	movs	r1, #4
 800df22:	4618      	mov	r0, r3
 800df24:	f000 feb6 	bl	800ec94 <SDIO_GetResponse>
 800df28:	4603      	mov	r3, r0
 800df2a:	0d1a      	lsrs	r2, r3, #20
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800df30:	f107 0310 	add.w	r3, r7, #16
 800df34:	4619      	mov	r1, r3
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f7ff fc66 	bl	800d808 <HAL_SD_GetCardCSD>
 800df3c:	4603      	mov	r3, r0
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d002      	beq.n	800df48 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800df42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800df46:	e021      	b.n	800df8c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	6819      	ldr	r1, [r3, #0]
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df50:	041b      	lsls	r3, r3, #16
 800df52:	2200      	movs	r2, #0
 800df54:	461c      	mov	r4, r3
 800df56:	4615      	mov	r5, r2
 800df58:	4622      	mov	r2, r4
 800df5a:	462b      	mov	r3, r5
 800df5c:	4608      	mov	r0, r1
 800df5e:	f000 ffa5 	bl	800eeac <SDMMC_CmdSelDesel>
 800df62:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800df64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df66:	2b00      	cmp	r3, #0
 800df68:	d001      	beq.n	800df6e <SD_InitCard+0x176>
  {
    return errorstate;
 800df6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df6c:	e00e      	b.n	800df8c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	681d      	ldr	r5, [r3, #0]
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	466c      	mov	r4, sp
 800df76:	f103 0210 	add.w	r2, r3, #16
 800df7a:	ca07      	ldmia	r2, {r0, r1, r2}
 800df7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800df80:	3304      	adds	r3, #4
 800df82:	cb0e      	ldmia	r3, {r1, r2, r3}
 800df84:	4628      	mov	r0, r5
 800df86:	f000 fde9 	bl	800eb5c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800df8a:	2300      	movs	r3, #0
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	3740      	adds	r7, #64	; 0x40
 800df90:	46bd      	mov	sp, r7
 800df92:	bdb0      	pop	{r4, r5, r7, pc}

0800df94 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b086      	sub	sp, #24
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800df9c:	2300      	movs	r3, #0
 800df9e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	617b      	str	r3, [r7, #20]
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	4618      	mov	r0, r3
 800dfae:	f000 ffa0 	bl	800eef2 <SDMMC_CmdGoIdleState>
 800dfb2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d001      	beq.n	800dfbe <SD_PowerON+0x2a>
  {
    return errorstate;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	e072      	b.n	800e0a4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f000 ffb3 	bl	800ef2e <SDMMC_CmdOperCond>
 800dfc8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d00d      	beq.n	800dfec <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	4618      	mov	r0, r3
 800dfdc:	f000 ff89 	bl	800eef2 <SDMMC_CmdGoIdleState>
 800dfe0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d004      	beq.n	800dff2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	e05b      	b.n	800e0a4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2201      	movs	r2, #1
 800dff0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dff6:	2b01      	cmp	r3, #1
 800dff8:	d137      	bne.n	800e06a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	2100      	movs	r1, #0
 800e000:	4618      	mov	r0, r3
 800e002:	f000 ffb3 	bl	800ef6c <SDMMC_CmdAppCommand>
 800e006:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d02d      	beq.n	800e06a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e00e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e012:	e047      	b.n	800e0a4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	2100      	movs	r1, #0
 800e01a:	4618      	mov	r0, r3
 800e01c:	f000 ffa6 	bl	800ef6c <SDMMC_CmdAppCommand>
 800e020:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2b00      	cmp	r3, #0
 800e026:	d001      	beq.n	800e02c <SD_PowerON+0x98>
    {
      return errorstate;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	e03b      	b.n	800e0a4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	491e      	ldr	r1, [pc, #120]	; (800e0ac <SD_PowerON+0x118>)
 800e032:	4618      	mov	r0, r3
 800e034:	f000 ffbc 	bl	800efb0 <SDMMC_CmdAppOperCommand>
 800e038:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d002      	beq.n	800e046 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e040:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e044:	e02e      	b.n	800e0a4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	2100      	movs	r1, #0
 800e04c:	4618      	mov	r0, r3
 800e04e:	f000 fe21 	bl	800ec94 <SDIO_GetResponse>
 800e052:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	0fdb      	lsrs	r3, r3, #31
 800e058:	2b01      	cmp	r3, #1
 800e05a:	d101      	bne.n	800e060 <SD_PowerON+0xcc>
 800e05c:	2301      	movs	r3, #1
 800e05e:	e000      	b.n	800e062 <SD_PowerON+0xce>
 800e060:	2300      	movs	r3, #0
 800e062:	613b      	str	r3, [r7, #16]

    count++;
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	3301      	adds	r3, #1
 800e068:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e06a:	68bb      	ldr	r3, [r7, #8]
 800e06c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e070:	4293      	cmp	r3, r2
 800e072:	d802      	bhi.n	800e07a <SD_PowerON+0xe6>
 800e074:	693b      	ldr	r3, [r7, #16]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d0cc      	beq.n	800e014 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e080:	4293      	cmp	r3, r2
 800e082:	d902      	bls.n	800e08a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e084:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e088:	e00c      	b.n	800e0a4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e090:	2b00      	cmp	r3, #0
 800e092:	d003      	beq.n	800e09c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2201      	movs	r2, #1
 800e098:	645a      	str	r2, [r3, #68]	; 0x44
 800e09a:	e002      	b.n	800e0a2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e0a2:	2300      	movs	r3, #0
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3718      	adds	r7, #24
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}
 800e0ac:	c1100000 	.word	0xc1100000

0800e0b0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b084      	sub	sp, #16
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
 800e0b8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d102      	bne.n	800e0c6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e0c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e0c4:	e018      	b.n	800e0f8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681a      	ldr	r2, [r3, #0]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0ce:	041b      	lsls	r3, r3, #16
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	4610      	mov	r0, r2
 800e0d4:	f001 f830 	bl	800f138 <SDMMC_CmdSendStatus>
 800e0d8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d001      	beq.n	800e0e4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	e009      	b.n	800e0f8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2100      	movs	r1, #0
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f000 fdd2 	bl	800ec94 <SDIO_GetResponse>
 800e0f0:	4602      	mov	r2, r0
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e0f6:	2300      	movs	r3, #0
}
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3710      	adds	r7, #16
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b086      	sub	sp, #24
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e108:	2300      	movs	r3, #0
 800e10a:	60fb      	str	r3, [r7, #12]
 800e10c:	2300      	movs	r3, #0
 800e10e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	2100      	movs	r1, #0
 800e116:	4618      	mov	r0, r3
 800e118:	f000 fdbc 	bl	800ec94 <SDIO_GetResponse>
 800e11c:	4603      	mov	r3, r0
 800e11e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e122:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e126:	d102      	bne.n	800e12e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e128:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e12c:	e02f      	b.n	800e18e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e12e:	f107 030c 	add.w	r3, r7, #12
 800e132:	4619      	mov	r1, r3
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f000 f879 	bl	800e22c <SD_FindSCR>
 800e13a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e13c:	697b      	ldr	r3, [r7, #20]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d001      	beq.n	800e146 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	e023      	b.n	800e18e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d01c      	beq.n	800e18a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681a      	ldr	r2, [r3, #0]
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e158:	041b      	lsls	r3, r3, #16
 800e15a:	4619      	mov	r1, r3
 800e15c:	4610      	mov	r0, r2
 800e15e:	f000 ff05 	bl	800ef6c <SDMMC_CmdAppCommand>
 800e162:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e164:	697b      	ldr	r3, [r7, #20]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d001      	beq.n	800e16e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	e00f      	b.n	800e18e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	2102      	movs	r1, #2
 800e174:	4618      	mov	r0, r3
 800e176:	f000 ff3e 	bl	800eff6 <SDMMC_CmdBusWidth>
 800e17a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e17c:	697b      	ldr	r3, [r7, #20]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d001      	beq.n	800e186 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	e003      	b.n	800e18e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e186:	2300      	movs	r3, #0
 800e188:	e001      	b.n	800e18e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e18a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3718      	adds	r7, #24
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}

0800e196 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e196:	b580      	push	{r7, lr}
 800e198:	b086      	sub	sp, #24
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e19e:	2300      	movs	r3, #0
 800e1a0:	60fb      	str	r3, [r7, #12]
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	2100      	movs	r1, #0
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f000 fd71 	bl	800ec94 <SDIO_GetResponse>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e1b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e1bc:	d102      	bne.n	800e1c4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e1be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e1c2:	e02f      	b.n	800e224 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e1c4:	f107 030c 	add.w	r3, r7, #12
 800e1c8:	4619      	mov	r1, r3
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f000 f82e 	bl	800e22c <SD_FindSCR>
 800e1d0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d001      	beq.n	800e1dc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e1d8:	697b      	ldr	r3, [r7, #20]
 800e1da:	e023      	b.n	800e224 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d01c      	beq.n	800e220 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681a      	ldr	r2, [r3, #0]
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1ee:	041b      	lsls	r3, r3, #16
 800e1f0:	4619      	mov	r1, r3
 800e1f2:	4610      	mov	r0, r2
 800e1f4:	f000 feba 	bl	800ef6c <SDMMC_CmdAppCommand>
 800e1f8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1fa:	697b      	ldr	r3, [r7, #20]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d001      	beq.n	800e204 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	e00f      	b.n	800e224 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	2100      	movs	r1, #0
 800e20a:	4618      	mov	r0, r3
 800e20c:	f000 fef3 	bl	800eff6 <SDMMC_CmdBusWidth>
 800e210:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d001      	beq.n	800e21c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	e003      	b.n	800e224 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e21c:	2300      	movs	r3, #0
 800e21e:	e001      	b.n	800e224 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e220:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e224:	4618      	mov	r0, r3
 800e226:	3718      	adds	r7, #24
 800e228:	46bd      	mov	sp, r7
 800e22a:	bd80      	pop	{r7, pc}

0800e22c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e22c:	b590      	push	{r4, r7, lr}
 800e22e:	b08f      	sub	sp, #60	; 0x3c
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
 800e234:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e236:	f7f8 fc91 	bl	8006b5c <HAL_GetTick>
 800e23a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e23c:	2300      	movs	r3, #0
 800e23e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e240:	2300      	movs	r3, #0
 800e242:	60bb      	str	r3, [r7, #8]
 800e244:	2300      	movs	r3, #0
 800e246:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	2108      	movs	r1, #8
 800e252:	4618      	mov	r0, r3
 800e254:	f000 fd5d 	bl	800ed12 <SDMMC_CmdBlockLength>
 800e258:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d001      	beq.n	800e264 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e262:	e0b2      	b.n	800e3ca <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681a      	ldr	r2, [r3, #0]
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e26c:	041b      	lsls	r3, r3, #16
 800e26e:	4619      	mov	r1, r3
 800e270:	4610      	mov	r0, r2
 800e272:	f000 fe7b 	bl	800ef6c <SDMMC_CmdAppCommand>
 800e276:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d001      	beq.n	800e282 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e280:	e0a3      	b.n	800e3ca <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e282:	f04f 33ff 	mov.w	r3, #4294967295
 800e286:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e288:	2308      	movs	r3, #8
 800e28a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e28c:	2330      	movs	r3, #48	; 0x30
 800e28e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e290:	2302      	movs	r3, #2
 800e292:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e294:	2300      	movs	r3, #0
 800e296:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e298:	2301      	movs	r3, #1
 800e29a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	f107 0210 	add.w	r2, r7, #16
 800e2a4:	4611      	mov	r1, r2
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f000 fd07 	bl	800ecba <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f000 fec2 	bl	800f03a <SDMMC_CmdSendSCR>
 800e2b6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d02a      	beq.n	800e314 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800e2be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2c0:	e083      	b.n	800e3ca <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d00f      	beq.n	800e2f0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6819      	ldr	r1, [r3, #0]
 800e2d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2d6:	009b      	lsls	r3, r3, #2
 800e2d8:	f107 0208 	add.w	r2, r7, #8
 800e2dc:	18d4      	adds	r4, r2, r3
 800e2de:	4608      	mov	r0, r1
 800e2e0:	f000 fc67 	bl	800ebb2 <SDIO_ReadFIFO>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	6023      	str	r3, [r4, #0]
      index++;
 800e2e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2ea:	3301      	adds	r3, #1
 800e2ec:	637b      	str	r3, [r7, #52]	; 0x34
 800e2ee:	e006      	b.n	800e2fe <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d012      	beq.n	800e324 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e2fe:	f7f8 fc2d 	bl	8006b5c <HAL_GetTick>
 800e302:	4602      	mov	r2, r0
 800e304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e306:	1ad3      	subs	r3, r2, r3
 800e308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e30c:	d102      	bne.n	800e314 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e30e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e312:	e05a      	b.n	800e3ca <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e31a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d0cf      	beq.n	800e2c2 <SD_FindSCR+0x96>
 800e322:	e000      	b.n	800e326 <SD_FindSCR+0xfa>
      break;
 800e324:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e32c:	f003 0308 	and.w	r3, r3, #8
 800e330:	2b00      	cmp	r3, #0
 800e332:	d005      	beq.n	800e340 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	2208      	movs	r2, #8
 800e33a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e33c:	2308      	movs	r3, #8
 800e33e:	e044      	b.n	800e3ca <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e346:	f003 0302 	and.w	r3, r3, #2
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d005      	beq.n	800e35a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	2202      	movs	r2, #2
 800e354:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e356:	2302      	movs	r3, #2
 800e358:	e037      	b.n	800e3ca <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e360:	f003 0320 	and.w	r3, r3, #32
 800e364:	2b00      	cmp	r3, #0
 800e366:	d005      	beq.n	800e374 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	2220      	movs	r2, #32
 800e36e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e370:	2320      	movs	r3, #32
 800e372:	e02a      	b.n	800e3ca <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	f240 523a 	movw	r2, #1338	; 0x53a
 800e37c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	061a      	lsls	r2, r3, #24
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	021b      	lsls	r3, r3, #8
 800e386:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e38a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	0a1b      	lsrs	r3, r3, #8
 800e390:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e394:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	0e1b      	lsrs	r3, r3, #24
 800e39a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e39e:	601a      	str	r2, [r3, #0]
    scr++;
 800e3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3a2:	3304      	adds	r3, #4
 800e3a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	061a      	lsls	r2, r3, #24
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	021b      	lsls	r3, r3, #8
 800e3ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e3b2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e3b4:	68bb      	ldr	r3, [r7, #8]
 800e3b6:	0a1b      	lsrs	r3, r3, #8
 800e3b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e3bc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e3be:	68bb      	ldr	r3, [r7, #8]
 800e3c0:	0e1b      	lsrs	r3, r3, #24
 800e3c2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3c6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e3c8:	2300      	movs	r3, #0
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	373c      	adds	r7, #60	; 0x3c
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd90      	pop	{r4, r7, pc}

0800e3d2 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e3d2:	b580      	push	{r7, lr}
 800e3d4:	b086      	sub	sp, #24
 800e3d6:	af00      	add	r7, sp, #0
 800e3d8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3de:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3e4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e3e6:	693b      	ldr	r3, [r7, #16]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d03f      	beq.n	800e46c <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	617b      	str	r3, [r7, #20]
 800e3f0:	e033      	b.n	800e45a <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f000 fbdb 	bl	800ebb2 <SDIO_ReadFIFO>
 800e3fc:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	b2da      	uxtb	r2, r3
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	3301      	adds	r3, #1
 800e40a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e40c:	693b      	ldr	r3, [r7, #16]
 800e40e:	3b01      	subs	r3, #1
 800e410:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	0a1b      	lsrs	r3, r3, #8
 800e416:	b2da      	uxtb	r2, r3
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	3301      	adds	r3, #1
 800e420:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e422:	693b      	ldr	r3, [r7, #16]
 800e424:	3b01      	subs	r3, #1
 800e426:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	0c1b      	lsrs	r3, r3, #16
 800e42c:	b2da      	uxtb	r2, r3
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	3301      	adds	r3, #1
 800e436:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e438:	693b      	ldr	r3, [r7, #16]
 800e43a:	3b01      	subs	r3, #1
 800e43c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	0e1b      	lsrs	r3, r3, #24
 800e442:	b2da      	uxtb	r2, r3
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	3301      	adds	r3, #1
 800e44c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	3b01      	subs	r3, #1
 800e452:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e454:	697b      	ldr	r3, [r7, #20]
 800e456:	3301      	adds	r3, #1
 800e458:	617b      	str	r3, [r7, #20]
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	2b07      	cmp	r3, #7
 800e45e:	d9c8      	bls.n	800e3f2 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	68fa      	ldr	r2, [r7, #12]
 800e464:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	693a      	ldr	r2, [r7, #16]
 800e46a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e46c:	bf00      	nop
 800e46e:	3718      	adds	r7, #24
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b086      	sub	sp, #24
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	6a1b      	ldr	r3, [r3, #32]
 800e480:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e486:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800e488:	693b      	ldr	r3, [r7, #16]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d043      	beq.n	800e516 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e48e:	2300      	movs	r3, #0
 800e490:	617b      	str	r3, [r7, #20]
 800e492:	e037      	b.n	800e504 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	781b      	ldrb	r3, [r3, #0]
 800e498:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	3301      	adds	r3, #1
 800e49e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e4a0:	693b      	ldr	r3, [r7, #16]
 800e4a2:	3b01      	subs	r3, #1
 800e4a4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	781b      	ldrb	r3, [r3, #0]
 800e4aa:	021a      	lsls	r2, r3, #8
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	4313      	orrs	r3, r2
 800e4b0:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	3301      	adds	r3, #1
 800e4b6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e4b8:	693b      	ldr	r3, [r7, #16]
 800e4ba:	3b01      	subs	r3, #1
 800e4bc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	781b      	ldrb	r3, [r3, #0]
 800e4c2:	041a      	lsls	r2, r3, #16
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	4313      	orrs	r3, r2
 800e4c8:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	3301      	adds	r3, #1
 800e4ce:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e4d0:	693b      	ldr	r3, [r7, #16]
 800e4d2:	3b01      	subs	r3, #1
 800e4d4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	781b      	ldrb	r3, [r3, #0]
 800e4da:	061a      	lsls	r2, r3, #24
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	4313      	orrs	r3, r2
 800e4e0:	60bb      	str	r3, [r7, #8]
      tmp++;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	3301      	adds	r3, #1
 800e4e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	3b01      	subs	r3, #1
 800e4ec:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f107 0208 	add.w	r2, r7, #8
 800e4f6:	4611      	mov	r1, r2
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f000 fb67 	bl	800ebcc <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	3301      	adds	r3, #1
 800e502:	617b      	str	r3, [r7, #20]
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	2b07      	cmp	r3, #7
 800e508:	d9c4      	bls.n	800e494 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	68fa      	ldr	r2, [r7, #12]
 800e50e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	693a      	ldr	r2, [r7, #16]
 800e514:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e516:	bf00      	nop
 800e518:	3718      	adds	r7, #24
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}

0800e51e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e51e:	b580      	push	{r7, lr}
 800e520:	b082      	sub	sp, #8
 800e522:	af00      	add	r7, sp, #0
 800e524:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d101      	bne.n	800e530 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e52c:	2301      	movs	r3, #1
 800e52e:	e041      	b.n	800e5b4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e536:	b2db      	uxtb	r3, r3
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d106      	bne.n	800e54a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2200      	movs	r2, #0
 800e540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f7f8 f997 	bl	8006878 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	2202      	movs	r2, #2
 800e54e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681a      	ldr	r2, [r3, #0]
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	3304      	adds	r3, #4
 800e55a:	4619      	mov	r1, r3
 800e55c:	4610      	mov	r0, r2
 800e55e:	f000 f9cd 	bl	800e8fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2201      	movs	r2, #1
 800e566:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2201      	movs	r2, #1
 800e56e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2201      	movs	r2, #1
 800e576:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2201      	movs	r2, #1
 800e57e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2201      	movs	r2, #1
 800e586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2201      	movs	r2, #1
 800e58e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2201      	movs	r2, #1
 800e596:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	2201      	movs	r2, #1
 800e59e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	2201      	movs	r2, #1
 800e5a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2201      	movs	r2, #1
 800e5ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e5b2:	2300      	movs	r3, #0
}
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	3708      	adds	r7, #8
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	bd80      	pop	{r7, pc}

0800e5bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e5bc:	b480      	push	{r7}
 800e5be:	b085      	sub	sp, #20
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e5ca:	b2db      	uxtb	r3, r3
 800e5cc:	2b01      	cmp	r3, #1
 800e5ce:	d001      	beq.n	800e5d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e5d0:	2301      	movs	r3, #1
 800e5d2:	e04e      	b.n	800e672 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2202      	movs	r2, #2
 800e5d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	68da      	ldr	r2, [r3, #12]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	f042 0201 	orr.w	r2, r2, #1
 800e5ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	4a23      	ldr	r2, [pc, #140]	; (800e680 <HAL_TIM_Base_Start_IT+0xc4>)
 800e5f2:	4293      	cmp	r3, r2
 800e5f4:	d022      	beq.n	800e63c <HAL_TIM_Base_Start_IT+0x80>
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e5fe:	d01d      	beq.n	800e63c <HAL_TIM_Base_Start_IT+0x80>
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	4a1f      	ldr	r2, [pc, #124]	; (800e684 <HAL_TIM_Base_Start_IT+0xc8>)
 800e606:	4293      	cmp	r3, r2
 800e608:	d018      	beq.n	800e63c <HAL_TIM_Base_Start_IT+0x80>
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	4a1e      	ldr	r2, [pc, #120]	; (800e688 <HAL_TIM_Base_Start_IT+0xcc>)
 800e610:	4293      	cmp	r3, r2
 800e612:	d013      	beq.n	800e63c <HAL_TIM_Base_Start_IT+0x80>
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	4a1c      	ldr	r2, [pc, #112]	; (800e68c <HAL_TIM_Base_Start_IT+0xd0>)
 800e61a:	4293      	cmp	r3, r2
 800e61c:	d00e      	beq.n	800e63c <HAL_TIM_Base_Start_IT+0x80>
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	4a1b      	ldr	r2, [pc, #108]	; (800e690 <HAL_TIM_Base_Start_IT+0xd4>)
 800e624:	4293      	cmp	r3, r2
 800e626:	d009      	beq.n	800e63c <HAL_TIM_Base_Start_IT+0x80>
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	4a19      	ldr	r2, [pc, #100]	; (800e694 <HAL_TIM_Base_Start_IT+0xd8>)
 800e62e:	4293      	cmp	r3, r2
 800e630:	d004      	beq.n	800e63c <HAL_TIM_Base_Start_IT+0x80>
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	4a18      	ldr	r2, [pc, #96]	; (800e698 <HAL_TIM_Base_Start_IT+0xdc>)
 800e638:	4293      	cmp	r3, r2
 800e63a:	d111      	bne.n	800e660 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	689b      	ldr	r3, [r3, #8]
 800e642:	f003 0307 	and.w	r3, r3, #7
 800e646:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	2b06      	cmp	r3, #6
 800e64c:	d010      	beq.n	800e670 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	681a      	ldr	r2, [r3, #0]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	f042 0201 	orr.w	r2, r2, #1
 800e65c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e65e:	e007      	b.n	800e670 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	681a      	ldr	r2, [r3, #0]
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	f042 0201 	orr.w	r2, r2, #1
 800e66e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e670:	2300      	movs	r3, #0
}
 800e672:	4618      	mov	r0, r3
 800e674:	3714      	adds	r7, #20
 800e676:	46bd      	mov	sp, r7
 800e678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67c:	4770      	bx	lr
 800e67e:	bf00      	nop
 800e680:	40010000 	.word	0x40010000
 800e684:	40000400 	.word	0x40000400
 800e688:	40000800 	.word	0x40000800
 800e68c:	40000c00 	.word	0x40000c00
 800e690:	40010400 	.word	0x40010400
 800e694:	40014000 	.word	0x40014000
 800e698:	40001800 	.word	0x40001800

0800e69c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b082      	sub	sp, #8
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	691b      	ldr	r3, [r3, #16]
 800e6aa:	f003 0302 	and.w	r3, r3, #2
 800e6ae:	2b02      	cmp	r3, #2
 800e6b0:	d122      	bne.n	800e6f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	68db      	ldr	r3, [r3, #12]
 800e6b8:	f003 0302 	and.w	r3, r3, #2
 800e6bc:	2b02      	cmp	r3, #2
 800e6be:	d11b      	bne.n	800e6f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	f06f 0202 	mvn.w	r2, #2
 800e6c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2201      	movs	r2, #1
 800e6ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	699b      	ldr	r3, [r3, #24]
 800e6d6:	f003 0303 	and.w	r3, r3, #3
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d003      	beq.n	800e6e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	f000 f8ee 	bl	800e8c0 <HAL_TIM_IC_CaptureCallback>
 800e6e4:	e005      	b.n	800e6f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f000 f8e0 	bl	800e8ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f000 f8f1 	bl	800e8d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	691b      	ldr	r3, [r3, #16]
 800e6fe:	f003 0304 	and.w	r3, r3, #4
 800e702:	2b04      	cmp	r3, #4
 800e704:	d122      	bne.n	800e74c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	68db      	ldr	r3, [r3, #12]
 800e70c:	f003 0304 	and.w	r3, r3, #4
 800e710:	2b04      	cmp	r3, #4
 800e712:	d11b      	bne.n	800e74c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	f06f 0204 	mvn.w	r2, #4
 800e71c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2202      	movs	r2, #2
 800e722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	699b      	ldr	r3, [r3, #24]
 800e72a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d003      	beq.n	800e73a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e732:	6878      	ldr	r0, [r7, #4]
 800e734:	f000 f8c4 	bl	800e8c0 <HAL_TIM_IC_CaptureCallback>
 800e738:	e005      	b.n	800e746 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f000 f8b6 	bl	800e8ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e740:	6878      	ldr	r0, [r7, #4]
 800e742:	f000 f8c7 	bl	800e8d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2200      	movs	r2, #0
 800e74a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	691b      	ldr	r3, [r3, #16]
 800e752:	f003 0308 	and.w	r3, r3, #8
 800e756:	2b08      	cmp	r3, #8
 800e758:	d122      	bne.n	800e7a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	68db      	ldr	r3, [r3, #12]
 800e760:	f003 0308 	and.w	r3, r3, #8
 800e764:	2b08      	cmp	r3, #8
 800e766:	d11b      	bne.n	800e7a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	f06f 0208 	mvn.w	r2, #8
 800e770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	2204      	movs	r2, #4
 800e776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	69db      	ldr	r3, [r3, #28]
 800e77e:	f003 0303 	and.w	r3, r3, #3
 800e782:	2b00      	cmp	r3, #0
 800e784:	d003      	beq.n	800e78e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e786:	6878      	ldr	r0, [r7, #4]
 800e788:	f000 f89a 	bl	800e8c0 <HAL_TIM_IC_CaptureCallback>
 800e78c:	e005      	b.n	800e79a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e78e:	6878      	ldr	r0, [r7, #4]
 800e790:	f000 f88c 	bl	800e8ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f000 f89d 	bl	800e8d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2200      	movs	r2, #0
 800e79e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	691b      	ldr	r3, [r3, #16]
 800e7a6:	f003 0310 	and.w	r3, r3, #16
 800e7aa:	2b10      	cmp	r3, #16
 800e7ac:	d122      	bne.n	800e7f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	68db      	ldr	r3, [r3, #12]
 800e7b4:	f003 0310 	and.w	r3, r3, #16
 800e7b8:	2b10      	cmp	r3, #16
 800e7ba:	d11b      	bne.n	800e7f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	f06f 0210 	mvn.w	r2, #16
 800e7c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	2208      	movs	r2, #8
 800e7ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	69db      	ldr	r3, [r3, #28]
 800e7d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d003      	beq.n	800e7e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f000 f870 	bl	800e8c0 <HAL_TIM_IC_CaptureCallback>
 800e7e0:	e005      	b.n	800e7ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f000 f862 	bl	800e8ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f000 f873 	bl	800e8d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	691b      	ldr	r3, [r3, #16]
 800e7fa:	f003 0301 	and.w	r3, r3, #1
 800e7fe:	2b01      	cmp	r3, #1
 800e800:	d10e      	bne.n	800e820 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	68db      	ldr	r3, [r3, #12]
 800e808:	f003 0301 	and.w	r3, r3, #1
 800e80c:	2b01      	cmp	r3, #1
 800e80e:	d107      	bne.n	800e820 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f06f 0201 	mvn.w	r2, #1
 800e818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f7f7 fd40 	bl	80062a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	691b      	ldr	r3, [r3, #16]
 800e826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e82a:	2b80      	cmp	r3, #128	; 0x80
 800e82c:	d10e      	bne.n	800e84c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	68db      	ldr	r3, [r3, #12]
 800e834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e838:	2b80      	cmp	r3, #128	; 0x80
 800e83a:	d107      	bne.n	800e84c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	f000 f97e 	bl	800eb48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	691b      	ldr	r3, [r3, #16]
 800e852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e856:	2b40      	cmp	r3, #64	; 0x40
 800e858:	d10e      	bne.n	800e878 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	68db      	ldr	r3, [r3, #12]
 800e860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e864:	2b40      	cmp	r3, #64	; 0x40
 800e866:	d107      	bne.n	800e878 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f000 f838 	bl	800e8e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	691b      	ldr	r3, [r3, #16]
 800e87e:	f003 0320 	and.w	r3, r3, #32
 800e882:	2b20      	cmp	r3, #32
 800e884:	d10e      	bne.n	800e8a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	68db      	ldr	r3, [r3, #12]
 800e88c:	f003 0320 	and.w	r3, r3, #32
 800e890:	2b20      	cmp	r3, #32
 800e892:	d107      	bne.n	800e8a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	f06f 0220 	mvn.w	r2, #32
 800e89c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e89e:	6878      	ldr	r0, [r7, #4]
 800e8a0:	f000 f948 	bl	800eb34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e8a4:	bf00      	nop
 800e8a6:	3708      	adds	r7, #8
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}

0800e8ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e8ac:	b480      	push	{r7}
 800e8ae:	b083      	sub	sp, #12
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e8b4:	bf00      	nop
 800e8b6:	370c      	adds	r7, #12
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8be:	4770      	bx	lr

0800e8c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e8c0:	b480      	push	{r7}
 800e8c2:	b083      	sub	sp, #12
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e8c8:	bf00      	nop
 800e8ca:	370c      	adds	r7, #12
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d2:	4770      	bx	lr

0800e8d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b083      	sub	sp, #12
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e8dc:	bf00      	nop
 800e8de:	370c      	adds	r7, #12
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e6:	4770      	bx	lr

0800e8e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b083      	sub	sp, #12
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e8f0:	bf00      	nop
 800e8f2:	370c      	adds	r7, #12
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fa:	4770      	bx	lr

0800e8fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e8fc:	b480      	push	{r7}
 800e8fe:	b085      	sub	sp, #20
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
 800e904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	4a40      	ldr	r2, [pc, #256]	; (800ea10 <TIM_Base_SetConfig+0x114>)
 800e910:	4293      	cmp	r3, r2
 800e912:	d013      	beq.n	800e93c <TIM_Base_SetConfig+0x40>
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e91a:	d00f      	beq.n	800e93c <TIM_Base_SetConfig+0x40>
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	4a3d      	ldr	r2, [pc, #244]	; (800ea14 <TIM_Base_SetConfig+0x118>)
 800e920:	4293      	cmp	r3, r2
 800e922:	d00b      	beq.n	800e93c <TIM_Base_SetConfig+0x40>
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	4a3c      	ldr	r2, [pc, #240]	; (800ea18 <TIM_Base_SetConfig+0x11c>)
 800e928:	4293      	cmp	r3, r2
 800e92a:	d007      	beq.n	800e93c <TIM_Base_SetConfig+0x40>
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	4a3b      	ldr	r2, [pc, #236]	; (800ea1c <TIM_Base_SetConfig+0x120>)
 800e930:	4293      	cmp	r3, r2
 800e932:	d003      	beq.n	800e93c <TIM_Base_SetConfig+0x40>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	4a3a      	ldr	r2, [pc, #232]	; (800ea20 <TIM_Base_SetConfig+0x124>)
 800e938:	4293      	cmp	r3, r2
 800e93a:	d108      	bne.n	800e94e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e944:	683b      	ldr	r3, [r7, #0]
 800e946:	685b      	ldr	r3, [r3, #4]
 800e948:	68fa      	ldr	r2, [r7, #12]
 800e94a:	4313      	orrs	r3, r2
 800e94c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	4a2f      	ldr	r2, [pc, #188]	; (800ea10 <TIM_Base_SetConfig+0x114>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d02b      	beq.n	800e9ae <TIM_Base_SetConfig+0xb2>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e95c:	d027      	beq.n	800e9ae <TIM_Base_SetConfig+0xb2>
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	4a2c      	ldr	r2, [pc, #176]	; (800ea14 <TIM_Base_SetConfig+0x118>)
 800e962:	4293      	cmp	r3, r2
 800e964:	d023      	beq.n	800e9ae <TIM_Base_SetConfig+0xb2>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	4a2b      	ldr	r2, [pc, #172]	; (800ea18 <TIM_Base_SetConfig+0x11c>)
 800e96a:	4293      	cmp	r3, r2
 800e96c:	d01f      	beq.n	800e9ae <TIM_Base_SetConfig+0xb2>
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	4a2a      	ldr	r2, [pc, #168]	; (800ea1c <TIM_Base_SetConfig+0x120>)
 800e972:	4293      	cmp	r3, r2
 800e974:	d01b      	beq.n	800e9ae <TIM_Base_SetConfig+0xb2>
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	4a29      	ldr	r2, [pc, #164]	; (800ea20 <TIM_Base_SetConfig+0x124>)
 800e97a:	4293      	cmp	r3, r2
 800e97c:	d017      	beq.n	800e9ae <TIM_Base_SetConfig+0xb2>
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	4a28      	ldr	r2, [pc, #160]	; (800ea24 <TIM_Base_SetConfig+0x128>)
 800e982:	4293      	cmp	r3, r2
 800e984:	d013      	beq.n	800e9ae <TIM_Base_SetConfig+0xb2>
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	4a27      	ldr	r2, [pc, #156]	; (800ea28 <TIM_Base_SetConfig+0x12c>)
 800e98a:	4293      	cmp	r3, r2
 800e98c:	d00f      	beq.n	800e9ae <TIM_Base_SetConfig+0xb2>
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	4a26      	ldr	r2, [pc, #152]	; (800ea2c <TIM_Base_SetConfig+0x130>)
 800e992:	4293      	cmp	r3, r2
 800e994:	d00b      	beq.n	800e9ae <TIM_Base_SetConfig+0xb2>
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	4a25      	ldr	r2, [pc, #148]	; (800ea30 <TIM_Base_SetConfig+0x134>)
 800e99a:	4293      	cmp	r3, r2
 800e99c:	d007      	beq.n	800e9ae <TIM_Base_SetConfig+0xb2>
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	4a24      	ldr	r2, [pc, #144]	; (800ea34 <TIM_Base_SetConfig+0x138>)
 800e9a2:	4293      	cmp	r3, r2
 800e9a4:	d003      	beq.n	800e9ae <TIM_Base_SetConfig+0xb2>
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	4a23      	ldr	r2, [pc, #140]	; (800ea38 <TIM_Base_SetConfig+0x13c>)
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	d108      	bne.n	800e9c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e9b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	68db      	ldr	r3, [r3, #12]
 800e9ba:	68fa      	ldr	r2, [r7, #12]
 800e9bc:	4313      	orrs	r3, r2
 800e9be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e9c6:	683b      	ldr	r3, [r7, #0]
 800e9c8:	695b      	ldr	r3, [r3, #20]
 800e9ca:	4313      	orrs	r3, r2
 800e9cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	68fa      	ldr	r2, [r7, #12]
 800e9d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	689a      	ldr	r2, [r3, #8]
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	681a      	ldr	r2, [r3, #0]
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	4a0a      	ldr	r2, [pc, #40]	; (800ea10 <TIM_Base_SetConfig+0x114>)
 800e9e8:	4293      	cmp	r3, r2
 800e9ea:	d003      	beq.n	800e9f4 <TIM_Base_SetConfig+0xf8>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	4a0c      	ldr	r2, [pc, #48]	; (800ea20 <TIM_Base_SetConfig+0x124>)
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	d103      	bne.n	800e9fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	691a      	ldr	r2, [r3, #16]
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2201      	movs	r2, #1
 800ea00:	615a      	str	r2, [r3, #20]
}
 800ea02:	bf00      	nop
 800ea04:	3714      	adds	r7, #20
 800ea06:	46bd      	mov	sp, r7
 800ea08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0c:	4770      	bx	lr
 800ea0e:	bf00      	nop
 800ea10:	40010000 	.word	0x40010000
 800ea14:	40000400 	.word	0x40000400
 800ea18:	40000800 	.word	0x40000800
 800ea1c:	40000c00 	.word	0x40000c00
 800ea20:	40010400 	.word	0x40010400
 800ea24:	40014000 	.word	0x40014000
 800ea28:	40014400 	.word	0x40014400
 800ea2c:	40014800 	.word	0x40014800
 800ea30:	40001800 	.word	0x40001800
 800ea34:	40001c00 	.word	0x40001c00
 800ea38:	40002000 	.word	0x40002000

0800ea3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	b085      	sub	sp, #20
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
 800ea44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea4c:	2b01      	cmp	r3, #1
 800ea4e:	d101      	bne.n	800ea54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ea50:	2302      	movs	r3, #2
 800ea52:	e05a      	b.n	800eb0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	2201      	movs	r2, #1
 800ea58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2202      	movs	r2, #2
 800ea60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	685b      	ldr	r3, [r3, #4]
 800ea6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	689b      	ldr	r3, [r3, #8]
 800ea72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ea7c:	683b      	ldr	r3, [r7, #0]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	68fa      	ldr	r2, [r7, #12]
 800ea82:	4313      	orrs	r3, r2
 800ea84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	68fa      	ldr	r2, [r7, #12]
 800ea8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	4a21      	ldr	r2, [pc, #132]	; (800eb18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ea94:	4293      	cmp	r3, r2
 800ea96:	d022      	beq.n	800eade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eaa0:	d01d      	beq.n	800eade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	4a1d      	ldr	r2, [pc, #116]	; (800eb1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800eaa8:	4293      	cmp	r3, r2
 800eaaa:	d018      	beq.n	800eade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	4a1b      	ldr	r2, [pc, #108]	; (800eb20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d013      	beq.n	800eade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	4a1a      	ldr	r2, [pc, #104]	; (800eb24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800eabc:	4293      	cmp	r3, r2
 800eabe:	d00e      	beq.n	800eade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	4a18      	ldr	r2, [pc, #96]	; (800eb28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800eac6:	4293      	cmp	r3, r2
 800eac8:	d009      	beq.n	800eade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	4a17      	ldr	r2, [pc, #92]	; (800eb2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ead0:	4293      	cmp	r3, r2
 800ead2:	d004      	beq.n	800eade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	4a15      	ldr	r2, [pc, #84]	; (800eb30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800eada:	4293      	cmp	r3, r2
 800eadc:	d10c      	bne.n	800eaf8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eae4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	685b      	ldr	r3, [r3, #4]
 800eaea:	68ba      	ldr	r2, [r7, #8]
 800eaec:	4313      	orrs	r3, r2
 800eaee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	68ba      	ldr	r2, [r7, #8]
 800eaf6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2201      	movs	r2, #1
 800eafc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	2200      	movs	r2, #0
 800eb04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eb08:	2300      	movs	r3, #0
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3714      	adds	r7, #20
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb14:	4770      	bx	lr
 800eb16:	bf00      	nop
 800eb18:	40010000 	.word	0x40010000
 800eb1c:	40000400 	.word	0x40000400
 800eb20:	40000800 	.word	0x40000800
 800eb24:	40000c00 	.word	0x40000c00
 800eb28:	40010400 	.word	0x40010400
 800eb2c:	40014000 	.word	0x40014000
 800eb30:	40001800 	.word	0x40001800

0800eb34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eb34:	b480      	push	{r7}
 800eb36:	b083      	sub	sp, #12
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800eb3c:	bf00      	nop
 800eb3e:	370c      	adds	r7, #12
 800eb40:	46bd      	mov	sp, r7
 800eb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb46:	4770      	bx	lr

0800eb48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eb48:	b480      	push	{r7}
 800eb4a:	b083      	sub	sp, #12
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800eb50:	bf00      	nop
 800eb52:	370c      	adds	r7, #12
 800eb54:	46bd      	mov	sp, r7
 800eb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5a:	4770      	bx	lr

0800eb5c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800eb5c:	b084      	sub	sp, #16
 800eb5e:	b480      	push	{r7}
 800eb60:	b085      	sub	sp, #20
 800eb62:	af00      	add	r7, sp, #0
 800eb64:	6078      	str	r0, [r7, #4]
 800eb66:	f107 001c 	add.w	r0, r7, #28
 800eb6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800eb6e:	2300      	movs	r3, #0
 800eb70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800eb72:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800eb74:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800eb76:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800eb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800eb7a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800eb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800eb7e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800eb80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800eb82:	431a      	orrs	r2, r3
             Init.ClockDiv
 800eb84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800eb86:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800eb88:	68fa      	ldr	r2, [r7, #12]
 800eb8a:	4313      	orrs	r3, r2
 800eb8c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	685b      	ldr	r3, [r3, #4]
 800eb92:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800eb96:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800eb9a:	68fa      	ldr	r2, [r7, #12]
 800eb9c:	431a      	orrs	r2, r3
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800eba2:	2300      	movs	r3, #0
}
 800eba4:	4618      	mov	r0, r3
 800eba6:	3714      	adds	r7, #20
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	b004      	add	sp, #16
 800ebb0:	4770      	bx	lr

0800ebb2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800ebb2:	b480      	push	{r7}
 800ebb4:	b083      	sub	sp, #12
 800ebb6:	af00      	add	r7, sp, #0
 800ebb8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	370c      	adds	r7, #12
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebca:	4770      	bx	lr

0800ebcc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800ebcc:	b480      	push	{r7}
 800ebce:	b083      	sub	sp, #12
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
 800ebd4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	681a      	ldr	r2, [r3, #0]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ebe0:	2300      	movs	r3, #0
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	370c      	adds	r7, #12
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebec:	4770      	bx	lr

0800ebee <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800ebee:	b480      	push	{r7}
 800ebf0:	b083      	sub	sp, #12
 800ebf2:	af00      	add	r7, sp, #0
 800ebf4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	2203      	movs	r2, #3
 800ebfa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ebfc:	2300      	movs	r3, #0
}
 800ebfe:	4618      	mov	r0, r3
 800ec00:	370c      	adds	r7, #12
 800ec02:	46bd      	mov	sp, r7
 800ec04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec08:	4770      	bx	lr

0800ec0a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800ec0a:	b480      	push	{r7}
 800ec0c:	b083      	sub	sp, #12
 800ec0e:	af00      	add	r7, sp, #0
 800ec10:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	f003 0303 	and.w	r3, r3, #3
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	370c      	adds	r7, #12
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec24:	4770      	bx	lr

0800ec26 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800ec26:	b480      	push	{r7}
 800ec28:	b085      	sub	sp, #20
 800ec2a:	af00      	add	r7, sp, #0
 800ec2c:	6078      	str	r0, [r7, #4]
 800ec2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ec30:	2300      	movs	r3, #0
 800ec32:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	681a      	ldr	r2, [r3, #0]
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ec44:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ec4a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ec4c:	683b      	ldr	r3, [r7, #0]
 800ec4e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ec50:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ec52:	68fa      	ldr	r2, [r7, #12]
 800ec54:	4313      	orrs	r3, r2
 800ec56:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	68db      	ldr	r3, [r3, #12]
 800ec5c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ec60:	f023 030f 	bic.w	r3, r3, #15
 800ec64:	68fa      	ldr	r2, [r7, #12]
 800ec66:	431a      	orrs	r2, r3
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ec6c:	2300      	movs	r3, #0
}
 800ec6e:	4618      	mov	r0, r3
 800ec70:	3714      	adds	r7, #20
 800ec72:	46bd      	mov	sp, r7
 800ec74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec78:	4770      	bx	lr

0800ec7a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800ec7a:	b480      	push	{r7}
 800ec7c:	b083      	sub	sp, #12
 800ec7e:	af00      	add	r7, sp, #0
 800ec80:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	691b      	ldr	r3, [r3, #16]
 800ec86:	b2db      	uxtb	r3, r3
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	370c      	adds	r7, #12
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec92:	4770      	bx	lr

0800ec94 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800ec94:	b480      	push	{r7}
 800ec96:	b085      	sub	sp, #20
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
 800ec9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	3314      	adds	r3, #20
 800eca2:	461a      	mov	r2, r3
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	4413      	add	r3, r2
 800eca8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	681b      	ldr	r3, [r3, #0]
}  
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3714      	adds	r7, #20
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb8:	4770      	bx	lr

0800ecba <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800ecba:	b480      	push	{r7}
 800ecbc:	b085      	sub	sp, #20
 800ecbe:	af00      	add	r7, sp, #0
 800ecc0:	6078      	str	r0, [r7, #4]
 800ecc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	681a      	ldr	r2, [r3, #0]
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	685a      	ldr	r2, [r3, #4]
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ece0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ece6:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ecec:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ecee:	68fa      	ldr	r2, [r7, #12]
 800ecf0:	4313      	orrs	r3, r2
 800ecf2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecf8:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	431a      	orrs	r2, r3
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ed04:	2300      	movs	r3, #0

}
 800ed06:	4618      	mov	r0, r3
 800ed08:	3714      	adds	r7, #20
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed10:	4770      	bx	lr

0800ed12 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800ed12:	b580      	push	{r7, lr}
 800ed14:	b088      	sub	sp, #32
 800ed16:	af00      	add	r7, sp, #0
 800ed18:	6078      	str	r0, [r7, #4]
 800ed1a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ed1c:	683b      	ldr	r3, [r7, #0]
 800ed1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ed20:	2310      	movs	r3, #16
 800ed22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ed24:	2340      	movs	r3, #64	; 0x40
 800ed26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ed28:	2300      	movs	r3, #0
 800ed2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ed2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ed32:	f107 0308 	add.w	r3, r7, #8
 800ed36:	4619      	mov	r1, r3
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f7ff ff74 	bl	800ec26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800ed3e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed42:	2110      	movs	r1, #16
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f000 fa19 	bl	800f17c <SDMMC_GetCmdResp1>
 800ed4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed4c:	69fb      	ldr	r3, [r7, #28]
}
 800ed4e:	4618      	mov	r0, r3
 800ed50:	3720      	adds	r7, #32
 800ed52:	46bd      	mov	sp, r7
 800ed54:	bd80      	pop	{r7, pc}

0800ed56 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ed56:	b580      	push	{r7, lr}
 800ed58:	b088      	sub	sp, #32
 800ed5a:	af00      	add	r7, sp, #0
 800ed5c:	6078      	str	r0, [r7, #4]
 800ed5e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ed64:	2311      	movs	r3, #17
 800ed66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ed68:	2340      	movs	r3, #64	; 0x40
 800ed6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ed70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ed76:	f107 0308 	add.w	r3, r7, #8
 800ed7a:	4619      	mov	r1, r3
 800ed7c:	6878      	ldr	r0, [r7, #4]
 800ed7e:	f7ff ff52 	bl	800ec26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ed82:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed86:	2111      	movs	r1, #17
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f000 f9f7 	bl	800f17c <SDMMC_GetCmdResp1>
 800ed8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed90:	69fb      	ldr	r3, [r7, #28]
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3720      	adds	r7, #32
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}

0800ed9a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ed9a:	b580      	push	{r7, lr}
 800ed9c:	b088      	sub	sp, #32
 800ed9e:	af00      	add	r7, sp, #0
 800eda0:	6078      	str	r0, [r7, #4]
 800eda2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800eda8:	2312      	movs	r3, #18
 800edaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800edac:	2340      	movs	r3, #64	; 0x40
 800edae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800edb0:	2300      	movs	r3, #0
 800edb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800edb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800edb8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800edba:	f107 0308 	add.w	r3, r7, #8
 800edbe:	4619      	mov	r1, r3
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f7ff ff30 	bl	800ec26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800edc6:	f241 3288 	movw	r2, #5000	; 0x1388
 800edca:	2112      	movs	r1, #18
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f000 f9d5 	bl	800f17c <SDMMC_GetCmdResp1>
 800edd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800edd4:	69fb      	ldr	r3, [r7, #28]
}
 800edd6:	4618      	mov	r0, r3
 800edd8:	3720      	adds	r7, #32
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}

0800edde <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800edde:	b580      	push	{r7, lr}
 800ede0:	b088      	sub	sp, #32
 800ede2:	af00      	add	r7, sp, #0
 800ede4:	6078      	str	r0, [r7, #4]
 800ede6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800edec:	2318      	movs	r3, #24
 800edee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800edf0:	2340      	movs	r3, #64	; 0x40
 800edf2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800edf4:	2300      	movs	r3, #0
 800edf6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800edf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800edfc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800edfe:	f107 0308 	add.w	r3, r7, #8
 800ee02:	4619      	mov	r1, r3
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f7ff ff0e 	bl	800ec26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ee0a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee0e:	2118      	movs	r1, #24
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f000 f9b3 	bl	800f17c <SDMMC_GetCmdResp1>
 800ee16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee18:	69fb      	ldr	r3, [r7, #28]
}
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	3720      	adds	r7, #32
 800ee1e:	46bd      	mov	sp, r7
 800ee20:	bd80      	pop	{r7, pc}

0800ee22 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ee22:	b580      	push	{r7, lr}
 800ee24:	b088      	sub	sp, #32
 800ee26:	af00      	add	r7, sp, #0
 800ee28:	6078      	str	r0, [r7, #4]
 800ee2a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ee30:	2319      	movs	r3, #25
 800ee32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ee34:	2340      	movs	r3, #64	; 0x40
 800ee36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ee3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ee42:	f107 0308 	add.w	r3, r7, #8
 800ee46:	4619      	mov	r1, r3
 800ee48:	6878      	ldr	r0, [r7, #4]
 800ee4a:	f7ff feec 	bl	800ec26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ee4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee52:	2119      	movs	r1, #25
 800ee54:	6878      	ldr	r0, [r7, #4]
 800ee56:	f000 f991 	bl	800f17c <SDMMC_GetCmdResp1>
 800ee5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee5c:	69fb      	ldr	r3, [r7, #28]
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3720      	adds	r7, #32
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}
	...

0800ee68 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b088      	sub	sp, #32
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ee70:	2300      	movs	r3, #0
 800ee72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ee74:	230c      	movs	r3, #12
 800ee76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ee78:	2340      	movs	r3, #64	; 0x40
 800ee7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ee80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee84:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ee86:	f107 0308 	add.w	r3, r7, #8
 800ee8a:	4619      	mov	r1, r3
 800ee8c:	6878      	ldr	r0, [r7, #4]
 800ee8e:	f7ff feca 	bl	800ec26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ee92:	4a05      	ldr	r2, [pc, #20]	; (800eea8 <SDMMC_CmdStopTransfer+0x40>)
 800ee94:	210c      	movs	r1, #12
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	f000 f970 	bl	800f17c <SDMMC_GetCmdResp1>
 800ee9c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee9e:	69fb      	ldr	r3, [r7, #28]
}
 800eea0:	4618      	mov	r0, r3
 800eea2:	3720      	adds	r7, #32
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}
 800eea8:	05f5e100 	.word	0x05f5e100

0800eeac <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b08a      	sub	sp, #40	; 0x28
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	60f8      	str	r0, [r7, #12]
 800eeb4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800eebc:	2307      	movs	r3, #7
 800eebe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eec0:	2340      	movs	r3, #64	; 0x40
 800eec2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eec4:	2300      	movs	r3, #0
 800eec6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eecc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eece:	f107 0310 	add.w	r3, r7, #16
 800eed2:	4619      	mov	r1, r3
 800eed4:	68f8      	ldr	r0, [r7, #12]
 800eed6:	f7ff fea6 	bl	800ec26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800eeda:	f241 3288 	movw	r2, #5000	; 0x1388
 800eede:	2107      	movs	r1, #7
 800eee0:	68f8      	ldr	r0, [r7, #12]
 800eee2:	f000 f94b 	bl	800f17c <SDMMC_GetCmdResp1>
 800eee6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800eee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eeea:	4618      	mov	r0, r3
 800eeec:	3728      	adds	r7, #40	; 0x28
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}

0800eef2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800eef2:	b580      	push	{r7, lr}
 800eef4:	b088      	sub	sp, #32
 800eef6:	af00      	add	r7, sp, #0
 800eef8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800eefa:	2300      	movs	r3, #0
 800eefc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800eefe:	2300      	movs	r3, #0
 800ef00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ef02:	2300      	movs	r3, #0
 800ef04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ef06:	2300      	movs	r3, #0
 800ef08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ef0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ef10:	f107 0308 	add.w	r3, r7, #8
 800ef14:	4619      	mov	r1, r3
 800ef16:	6878      	ldr	r0, [r7, #4]
 800ef18:	f7ff fe85 	bl	800ec26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f000 fb65 	bl	800f5ec <SDMMC_GetCmdError>
 800ef22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef24:	69fb      	ldr	r3, [r7, #28]
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	3720      	adds	r7, #32
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}

0800ef2e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ef2e:	b580      	push	{r7, lr}
 800ef30:	b088      	sub	sp, #32
 800ef32:	af00      	add	r7, sp, #0
 800ef34:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ef36:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ef3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ef3c:	2308      	movs	r3, #8
 800ef3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ef40:	2340      	movs	r3, #64	; 0x40
 800ef42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ef44:	2300      	movs	r3, #0
 800ef46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ef48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef4c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ef4e:	f107 0308 	add.w	r3, r7, #8
 800ef52:	4619      	mov	r1, r3
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f7ff fe66 	bl	800ec26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f000 faf8 	bl	800f550 <SDMMC_GetCmdResp7>
 800ef60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef62:	69fb      	ldr	r3, [r7, #28]
}
 800ef64:	4618      	mov	r0, r3
 800ef66:	3720      	adds	r7, #32
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	bd80      	pop	{r7, pc}

0800ef6c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	b088      	sub	sp, #32
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
 800ef74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ef7a:	2337      	movs	r3, #55	; 0x37
 800ef7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ef7e:	2340      	movs	r3, #64	; 0x40
 800ef80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ef82:	2300      	movs	r3, #0
 800ef84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ef86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ef8c:	f107 0308 	add.w	r3, r7, #8
 800ef90:	4619      	mov	r1, r3
 800ef92:	6878      	ldr	r0, [r7, #4]
 800ef94:	f7ff fe47 	bl	800ec26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800ef98:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef9c:	2137      	movs	r1, #55	; 0x37
 800ef9e:	6878      	ldr	r0, [r7, #4]
 800efa0:	f000 f8ec 	bl	800f17c <SDMMC_GetCmdResp1>
 800efa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800efa6:	69fb      	ldr	r3, [r7, #28]
}
 800efa8:	4618      	mov	r0, r3
 800efaa:	3720      	adds	r7, #32
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b088      	sub	sp, #32
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
 800efb8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800efc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800efc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800efc6:	2329      	movs	r3, #41	; 0x29
 800efc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800efca:	2340      	movs	r3, #64	; 0x40
 800efcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800efce:	2300      	movs	r3, #0
 800efd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800efd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800efd6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800efd8:	f107 0308 	add.w	r3, r7, #8
 800efdc:	4619      	mov	r1, r3
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f7ff fe21 	bl	800ec26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800efe4:	6878      	ldr	r0, [r7, #4]
 800efe6:	f000 f9ff 	bl	800f3e8 <SDMMC_GetCmdResp3>
 800efea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800efec:	69fb      	ldr	r3, [r7, #28]
}
 800efee:	4618      	mov	r0, r3
 800eff0:	3720      	adds	r7, #32
 800eff2:	46bd      	mov	sp, r7
 800eff4:	bd80      	pop	{r7, pc}

0800eff6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800eff6:	b580      	push	{r7, lr}
 800eff8:	b088      	sub	sp, #32
 800effa:	af00      	add	r7, sp, #0
 800effc:	6078      	str	r0, [r7, #4]
 800effe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800f004:	2306      	movs	r3, #6
 800f006:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f008:	2340      	movs	r3, #64	; 0x40
 800f00a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f00c:	2300      	movs	r3, #0
 800f00e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f010:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f014:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f016:	f107 0308 	add.w	r3, r7, #8
 800f01a:	4619      	mov	r1, r3
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f7ff fe02 	bl	800ec26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800f022:	f241 3288 	movw	r2, #5000	; 0x1388
 800f026:	2106      	movs	r1, #6
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f000 f8a7 	bl	800f17c <SDMMC_GetCmdResp1>
 800f02e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f030:	69fb      	ldr	r3, [r7, #28]
}
 800f032:	4618      	mov	r0, r3
 800f034:	3720      	adds	r7, #32
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}

0800f03a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800f03a:	b580      	push	{r7, lr}
 800f03c:	b088      	sub	sp, #32
 800f03e:	af00      	add	r7, sp, #0
 800f040:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f042:	2300      	movs	r3, #0
 800f044:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800f046:	2333      	movs	r3, #51	; 0x33
 800f048:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f04a:	2340      	movs	r3, #64	; 0x40
 800f04c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f04e:	2300      	movs	r3, #0
 800f050:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f056:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f058:	f107 0308 	add.w	r3, r7, #8
 800f05c:	4619      	mov	r1, r3
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f7ff fde1 	bl	800ec26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800f064:	f241 3288 	movw	r2, #5000	; 0x1388
 800f068:	2133      	movs	r1, #51	; 0x33
 800f06a:	6878      	ldr	r0, [r7, #4]
 800f06c:	f000 f886 	bl	800f17c <SDMMC_GetCmdResp1>
 800f070:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f072:	69fb      	ldr	r3, [r7, #28]
}
 800f074:	4618      	mov	r0, r3
 800f076:	3720      	adds	r7, #32
 800f078:	46bd      	mov	sp, r7
 800f07a:	bd80      	pop	{r7, pc}

0800f07c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b088      	sub	sp, #32
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f084:	2300      	movs	r3, #0
 800f086:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f088:	2302      	movs	r3, #2
 800f08a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800f08c:	23c0      	movs	r3, #192	; 0xc0
 800f08e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f090:	2300      	movs	r3, #0
 800f092:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f094:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f098:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f09a:	f107 0308 	add.w	r3, r7, #8
 800f09e:	4619      	mov	r1, r3
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f7ff fdc0 	bl	800ec26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f000 f956 	bl	800f358 <SDMMC_GetCmdResp2>
 800f0ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f0ae:	69fb      	ldr	r3, [r7, #28]
}
 800f0b0:	4618      	mov	r0, r3
 800f0b2:	3720      	adds	r7, #32
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}

0800f0b8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b088      	sub	sp, #32
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
 800f0c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f0c6:	2309      	movs	r3, #9
 800f0c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800f0ca:	23c0      	movs	r3, #192	; 0xc0
 800f0cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f0d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f0d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f0d8:	f107 0308 	add.w	r3, r7, #8
 800f0dc:	4619      	mov	r1, r3
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f7ff fda1 	bl	800ec26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f000 f937 	bl	800f358 <SDMMC_GetCmdResp2>
 800f0ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f0ec:	69fb      	ldr	r3, [r7, #28]
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3720      	adds	r7, #32
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}

0800f0f6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800f0f6:	b580      	push	{r7, lr}
 800f0f8:	b088      	sub	sp, #32
 800f0fa:	af00      	add	r7, sp, #0
 800f0fc:	6078      	str	r0, [r7, #4]
 800f0fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f100:	2300      	movs	r3, #0
 800f102:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f104:	2303      	movs	r3, #3
 800f106:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f108:	2340      	movs	r3, #64	; 0x40
 800f10a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f10c:	2300      	movs	r3, #0
 800f10e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f110:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f114:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f116:	f107 0308 	add.w	r3, r7, #8
 800f11a:	4619      	mov	r1, r3
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f7ff fd82 	bl	800ec26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f122:	683a      	ldr	r2, [r7, #0]
 800f124:	2103      	movs	r1, #3
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	f000 f99c 	bl	800f464 <SDMMC_GetCmdResp6>
 800f12c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f12e:	69fb      	ldr	r3, [r7, #28]
}
 800f130:	4618      	mov	r0, r3
 800f132:	3720      	adds	r7, #32
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}

0800f138 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b088      	sub	sp, #32
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
 800f140:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f146:	230d      	movs	r3, #13
 800f148:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f14a:	2340      	movs	r3, #64	; 0x40
 800f14c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f14e:	2300      	movs	r3, #0
 800f150:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f156:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f158:	f107 0308 	add.w	r3, r7, #8
 800f15c:	4619      	mov	r1, r3
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f7ff fd61 	bl	800ec26 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800f164:	f241 3288 	movw	r2, #5000	; 0x1388
 800f168:	210d      	movs	r1, #13
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	f000 f806 	bl	800f17c <SDMMC_GetCmdResp1>
 800f170:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f172:	69fb      	ldr	r3, [r7, #28]
}
 800f174:	4618      	mov	r0, r3
 800f176:	3720      	adds	r7, #32
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}

0800f17c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f17c:	b580      	push	{r7, lr}
 800f17e:	b088      	sub	sp, #32
 800f180:	af00      	add	r7, sp, #0
 800f182:	60f8      	str	r0, [r7, #12]
 800f184:	460b      	mov	r3, r1
 800f186:	607a      	str	r2, [r7, #4]
 800f188:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800f18a:	4b70      	ldr	r3, [pc, #448]	; (800f34c <SDMMC_GetCmdResp1+0x1d0>)
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	4a70      	ldr	r2, [pc, #448]	; (800f350 <SDMMC_GetCmdResp1+0x1d4>)
 800f190:	fba2 2303 	umull	r2, r3, r2, r3
 800f194:	0a5a      	lsrs	r2, r3, #9
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	fb02 f303 	mul.w	r3, r2, r3
 800f19c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800f19e:	69fb      	ldr	r3, [r7, #28]
 800f1a0:	1e5a      	subs	r2, r3, #1
 800f1a2:	61fa      	str	r2, [r7, #28]
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d102      	bne.n	800f1ae <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f1a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f1ac:	e0c9      	b.n	800f342 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1b2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f1b4:	69bb      	ldr	r3, [r7, #24]
 800f1b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d0ef      	beq.n	800f19e <SDMMC_GetCmdResp1+0x22>
 800f1be:	69bb      	ldr	r3, [r7, #24]
 800f1c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d1ea      	bne.n	800f19e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1cc:	f003 0304 	and.w	r3, r3, #4
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d004      	beq.n	800f1de <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	2204      	movs	r2, #4
 800f1d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f1da:	2304      	movs	r3, #4
 800f1dc:	e0b1      	b.n	800f342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1e2:	f003 0301 	and.w	r3, r3, #1
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d004      	beq.n	800f1f4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	2201      	movs	r2, #1
 800f1ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f1f0:	2301      	movs	r3, #1
 800f1f2:	e0a6      	b.n	800f342 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	22c5      	movs	r2, #197	; 0xc5
 800f1f8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800f1fa:	68f8      	ldr	r0, [r7, #12]
 800f1fc:	f7ff fd3d 	bl	800ec7a <SDIO_GetCommandResponse>
 800f200:	4603      	mov	r3, r0
 800f202:	461a      	mov	r2, r3
 800f204:	7afb      	ldrb	r3, [r7, #11]
 800f206:	4293      	cmp	r3, r2
 800f208:	d001      	beq.n	800f20e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f20a:	2301      	movs	r3, #1
 800f20c:	e099      	b.n	800f342 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800f20e:	2100      	movs	r1, #0
 800f210:	68f8      	ldr	r0, [r7, #12]
 800f212:	f7ff fd3f 	bl	800ec94 <SDIO_GetResponse>
 800f216:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f218:	697a      	ldr	r2, [r7, #20]
 800f21a:	4b4e      	ldr	r3, [pc, #312]	; (800f354 <SDMMC_GetCmdResp1+0x1d8>)
 800f21c:	4013      	ands	r3, r2
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d101      	bne.n	800f226 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800f222:	2300      	movs	r3, #0
 800f224:	e08d      	b.n	800f342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f226:	697b      	ldr	r3, [r7, #20]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	da02      	bge.n	800f232 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f22c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f230:	e087      	b.n	800f342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d001      	beq.n	800f240 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f23c:	2340      	movs	r3, #64	; 0x40
 800f23e:	e080      	b.n	800f342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f246:	2b00      	cmp	r3, #0
 800f248:	d001      	beq.n	800f24e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f24a:	2380      	movs	r3, #128	; 0x80
 800f24c:	e079      	b.n	800f342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f24e:	697b      	ldr	r3, [r7, #20]
 800f250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f254:	2b00      	cmp	r3, #0
 800f256:	d002      	beq.n	800f25e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f258:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f25c:	e071      	b.n	800f342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f25e:	697b      	ldr	r3, [r7, #20]
 800f260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f264:	2b00      	cmp	r3, #0
 800f266:	d002      	beq.n	800f26e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f268:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f26c:	e069      	b.n	800f342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f274:	2b00      	cmp	r3, #0
 800f276:	d002      	beq.n	800f27e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f278:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f27c:	e061      	b.n	800f342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f284:	2b00      	cmp	r3, #0
 800f286:	d002      	beq.n	800f28e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f288:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f28c:	e059      	b.n	800f342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f294:	2b00      	cmp	r3, #0
 800f296:	d002      	beq.n	800f29e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f29c:	e051      	b.n	800f342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d002      	beq.n	800f2ae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f2a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f2ac:	e049      	b.n	800f342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f2ae:	697b      	ldr	r3, [r7, #20]
 800f2b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d002      	beq.n	800f2be <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f2b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f2bc:	e041      	b.n	800f342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f2be:	697b      	ldr	r3, [r7, #20]
 800f2c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d002      	beq.n	800f2ce <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800f2c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f2cc:	e039      	b.n	800f342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d002      	beq.n	800f2de <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f2d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f2dc:	e031      	b.n	800f342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f2de:	697b      	ldr	r3, [r7, #20]
 800f2e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d002      	beq.n	800f2ee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f2e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f2ec:	e029      	b.n	800f342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f2ee:	697b      	ldr	r3, [r7, #20]
 800f2f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d002      	beq.n	800f2fe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f2f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f2fc:	e021      	b.n	800f342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f2fe:	697b      	ldr	r3, [r7, #20]
 800f300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f304:	2b00      	cmp	r3, #0
 800f306:	d002      	beq.n	800f30e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f308:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f30c:	e019      	b.n	800f342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f314:	2b00      	cmp	r3, #0
 800f316:	d002      	beq.n	800f31e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f318:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f31c:	e011      	b.n	800f342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f324:	2b00      	cmp	r3, #0
 800f326:	d002      	beq.n	800f32e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f328:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f32c:	e009      	b.n	800f342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f32e:	697b      	ldr	r3, [r7, #20]
 800f330:	f003 0308 	and.w	r3, r3, #8
 800f334:	2b00      	cmp	r3, #0
 800f336:	d002      	beq.n	800f33e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f338:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f33c:	e001      	b.n	800f342 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f33e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f342:	4618      	mov	r0, r3
 800f344:	3720      	adds	r7, #32
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}
 800f34a:	bf00      	nop
 800f34c:	20000000 	.word	0x20000000
 800f350:	10624dd3 	.word	0x10624dd3
 800f354:	fdffe008 	.word	0xfdffe008

0800f358 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800f358:	b480      	push	{r7}
 800f35a:	b085      	sub	sp, #20
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f360:	4b1f      	ldr	r3, [pc, #124]	; (800f3e0 <SDMMC_GetCmdResp2+0x88>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	4a1f      	ldr	r2, [pc, #124]	; (800f3e4 <SDMMC_GetCmdResp2+0x8c>)
 800f366:	fba2 2303 	umull	r2, r3, r2, r3
 800f36a:	0a5b      	lsrs	r3, r3, #9
 800f36c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f370:	fb02 f303 	mul.w	r3, r2, r3
 800f374:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	1e5a      	subs	r2, r3, #1
 800f37a:	60fa      	str	r2, [r7, #12]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d102      	bne.n	800f386 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f380:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f384:	e026      	b.n	800f3d4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f38a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f392:	2b00      	cmp	r3, #0
 800f394:	d0ef      	beq.n	800f376 <SDMMC_GetCmdResp2+0x1e>
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d1ea      	bne.n	800f376 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3a4:	f003 0304 	and.w	r3, r3, #4
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d004      	beq.n	800f3b6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2204      	movs	r2, #4
 800f3b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f3b2:	2304      	movs	r3, #4
 800f3b4:	e00e      	b.n	800f3d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3ba:	f003 0301 	and.w	r3, r3, #1
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d004      	beq.n	800f3cc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2201      	movs	r2, #1
 800f3c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	e003      	b.n	800f3d4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	22c5      	movs	r2, #197	; 0xc5
 800f3d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f3d2:	2300      	movs	r3, #0
}
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	3714      	adds	r7, #20
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3de:	4770      	bx	lr
 800f3e0:	20000000 	.word	0x20000000
 800f3e4:	10624dd3 	.word	0x10624dd3

0800f3e8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800f3e8:	b480      	push	{r7}
 800f3ea:	b085      	sub	sp, #20
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f3f0:	4b1a      	ldr	r3, [pc, #104]	; (800f45c <SDMMC_GetCmdResp3+0x74>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	4a1a      	ldr	r2, [pc, #104]	; (800f460 <SDMMC_GetCmdResp3+0x78>)
 800f3f6:	fba2 2303 	umull	r2, r3, r2, r3
 800f3fa:	0a5b      	lsrs	r3, r3, #9
 800f3fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800f400:	fb02 f303 	mul.w	r3, r2, r3
 800f404:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	1e5a      	subs	r2, r3, #1
 800f40a:	60fa      	str	r2, [r7, #12]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d102      	bne.n	800f416 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f410:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f414:	e01b      	b.n	800f44e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f41a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f422:	2b00      	cmp	r3, #0
 800f424:	d0ef      	beq.n	800f406 <SDMMC_GetCmdResp3+0x1e>
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d1ea      	bne.n	800f406 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f434:	f003 0304 	and.w	r3, r3, #4
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d004      	beq.n	800f446 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2204      	movs	r2, #4
 800f440:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f442:	2304      	movs	r3, #4
 800f444:	e003      	b.n	800f44e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	22c5      	movs	r2, #197	; 0xc5
 800f44a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f44c:	2300      	movs	r3, #0
}
 800f44e:	4618      	mov	r0, r3
 800f450:	3714      	adds	r7, #20
 800f452:	46bd      	mov	sp, r7
 800f454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f458:	4770      	bx	lr
 800f45a:	bf00      	nop
 800f45c:	20000000 	.word	0x20000000
 800f460:	10624dd3 	.word	0x10624dd3

0800f464 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b088      	sub	sp, #32
 800f468:	af00      	add	r7, sp, #0
 800f46a:	60f8      	str	r0, [r7, #12]
 800f46c:	460b      	mov	r3, r1
 800f46e:	607a      	str	r2, [r7, #4]
 800f470:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f472:	4b35      	ldr	r3, [pc, #212]	; (800f548 <SDMMC_GetCmdResp6+0xe4>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	4a35      	ldr	r2, [pc, #212]	; (800f54c <SDMMC_GetCmdResp6+0xe8>)
 800f478:	fba2 2303 	umull	r2, r3, r2, r3
 800f47c:	0a5b      	lsrs	r3, r3, #9
 800f47e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f482:	fb02 f303 	mul.w	r3, r2, r3
 800f486:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800f488:	69fb      	ldr	r3, [r7, #28]
 800f48a:	1e5a      	subs	r2, r3, #1
 800f48c:	61fa      	str	r2, [r7, #28]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d102      	bne.n	800f498 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f492:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f496:	e052      	b.n	800f53e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f49c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f49e:	69bb      	ldr	r3, [r7, #24]
 800f4a0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d0ef      	beq.n	800f488 <SDMMC_GetCmdResp6+0x24>
 800f4a8:	69bb      	ldr	r3, [r7, #24]
 800f4aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d1ea      	bne.n	800f488 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4b6:	f003 0304 	and.w	r3, r3, #4
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d004      	beq.n	800f4c8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	2204      	movs	r2, #4
 800f4c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f4c4:	2304      	movs	r3, #4
 800f4c6:	e03a      	b.n	800f53e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4cc:	f003 0301 	and.w	r3, r3, #1
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d004      	beq.n	800f4de <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	2201      	movs	r2, #1
 800f4d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f4da:	2301      	movs	r3, #1
 800f4dc:	e02f      	b.n	800f53e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800f4de:	68f8      	ldr	r0, [r7, #12]
 800f4e0:	f7ff fbcb 	bl	800ec7a <SDIO_GetCommandResponse>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	7afb      	ldrb	r3, [r7, #11]
 800f4ea:	4293      	cmp	r3, r2
 800f4ec:	d001      	beq.n	800f4f2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	e025      	b.n	800f53e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	22c5      	movs	r2, #197	; 0xc5
 800f4f6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800f4f8:	2100      	movs	r1, #0
 800f4fa:	68f8      	ldr	r0, [r7, #12]
 800f4fc:	f7ff fbca 	bl	800ec94 <SDIO_GetResponse>
 800f500:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800f502:	697b      	ldr	r3, [r7, #20]
 800f504:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d106      	bne.n	800f51a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800f50c:	697b      	ldr	r3, [r7, #20]
 800f50e:	0c1b      	lsrs	r3, r3, #16
 800f510:	b29a      	uxth	r2, r3
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800f516:	2300      	movs	r3, #0
 800f518:	e011      	b.n	800f53e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f51a:	697b      	ldr	r3, [r7, #20]
 800f51c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f520:	2b00      	cmp	r3, #0
 800f522:	d002      	beq.n	800f52a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f524:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f528:	e009      	b.n	800f53e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f52a:	697b      	ldr	r3, [r7, #20]
 800f52c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f530:	2b00      	cmp	r3, #0
 800f532:	d002      	beq.n	800f53a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f538:	e001      	b.n	800f53e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f53a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f53e:	4618      	mov	r0, r3
 800f540:	3720      	adds	r7, #32
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}
 800f546:	bf00      	nop
 800f548:	20000000 	.word	0x20000000
 800f54c:	10624dd3 	.word	0x10624dd3

0800f550 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800f550:	b480      	push	{r7}
 800f552:	b085      	sub	sp, #20
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f558:	4b22      	ldr	r3, [pc, #136]	; (800f5e4 <SDMMC_GetCmdResp7+0x94>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	4a22      	ldr	r2, [pc, #136]	; (800f5e8 <SDMMC_GetCmdResp7+0x98>)
 800f55e:	fba2 2303 	umull	r2, r3, r2, r3
 800f562:	0a5b      	lsrs	r3, r3, #9
 800f564:	f241 3288 	movw	r2, #5000	; 0x1388
 800f568:	fb02 f303 	mul.w	r3, r2, r3
 800f56c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	1e5a      	subs	r2, r3, #1
 800f572:	60fa      	str	r2, [r7, #12]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d102      	bne.n	800f57e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f578:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f57c:	e02c      	b.n	800f5d8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f582:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d0ef      	beq.n	800f56e <SDMMC_GetCmdResp7+0x1e>
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f594:	2b00      	cmp	r3, #0
 800f596:	d1ea      	bne.n	800f56e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f59c:	f003 0304 	and.w	r3, r3, #4
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d004      	beq.n	800f5ae <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2204      	movs	r2, #4
 800f5a8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f5aa:	2304      	movs	r3, #4
 800f5ac:	e014      	b.n	800f5d8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5b2:	f003 0301 	and.w	r3, r3, #1
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d004      	beq.n	800f5c4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	2201      	movs	r2, #1
 800f5be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	e009      	b.n	800f5d8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d002      	beq.n	800f5d6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2240      	movs	r2, #64	; 0x40
 800f5d4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f5d6:	2300      	movs	r3, #0
  
}
 800f5d8:	4618      	mov	r0, r3
 800f5da:	3714      	adds	r7, #20
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e2:	4770      	bx	lr
 800f5e4:	20000000 	.word	0x20000000
 800f5e8:	10624dd3 	.word	0x10624dd3

0800f5ec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800f5ec:	b480      	push	{r7}
 800f5ee:	b085      	sub	sp, #20
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f5f4:	4b11      	ldr	r3, [pc, #68]	; (800f63c <SDMMC_GetCmdError+0x50>)
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	4a11      	ldr	r2, [pc, #68]	; (800f640 <SDMMC_GetCmdError+0x54>)
 800f5fa:	fba2 2303 	umull	r2, r3, r2, r3
 800f5fe:	0a5b      	lsrs	r3, r3, #9
 800f600:	f241 3288 	movw	r2, #5000	; 0x1388
 800f604:	fb02 f303 	mul.w	r3, r2, r3
 800f608:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	1e5a      	subs	r2, r3, #1
 800f60e:	60fa      	str	r2, [r7, #12]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d102      	bne.n	800f61a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f614:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f618:	e009      	b.n	800f62e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f61e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f622:	2b00      	cmp	r3, #0
 800f624:	d0f1      	beq.n	800f60a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	22c5      	movs	r2, #197	; 0xc5
 800f62a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800f62c:	2300      	movs	r3, #0
}
 800f62e:	4618      	mov	r0, r3
 800f630:	3714      	adds	r7, #20
 800f632:	46bd      	mov	sp, r7
 800f634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f638:	4770      	bx	lr
 800f63a:	bf00      	nop
 800f63c:	20000000 	.word	0x20000000
 800f640:	10624dd3 	.word	0x10624dd3

0800f644 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f644:	b084      	sub	sp, #16
 800f646:	b580      	push	{r7, lr}
 800f648:	b084      	sub	sp, #16
 800f64a:	af00      	add	r7, sp, #0
 800f64c:	6078      	str	r0, [r7, #4]
 800f64e:	f107 001c 	add.w	r0, r7, #28
 800f652:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f658:	2b01      	cmp	r3, #1
 800f65a:	d122      	bne.n	800f6a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f660:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	68db      	ldr	r3, [r3, #12]
 800f66c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800f670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f674:	687a      	ldr	r2, [r7, #4]
 800f676:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	68db      	ldr	r3, [r3, #12]
 800f67c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f686:	2b01      	cmp	r3, #1
 800f688:	d105      	bne.n	800f696 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	68db      	ldr	r3, [r3, #12]
 800f68e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	f001 fbe8 	bl	8010e6c <USB_CoreReset>
 800f69c:	4603      	mov	r3, r0
 800f69e:	73fb      	strb	r3, [r7, #15]
 800f6a0:	e01a      	b.n	800f6d8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	68db      	ldr	r3, [r3, #12]
 800f6a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f001 fbdc 	bl	8010e6c <USB_CoreReset>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f6b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d106      	bne.n	800f6cc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	639a      	str	r2, [r3, #56]	; 0x38
 800f6ca:	e005      	b.n	800f6d8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6da:	2b01      	cmp	r3, #1
 800f6dc:	d10b      	bne.n	800f6f6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	689b      	ldr	r3, [r3, #8]
 800f6e2:	f043 0206 	orr.w	r2, r3, #6
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	689b      	ldr	r3, [r3, #8]
 800f6ee:	f043 0220 	orr.w	r2, r3, #32
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f6f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3710      	adds	r7, #16
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f702:	b004      	add	sp, #16
 800f704:	4770      	bx	lr
	...

0800f708 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f708:	b480      	push	{r7}
 800f70a:	b087      	sub	sp, #28
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	60f8      	str	r0, [r7, #12]
 800f710:	60b9      	str	r1, [r7, #8]
 800f712:	4613      	mov	r3, r2
 800f714:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f716:	79fb      	ldrb	r3, [r7, #7]
 800f718:	2b02      	cmp	r3, #2
 800f71a:	d165      	bne.n	800f7e8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	4a41      	ldr	r2, [pc, #260]	; (800f824 <USB_SetTurnaroundTime+0x11c>)
 800f720:	4293      	cmp	r3, r2
 800f722:	d906      	bls.n	800f732 <USB_SetTurnaroundTime+0x2a>
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	4a40      	ldr	r2, [pc, #256]	; (800f828 <USB_SetTurnaroundTime+0x120>)
 800f728:	4293      	cmp	r3, r2
 800f72a:	d202      	bcs.n	800f732 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f72c:	230f      	movs	r3, #15
 800f72e:	617b      	str	r3, [r7, #20]
 800f730:	e062      	b.n	800f7f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f732:	68bb      	ldr	r3, [r7, #8]
 800f734:	4a3c      	ldr	r2, [pc, #240]	; (800f828 <USB_SetTurnaroundTime+0x120>)
 800f736:	4293      	cmp	r3, r2
 800f738:	d306      	bcc.n	800f748 <USB_SetTurnaroundTime+0x40>
 800f73a:	68bb      	ldr	r3, [r7, #8]
 800f73c:	4a3b      	ldr	r2, [pc, #236]	; (800f82c <USB_SetTurnaroundTime+0x124>)
 800f73e:	4293      	cmp	r3, r2
 800f740:	d202      	bcs.n	800f748 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f742:	230e      	movs	r3, #14
 800f744:	617b      	str	r3, [r7, #20]
 800f746:	e057      	b.n	800f7f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	4a38      	ldr	r2, [pc, #224]	; (800f82c <USB_SetTurnaroundTime+0x124>)
 800f74c:	4293      	cmp	r3, r2
 800f74e:	d306      	bcc.n	800f75e <USB_SetTurnaroundTime+0x56>
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	4a37      	ldr	r2, [pc, #220]	; (800f830 <USB_SetTurnaroundTime+0x128>)
 800f754:	4293      	cmp	r3, r2
 800f756:	d202      	bcs.n	800f75e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f758:	230d      	movs	r3, #13
 800f75a:	617b      	str	r3, [r7, #20]
 800f75c:	e04c      	b.n	800f7f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f75e:	68bb      	ldr	r3, [r7, #8]
 800f760:	4a33      	ldr	r2, [pc, #204]	; (800f830 <USB_SetTurnaroundTime+0x128>)
 800f762:	4293      	cmp	r3, r2
 800f764:	d306      	bcc.n	800f774 <USB_SetTurnaroundTime+0x6c>
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	4a32      	ldr	r2, [pc, #200]	; (800f834 <USB_SetTurnaroundTime+0x12c>)
 800f76a:	4293      	cmp	r3, r2
 800f76c:	d802      	bhi.n	800f774 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f76e:	230c      	movs	r3, #12
 800f770:	617b      	str	r3, [r7, #20]
 800f772:	e041      	b.n	800f7f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f774:	68bb      	ldr	r3, [r7, #8]
 800f776:	4a2f      	ldr	r2, [pc, #188]	; (800f834 <USB_SetTurnaroundTime+0x12c>)
 800f778:	4293      	cmp	r3, r2
 800f77a:	d906      	bls.n	800f78a <USB_SetTurnaroundTime+0x82>
 800f77c:	68bb      	ldr	r3, [r7, #8]
 800f77e:	4a2e      	ldr	r2, [pc, #184]	; (800f838 <USB_SetTurnaroundTime+0x130>)
 800f780:	4293      	cmp	r3, r2
 800f782:	d802      	bhi.n	800f78a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f784:	230b      	movs	r3, #11
 800f786:	617b      	str	r3, [r7, #20]
 800f788:	e036      	b.n	800f7f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f78a:	68bb      	ldr	r3, [r7, #8]
 800f78c:	4a2a      	ldr	r2, [pc, #168]	; (800f838 <USB_SetTurnaroundTime+0x130>)
 800f78e:	4293      	cmp	r3, r2
 800f790:	d906      	bls.n	800f7a0 <USB_SetTurnaroundTime+0x98>
 800f792:	68bb      	ldr	r3, [r7, #8]
 800f794:	4a29      	ldr	r2, [pc, #164]	; (800f83c <USB_SetTurnaroundTime+0x134>)
 800f796:	4293      	cmp	r3, r2
 800f798:	d802      	bhi.n	800f7a0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f79a:	230a      	movs	r3, #10
 800f79c:	617b      	str	r3, [r7, #20]
 800f79e:	e02b      	b.n	800f7f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	4a26      	ldr	r2, [pc, #152]	; (800f83c <USB_SetTurnaroundTime+0x134>)
 800f7a4:	4293      	cmp	r3, r2
 800f7a6:	d906      	bls.n	800f7b6 <USB_SetTurnaroundTime+0xae>
 800f7a8:	68bb      	ldr	r3, [r7, #8]
 800f7aa:	4a25      	ldr	r2, [pc, #148]	; (800f840 <USB_SetTurnaroundTime+0x138>)
 800f7ac:	4293      	cmp	r3, r2
 800f7ae:	d202      	bcs.n	800f7b6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f7b0:	2309      	movs	r3, #9
 800f7b2:	617b      	str	r3, [r7, #20]
 800f7b4:	e020      	b.n	800f7f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f7b6:	68bb      	ldr	r3, [r7, #8]
 800f7b8:	4a21      	ldr	r2, [pc, #132]	; (800f840 <USB_SetTurnaroundTime+0x138>)
 800f7ba:	4293      	cmp	r3, r2
 800f7bc:	d306      	bcc.n	800f7cc <USB_SetTurnaroundTime+0xc4>
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	4a20      	ldr	r2, [pc, #128]	; (800f844 <USB_SetTurnaroundTime+0x13c>)
 800f7c2:	4293      	cmp	r3, r2
 800f7c4:	d802      	bhi.n	800f7cc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f7c6:	2308      	movs	r3, #8
 800f7c8:	617b      	str	r3, [r7, #20]
 800f7ca:	e015      	b.n	800f7f8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f7cc:	68bb      	ldr	r3, [r7, #8]
 800f7ce:	4a1d      	ldr	r2, [pc, #116]	; (800f844 <USB_SetTurnaroundTime+0x13c>)
 800f7d0:	4293      	cmp	r3, r2
 800f7d2:	d906      	bls.n	800f7e2 <USB_SetTurnaroundTime+0xda>
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	4a1c      	ldr	r2, [pc, #112]	; (800f848 <USB_SetTurnaroundTime+0x140>)
 800f7d8:	4293      	cmp	r3, r2
 800f7da:	d202      	bcs.n	800f7e2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f7dc:	2307      	movs	r3, #7
 800f7de:	617b      	str	r3, [r7, #20]
 800f7e0:	e00a      	b.n	800f7f8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f7e2:	2306      	movs	r3, #6
 800f7e4:	617b      	str	r3, [r7, #20]
 800f7e6:	e007      	b.n	800f7f8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f7e8:	79fb      	ldrb	r3, [r7, #7]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d102      	bne.n	800f7f4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f7ee:	2309      	movs	r3, #9
 800f7f0:	617b      	str	r3, [r7, #20]
 800f7f2:	e001      	b.n	800f7f8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f7f4:	2309      	movs	r3, #9
 800f7f6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	68db      	ldr	r3, [r3, #12]
 800f7fc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	68da      	ldr	r2, [r3, #12]
 800f808:	697b      	ldr	r3, [r7, #20]
 800f80a:	029b      	lsls	r3, r3, #10
 800f80c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f810:	431a      	orrs	r2, r3
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f816:	2300      	movs	r3, #0
}
 800f818:	4618      	mov	r0, r3
 800f81a:	371c      	adds	r7, #28
 800f81c:	46bd      	mov	sp, r7
 800f81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f822:	4770      	bx	lr
 800f824:	00d8acbf 	.word	0x00d8acbf
 800f828:	00e4e1c0 	.word	0x00e4e1c0
 800f82c:	00f42400 	.word	0x00f42400
 800f830:	01067380 	.word	0x01067380
 800f834:	011a499f 	.word	0x011a499f
 800f838:	01312cff 	.word	0x01312cff
 800f83c:	014ca43f 	.word	0x014ca43f
 800f840:	016e3600 	.word	0x016e3600
 800f844:	01a6ab1f 	.word	0x01a6ab1f
 800f848:	01e84800 	.word	0x01e84800

0800f84c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f84c:	b480      	push	{r7}
 800f84e:	b083      	sub	sp, #12
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	689b      	ldr	r3, [r3, #8]
 800f858:	f043 0201 	orr.w	r2, r3, #1
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f860:	2300      	movs	r3, #0
}
 800f862:	4618      	mov	r0, r3
 800f864:	370c      	adds	r7, #12
 800f866:	46bd      	mov	sp, r7
 800f868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86c:	4770      	bx	lr

0800f86e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f86e:	b480      	push	{r7}
 800f870:	b083      	sub	sp, #12
 800f872:	af00      	add	r7, sp, #0
 800f874:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	689b      	ldr	r3, [r3, #8]
 800f87a:	f023 0201 	bic.w	r2, r3, #1
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f882:	2300      	movs	r3, #0
}
 800f884:	4618      	mov	r0, r3
 800f886:	370c      	adds	r7, #12
 800f888:	46bd      	mov	sp, r7
 800f88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f88e:	4770      	bx	lr

0800f890 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b084      	sub	sp, #16
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	460b      	mov	r3, r1
 800f89a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f89c:	2300      	movs	r3, #0
 800f89e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	68db      	ldr	r3, [r3, #12]
 800f8a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f8ac:	78fb      	ldrb	r3, [r7, #3]
 800f8ae:	2b01      	cmp	r3, #1
 800f8b0:	d115      	bne.n	800f8de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	68db      	ldr	r3, [r3, #12]
 800f8b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f8be:	2001      	movs	r0, #1
 800f8c0:	f7f7 f958 	bl	8006b74 <HAL_Delay>
      ms++;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	3301      	adds	r3, #1
 800f8c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f001 fa3f 	bl	8010d4e <USB_GetMode>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	2b01      	cmp	r3, #1
 800f8d4:	d01e      	beq.n	800f914 <USB_SetCurrentMode+0x84>
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	2b31      	cmp	r3, #49	; 0x31
 800f8da:	d9f0      	bls.n	800f8be <USB_SetCurrentMode+0x2e>
 800f8dc:	e01a      	b.n	800f914 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f8de:	78fb      	ldrb	r3, [r7, #3]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d115      	bne.n	800f910 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	68db      	ldr	r3, [r3, #12]
 800f8e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f8f0:	2001      	movs	r0, #1
 800f8f2:	f7f7 f93f 	bl	8006b74 <HAL_Delay>
      ms++;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	3301      	adds	r3, #1
 800f8fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f8fc:	6878      	ldr	r0, [r7, #4]
 800f8fe:	f001 fa26 	bl	8010d4e <USB_GetMode>
 800f902:	4603      	mov	r3, r0
 800f904:	2b00      	cmp	r3, #0
 800f906:	d005      	beq.n	800f914 <USB_SetCurrentMode+0x84>
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	2b31      	cmp	r3, #49	; 0x31
 800f90c:	d9f0      	bls.n	800f8f0 <USB_SetCurrentMode+0x60>
 800f90e:	e001      	b.n	800f914 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f910:	2301      	movs	r3, #1
 800f912:	e005      	b.n	800f920 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	2b32      	cmp	r3, #50	; 0x32
 800f918:	d101      	bne.n	800f91e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f91a:	2301      	movs	r3, #1
 800f91c:	e000      	b.n	800f920 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f91e:	2300      	movs	r3, #0
}
 800f920:	4618      	mov	r0, r3
 800f922:	3710      	adds	r7, #16
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}

0800f928 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f928:	b084      	sub	sp, #16
 800f92a:	b580      	push	{r7, lr}
 800f92c:	b086      	sub	sp, #24
 800f92e:	af00      	add	r7, sp, #0
 800f930:	6078      	str	r0, [r7, #4]
 800f932:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f936:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f93a:	2300      	movs	r3, #0
 800f93c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f942:	2300      	movs	r3, #0
 800f944:	613b      	str	r3, [r7, #16]
 800f946:	e009      	b.n	800f95c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f948:	687a      	ldr	r2, [r7, #4]
 800f94a:	693b      	ldr	r3, [r7, #16]
 800f94c:	3340      	adds	r3, #64	; 0x40
 800f94e:	009b      	lsls	r3, r3, #2
 800f950:	4413      	add	r3, r2
 800f952:	2200      	movs	r2, #0
 800f954:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f956:	693b      	ldr	r3, [r7, #16]
 800f958:	3301      	adds	r3, #1
 800f95a:	613b      	str	r3, [r7, #16]
 800f95c:	693b      	ldr	r3, [r7, #16]
 800f95e:	2b0e      	cmp	r3, #14
 800f960:	d9f2      	bls.n	800f948 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f964:	2b00      	cmp	r3, #0
 800f966:	d11c      	bne.n	800f9a2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f96e:	685b      	ldr	r3, [r3, #4]
 800f970:	68fa      	ldr	r2, [r7, #12]
 800f972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f976:	f043 0302 	orr.w	r3, r3, #2
 800f97a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f980:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	601a      	str	r2, [r3, #0]
 800f9a0:	e005      	b.n	800f9ae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f9b4:	461a      	mov	r2, r3
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9c0:	4619      	mov	r1, r3
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9c8:	461a      	mov	r2, r3
 800f9ca:	680b      	ldr	r3, [r1, #0]
 800f9cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9d0:	2b01      	cmp	r3, #1
 800f9d2:	d10c      	bne.n	800f9ee <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d104      	bne.n	800f9e4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f9da:	2100      	movs	r1, #0
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f000 f965 	bl	800fcac <USB_SetDevSpeed>
 800f9e2:	e008      	b.n	800f9f6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f9e4:	2101      	movs	r1, #1
 800f9e6:	6878      	ldr	r0, [r7, #4]
 800f9e8:	f000 f960 	bl	800fcac <USB_SetDevSpeed>
 800f9ec:	e003      	b.n	800f9f6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f9ee:	2103      	movs	r1, #3
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f000 f95b 	bl	800fcac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f9f6:	2110      	movs	r1, #16
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f000 f8f3 	bl	800fbe4 <USB_FlushTxFifo>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d001      	beq.n	800fa08 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800fa04:	2301      	movs	r3, #1
 800fa06:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f000 f91f 	bl	800fc4c <USB_FlushRxFifo>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d001      	beq.n	800fa18 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800fa14:	2301      	movs	r3, #1
 800fa16:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa1e:	461a      	mov	r2, r3
 800fa20:	2300      	movs	r3, #0
 800fa22:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa2a:	461a      	mov	r2, r3
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fa30:	68fb      	ldr	r3, [r7, #12]
 800fa32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa36:	461a      	mov	r2, r3
 800fa38:	2300      	movs	r3, #0
 800fa3a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	613b      	str	r3, [r7, #16]
 800fa40:	e043      	b.n	800faca <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fa42:	693b      	ldr	r3, [r7, #16]
 800fa44:	015a      	lsls	r2, r3, #5
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	4413      	add	r3, r2
 800fa4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fa54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fa58:	d118      	bne.n	800fa8c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800fa5a:	693b      	ldr	r3, [r7, #16]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d10a      	bne.n	800fa76 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fa60:	693b      	ldr	r3, [r7, #16]
 800fa62:	015a      	lsls	r2, r3, #5
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	4413      	add	r3, r2
 800fa68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa6c:	461a      	mov	r2, r3
 800fa6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fa72:	6013      	str	r3, [r2, #0]
 800fa74:	e013      	b.n	800fa9e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fa76:	693b      	ldr	r3, [r7, #16]
 800fa78:	015a      	lsls	r2, r3, #5
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	4413      	add	r3, r2
 800fa7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa82:	461a      	mov	r2, r3
 800fa84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fa88:	6013      	str	r3, [r2, #0]
 800fa8a:	e008      	b.n	800fa9e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fa8c:	693b      	ldr	r3, [r7, #16]
 800fa8e:	015a      	lsls	r2, r3, #5
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	4413      	add	r3, r2
 800fa94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa98:	461a      	mov	r2, r3
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fa9e:	693b      	ldr	r3, [r7, #16]
 800faa0:	015a      	lsls	r2, r3, #5
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	4413      	add	r3, r2
 800faa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800faaa:	461a      	mov	r2, r3
 800faac:	2300      	movs	r3, #0
 800faae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fab0:	693b      	ldr	r3, [r7, #16]
 800fab2:	015a      	lsls	r2, r3, #5
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	4413      	add	r3, r2
 800fab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fabc:	461a      	mov	r2, r3
 800fabe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fac2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fac4:	693b      	ldr	r3, [r7, #16]
 800fac6:	3301      	adds	r3, #1
 800fac8:	613b      	str	r3, [r7, #16]
 800faca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800facc:	693a      	ldr	r2, [r7, #16]
 800face:	429a      	cmp	r2, r3
 800fad0:	d3b7      	bcc.n	800fa42 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fad2:	2300      	movs	r3, #0
 800fad4:	613b      	str	r3, [r7, #16]
 800fad6:	e043      	b.n	800fb60 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fad8:	693b      	ldr	r3, [r7, #16]
 800fada:	015a      	lsls	r2, r3, #5
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	4413      	add	r3, r2
 800fae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800faea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800faee:	d118      	bne.n	800fb22 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800faf0:	693b      	ldr	r3, [r7, #16]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d10a      	bne.n	800fb0c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800faf6:	693b      	ldr	r3, [r7, #16]
 800faf8:	015a      	lsls	r2, r3, #5
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	4413      	add	r3, r2
 800fafe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb02:	461a      	mov	r2, r3
 800fb04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fb08:	6013      	str	r3, [r2, #0]
 800fb0a:	e013      	b.n	800fb34 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fb0c:	693b      	ldr	r3, [r7, #16]
 800fb0e:	015a      	lsls	r2, r3, #5
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	4413      	add	r3, r2
 800fb14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb18:	461a      	mov	r2, r3
 800fb1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fb1e:	6013      	str	r3, [r2, #0]
 800fb20:	e008      	b.n	800fb34 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fb22:	693b      	ldr	r3, [r7, #16]
 800fb24:	015a      	lsls	r2, r3, #5
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	4413      	add	r3, r2
 800fb2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb2e:	461a      	mov	r2, r3
 800fb30:	2300      	movs	r3, #0
 800fb32:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fb34:	693b      	ldr	r3, [r7, #16]
 800fb36:	015a      	lsls	r2, r3, #5
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	4413      	add	r3, r2
 800fb3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb40:	461a      	mov	r2, r3
 800fb42:	2300      	movs	r3, #0
 800fb44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fb46:	693b      	ldr	r3, [r7, #16]
 800fb48:	015a      	lsls	r2, r3, #5
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	4413      	add	r3, r2
 800fb4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb52:	461a      	mov	r2, r3
 800fb54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fb58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fb5a:	693b      	ldr	r3, [r7, #16]
 800fb5c:	3301      	adds	r3, #1
 800fb5e:	613b      	str	r3, [r7, #16]
 800fb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb62:	693a      	ldr	r2, [r7, #16]
 800fb64:	429a      	cmp	r2, r3
 800fb66:	d3b7      	bcc.n	800fad8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb6e:	691b      	ldr	r3, [r3, #16]
 800fb70:	68fa      	ldr	r2, [r7, #12]
 800fb72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fb76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fb7a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	2200      	movs	r2, #0
 800fb80:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fb88:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d105      	bne.n	800fb9c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	699b      	ldr	r3, [r3, #24]
 800fb94:	f043 0210 	orr.w	r2, r3, #16
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	699a      	ldr	r2, [r3, #24]
 800fba0:	4b0f      	ldr	r3, [pc, #60]	; (800fbe0 <USB_DevInit+0x2b8>)
 800fba2:	4313      	orrs	r3, r2
 800fba4:	687a      	ldr	r2, [r7, #4]
 800fba6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d005      	beq.n	800fbba <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	699b      	ldr	r3, [r3, #24]
 800fbb2:	f043 0208 	orr.w	r2, r3, #8
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fbba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fbbc:	2b01      	cmp	r3, #1
 800fbbe:	d107      	bne.n	800fbd0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	699b      	ldr	r3, [r3, #24]
 800fbc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fbc8:	f043 0304 	orr.w	r3, r3, #4
 800fbcc:	687a      	ldr	r2, [r7, #4]
 800fbce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fbd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	3718      	adds	r7, #24
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fbdc:	b004      	add	sp, #16
 800fbde:	4770      	bx	lr
 800fbe0:	803c3800 	.word	0x803c3800

0800fbe4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fbe4:	b480      	push	{r7}
 800fbe6:	b085      	sub	sp, #20
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
 800fbec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fbee:	2300      	movs	r3, #0
 800fbf0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	3301      	adds	r3, #1
 800fbf6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	4a13      	ldr	r2, [pc, #76]	; (800fc48 <USB_FlushTxFifo+0x64>)
 800fbfc:	4293      	cmp	r3, r2
 800fbfe:	d901      	bls.n	800fc04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800fc00:	2303      	movs	r3, #3
 800fc02:	e01b      	b.n	800fc3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	691b      	ldr	r3, [r3, #16]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	daf2      	bge.n	800fbf2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fc10:	683b      	ldr	r3, [r7, #0]
 800fc12:	019b      	lsls	r3, r3, #6
 800fc14:	f043 0220 	orr.w	r2, r3, #32
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	3301      	adds	r3, #1
 800fc20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	4a08      	ldr	r2, [pc, #32]	; (800fc48 <USB_FlushTxFifo+0x64>)
 800fc26:	4293      	cmp	r3, r2
 800fc28:	d901      	bls.n	800fc2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800fc2a:	2303      	movs	r3, #3
 800fc2c:	e006      	b.n	800fc3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	691b      	ldr	r3, [r3, #16]
 800fc32:	f003 0320 	and.w	r3, r3, #32
 800fc36:	2b20      	cmp	r3, #32
 800fc38:	d0f0      	beq.n	800fc1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800fc3a:	2300      	movs	r3, #0
}
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	3714      	adds	r7, #20
 800fc40:	46bd      	mov	sp, r7
 800fc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc46:	4770      	bx	lr
 800fc48:	00030d40 	.word	0x00030d40

0800fc4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fc4c:	b480      	push	{r7}
 800fc4e:	b085      	sub	sp, #20
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800fc54:	2300      	movs	r3, #0
 800fc56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	3301      	adds	r3, #1
 800fc5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	4a11      	ldr	r2, [pc, #68]	; (800fca8 <USB_FlushRxFifo+0x5c>)
 800fc62:	4293      	cmp	r3, r2
 800fc64:	d901      	bls.n	800fc6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800fc66:	2303      	movs	r3, #3
 800fc68:	e018      	b.n	800fc9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	691b      	ldr	r3, [r3, #16]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	daf2      	bge.n	800fc58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800fc72:	2300      	movs	r3, #0
 800fc74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	2210      	movs	r2, #16
 800fc7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	3301      	adds	r3, #1
 800fc80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	4a08      	ldr	r2, [pc, #32]	; (800fca8 <USB_FlushRxFifo+0x5c>)
 800fc86:	4293      	cmp	r3, r2
 800fc88:	d901      	bls.n	800fc8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800fc8a:	2303      	movs	r3, #3
 800fc8c:	e006      	b.n	800fc9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	691b      	ldr	r3, [r3, #16]
 800fc92:	f003 0310 	and.w	r3, r3, #16
 800fc96:	2b10      	cmp	r3, #16
 800fc98:	d0f0      	beq.n	800fc7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800fc9a:	2300      	movs	r3, #0
}
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	3714      	adds	r7, #20
 800fca0:	46bd      	mov	sp, r7
 800fca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca6:	4770      	bx	lr
 800fca8:	00030d40 	.word	0x00030d40

0800fcac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fcac:	b480      	push	{r7}
 800fcae:	b085      	sub	sp, #20
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
 800fcb4:	460b      	mov	r3, r1
 800fcb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcc2:	681a      	ldr	r2, [r3, #0]
 800fcc4:	78fb      	ldrb	r3, [r7, #3]
 800fcc6:	68f9      	ldr	r1, [r7, #12]
 800fcc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fccc:	4313      	orrs	r3, r2
 800fcce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fcd0:	2300      	movs	r3, #0
}
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	3714      	adds	r7, #20
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcdc:	4770      	bx	lr

0800fcde <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800fcde:	b480      	push	{r7}
 800fce0:	b087      	sub	sp, #28
 800fce2:	af00      	add	r7, sp, #0
 800fce4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fcea:	693b      	ldr	r3, [r7, #16]
 800fcec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcf0:	689b      	ldr	r3, [r3, #8]
 800fcf2:	f003 0306 	and.w	r3, r3, #6
 800fcf6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d102      	bne.n	800fd04 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	75fb      	strb	r3, [r7, #23]
 800fd02:	e00a      	b.n	800fd1a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	2b02      	cmp	r3, #2
 800fd08:	d002      	beq.n	800fd10 <USB_GetDevSpeed+0x32>
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	2b06      	cmp	r3, #6
 800fd0e:	d102      	bne.n	800fd16 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fd10:	2302      	movs	r3, #2
 800fd12:	75fb      	strb	r3, [r7, #23]
 800fd14:	e001      	b.n	800fd1a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fd16:	230f      	movs	r3, #15
 800fd18:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fd1a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd1c:	4618      	mov	r0, r3
 800fd1e:	371c      	adds	r7, #28
 800fd20:	46bd      	mov	sp, r7
 800fd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd26:	4770      	bx	lr

0800fd28 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fd28:	b480      	push	{r7}
 800fd2a:	b085      	sub	sp, #20
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
 800fd30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fd36:	683b      	ldr	r3, [r7, #0]
 800fd38:	781b      	ldrb	r3, [r3, #0]
 800fd3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fd3c:	683b      	ldr	r3, [r7, #0]
 800fd3e:	785b      	ldrb	r3, [r3, #1]
 800fd40:	2b01      	cmp	r3, #1
 800fd42:	d13a      	bne.n	800fdba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd4a:	69da      	ldr	r2, [r3, #28]
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	781b      	ldrb	r3, [r3, #0]
 800fd50:	f003 030f 	and.w	r3, r3, #15
 800fd54:	2101      	movs	r1, #1
 800fd56:	fa01 f303 	lsl.w	r3, r1, r3
 800fd5a:	b29b      	uxth	r3, r3
 800fd5c:	68f9      	ldr	r1, [r7, #12]
 800fd5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fd62:	4313      	orrs	r3, r2
 800fd64:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800fd66:	68bb      	ldr	r3, [r7, #8]
 800fd68:	015a      	lsls	r2, r3, #5
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	4413      	add	r3, r2
 800fd6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d155      	bne.n	800fe28 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fd7c:	68bb      	ldr	r3, [r7, #8]
 800fd7e:	015a      	lsls	r2, r3, #5
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	4413      	add	r3, r2
 800fd84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd88:	681a      	ldr	r2, [r3, #0]
 800fd8a:	683b      	ldr	r3, [r7, #0]
 800fd8c:	68db      	ldr	r3, [r3, #12]
 800fd8e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fd92:	683b      	ldr	r3, [r7, #0]
 800fd94:	791b      	ldrb	r3, [r3, #4]
 800fd96:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fd98:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	059b      	lsls	r3, r3, #22
 800fd9e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fda0:	4313      	orrs	r3, r2
 800fda2:	68ba      	ldr	r2, [r7, #8]
 800fda4:	0151      	lsls	r1, r2, #5
 800fda6:	68fa      	ldr	r2, [r7, #12]
 800fda8:	440a      	add	r2, r1
 800fdaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fdae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fdb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fdb6:	6013      	str	r3, [r2, #0]
 800fdb8:	e036      	b.n	800fe28 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fdc0:	69da      	ldr	r2, [r3, #28]
 800fdc2:	683b      	ldr	r3, [r7, #0]
 800fdc4:	781b      	ldrb	r3, [r3, #0]
 800fdc6:	f003 030f 	and.w	r3, r3, #15
 800fdca:	2101      	movs	r1, #1
 800fdcc:	fa01 f303 	lsl.w	r3, r1, r3
 800fdd0:	041b      	lsls	r3, r3, #16
 800fdd2:	68f9      	ldr	r1, [r7, #12]
 800fdd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fdd8:	4313      	orrs	r3, r2
 800fdda:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800fddc:	68bb      	ldr	r3, [r7, #8]
 800fdde:	015a      	lsls	r2, r3, #5
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	4413      	add	r3, r2
 800fde4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d11a      	bne.n	800fe28 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fdf2:	68bb      	ldr	r3, [r7, #8]
 800fdf4:	015a      	lsls	r2, r3, #5
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	4413      	add	r3, r2
 800fdfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdfe:	681a      	ldr	r2, [r3, #0]
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	68db      	ldr	r3, [r3, #12]
 800fe04:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800fe08:	683b      	ldr	r3, [r7, #0]
 800fe0a:	791b      	ldrb	r3, [r3, #4]
 800fe0c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fe0e:	430b      	orrs	r3, r1
 800fe10:	4313      	orrs	r3, r2
 800fe12:	68ba      	ldr	r2, [r7, #8]
 800fe14:	0151      	lsls	r1, r2, #5
 800fe16:	68fa      	ldr	r2, [r7, #12]
 800fe18:	440a      	add	r2, r1
 800fe1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fe22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fe26:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800fe28:	2300      	movs	r3, #0
}
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	3714      	adds	r7, #20
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe34:	4770      	bx	lr
	...

0800fe38 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fe38:	b480      	push	{r7}
 800fe3a:	b085      	sub	sp, #20
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
 800fe40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	781b      	ldrb	r3, [r3, #0]
 800fe4a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	785b      	ldrb	r3, [r3, #1]
 800fe50:	2b01      	cmp	r3, #1
 800fe52:	d161      	bne.n	800ff18 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	015a      	lsls	r2, r3, #5
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	4413      	add	r3, r2
 800fe5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fe66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fe6a:	d11f      	bne.n	800feac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	015a      	lsls	r2, r3, #5
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	4413      	add	r3, r2
 800fe74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	68ba      	ldr	r2, [r7, #8]
 800fe7c:	0151      	lsls	r1, r2, #5
 800fe7e:	68fa      	ldr	r2, [r7, #12]
 800fe80:	440a      	add	r2, r1
 800fe82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fe8a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	015a      	lsls	r2, r3, #5
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	4413      	add	r3, r2
 800fe94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	68ba      	ldr	r2, [r7, #8]
 800fe9c:	0151      	lsls	r1, r2, #5
 800fe9e:	68fa      	ldr	r2, [r7, #12]
 800fea0:	440a      	add	r2, r1
 800fea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fea6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800feaa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800feb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	781b      	ldrb	r3, [r3, #0]
 800feb8:	f003 030f 	and.w	r3, r3, #15
 800febc:	2101      	movs	r1, #1
 800febe:	fa01 f303 	lsl.w	r3, r1, r3
 800fec2:	b29b      	uxth	r3, r3
 800fec4:	43db      	mvns	r3, r3
 800fec6:	68f9      	ldr	r1, [r7, #12]
 800fec8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fecc:	4013      	ands	r3, r2
 800fece:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fed6:	69da      	ldr	r2, [r3, #28]
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	781b      	ldrb	r3, [r3, #0]
 800fedc:	f003 030f 	and.w	r3, r3, #15
 800fee0:	2101      	movs	r1, #1
 800fee2:	fa01 f303 	lsl.w	r3, r1, r3
 800fee6:	b29b      	uxth	r3, r3
 800fee8:	43db      	mvns	r3, r3
 800feea:	68f9      	ldr	r1, [r7, #12]
 800feec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fef0:	4013      	ands	r3, r2
 800fef2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800fef4:	68bb      	ldr	r3, [r7, #8]
 800fef6:	015a      	lsls	r2, r3, #5
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	4413      	add	r3, r2
 800fefc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff00:	681a      	ldr	r2, [r3, #0]
 800ff02:	68bb      	ldr	r3, [r7, #8]
 800ff04:	0159      	lsls	r1, r3, #5
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	440b      	add	r3, r1
 800ff0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff0e:	4619      	mov	r1, r3
 800ff10:	4b35      	ldr	r3, [pc, #212]	; (800ffe8 <USB_DeactivateEndpoint+0x1b0>)
 800ff12:	4013      	ands	r3, r2
 800ff14:	600b      	str	r3, [r1, #0]
 800ff16:	e060      	b.n	800ffda <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ff18:	68bb      	ldr	r3, [r7, #8]
 800ff1a:	015a      	lsls	r2, r3, #5
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	4413      	add	r3, r2
 800ff20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ff2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ff2e:	d11f      	bne.n	800ff70 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	015a      	lsls	r2, r3, #5
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	4413      	add	r3, r2
 800ff38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	68ba      	ldr	r2, [r7, #8]
 800ff40:	0151      	lsls	r1, r2, #5
 800ff42:	68fa      	ldr	r2, [r7, #12]
 800ff44:	440a      	add	r2, r1
 800ff46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ff4e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ff50:	68bb      	ldr	r3, [r7, #8]
 800ff52:	015a      	lsls	r2, r3, #5
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	4413      	add	r3, r2
 800ff58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	68ba      	ldr	r2, [r7, #8]
 800ff60:	0151      	lsls	r1, r2, #5
 800ff62:	68fa      	ldr	r2, [r7, #12]
 800ff64:	440a      	add	r2, r1
 800ff66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ff6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	781b      	ldrb	r3, [r3, #0]
 800ff7c:	f003 030f 	and.w	r3, r3, #15
 800ff80:	2101      	movs	r1, #1
 800ff82:	fa01 f303 	lsl.w	r3, r1, r3
 800ff86:	041b      	lsls	r3, r3, #16
 800ff88:	43db      	mvns	r3, r3
 800ff8a:	68f9      	ldr	r1, [r7, #12]
 800ff8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff90:	4013      	ands	r3, r2
 800ff92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff9a:	69da      	ldr	r2, [r3, #28]
 800ff9c:	683b      	ldr	r3, [r7, #0]
 800ff9e:	781b      	ldrb	r3, [r3, #0]
 800ffa0:	f003 030f 	and.w	r3, r3, #15
 800ffa4:	2101      	movs	r1, #1
 800ffa6:	fa01 f303 	lsl.w	r3, r1, r3
 800ffaa:	041b      	lsls	r3, r3, #16
 800ffac:	43db      	mvns	r3, r3
 800ffae:	68f9      	ldr	r1, [r7, #12]
 800ffb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ffb4:	4013      	ands	r3, r2
 800ffb6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ffb8:	68bb      	ldr	r3, [r7, #8]
 800ffba:	015a      	lsls	r2, r3, #5
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	4413      	add	r3, r2
 800ffc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffc4:	681a      	ldr	r2, [r3, #0]
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	0159      	lsls	r1, r3, #5
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	440b      	add	r3, r1
 800ffce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffd2:	4619      	mov	r1, r3
 800ffd4:	4b05      	ldr	r3, [pc, #20]	; (800ffec <USB_DeactivateEndpoint+0x1b4>)
 800ffd6:	4013      	ands	r3, r2
 800ffd8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ffda:	2300      	movs	r3, #0
}
 800ffdc:	4618      	mov	r0, r3
 800ffde:	3714      	adds	r7, #20
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe6:	4770      	bx	lr
 800ffe8:	ec337800 	.word	0xec337800
 800ffec:	eff37800 	.word	0xeff37800

0800fff0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b08a      	sub	sp, #40	; 0x28
 800fff4:	af02      	add	r7, sp, #8
 800fff6:	60f8      	str	r0, [r7, #12]
 800fff8:	60b9      	str	r1, [r7, #8]
 800fffa:	4613      	mov	r3, r2
 800fffc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8010002:	68bb      	ldr	r3, [r7, #8]
 8010004:	781b      	ldrb	r3, [r3, #0]
 8010006:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	785b      	ldrb	r3, [r3, #1]
 801000c:	2b01      	cmp	r3, #1
 801000e:	f040 815c 	bne.w	80102ca <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	699b      	ldr	r3, [r3, #24]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d132      	bne.n	8010080 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801001a:	69bb      	ldr	r3, [r7, #24]
 801001c:	015a      	lsls	r2, r3, #5
 801001e:	69fb      	ldr	r3, [r7, #28]
 8010020:	4413      	add	r3, r2
 8010022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010026:	691b      	ldr	r3, [r3, #16]
 8010028:	69ba      	ldr	r2, [r7, #24]
 801002a:	0151      	lsls	r1, r2, #5
 801002c:	69fa      	ldr	r2, [r7, #28]
 801002e:	440a      	add	r2, r1
 8010030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010034:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010038:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801003c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801003e:	69bb      	ldr	r3, [r7, #24]
 8010040:	015a      	lsls	r2, r3, #5
 8010042:	69fb      	ldr	r3, [r7, #28]
 8010044:	4413      	add	r3, r2
 8010046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801004a:	691b      	ldr	r3, [r3, #16]
 801004c:	69ba      	ldr	r2, [r7, #24]
 801004e:	0151      	lsls	r1, r2, #5
 8010050:	69fa      	ldr	r2, [r7, #28]
 8010052:	440a      	add	r2, r1
 8010054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010058:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801005c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801005e:	69bb      	ldr	r3, [r7, #24]
 8010060:	015a      	lsls	r2, r3, #5
 8010062:	69fb      	ldr	r3, [r7, #28]
 8010064:	4413      	add	r3, r2
 8010066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801006a:	691b      	ldr	r3, [r3, #16]
 801006c:	69ba      	ldr	r2, [r7, #24]
 801006e:	0151      	lsls	r1, r2, #5
 8010070:	69fa      	ldr	r2, [r7, #28]
 8010072:	440a      	add	r2, r1
 8010074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010078:	0cdb      	lsrs	r3, r3, #19
 801007a:	04db      	lsls	r3, r3, #19
 801007c:	6113      	str	r3, [r2, #16]
 801007e:	e074      	b.n	801016a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010080:	69bb      	ldr	r3, [r7, #24]
 8010082:	015a      	lsls	r2, r3, #5
 8010084:	69fb      	ldr	r3, [r7, #28]
 8010086:	4413      	add	r3, r2
 8010088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801008c:	691b      	ldr	r3, [r3, #16]
 801008e:	69ba      	ldr	r2, [r7, #24]
 8010090:	0151      	lsls	r1, r2, #5
 8010092:	69fa      	ldr	r2, [r7, #28]
 8010094:	440a      	add	r2, r1
 8010096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801009a:	0cdb      	lsrs	r3, r3, #19
 801009c:	04db      	lsls	r3, r3, #19
 801009e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80100a0:	69bb      	ldr	r3, [r7, #24]
 80100a2:	015a      	lsls	r2, r3, #5
 80100a4:	69fb      	ldr	r3, [r7, #28]
 80100a6:	4413      	add	r3, r2
 80100a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100ac:	691b      	ldr	r3, [r3, #16]
 80100ae:	69ba      	ldr	r2, [r7, #24]
 80100b0:	0151      	lsls	r1, r2, #5
 80100b2:	69fa      	ldr	r2, [r7, #28]
 80100b4:	440a      	add	r2, r1
 80100b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80100be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80100c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80100c4:	69bb      	ldr	r3, [r7, #24]
 80100c6:	015a      	lsls	r2, r3, #5
 80100c8:	69fb      	ldr	r3, [r7, #28]
 80100ca:	4413      	add	r3, r2
 80100cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100d0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80100d2:	68bb      	ldr	r3, [r7, #8]
 80100d4:	6999      	ldr	r1, [r3, #24]
 80100d6:	68bb      	ldr	r3, [r7, #8]
 80100d8:	68db      	ldr	r3, [r3, #12]
 80100da:	440b      	add	r3, r1
 80100dc:	1e59      	subs	r1, r3, #1
 80100de:	68bb      	ldr	r3, [r7, #8]
 80100e0:	68db      	ldr	r3, [r3, #12]
 80100e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80100e6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80100e8:	4b9d      	ldr	r3, [pc, #628]	; (8010360 <USB_EPStartXfer+0x370>)
 80100ea:	400b      	ands	r3, r1
 80100ec:	69b9      	ldr	r1, [r7, #24]
 80100ee:	0148      	lsls	r0, r1, #5
 80100f0:	69f9      	ldr	r1, [r7, #28]
 80100f2:	4401      	add	r1, r0
 80100f4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80100f8:	4313      	orrs	r3, r2
 80100fa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80100fc:	69bb      	ldr	r3, [r7, #24]
 80100fe:	015a      	lsls	r2, r3, #5
 8010100:	69fb      	ldr	r3, [r7, #28]
 8010102:	4413      	add	r3, r2
 8010104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010108:	691a      	ldr	r2, [r3, #16]
 801010a:	68bb      	ldr	r3, [r7, #8]
 801010c:	699b      	ldr	r3, [r3, #24]
 801010e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010112:	69b9      	ldr	r1, [r7, #24]
 8010114:	0148      	lsls	r0, r1, #5
 8010116:	69f9      	ldr	r1, [r7, #28]
 8010118:	4401      	add	r1, r0
 801011a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801011e:	4313      	orrs	r3, r2
 8010120:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8010122:	68bb      	ldr	r3, [r7, #8]
 8010124:	791b      	ldrb	r3, [r3, #4]
 8010126:	2b01      	cmp	r3, #1
 8010128:	d11f      	bne.n	801016a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801012a:	69bb      	ldr	r3, [r7, #24]
 801012c:	015a      	lsls	r2, r3, #5
 801012e:	69fb      	ldr	r3, [r7, #28]
 8010130:	4413      	add	r3, r2
 8010132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010136:	691b      	ldr	r3, [r3, #16]
 8010138:	69ba      	ldr	r2, [r7, #24]
 801013a:	0151      	lsls	r1, r2, #5
 801013c:	69fa      	ldr	r2, [r7, #28]
 801013e:	440a      	add	r2, r1
 8010140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010144:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8010148:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801014a:	69bb      	ldr	r3, [r7, #24]
 801014c:	015a      	lsls	r2, r3, #5
 801014e:	69fb      	ldr	r3, [r7, #28]
 8010150:	4413      	add	r3, r2
 8010152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010156:	691b      	ldr	r3, [r3, #16]
 8010158:	69ba      	ldr	r2, [r7, #24]
 801015a:	0151      	lsls	r1, r2, #5
 801015c:	69fa      	ldr	r2, [r7, #28]
 801015e:	440a      	add	r2, r1
 8010160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010164:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010168:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801016a:	79fb      	ldrb	r3, [r7, #7]
 801016c:	2b01      	cmp	r3, #1
 801016e:	d14b      	bne.n	8010208 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010170:	68bb      	ldr	r3, [r7, #8]
 8010172:	695b      	ldr	r3, [r3, #20]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d009      	beq.n	801018c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010178:	69bb      	ldr	r3, [r7, #24]
 801017a:	015a      	lsls	r2, r3, #5
 801017c:	69fb      	ldr	r3, [r7, #28]
 801017e:	4413      	add	r3, r2
 8010180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010184:	461a      	mov	r2, r3
 8010186:	68bb      	ldr	r3, [r7, #8]
 8010188:	695b      	ldr	r3, [r3, #20]
 801018a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801018c:	68bb      	ldr	r3, [r7, #8]
 801018e:	791b      	ldrb	r3, [r3, #4]
 8010190:	2b01      	cmp	r3, #1
 8010192:	d128      	bne.n	80101e6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010194:	69fb      	ldr	r3, [r7, #28]
 8010196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801019a:	689b      	ldr	r3, [r3, #8]
 801019c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d110      	bne.n	80101c6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80101a4:	69bb      	ldr	r3, [r7, #24]
 80101a6:	015a      	lsls	r2, r3, #5
 80101a8:	69fb      	ldr	r3, [r7, #28]
 80101aa:	4413      	add	r3, r2
 80101ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	69ba      	ldr	r2, [r7, #24]
 80101b4:	0151      	lsls	r1, r2, #5
 80101b6:	69fa      	ldr	r2, [r7, #28]
 80101b8:	440a      	add	r2, r1
 80101ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80101c2:	6013      	str	r3, [r2, #0]
 80101c4:	e00f      	b.n	80101e6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80101c6:	69bb      	ldr	r3, [r7, #24]
 80101c8:	015a      	lsls	r2, r3, #5
 80101ca:	69fb      	ldr	r3, [r7, #28]
 80101cc:	4413      	add	r3, r2
 80101ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	69ba      	ldr	r2, [r7, #24]
 80101d6:	0151      	lsls	r1, r2, #5
 80101d8:	69fa      	ldr	r2, [r7, #28]
 80101da:	440a      	add	r2, r1
 80101dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80101e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80101e4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80101e6:	69bb      	ldr	r3, [r7, #24]
 80101e8:	015a      	lsls	r2, r3, #5
 80101ea:	69fb      	ldr	r3, [r7, #28]
 80101ec:	4413      	add	r3, r2
 80101ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	69ba      	ldr	r2, [r7, #24]
 80101f6:	0151      	lsls	r1, r2, #5
 80101f8:	69fa      	ldr	r2, [r7, #28]
 80101fa:	440a      	add	r2, r1
 80101fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010200:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010204:	6013      	str	r3, [r2, #0]
 8010206:	e133      	b.n	8010470 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010208:	69bb      	ldr	r3, [r7, #24]
 801020a:	015a      	lsls	r2, r3, #5
 801020c:	69fb      	ldr	r3, [r7, #28]
 801020e:	4413      	add	r3, r2
 8010210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	69ba      	ldr	r2, [r7, #24]
 8010218:	0151      	lsls	r1, r2, #5
 801021a:	69fa      	ldr	r2, [r7, #28]
 801021c:	440a      	add	r2, r1
 801021e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010222:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010226:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	791b      	ldrb	r3, [r3, #4]
 801022c:	2b01      	cmp	r3, #1
 801022e:	d015      	beq.n	801025c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8010230:	68bb      	ldr	r3, [r7, #8]
 8010232:	699b      	ldr	r3, [r3, #24]
 8010234:	2b00      	cmp	r3, #0
 8010236:	f000 811b 	beq.w	8010470 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801023a:	69fb      	ldr	r3, [r7, #28]
 801023c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	781b      	ldrb	r3, [r3, #0]
 8010246:	f003 030f 	and.w	r3, r3, #15
 801024a:	2101      	movs	r1, #1
 801024c:	fa01 f303 	lsl.w	r3, r1, r3
 8010250:	69f9      	ldr	r1, [r7, #28]
 8010252:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010256:	4313      	orrs	r3, r2
 8010258:	634b      	str	r3, [r1, #52]	; 0x34
 801025a:	e109      	b.n	8010470 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801025c:	69fb      	ldr	r3, [r7, #28]
 801025e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010262:	689b      	ldr	r3, [r3, #8]
 8010264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010268:	2b00      	cmp	r3, #0
 801026a:	d110      	bne.n	801028e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801026c:	69bb      	ldr	r3, [r7, #24]
 801026e:	015a      	lsls	r2, r3, #5
 8010270:	69fb      	ldr	r3, [r7, #28]
 8010272:	4413      	add	r3, r2
 8010274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	69ba      	ldr	r2, [r7, #24]
 801027c:	0151      	lsls	r1, r2, #5
 801027e:	69fa      	ldr	r2, [r7, #28]
 8010280:	440a      	add	r2, r1
 8010282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010286:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801028a:	6013      	str	r3, [r2, #0]
 801028c:	e00f      	b.n	80102ae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801028e:	69bb      	ldr	r3, [r7, #24]
 8010290:	015a      	lsls	r2, r3, #5
 8010292:	69fb      	ldr	r3, [r7, #28]
 8010294:	4413      	add	r3, r2
 8010296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	69ba      	ldr	r2, [r7, #24]
 801029e:	0151      	lsls	r1, r2, #5
 80102a0:	69fa      	ldr	r2, [r7, #28]
 80102a2:	440a      	add	r2, r1
 80102a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80102ac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80102ae:	68bb      	ldr	r3, [r7, #8]
 80102b0:	6919      	ldr	r1, [r3, #16]
 80102b2:	68bb      	ldr	r3, [r7, #8]
 80102b4:	781a      	ldrb	r2, [r3, #0]
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	699b      	ldr	r3, [r3, #24]
 80102ba:	b298      	uxth	r0, r3
 80102bc:	79fb      	ldrb	r3, [r7, #7]
 80102be:	9300      	str	r3, [sp, #0]
 80102c0:	4603      	mov	r3, r0
 80102c2:	68f8      	ldr	r0, [r7, #12]
 80102c4:	f000 fade 	bl	8010884 <USB_WritePacket>
 80102c8:	e0d2      	b.n	8010470 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80102ca:	69bb      	ldr	r3, [r7, #24]
 80102cc:	015a      	lsls	r2, r3, #5
 80102ce:	69fb      	ldr	r3, [r7, #28]
 80102d0:	4413      	add	r3, r2
 80102d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102d6:	691b      	ldr	r3, [r3, #16]
 80102d8:	69ba      	ldr	r2, [r7, #24]
 80102da:	0151      	lsls	r1, r2, #5
 80102dc:	69fa      	ldr	r2, [r7, #28]
 80102de:	440a      	add	r2, r1
 80102e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80102e4:	0cdb      	lsrs	r3, r3, #19
 80102e6:	04db      	lsls	r3, r3, #19
 80102e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80102ea:	69bb      	ldr	r3, [r7, #24]
 80102ec:	015a      	lsls	r2, r3, #5
 80102ee:	69fb      	ldr	r3, [r7, #28]
 80102f0:	4413      	add	r3, r2
 80102f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102f6:	691b      	ldr	r3, [r3, #16]
 80102f8:	69ba      	ldr	r2, [r7, #24]
 80102fa:	0151      	lsls	r1, r2, #5
 80102fc:	69fa      	ldr	r2, [r7, #28]
 80102fe:	440a      	add	r2, r1
 8010300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010304:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010308:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801030c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801030e:	68bb      	ldr	r3, [r7, #8]
 8010310:	699b      	ldr	r3, [r3, #24]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d126      	bne.n	8010364 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010316:	69bb      	ldr	r3, [r7, #24]
 8010318:	015a      	lsls	r2, r3, #5
 801031a:	69fb      	ldr	r3, [r7, #28]
 801031c:	4413      	add	r3, r2
 801031e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010322:	691a      	ldr	r2, [r3, #16]
 8010324:	68bb      	ldr	r3, [r7, #8]
 8010326:	68db      	ldr	r3, [r3, #12]
 8010328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801032c:	69b9      	ldr	r1, [r7, #24]
 801032e:	0148      	lsls	r0, r1, #5
 8010330:	69f9      	ldr	r1, [r7, #28]
 8010332:	4401      	add	r1, r0
 8010334:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010338:	4313      	orrs	r3, r2
 801033a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801033c:	69bb      	ldr	r3, [r7, #24]
 801033e:	015a      	lsls	r2, r3, #5
 8010340:	69fb      	ldr	r3, [r7, #28]
 8010342:	4413      	add	r3, r2
 8010344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010348:	691b      	ldr	r3, [r3, #16]
 801034a:	69ba      	ldr	r2, [r7, #24]
 801034c:	0151      	lsls	r1, r2, #5
 801034e:	69fa      	ldr	r2, [r7, #28]
 8010350:	440a      	add	r2, r1
 8010352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010356:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801035a:	6113      	str	r3, [r2, #16]
 801035c:	e03a      	b.n	80103d4 <USB_EPStartXfer+0x3e4>
 801035e:	bf00      	nop
 8010360:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	699a      	ldr	r2, [r3, #24]
 8010368:	68bb      	ldr	r3, [r7, #8]
 801036a:	68db      	ldr	r3, [r3, #12]
 801036c:	4413      	add	r3, r2
 801036e:	1e5a      	subs	r2, r3, #1
 8010370:	68bb      	ldr	r3, [r7, #8]
 8010372:	68db      	ldr	r3, [r3, #12]
 8010374:	fbb2 f3f3 	udiv	r3, r2, r3
 8010378:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 801037a:	68bb      	ldr	r3, [r7, #8]
 801037c:	68db      	ldr	r3, [r3, #12]
 801037e:	8afa      	ldrh	r2, [r7, #22]
 8010380:	fb03 f202 	mul.w	r2, r3, r2
 8010384:	68bb      	ldr	r3, [r7, #8]
 8010386:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010388:	69bb      	ldr	r3, [r7, #24]
 801038a:	015a      	lsls	r2, r3, #5
 801038c:	69fb      	ldr	r3, [r7, #28]
 801038e:	4413      	add	r3, r2
 8010390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010394:	691a      	ldr	r2, [r3, #16]
 8010396:	8afb      	ldrh	r3, [r7, #22]
 8010398:	04d9      	lsls	r1, r3, #19
 801039a:	4b38      	ldr	r3, [pc, #224]	; (801047c <USB_EPStartXfer+0x48c>)
 801039c:	400b      	ands	r3, r1
 801039e:	69b9      	ldr	r1, [r7, #24]
 80103a0:	0148      	lsls	r0, r1, #5
 80103a2:	69f9      	ldr	r1, [r7, #28]
 80103a4:	4401      	add	r1, r0
 80103a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80103aa:	4313      	orrs	r3, r2
 80103ac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80103ae:	69bb      	ldr	r3, [r7, #24]
 80103b0:	015a      	lsls	r2, r3, #5
 80103b2:	69fb      	ldr	r3, [r7, #28]
 80103b4:	4413      	add	r3, r2
 80103b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103ba:	691a      	ldr	r2, [r3, #16]
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	69db      	ldr	r3, [r3, #28]
 80103c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80103c4:	69b9      	ldr	r1, [r7, #24]
 80103c6:	0148      	lsls	r0, r1, #5
 80103c8:	69f9      	ldr	r1, [r7, #28]
 80103ca:	4401      	add	r1, r0
 80103cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80103d0:	4313      	orrs	r3, r2
 80103d2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80103d4:	79fb      	ldrb	r3, [r7, #7]
 80103d6:	2b01      	cmp	r3, #1
 80103d8:	d10d      	bne.n	80103f6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80103da:	68bb      	ldr	r3, [r7, #8]
 80103dc:	691b      	ldr	r3, [r3, #16]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d009      	beq.n	80103f6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	6919      	ldr	r1, [r3, #16]
 80103e6:	69bb      	ldr	r3, [r7, #24]
 80103e8:	015a      	lsls	r2, r3, #5
 80103ea:	69fb      	ldr	r3, [r7, #28]
 80103ec:	4413      	add	r3, r2
 80103ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103f2:	460a      	mov	r2, r1
 80103f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80103f6:	68bb      	ldr	r3, [r7, #8]
 80103f8:	791b      	ldrb	r3, [r3, #4]
 80103fa:	2b01      	cmp	r3, #1
 80103fc:	d128      	bne.n	8010450 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80103fe:	69fb      	ldr	r3, [r7, #28]
 8010400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010404:	689b      	ldr	r3, [r3, #8]
 8010406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801040a:	2b00      	cmp	r3, #0
 801040c:	d110      	bne.n	8010430 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801040e:	69bb      	ldr	r3, [r7, #24]
 8010410:	015a      	lsls	r2, r3, #5
 8010412:	69fb      	ldr	r3, [r7, #28]
 8010414:	4413      	add	r3, r2
 8010416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	69ba      	ldr	r2, [r7, #24]
 801041e:	0151      	lsls	r1, r2, #5
 8010420:	69fa      	ldr	r2, [r7, #28]
 8010422:	440a      	add	r2, r1
 8010424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010428:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801042c:	6013      	str	r3, [r2, #0]
 801042e:	e00f      	b.n	8010450 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010430:	69bb      	ldr	r3, [r7, #24]
 8010432:	015a      	lsls	r2, r3, #5
 8010434:	69fb      	ldr	r3, [r7, #28]
 8010436:	4413      	add	r3, r2
 8010438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	69ba      	ldr	r2, [r7, #24]
 8010440:	0151      	lsls	r1, r2, #5
 8010442:	69fa      	ldr	r2, [r7, #28]
 8010444:	440a      	add	r2, r1
 8010446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801044a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801044e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010450:	69bb      	ldr	r3, [r7, #24]
 8010452:	015a      	lsls	r2, r3, #5
 8010454:	69fb      	ldr	r3, [r7, #28]
 8010456:	4413      	add	r3, r2
 8010458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	69ba      	ldr	r2, [r7, #24]
 8010460:	0151      	lsls	r1, r2, #5
 8010462:	69fa      	ldr	r2, [r7, #28]
 8010464:	440a      	add	r2, r1
 8010466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801046a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801046e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010470:	2300      	movs	r3, #0
}
 8010472:	4618      	mov	r0, r3
 8010474:	3720      	adds	r7, #32
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}
 801047a:	bf00      	nop
 801047c:	1ff80000 	.word	0x1ff80000

08010480 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010480:	b480      	push	{r7}
 8010482:	b087      	sub	sp, #28
 8010484:	af00      	add	r7, sp, #0
 8010486:	60f8      	str	r0, [r7, #12]
 8010488:	60b9      	str	r1, [r7, #8]
 801048a:	4613      	mov	r3, r2
 801048c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8010492:	68bb      	ldr	r3, [r7, #8]
 8010494:	781b      	ldrb	r3, [r3, #0]
 8010496:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010498:	68bb      	ldr	r3, [r7, #8]
 801049a:	785b      	ldrb	r3, [r3, #1]
 801049c:	2b01      	cmp	r3, #1
 801049e:	f040 80ce 	bne.w	801063e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80104a2:	68bb      	ldr	r3, [r7, #8]
 80104a4:	699b      	ldr	r3, [r3, #24]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d132      	bne.n	8010510 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80104aa:	693b      	ldr	r3, [r7, #16]
 80104ac:	015a      	lsls	r2, r3, #5
 80104ae:	697b      	ldr	r3, [r7, #20]
 80104b0:	4413      	add	r3, r2
 80104b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104b6:	691b      	ldr	r3, [r3, #16]
 80104b8:	693a      	ldr	r2, [r7, #16]
 80104ba:	0151      	lsls	r1, r2, #5
 80104bc:	697a      	ldr	r2, [r7, #20]
 80104be:	440a      	add	r2, r1
 80104c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80104c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80104cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80104ce:	693b      	ldr	r3, [r7, #16]
 80104d0:	015a      	lsls	r2, r3, #5
 80104d2:	697b      	ldr	r3, [r7, #20]
 80104d4:	4413      	add	r3, r2
 80104d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104da:	691b      	ldr	r3, [r3, #16]
 80104dc:	693a      	ldr	r2, [r7, #16]
 80104de:	0151      	lsls	r1, r2, #5
 80104e0:	697a      	ldr	r2, [r7, #20]
 80104e2:	440a      	add	r2, r1
 80104e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80104ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80104ee:	693b      	ldr	r3, [r7, #16]
 80104f0:	015a      	lsls	r2, r3, #5
 80104f2:	697b      	ldr	r3, [r7, #20]
 80104f4:	4413      	add	r3, r2
 80104f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104fa:	691b      	ldr	r3, [r3, #16]
 80104fc:	693a      	ldr	r2, [r7, #16]
 80104fe:	0151      	lsls	r1, r2, #5
 8010500:	697a      	ldr	r2, [r7, #20]
 8010502:	440a      	add	r2, r1
 8010504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010508:	0cdb      	lsrs	r3, r3, #19
 801050a:	04db      	lsls	r3, r3, #19
 801050c:	6113      	str	r3, [r2, #16]
 801050e:	e04e      	b.n	80105ae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010510:	693b      	ldr	r3, [r7, #16]
 8010512:	015a      	lsls	r2, r3, #5
 8010514:	697b      	ldr	r3, [r7, #20]
 8010516:	4413      	add	r3, r2
 8010518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801051c:	691b      	ldr	r3, [r3, #16]
 801051e:	693a      	ldr	r2, [r7, #16]
 8010520:	0151      	lsls	r1, r2, #5
 8010522:	697a      	ldr	r2, [r7, #20]
 8010524:	440a      	add	r2, r1
 8010526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801052a:	0cdb      	lsrs	r3, r3, #19
 801052c:	04db      	lsls	r3, r3, #19
 801052e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010530:	693b      	ldr	r3, [r7, #16]
 8010532:	015a      	lsls	r2, r3, #5
 8010534:	697b      	ldr	r3, [r7, #20]
 8010536:	4413      	add	r3, r2
 8010538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801053c:	691b      	ldr	r3, [r3, #16]
 801053e:	693a      	ldr	r2, [r7, #16]
 8010540:	0151      	lsls	r1, r2, #5
 8010542:	697a      	ldr	r2, [r7, #20]
 8010544:	440a      	add	r2, r1
 8010546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801054a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801054e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010552:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010554:	68bb      	ldr	r3, [r7, #8]
 8010556:	699a      	ldr	r2, [r3, #24]
 8010558:	68bb      	ldr	r3, [r7, #8]
 801055a:	68db      	ldr	r3, [r3, #12]
 801055c:	429a      	cmp	r2, r3
 801055e:	d903      	bls.n	8010568 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	68da      	ldr	r2, [r3, #12]
 8010564:	68bb      	ldr	r3, [r7, #8]
 8010566:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010568:	693b      	ldr	r3, [r7, #16]
 801056a:	015a      	lsls	r2, r3, #5
 801056c:	697b      	ldr	r3, [r7, #20]
 801056e:	4413      	add	r3, r2
 8010570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010574:	691b      	ldr	r3, [r3, #16]
 8010576:	693a      	ldr	r2, [r7, #16]
 8010578:	0151      	lsls	r1, r2, #5
 801057a:	697a      	ldr	r2, [r7, #20]
 801057c:	440a      	add	r2, r1
 801057e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010582:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010586:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010588:	693b      	ldr	r3, [r7, #16]
 801058a:	015a      	lsls	r2, r3, #5
 801058c:	697b      	ldr	r3, [r7, #20]
 801058e:	4413      	add	r3, r2
 8010590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010594:	691a      	ldr	r2, [r3, #16]
 8010596:	68bb      	ldr	r3, [r7, #8]
 8010598:	699b      	ldr	r3, [r3, #24]
 801059a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801059e:	6939      	ldr	r1, [r7, #16]
 80105a0:	0148      	lsls	r0, r1, #5
 80105a2:	6979      	ldr	r1, [r7, #20]
 80105a4:	4401      	add	r1, r0
 80105a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80105aa:	4313      	orrs	r3, r2
 80105ac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80105ae:	79fb      	ldrb	r3, [r7, #7]
 80105b0:	2b01      	cmp	r3, #1
 80105b2:	d11e      	bne.n	80105f2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	695b      	ldr	r3, [r3, #20]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d009      	beq.n	80105d0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80105bc:	693b      	ldr	r3, [r7, #16]
 80105be:	015a      	lsls	r2, r3, #5
 80105c0:	697b      	ldr	r3, [r7, #20]
 80105c2:	4413      	add	r3, r2
 80105c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105c8:	461a      	mov	r2, r3
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	695b      	ldr	r3, [r3, #20]
 80105ce:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80105d0:	693b      	ldr	r3, [r7, #16]
 80105d2:	015a      	lsls	r2, r3, #5
 80105d4:	697b      	ldr	r3, [r7, #20]
 80105d6:	4413      	add	r3, r2
 80105d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	693a      	ldr	r2, [r7, #16]
 80105e0:	0151      	lsls	r1, r2, #5
 80105e2:	697a      	ldr	r2, [r7, #20]
 80105e4:	440a      	add	r2, r1
 80105e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80105ee:	6013      	str	r3, [r2, #0]
 80105f0:	e097      	b.n	8010722 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80105f2:	693b      	ldr	r3, [r7, #16]
 80105f4:	015a      	lsls	r2, r3, #5
 80105f6:	697b      	ldr	r3, [r7, #20]
 80105f8:	4413      	add	r3, r2
 80105fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	693a      	ldr	r2, [r7, #16]
 8010602:	0151      	lsls	r1, r2, #5
 8010604:	697a      	ldr	r2, [r7, #20]
 8010606:	440a      	add	r2, r1
 8010608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801060c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010610:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8010612:	68bb      	ldr	r3, [r7, #8]
 8010614:	699b      	ldr	r3, [r3, #24]
 8010616:	2b00      	cmp	r3, #0
 8010618:	f000 8083 	beq.w	8010722 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010622:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010624:	68bb      	ldr	r3, [r7, #8]
 8010626:	781b      	ldrb	r3, [r3, #0]
 8010628:	f003 030f 	and.w	r3, r3, #15
 801062c:	2101      	movs	r1, #1
 801062e:	fa01 f303 	lsl.w	r3, r1, r3
 8010632:	6979      	ldr	r1, [r7, #20]
 8010634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010638:	4313      	orrs	r3, r2
 801063a:	634b      	str	r3, [r1, #52]	; 0x34
 801063c:	e071      	b.n	8010722 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801063e:	693b      	ldr	r3, [r7, #16]
 8010640:	015a      	lsls	r2, r3, #5
 8010642:	697b      	ldr	r3, [r7, #20]
 8010644:	4413      	add	r3, r2
 8010646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801064a:	691b      	ldr	r3, [r3, #16]
 801064c:	693a      	ldr	r2, [r7, #16]
 801064e:	0151      	lsls	r1, r2, #5
 8010650:	697a      	ldr	r2, [r7, #20]
 8010652:	440a      	add	r2, r1
 8010654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010658:	0cdb      	lsrs	r3, r3, #19
 801065a:	04db      	lsls	r3, r3, #19
 801065c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801065e:	693b      	ldr	r3, [r7, #16]
 8010660:	015a      	lsls	r2, r3, #5
 8010662:	697b      	ldr	r3, [r7, #20]
 8010664:	4413      	add	r3, r2
 8010666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801066a:	691b      	ldr	r3, [r3, #16]
 801066c:	693a      	ldr	r2, [r7, #16]
 801066e:	0151      	lsls	r1, r2, #5
 8010670:	697a      	ldr	r2, [r7, #20]
 8010672:	440a      	add	r2, r1
 8010674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010678:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801067c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010680:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	699b      	ldr	r3, [r3, #24]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d003      	beq.n	8010692 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 801068a:	68bb      	ldr	r3, [r7, #8]
 801068c:	68da      	ldr	r2, [r3, #12]
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8010692:	68bb      	ldr	r3, [r7, #8]
 8010694:	68da      	ldr	r2, [r3, #12]
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801069a:	693b      	ldr	r3, [r7, #16]
 801069c:	015a      	lsls	r2, r3, #5
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	4413      	add	r3, r2
 80106a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106a6:	691b      	ldr	r3, [r3, #16]
 80106a8:	693a      	ldr	r2, [r7, #16]
 80106aa:	0151      	lsls	r1, r2, #5
 80106ac:	697a      	ldr	r2, [r7, #20]
 80106ae:	440a      	add	r2, r1
 80106b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80106b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80106ba:	693b      	ldr	r3, [r7, #16]
 80106bc:	015a      	lsls	r2, r3, #5
 80106be:	697b      	ldr	r3, [r7, #20]
 80106c0:	4413      	add	r3, r2
 80106c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106c6:	691a      	ldr	r2, [r3, #16]
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	69db      	ldr	r3, [r3, #28]
 80106cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80106d0:	6939      	ldr	r1, [r7, #16]
 80106d2:	0148      	lsls	r0, r1, #5
 80106d4:	6979      	ldr	r1, [r7, #20]
 80106d6:	4401      	add	r1, r0
 80106d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80106dc:	4313      	orrs	r3, r2
 80106de:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80106e0:	79fb      	ldrb	r3, [r7, #7]
 80106e2:	2b01      	cmp	r3, #1
 80106e4:	d10d      	bne.n	8010702 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80106e6:	68bb      	ldr	r3, [r7, #8]
 80106e8:	691b      	ldr	r3, [r3, #16]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d009      	beq.n	8010702 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80106ee:	68bb      	ldr	r3, [r7, #8]
 80106f0:	6919      	ldr	r1, [r3, #16]
 80106f2:	693b      	ldr	r3, [r7, #16]
 80106f4:	015a      	lsls	r2, r3, #5
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	4413      	add	r3, r2
 80106fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106fe:	460a      	mov	r2, r1
 8010700:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010702:	693b      	ldr	r3, [r7, #16]
 8010704:	015a      	lsls	r2, r3, #5
 8010706:	697b      	ldr	r3, [r7, #20]
 8010708:	4413      	add	r3, r2
 801070a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	693a      	ldr	r2, [r7, #16]
 8010712:	0151      	lsls	r1, r2, #5
 8010714:	697a      	ldr	r2, [r7, #20]
 8010716:	440a      	add	r2, r1
 8010718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801071c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010720:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010722:	2300      	movs	r3, #0
}
 8010724:	4618      	mov	r0, r3
 8010726:	371c      	adds	r7, #28
 8010728:	46bd      	mov	sp, r7
 801072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072e:	4770      	bx	lr

08010730 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010730:	b480      	push	{r7}
 8010732:	b087      	sub	sp, #28
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
 8010738:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801073a:	2300      	movs	r3, #0
 801073c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801073e:	2300      	movs	r3, #0
 8010740:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	785b      	ldrb	r3, [r3, #1]
 801074a:	2b01      	cmp	r3, #1
 801074c:	d14a      	bne.n	80107e4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	781b      	ldrb	r3, [r3, #0]
 8010752:	015a      	lsls	r2, r3, #5
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	4413      	add	r3, r2
 8010758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010762:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010766:	f040 8086 	bne.w	8010876 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801076a:	683b      	ldr	r3, [r7, #0]
 801076c:	781b      	ldrb	r3, [r3, #0]
 801076e:	015a      	lsls	r2, r3, #5
 8010770:	693b      	ldr	r3, [r7, #16]
 8010772:	4413      	add	r3, r2
 8010774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	683a      	ldr	r2, [r7, #0]
 801077c:	7812      	ldrb	r2, [r2, #0]
 801077e:	0151      	lsls	r1, r2, #5
 8010780:	693a      	ldr	r2, [r7, #16]
 8010782:	440a      	add	r2, r1
 8010784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010788:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801078c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801078e:	683b      	ldr	r3, [r7, #0]
 8010790:	781b      	ldrb	r3, [r3, #0]
 8010792:	015a      	lsls	r2, r3, #5
 8010794:	693b      	ldr	r3, [r7, #16]
 8010796:	4413      	add	r3, r2
 8010798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	683a      	ldr	r2, [r7, #0]
 80107a0:	7812      	ldrb	r2, [r2, #0]
 80107a2:	0151      	lsls	r1, r2, #5
 80107a4:	693a      	ldr	r2, [r7, #16]
 80107a6:	440a      	add	r2, r1
 80107a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80107b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	3301      	adds	r3, #1
 80107b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80107be:	4293      	cmp	r3, r2
 80107c0:	d902      	bls.n	80107c8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80107c2:	2301      	movs	r3, #1
 80107c4:	75fb      	strb	r3, [r7, #23]
          break;
 80107c6:	e056      	b.n	8010876 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80107c8:	683b      	ldr	r3, [r7, #0]
 80107ca:	781b      	ldrb	r3, [r3, #0]
 80107cc:	015a      	lsls	r2, r3, #5
 80107ce:	693b      	ldr	r3, [r7, #16]
 80107d0:	4413      	add	r3, r2
 80107d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80107dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80107e0:	d0e7      	beq.n	80107b2 <USB_EPStopXfer+0x82>
 80107e2:	e048      	b.n	8010876 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	781b      	ldrb	r3, [r3, #0]
 80107e8:	015a      	lsls	r2, r3, #5
 80107ea:	693b      	ldr	r3, [r7, #16]
 80107ec:	4413      	add	r3, r2
 80107ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80107f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80107fc:	d13b      	bne.n	8010876 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	781b      	ldrb	r3, [r3, #0]
 8010802:	015a      	lsls	r2, r3, #5
 8010804:	693b      	ldr	r3, [r7, #16]
 8010806:	4413      	add	r3, r2
 8010808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	683a      	ldr	r2, [r7, #0]
 8010810:	7812      	ldrb	r2, [r2, #0]
 8010812:	0151      	lsls	r1, r2, #5
 8010814:	693a      	ldr	r2, [r7, #16]
 8010816:	440a      	add	r2, r1
 8010818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801081c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010820:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8010822:	683b      	ldr	r3, [r7, #0]
 8010824:	781b      	ldrb	r3, [r3, #0]
 8010826:	015a      	lsls	r2, r3, #5
 8010828:	693b      	ldr	r3, [r7, #16]
 801082a:	4413      	add	r3, r2
 801082c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	683a      	ldr	r2, [r7, #0]
 8010834:	7812      	ldrb	r2, [r2, #0]
 8010836:	0151      	lsls	r1, r2, #5
 8010838:	693a      	ldr	r2, [r7, #16]
 801083a:	440a      	add	r2, r1
 801083c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010840:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010844:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	3301      	adds	r3, #1
 801084a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	f242 7210 	movw	r2, #10000	; 0x2710
 8010852:	4293      	cmp	r3, r2
 8010854:	d902      	bls.n	801085c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8010856:	2301      	movs	r3, #1
 8010858:	75fb      	strb	r3, [r7, #23]
          break;
 801085a:	e00c      	b.n	8010876 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 801085c:	683b      	ldr	r3, [r7, #0]
 801085e:	781b      	ldrb	r3, [r3, #0]
 8010860:	015a      	lsls	r2, r3, #5
 8010862:	693b      	ldr	r3, [r7, #16]
 8010864:	4413      	add	r3, r2
 8010866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010870:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010874:	d0e7      	beq.n	8010846 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8010876:	7dfb      	ldrb	r3, [r7, #23]
}
 8010878:	4618      	mov	r0, r3
 801087a:	371c      	adds	r7, #28
 801087c:	46bd      	mov	sp, r7
 801087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010882:	4770      	bx	lr

08010884 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010884:	b480      	push	{r7}
 8010886:	b089      	sub	sp, #36	; 0x24
 8010888:	af00      	add	r7, sp, #0
 801088a:	60f8      	str	r0, [r7, #12]
 801088c:	60b9      	str	r1, [r7, #8]
 801088e:	4611      	mov	r1, r2
 8010890:	461a      	mov	r2, r3
 8010892:	460b      	mov	r3, r1
 8010894:	71fb      	strb	r3, [r7, #7]
 8010896:	4613      	mov	r3, r2
 8010898:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80108a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d123      	bne.n	80108f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80108aa:	88bb      	ldrh	r3, [r7, #4]
 80108ac:	3303      	adds	r3, #3
 80108ae:	089b      	lsrs	r3, r3, #2
 80108b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80108b2:	2300      	movs	r3, #0
 80108b4:	61bb      	str	r3, [r7, #24]
 80108b6:	e018      	b.n	80108ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80108b8:	79fb      	ldrb	r3, [r7, #7]
 80108ba:	031a      	lsls	r2, r3, #12
 80108bc:	697b      	ldr	r3, [r7, #20]
 80108be:	4413      	add	r3, r2
 80108c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108c4:	461a      	mov	r2, r3
 80108c6:	69fb      	ldr	r3, [r7, #28]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 80108cc:	69fb      	ldr	r3, [r7, #28]
 80108ce:	3301      	adds	r3, #1
 80108d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80108d2:	69fb      	ldr	r3, [r7, #28]
 80108d4:	3301      	adds	r3, #1
 80108d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80108d8:	69fb      	ldr	r3, [r7, #28]
 80108da:	3301      	adds	r3, #1
 80108dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80108de:	69fb      	ldr	r3, [r7, #28]
 80108e0:	3301      	adds	r3, #1
 80108e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80108e4:	69bb      	ldr	r3, [r7, #24]
 80108e6:	3301      	adds	r3, #1
 80108e8:	61bb      	str	r3, [r7, #24]
 80108ea:	69ba      	ldr	r2, [r7, #24]
 80108ec:	693b      	ldr	r3, [r7, #16]
 80108ee:	429a      	cmp	r2, r3
 80108f0:	d3e2      	bcc.n	80108b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80108f2:	2300      	movs	r3, #0
}
 80108f4:	4618      	mov	r0, r3
 80108f6:	3724      	adds	r7, #36	; 0x24
 80108f8:	46bd      	mov	sp, r7
 80108fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fe:	4770      	bx	lr

08010900 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010900:	b480      	push	{r7}
 8010902:	b08b      	sub	sp, #44	; 0x2c
 8010904:	af00      	add	r7, sp, #0
 8010906:	60f8      	str	r0, [r7, #12]
 8010908:	60b9      	str	r1, [r7, #8]
 801090a:	4613      	mov	r3, r2
 801090c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010916:	88fb      	ldrh	r3, [r7, #6]
 8010918:	089b      	lsrs	r3, r3, #2
 801091a:	b29b      	uxth	r3, r3
 801091c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801091e:	88fb      	ldrh	r3, [r7, #6]
 8010920:	f003 0303 	and.w	r3, r3, #3
 8010924:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010926:	2300      	movs	r3, #0
 8010928:	623b      	str	r3, [r7, #32]
 801092a:	e014      	b.n	8010956 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801092c:	69bb      	ldr	r3, [r7, #24]
 801092e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010932:	681a      	ldr	r2, [r3, #0]
 8010934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010936:	601a      	str	r2, [r3, #0]
    pDest++;
 8010938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801093a:	3301      	adds	r3, #1
 801093c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010940:	3301      	adds	r3, #1
 8010942:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8010944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010946:	3301      	adds	r3, #1
 8010948:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801094a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801094c:	3301      	adds	r3, #1
 801094e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8010950:	6a3b      	ldr	r3, [r7, #32]
 8010952:	3301      	adds	r3, #1
 8010954:	623b      	str	r3, [r7, #32]
 8010956:	6a3a      	ldr	r2, [r7, #32]
 8010958:	697b      	ldr	r3, [r7, #20]
 801095a:	429a      	cmp	r2, r3
 801095c:	d3e6      	bcc.n	801092c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801095e:	8bfb      	ldrh	r3, [r7, #30]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d01e      	beq.n	80109a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8010964:	2300      	movs	r3, #0
 8010966:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8010968:	69bb      	ldr	r3, [r7, #24]
 801096a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801096e:	461a      	mov	r2, r3
 8010970:	f107 0310 	add.w	r3, r7, #16
 8010974:	6812      	ldr	r2, [r2, #0]
 8010976:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8010978:	693a      	ldr	r2, [r7, #16]
 801097a:	6a3b      	ldr	r3, [r7, #32]
 801097c:	b2db      	uxtb	r3, r3
 801097e:	00db      	lsls	r3, r3, #3
 8010980:	fa22 f303 	lsr.w	r3, r2, r3
 8010984:	b2da      	uxtb	r2, r3
 8010986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010988:	701a      	strb	r2, [r3, #0]
      i++;
 801098a:	6a3b      	ldr	r3, [r7, #32]
 801098c:	3301      	adds	r3, #1
 801098e:	623b      	str	r3, [r7, #32]
      pDest++;
 8010990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010992:	3301      	adds	r3, #1
 8010994:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8010996:	8bfb      	ldrh	r3, [r7, #30]
 8010998:	3b01      	subs	r3, #1
 801099a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 801099c:	8bfb      	ldrh	r3, [r7, #30]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d1ea      	bne.n	8010978 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80109a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80109a4:	4618      	mov	r0, r3
 80109a6:	372c      	adds	r7, #44	; 0x2c
 80109a8:	46bd      	mov	sp, r7
 80109aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ae:	4770      	bx	lr

080109b0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80109b0:	b480      	push	{r7}
 80109b2:	b085      	sub	sp, #20
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
 80109b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	781b      	ldrb	r3, [r3, #0]
 80109c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80109c4:	683b      	ldr	r3, [r7, #0]
 80109c6:	785b      	ldrb	r3, [r3, #1]
 80109c8:	2b01      	cmp	r3, #1
 80109ca:	d12c      	bne.n	8010a26 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80109cc:	68bb      	ldr	r3, [r7, #8]
 80109ce:	015a      	lsls	r2, r3, #5
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	4413      	add	r3, r2
 80109d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	db12      	blt.n	8010a04 <USB_EPSetStall+0x54>
 80109de:	68bb      	ldr	r3, [r7, #8]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d00f      	beq.n	8010a04 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80109e4:	68bb      	ldr	r3, [r7, #8]
 80109e6:	015a      	lsls	r2, r3, #5
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	4413      	add	r3, r2
 80109ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	68ba      	ldr	r2, [r7, #8]
 80109f4:	0151      	lsls	r1, r2, #5
 80109f6:	68fa      	ldr	r2, [r7, #12]
 80109f8:	440a      	add	r2, r1
 80109fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80109fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010a02:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010a04:	68bb      	ldr	r3, [r7, #8]
 8010a06:	015a      	lsls	r2, r3, #5
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	4413      	add	r3, r2
 8010a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	68ba      	ldr	r2, [r7, #8]
 8010a14:	0151      	lsls	r1, r2, #5
 8010a16:	68fa      	ldr	r2, [r7, #12]
 8010a18:	440a      	add	r2, r1
 8010a1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010a22:	6013      	str	r3, [r2, #0]
 8010a24:	e02b      	b.n	8010a7e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010a26:	68bb      	ldr	r3, [r7, #8]
 8010a28:	015a      	lsls	r2, r3, #5
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	4413      	add	r3, r2
 8010a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	db12      	blt.n	8010a5e <USB_EPSetStall+0xae>
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d00f      	beq.n	8010a5e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010a3e:	68bb      	ldr	r3, [r7, #8]
 8010a40:	015a      	lsls	r2, r3, #5
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	4413      	add	r3, r2
 8010a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	68ba      	ldr	r2, [r7, #8]
 8010a4e:	0151      	lsls	r1, r2, #5
 8010a50:	68fa      	ldr	r2, [r7, #12]
 8010a52:	440a      	add	r2, r1
 8010a54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010a5c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010a5e:	68bb      	ldr	r3, [r7, #8]
 8010a60:	015a      	lsls	r2, r3, #5
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	4413      	add	r3, r2
 8010a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	68ba      	ldr	r2, [r7, #8]
 8010a6e:	0151      	lsls	r1, r2, #5
 8010a70:	68fa      	ldr	r2, [r7, #12]
 8010a72:	440a      	add	r2, r1
 8010a74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010a7c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010a7e:	2300      	movs	r3, #0
}
 8010a80:	4618      	mov	r0, r3
 8010a82:	3714      	adds	r7, #20
 8010a84:	46bd      	mov	sp, r7
 8010a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8a:	4770      	bx	lr

08010a8c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010a8c:	b480      	push	{r7}
 8010a8e:	b085      	sub	sp, #20
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
 8010a94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010a9a:	683b      	ldr	r3, [r7, #0]
 8010a9c:	781b      	ldrb	r3, [r3, #0]
 8010a9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010aa0:	683b      	ldr	r3, [r7, #0]
 8010aa2:	785b      	ldrb	r3, [r3, #1]
 8010aa4:	2b01      	cmp	r3, #1
 8010aa6:	d128      	bne.n	8010afa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010aa8:	68bb      	ldr	r3, [r7, #8]
 8010aaa:	015a      	lsls	r2, r3, #5
 8010aac:	68fb      	ldr	r3, [r7, #12]
 8010aae:	4413      	add	r3, r2
 8010ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	68ba      	ldr	r2, [r7, #8]
 8010ab8:	0151      	lsls	r1, r2, #5
 8010aba:	68fa      	ldr	r2, [r7, #12]
 8010abc:	440a      	add	r2, r1
 8010abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010ac2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010ac6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010ac8:	683b      	ldr	r3, [r7, #0]
 8010aca:	791b      	ldrb	r3, [r3, #4]
 8010acc:	2b03      	cmp	r3, #3
 8010ace:	d003      	beq.n	8010ad8 <USB_EPClearStall+0x4c>
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	791b      	ldrb	r3, [r3, #4]
 8010ad4:	2b02      	cmp	r3, #2
 8010ad6:	d138      	bne.n	8010b4a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010ad8:	68bb      	ldr	r3, [r7, #8]
 8010ada:	015a      	lsls	r2, r3, #5
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	4413      	add	r3, r2
 8010ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	68ba      	ldr	r2, [r7, #8]
 8010ae8:	0151      	lsls	r1, r2, #5
 8010aea:	68fa      	ldr	r2, [r7, #12]
 8010aec:	440a      	add	r2, r1
 8010aee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010af6:	6013      	str	r3, [r2, #0]
 8010af8:	e027      	b.n	8010b4a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010afa:	68bb      	ldr	r3, [r7, #8]
 8010afc:	015a      	lsls	r2, r3, #5
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	4413      	add	r3, r2
 8010b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	68ba      	ldr	r2, [r7, #8]
 8010b0a:	0151      	lsls	r1, r2, #5
 8010b0c:	68fa      	ldr	r2, [r7, #12]
 8010b0e:	440a      	add	r2, r1
 8010b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010b18:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010b1a:	683b      	ldr	r3, [r7, #0]
 8010b1c:	791b      	ldrb	r3, [r3, #4]
 8010b1e:	2b03      	cmp	r3, #3
 8010b20:	d003      	beq.n	8010b2a <USB_EPClearStall+0x9e>
 8010b22:	683b      	ldr	r3, [r7, #0]
 8010b24:	791b      	ldrb	r3, [r3, #4]
 8010b26:	2b02      	cmp	r3, #2
 8010b28:	d10f      	bne.n	8010b4a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010b2a:	68bb      	ldr	r3, [r7, #8]
 8010b2c:	015a      	lsls	r2, r3, #5
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	4413      	add	r3, r2
 8010b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	68ba      	ldr	r2, [r7, #8]
 8010b3a:	0151      	lsls	r1, r2, #5
 8010b3c:	68fa      	ldr	r2, [r7, #12]
 8010b3e:	440a      	add	r2, r1
 8010b40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010b48:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010b4a:	2300      	movs	r3, #0
}
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	3714      	adds	r7, #20
 8010b50:	46bd      	mov	sp, r7
 8010b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b56:	4770      	bx	lr

08010b58 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010b58:	b480      	push	{r7}
 8010b5a:	b085      	sub	sp, #20
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
 8010b60:	460b      	mov	r3, r1
 8010b62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	68fa      	ldr	r2, [r7, #12]
 8010b72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010b76:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010b7a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b82:	681a      	ldr	r2, [r3, #0]
 8010b84:	78fb      	ldrb	r3, [r7, #3]
 8010b86:	011b      	lsls	r3, r3, #4
 8010b88:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010b8c:	68f9      	ldr	r1, [r7, #12]
 8010b8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010b92:	4313      	orrs	r3, r2
 8010b94:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010b96:	2300      	movs	r3, #0
}
 8010b98:	4618      	mov	r0, r3
 8010b9a:	3714      	adds	r7, #20
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba2:	4770      	bx	lr

08010ba4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010ba4:	b480      	push	{r7}
 8010ba6:	b085      	sub	sp, #20
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	68fa      	ldr	r2, [r7, #12]
 8010bba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010bbe:	f023 0303 	bic.w	r3, r3, #3
 8010bc2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010bca:	685b      	ldr	r3, [r3, #4]
 8010bcc:	68fa      	ldr	r2, [r7, #12]
 8010bce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010bd2:	f023 0302 	bic.w	r3, r3, #2
 8010bd6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010bd8:	2300      	movs	r3, #0
}
 8010bda:	4618      	mov	r0, r3
 8010bdc:	3714      	adds	r7, #20
 8010bde:	46bd      	mov	sp, r7
 8010be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be4:	4770      	bx	lr

08010be6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010be6:	b480      	push	{r7}
 8010be8:	b085      	sub	sp, #20
 8010bea:	af00      	add	r7, sp, #0
 8010bec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	68fa      	ldr	r2, [r7, #12]
 8010bfc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010c00:	f023 0303 	bic.w	r3, r3, #3
 8010c04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c0c:	685b      	ldr	r3, [r3, #4]
 8010c0e:	68fa      	ldr	r2, [r7, #12]
 8010c10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010c14:	f043 0302 	orr.w	r3, r3, #2
 8010c18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010c1a:	2300      	movs	r3, #0
}
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	3714      	adds	r7, #20
 8010c20:	46bd      	mov	sp, r7
 8010c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c26:	4770      	bx	lr

08010c28 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010c28:	b480      	push	{r7}
 8010c2a:	b085      	sub	sp, #20
 8010c2c:	af00      	add	r7, sp, #0
 8010c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	695b      	ldr	r3, [r3, #20]
 8010c34:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	699b      	ldr	r3, [r3, #24]
 8010c3a:	68fa      	ldr	r2, [r7, #12]
 8010c3c:	4013      	ands	r3, r2
 8010c3e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010c40:	68fb      	ldr	r3, [r7, #12]
}
 8010c42:	4618      	mov	r0, r3
 8010c44:	3714      	adds	r7, #20
 8010c46:	46bd      	mov	sp, r7
 8010c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4c:	4770      	bx	lr

08010c4e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010c4e:	b480      	push	{r7}
 8010c50:	b085      	sub	sp, #20
 8010c52:	af00      	add	r7, sp, #0
 8010c54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c60:	699b      	ldr	r3, [r3, #24]
 8010c62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c6a:	69db      	ldr	r3, [r3, #28]
 8010c6c:	68ba      	ldr	r2, [r7, #8]
 8010c6e:	4013      	ands	r3, r2
 8010c70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	0c1b      	lsrs	r3, r3, #16
}
 8010c76:	4618      	mov	r0, r3
 8010c78:	3714      	adds	r7, #20
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c80:	4770      	bx	lr

08010c82 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010c82:	b480      	push	{r7}
 8010c84:	b085      	sub	sp, #20
 8010c86:	af00      	add	r7, sp, #0
 8010c88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c94:	699b      	ldr	r3, [r3, #24]
 8010c96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c9e:	69db      	ldr	r3, [r3, #28]
 8010ca0:	68ba      	ldr	r2, [r7, #8]
 8010ca2:	4013      	ands	r3, r2
 8010ca4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010ca6:	68bb      	ldr	r3, [r7, #8]
 8010ca8:	b29b      	uxth	r3, r3
}
 8010caa:	4618      	mov	r0, r3
 8010cac:	3714      	adds	r7, #20
 8010cae:	46bd      	mov	sp, r7
 8010cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb4:	4770      	bx	lr

08010cb6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010cb6:	b480      	push	{r7}
 8010cb8:	b085      	sub	sp, #20
 8010cba:	af00      	add	r7, sp, #0
 8010cbc:	6078      	str	r0, [r7, #4]
 8010cbe:	460b      	mov	r3, r1
 8010cc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010cc6:	78fb      	ldrb	r3, [r7, #3]
 8010cc8:	015a      	lsls	r2, r3, #5
 8010cca:	68fb      	ldr	r3, [r7, #12]
 8010ccc:	4413      	add	r3, r2
 8010cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010cd2:	689b      	ldr	r3, [r3, #8]
 8010cd4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cdc:	695b      	ldr	r3, [r3, #20]
 8010cde:	68ba      	ldr	r2, [r7, #8]
 8010ce0:	4013      	ands	r3, r2
 8010ce2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010ce4:	68bb      	ldr	r3, [r7, #8]
}
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	3714      	adds	r7, #20
 8010cea:	46bd      	mov	sp, r7
 8010cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf0:	4770      	bx	lr

08010cf2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010cf2:	b480      	push	{r7}
 8010cf4:	b087      	sub	sp, #28
 8010cf6:	af00      	add	r7, sp, #0
 8010cf8:	6078      	str	r0, [r7, #4]
 8010cfa:	460b      	mov	r3, r1
 8010cfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010d02:	697b      	ldr	r3, [r7, #20]
 8010d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d08:	691b      	ldr	r3, [r3, #16]
 8010d0a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010d0c:	697b      	ldr	r3, [r7, #20]
 8010d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d14:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010d16:	78fb      	ldrb	r3, [r7, #3]
 8010d18:	f003 030f 	and.w	r3, r3, #15
 8010d1c:	68fa      	ldr	r2, [r7, #12]
 8010d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8010d22:	01db      	lsls	r3, r3, #7
 8010d24:	b2db      	uxtb	r3, r3
 8010d26:	693a      	ldr	r2, [r7, #16]
 8010d28:	4313      	orrs	r3, r2
 8010d2a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010d2c:	78fb      	ldrb	r3, [r7, #3]
 8010d2e:	015a      	lsls	r2, r3, #5
 8010d30:	697b      	ldr	r3, [r7, #20]
 8010d32:	4413      	add	r3, r2
 8010d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d38:	689b      	ldr	r3, [r3, #8]
 8010d3a:	693a      	ldr	r2, [r7, #16]
 8010d3c:	4013      	ands	r3, r2
 8010d3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010d40:	68bb      	ldr	r3, [r7, #8]
}
 8010d42:	4618      	mov	r0, r3
 8010d44:	371c      	adds	r7, #28
 8010d46:	46bd      	mov	sp, r7
 8010d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4c:	4770      	bx	lr

08010d4e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010d4e:	b480      	push	{r7}
 8010d50:	b083      	sub	sp, #12
 8010d52:	af00      	add	r7, sp, #0
 8010d54:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	695b      	ldr	r3, [r3, #20]
 8010d5a:	f003 0301 	and.w	r3, r3, #1
}
 8010d5e:	4618      	mov	r0, r3
 8010d60:	370c      	adds	r7, #12
 8010d62:	46bd      	mov	sp, r7
 8010d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d68:	4770      	bx	lr

08010d6a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010d6a:	b480      	push	{r7}
 8010d6c:	b085      	sub	sp, #20
 8010d6e:	af00      	add	r7, sp, #0
 8010d70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	68fa      	ldr	r2, [r7, #12]
 8010d80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010d84:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8010d88:	f023 0307 	bic.w	r3, r3, #7
 8010d8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d94:	685b      	ldr	r3, [r3, #4]
 8010d96:	68fa      	ldr	r2, [r7, #12]
 8010d98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010da0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010da2:	2300      	movs	r3, #0
}
 8010da4:	4618      	mov	r0, r3
 8010da6:	3714      	adds	r7, #20
 8010da8:	46bd      	mov	sp, r7
 8010daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dae:	4770      	bx	lr

08010db0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010db0:	b480      	push	{r7}
 8010db2:	b087      	sub	sp, #28
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	60f8      	str	r0, [r7, #12]
 8010db8:	460b      	mov	r3, r1
 8010dba:	607a      	str	r2, [r7, #4]
 8010dbc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	333c      	adds	r3, #60	; 0x3c
 8010dc6:	3304      	adds	r3, #4
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010dcc:	693b      	ldr	r3, [r7, #16]
 8010dce:	4a26      	ldr	r2, [pc, #152]	; (8010e68 <USB_EP0_OutStart+0xb8>)
 8010dd0:	4293      	cmp	r3, r2
 8010dd2:	d90a      	bls.n	8010dea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010dd4:	697b      	ldr	r3, [r7, #20]
 8010dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010de0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010de4:	d101      	bne.n	8010dea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010de6:	2300      	movs	r3, #0
 8010de8:	e037      	b.n	8010e5a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010dea:	697b      	ldr	r3, [r7, #20]
 8010dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010df0:	461a      	mov	r2, r3
 8010df2:	2300      	movs	r3, #0
 8010df4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010df6:	697b      	ldr	r3, [r7, #20]
 8010df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010dfc:	691b      	ldr	r3, [r3, #16]
 8010dfe:	697a      	ldr	r2, [r7, #20]
 8010e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010e08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010e0a:	697b      	ldr	r3, [r7, #20]
 8010e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e10:	691b      	ldr	r3, [r3, #16]
 8010e12:	697a      	ldr	r2, [r7, #20]
 8010e14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e18:	f043 0318 	orr.w	r3, r3, #24
 8010e1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010e1e:	697b      	ldr	r3, [r7, #20]
 8010e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e24:	691b      	ldr	r3, [r3, #16]
 8010e26:	697a      	ldr	r2, [r7, #20]
 8010e28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e2c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010e30:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010e32:	7afb      	ldrb	r3, [r7, #11]
 8010e34:	2b01      	cmp	r3, #1
 8010e36:	d10f      	bne.n	8010e58 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e3e:	461a      	mov	r2, r3
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010e44:	697b      	ldr	r3, [r7, #20]
 8010e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	697a      	ldr	r2, [r7, #20]
 8010e4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e52:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010e56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010e58:	2300      	movs	r3, #0
}
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	371c      	adds	r7, #28
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e64:	4770      	bx	lr
 8010e66:	bf00      	nop
 8010e68:	4f54300a 	.word	0x4f54300a

08010e6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010e6c:	b480      	push	{r7}
 8010e6e:	b085      	sub	sp, #20
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010e74:	2300      	movs	r3, #0
 8010e76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010e78:	68fb      	ldr	r3, [r7, #12]
 8010e7a:	3301      	adds	r3, #1
 8010e7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	4a13      	ldr	r2, [pc, #76]	; (8010ed0 <USB_CoreReset+0x64>)
 8010e82:	4293      	cmp	r3, r2
 8010e84:	d901      	bls.n	8010e8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010e86:	2303      	movs	r3, #3
 8010e88:	e01b      	b.n	8010ec2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	691b      	ldr	r3, [r3, #16]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	daf2      	bge.n	8010e78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010e92:	2300      	movs	r3, #0
 8010e94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	691b      	ldr	r3, [r3, #16]
 8010e9a:	f043 0201 	orr.w	r2, r3, #1
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	3301      	adds	r3, #1
 8010ea6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	4a09      	ldr	r2, [pc, #36]	; (8010ed0 <USB_CoreReset+0x64>)
 8010eac:	4293      	cmp	r3, r2
 8010eae:	d901      	bls.n	8010eb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010eb0:	2303      	movs	r3, #3
 8010eb2:	e006      	b.n	8010ec2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	691b      	ldr	r3, [r3, #16]
 8010eb8:	f003 0301 	and.w	r3, r3, #1
 8010ebc:	2b01      	cmp	r3, #1
 8010ebe:	d0f0      	beq.n	8010ea2 <USB_CoreReset+0x36>

  return HAL_OK;
 8010ec0:	2300      	movs	r3, #0
}
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	3714      	adds	r7, #20
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ecc:	4770      	bx	lr
 8010ece:	bf00      	nop
 8010ed0:	00030d40 	.word	0x00030d40

08010ed4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */
extern RTC_HandleTypeDef hrtc;
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010ed8:	4904      	ldr	r1, [pc, #16]	; (8010eec <MX_FATFS_Init+0x18>)
 8010eda:	4805      	ldr	r0, [pc, #20]	; (8010ef0 <MX_FATFS_Init+0x1c>)
 8010edc:	f006 fafc 	bl	80174d8 <FATFS_LinkDriver>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	461a      	mov	r2, r3
 8010ee4:	4b03      	ldr	r3, [pc, #12]	; (8010ef4 <MX_FATFS_Init+0x20>)
 8010ee6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010ee8:	bf00      	nop
 8010eea:	bd80      	pop	{r7, pc}
 8010eec:	200026dc 	.word	0x200026dc
 8010ef0:	08018b88 	.word	0x08018b88
 8010ef4:	200026d8 	.word	0x200026d8

08010ef8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b088      	sub	sp, #32
 8010efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  DWORD retVal = 0;
 8010efe:	2300      	movs	r3, #0
 8010f00:	61fb      	str	r3, [r7, #28]
  RTC_DateTypeDef sDate;
  RTC_TimeTypeDef sTime;

  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8010f02:	f107 0318 	add.w	r3, r7, #24
 8010f06:	2200      	movs	r2, #0
 8010f08:	4619      	mov	r1, r3
 8010f0a:	4814      	ldr	r0, [pc, #80]	; (8010f5c <get_fattime+0x64>)
 8010f0c:	f7fb fdaa 	bl	800ca64 <HAL_RTC_GetDate>
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8010f10:	1d3b      	adds	r3, r7, #4
 8010f12:	2200      	movs	r2, #0
 8010f14:	4619      	mov	r1, r3
 8010f16:	4811      	ldr	r0, [pc, #68]	; (8010f5c <get_fattime+0x64>)
 8010f18:	f7fb fcc2 	bl	800c8a0 <HAL_RTC_GetTime>

  if(sDate.Month == 0)
 8010f1c:	7e7b      	ldrb	r3, [r7, #25]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d102      	bne.n	8010f28 <get_fattime+0x30>
	  retVal = 0;
 8010f22:	2300      	movs	r3, #0
 8010f24:	61fb      	str	r3, [r7, #28]
 8010f26:	e013      	b.n	8010f50 <get_fattime+0x58>

  else
	  retVal = ((DWORD) (sDate.Year + 20) << 25) | ((DWORD) sDate.Month << 21) | ((DWORD) sDate.Date << 16) |
 8010f28:	7efb      	ldrb	r3, [r7, #27]
 8010f2a:	3314      	adds	r3, #20
 8010f2c:	065a      	lsls	r2, r3, #25
 8010f2e:	7e7b      	ldrb	r3, [r7, #25]
 8010f30:	055b      	lsls	r3, r3, #21
 8010f32:	431a      	orrs	r2, r3
 8010f34:	7ebb      	ldrb	r3, [r7, #26]
 8010f36:	041b      	lsls	r3, r3, #16
 8010f38:	431a      	orrs	r2, r3
	  	  	   ((DWORD) sTime.Hours << 11) | ((DWORD) sTime.Minutes << 5) | ((DWORD) sTime.Seconds >> 1);
 8010f3a:	793b      	ldrb	r3, [r7, #4]
 8010f3c:	02db      	lsls	r3, r3, #11
	  retVal = ((DWORD) (sDate.Year + 20) << 25) | ((DWORD) sDate.Month << 21) | ((DWORD) sDate.Date << 16) |
 8010f3e:	431a      	orrs	r2, r3
	  	  	   ((DWORD) sTime.Hours << 11) | ((DWORD) sTime.Minutes << 5) | ((DWORD) sTime.Seconds >> 1);
 8010f40:	797b      	ldrb	r3, [r7, #5]
 8010f42:	015b      	lsls	r3, r3, #5
 8010f44:	4313      	orrs	r3, r2
 8010f46:	79ba      	ldrb	r2, [r7, #6]
 8010f48:	0852      	lsrs	r2, r2, #1
 8010f4a:	b2d2      	uxtb	r2, r2
	  retVal = ((DWORD) (sDate.Year + 20) << 25) | ((DWORD) sDate.Month << 21) | ((DWORD) sDate.Date << 16) |
 8010f4c:	4313      	orrs	r3, r2
 8010f4e:	61fb      	str	r3, [r7, #28]

  return retVal;
 8010f50:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE END get_fattime */
}
 8010f52:	4618      	mov	r0, r3
 8010f54:	3720      	adds	r7, #32
 8010f56:	46bd      	mov	sp, r7
 8010f58:	bd80      	pop	{r7, pc}
 8010f5a:	bf00      	nop
 8010f5c:	20000380 	.word	0x20000380

08010f60 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b082      	sub	sp, #8
 8010f64:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010f66:	2300      	movs	r3, #0
 8010f68:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010f6a:	f000 f8ac 	bl	80110c6 <BSP_SD_IsDetected>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	2b01      	cmp	r3, #1
 8010f72:	d001      	beq.n	8010f78 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010f74:	2301      	movs	r3, #1
 8010f76:	e012      	b.n	8010f9e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8010f78:	480b      	ldr	r0, [pc, #44]	; (8010fa8 <BSP_SD_Init+0x48>)
 8010f7a:	f7fb feb1 	bl	800cce0 <HAL_SD_Init>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010f82:	79fb      	ldrb	r3, [r7, #7]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d109      	bne.n	8010f9c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8010f88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010f8c:	4806      	ldr	r0, [pc, #24]	; (8010fa8 <BSP_SD_Init+0x48>)
 8010f8e:	f7fc fe0b 	bl	800dba8 <HAL_SD_ConfigWideBusOperation>
 8010f92:	4603      	mov	r3, r0
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d001      	beq.n	8010f9c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010f98:	2301      	movs	r3, #1
 8010f9a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010f9c:	79fb      	ldrb	r3, [r7, #7]
}
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	3708      	adds	r7, #8
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bd80      	pop	{r7, pc}
 8010fa6:	bf00      	nop
 8010fa8:	200003a0 	.word	0x200003a0

08010fac <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b088      	sub	sp, #32
 8010fb0:	af02      	add	r7, sp, #8
 8010fb2:	60f8      	str	r0, [r7, #12]
 8010fb4:	60b9      	str	r1, [r7, #8]
 8010fb6:	607a      	str	r2, [r7, #4]
 8010fb8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8010fba:	2300      	movs	r3, #0
 8010fbc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8010fbe:	683b      	ldr	r3, [r7, #0]
 8010fc0:	9300      	str	r3, [sp, #0]
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	68ba      	ldr	r2, [r7, #8]
 8010fc6:	68f9      	ldr	r1, [r7, #12]
 8010fc8:	4806      	ldr	r0, [pc, #24]	; (8010fe4 <BSP_SD_ReadBlocks+0x38>)
 8010fca:	f7fb ff39 	bl	800ce40 <HAL_SD_ReadBlocks>
 8010fce:	4603      	mov	r3, r0
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d001      	beq.n	8010fd8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8010fd4:	2301      	movs	r3, #1
 8010fd6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fda:	4618      	mov	r0, r3
 8010fdc:	3718      	adds	r7, #24
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}
 8010fe2:	bf00      	nop
 8010fe4:	200003a0 	.word	0x200003a0

08010fe8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b088      	sub	sp, #32
 8010fec:	af02      	add	r7, sp, #8
 8010fee:	60f8      	str	r0, [r7, #12]
 8010ff0:	60b9      	str	r1, [r7, #8]
 8010ff2:	607a      	str	r2, [r7, #4]
 8010ff4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8010ffa:	683b      	ldr	r3, [r7, #0]
 8010ffc:	9300      	str	r3, [sp, #0]
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	68ba      	ldr	r2, [r7, #8]
 8011002:	68f9      	ldr	r1, [r7, #12]
 8011004:	4806      	ldr	r0, [pc, #24]	; (8011020 <BSP_SD_WriteBlocks+0x38>)
 8011006:	f7fc f8f9 	bl	800d1fc <HAL_SD_WriteBlocks>
 801100a:	4603      	mov	r3, r0
 801100c:	2b00      	cmp	r3, #0
 801100e:	d001      	beq.n	8011014 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8011010:	2301      	movs	r3, #1
 8011012:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8011014:	7dfb      	ldrb	r3, [r7, #23]
}
 8011016:	4618      	mov	r0, r3
 8011018:	3718      	adds	r7, #24
 801101a:	46bd      	mov	sp, r7
 801101c:	bd80      	pop	{r7, pc}
 801101e:	bf00      	nop
 8011020:	200003a0 	.word	0x200003a0

08011024 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011024:	b580      	push	{r7, lr}
 8011026:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011028:	4805      	ldr	r0, [pc, #20]	; (8011040 <BSP_SD_GetCardState+0x1c>)
 801102a:	f7fc fe57 	bl	800dcdc <HAL_SD_GetCardState>
 801102e:	4603      	mov	r3, r0
 8011030:	2b04      	cmp	r3, #4
 8011032:	bf14      	ite	ne
 8011034:	2301      	movne	r3, #1
 8011036:	2300      	moveq	r3, #0
 8011038:	b2db      	uxtb	r3, r3
}
 801103a:	4618      	mov	r0, r3
 801103c:	bd80      	pop	{r7, pc}
 801103e:	bf00      	nop
 8011040:	200003a0 	.word	0x200003a0

08011044 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011044:	b580      	push	{r7, lr}
 8011046:	b082      	sub	sp, #8
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 801104c:	6879      	ldr	r1, [r7, #4]
 801104e:	4803      	ldr	r0, [pc, #12]	; (801105c <BSP_SD_GetCardInfo+0x18>)
 8011050:	f7fc fd7e 	bl	800db50 <HAL_SD_GetCardInfo>
}
 8011054:	bf00      	nop
 8011056:	3708      	adds	r7, #8
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}
 801105c:	200003a0 	.word	0x200003a0

08011060 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b082      	sub	sp, #8
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8011068:	f000 f818 	bl	801109c <BSP_SD_AbortCallback>
}
 801106c:	bf00      	nop
 801106e:	3708      	adds	r7, #8
 8011070:	46bd      	mov	sp, r7
 8011072:	bd80      	pop	{r7, pc}

08011074 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011074:	b580      	push	{r7, lr}
 8011076:	b082      	sub	sp, #8
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 801107c:	f000 f815 	bl	80110aa <BSP_SD_WriteCpltCallback>
}
 8011080:	bf00      	nop
 8011082:	3708      	adds	r7, #8
 8011084:	46bd      	mov	sp, r7
 8011086:	bd80      	pop	{r7, pc}

08011088 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b082      	sub	sp, #8
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8011090:	f000 f812 	bl	80110b8 <BSP_SD_ReadCpltCallback>
}
 8011094:	bf00      	nop
 8011096:	3708      	adds	r7, #8
 8011098:	46bd      	mov	sp, r7
 801109a:	bd80      	pop	{r7, pc}

0801109c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 801109c:	b480      	push	{r7}
 801109e:	af00      	add	r7, sp, #0

}
 80110a0:	bf00      	nop
 80110a2:	46bd      	mov	sp, r7
 80110a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a8:	4770      	bx	lr

080110aa <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 80110aa:	b480      	push	{r7}
 80110ac:	af00      	add	r7, sp, #0

}
 80110ae:	bf00      	nop
 80110b0:	46bd      	mov	sp, r7
 80110b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110b6:	4770      	bx	lr

080110b8 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 80110b8:	b480      	push	{r7}
 80110ba:	af00      	add	r7, sp, #0

}
 80110bc:	bf00      	nop
 80110be:	46bd      	mov	sp, r7
 80110c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c4:	4770      	bx	lr

080110c6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80110c6:	b580      	push	{r7, lr}
 80110c8:	b082      	sub	sp, #8
 80110ca:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80110cc:	2301      	movs	r3, #1
 80110ce:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80110d0:	f000 f80c 	bl	80110ec <BSP_PlatformIsDetected>
 80110d4:	4603      	mov	r3, r0
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d101      	bne.n	80110de <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80110da:	2300      	movs	r3, #0
 80110dc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80110de:	79fb      	ldrb	r3, [r7, #7]
 80110e0:	b2db      	uxtb	r3, r3
}
 80110e2:	4618      	mov	r0, r3
 80110e4:	3708      	adds	r7, #8
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}
	...

080110ec <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b082      	sub	sp, #8
 80110f0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80110f2:	2301      	movs	r3, #1
 80110f4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80110f6:	2180      	movs	r1, #128	; 0x80
 80110f8:	4806      	ldr	r0, [pc, #24]	; (8011114 <BSP_PlatformIsDetected+0x28>)
 80110fa:	f7f7 fe83 	bl	8008e04 <HAL_GPIO_ReadPin>
 80110fe:	4603      	mov	r3, r0
 8011100:	2b00      	cmp	r3, #0
 8011102:	d001      	beq.n	8011108 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8011104:	2300      	movs	r3, #0
 8011106:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8011108:	79fb      	ldrb	r3, [r7, #7]
}
 801110a:	4618      	mov	r0, r3
 801110c:	3708      	adds	r7, #8
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}
 8011112:	bf00      	nop
 8011114:	40020800 	.word	0x40020800

08011118 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011118:	b580      	push	{r7, lr}
 801111a:	b082      	sub	sp, #8
 801111c:	af00      	add	r7, sp, #0
 801111e:	4603      	mov	r3, r0
 8011120:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8011122:	4b0b      	ldr	r3, [pc, #44]	; (8011150 <SD_CheckStatus+0x38>)
 8011124:	2201      	movs	r2, #1
 8011126:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011128:	f7ff ff7c 	bl	8011024 <BSP_SD_GetCardState>
 801112c:	4603      	mov	r3, r0
 801112e:	2b00      	cmp	r3, #0
 8011130:	d107      	bne.n	8011142 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8011132:	4b07      	ldr	r3, [pc, #28]	; (8011150 <SD_CheckStatus+0x38>)
 8011134:	781b      	ldrb	r3, [r3, #0]
 8011136:	b2db      	uxtb	r3, r3
 8011138:	f023 0301 	bic.w	r3, r3, #1
 801113c:	b2da      	uxtb	r2, r3
 801113e:	4b04      	ldr	r3, [pc, #16]	; (8011150 <SD_CheckStatus+0x38>)
 8011140:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8011142:	4b03      	ldr	r3, [pc, #12]	; (8011150 <SD_CheckStatus+0x38>)
 8011144:	781b      	ldrb	r3, [r3, #0]
 8011146:	b2db      	uxtb	r3, r3
}
 8011148:	4618      	mov	r0, r3
 801114a:	3708      	adds	r7, #8
 801114c:	46bd      	mov	sp, r7
 801114e:	bd80      	pop	{r7, pc}
 8011150:	20000009 	.word	0x20000009

08011154 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011154:	b580      	push	{r7, lr}
 8011156:	b082      	sub	sp, #8
 8011158:	af00      	add	r7, sp, #0
 801115a:	4603      	mov	r3, r0
 801115c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 801115e:	4b0b      	ldr	r3, [pc, #44]	; (801118c <SD_initialize+0x38>)
 8011160:	2201      	movs	r2, #1
 8011162:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8011164:	f7ff fefc 	bl	8010f60 <BSP_SD_Init>
 8011168:	4603      	mov	r3, r0
 801116a:	2b00      	cmp	r3, #0
 801116c:	d107      	bne.n	801117e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 801116e:	79fb      	ldrb	r3, [r7, #7]
 8011170:	4618      	mov	r0, r3
 8011172:	f7ff ffd1 	bl	8011118 <SD_CheckStatus>
 8011176:	4603      	mov	r3, r0
 8011178:	461a      	mov	r2, r3
 801117a:	4b04      	ldr	r3, [pc, #16]	; (801118c <SD_initialize+0x38>)
 801117c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 801117e:	4b03      	ldr	r3, [pc, #12]	; (801118c <SD_initialize+0x38>)
 8011180:	781b      	ldrb	r3, [r3, #0]
 8011182:	b2db      	uxtb	r3, r3
}
 8011184:	4618      	mov	r0, r3
 8011186:	3708      	adds	r7, #8
 8011188:	46bd      	mov	sp, r7
 801118a:	bd80      	pop	{r7, pc}
 801118c:	20000009 	.word	0x20000009

08011190 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b082      	sub	sp, #8
 8011194:	af00      	add	r7, sp, #0
 8011196:	4603      	mov	r3, r0
 8011198:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801119a:	79fb      	ldrb	r3, [r7, #7]
 801119c:	4618      	mov	r0, r3
 801119e:	f7ff ffbb 	bl	8011118 <SD_CheckStatus>
 80111a2:	4603      	mov	r3, r0
}
 80111a4:	4618      	mov	r0, r3
 80111a6:	3708      	adds	r7, #8
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}

080111ac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b086      	sub	sp, #24
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	60b9      	str	r1, [r7, #8]
 80111b4:	607a      	str	r2, [r7, #4]
 80111b6:	603b      	str	r3, [r7, #0]
 80111b8:	4603      	mov	r3, r0
 80111ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80111bc:	2301      	movs	r3, #1
 80111be:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80111c0:	f04f 33ff 	mov.w	r3, #4294967295
 80111c4:	683a      	ldr	r2, [r7, #0]
 80111c6:	6879      	ldr	r1, [r7, #4]
 80111c8:	68b8      	ldr	r0, [r7, #8]
 80111ca:	f7ff feef 	bl	8010fac <BSP_SD_ReadBlocks>
 80111ce:	4603      	mov	r3, r0
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d107      	bne.n	80111e4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80111d4:	bf00      	nop
 80111d6:	f7ff ff25 	bl	8011024 <BSP_SD_GetCardState>
 80111da:	4603      	mov	r3, r0
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d1fa      	bne.n	80111d6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80111e0:	2300      	movs	r3, #0
 80111e2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80111e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80111e6:	4618      	mov	r0, r3
 80111e8:	3718      	adds	r7, #24
 80111ea:	46bd      	mov	sp, r7
 80111ec:	bd80      	pop	{r7, pc}

080111ee <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80111ee:	b580      	push	{r7, lr}
 80111f0:	b086      	sub	sp, #24
 80111f2:	af00      	add	r7, sp, #0
 80111f4:	60b9      	str	r1, [r7, #8]
 80111f6:	607a      	str	r2, [r7, #4]
 80111f8:	603b      	str	r3, [r7, #0]
 80111fa:	4603      	mov	r3, r0
 80111fc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80111fe:	2301      	movs	r3, #1
 8011200:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8011202:	f04f 33ff 	mov.w	r3, #4294967295
 8011206:	683a      	ldr	r2, [r7, #0]
 8011208:	6879      	ldr	r1, [r7, #4]
 801120a:	68b8      	ldr	r0, [r7, #8]
 801120c:	f7ff feec 	bl	8010fe8 <BSP_SD_WriteBlocks>
 8011210:	4603      	mov	r3, r0
 8011212:	2b00      	cmp	r3, #0
 8011214:	d107      	bne.n	8011226 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8011216:	bf00      	nop
 8011218:	f7ff ff04 	bl	8011024 <BSP_SD_GetCardState>
 801121c:	4603      	mov	r3, r0
 801121e:	2b00      	cmp	r3, #0
 8011220:	d1fa      	bne.n	8011218 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8011222:	2300      	movs	r3, #0
 8011224:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8011226:	7dfb      	ldrb	r3, [r7, #23]
}
 8011228:	4618      	mov	r0, r3
 801122a:	3718      	adds	r7, #24
 801122c:	46bd      	mov	sp, r7
 801122e:	bd80      	pop	{r7, pc}

08011230 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b08c      	sub	sp, #48	; 0x30
 8011234:	af00      	add	r7, sp, #0
 8011236:	4603      	mov	r3, r0
 8011238:	603a      	str	r2, [r7, #0]
 801123a:	71fb      	strb	r3, [r7, #7]
 801123c:	460b      	mov	r3, r1
 801123e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011240:	2301      	movs	r3, #1
 8011242:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011246:	4b25      	ldr	r3, [pc, #148]	; (80112dc <SD_ioctl+0xac>)
 8011248:	781b      	ldrb	r3, [r3, #0]
 801124a:	b2db      	uxtb	r3, r3
 801124c:	f003 0301 	and.w	r3, r3, #1
 8011250:	2b00      	cmp	r3, #0
 8011252:	d001      	beq.n	8011258 <SD_ioctl+0x28>
 8011254:	2303      	movs	r3, #3
 8011256:	e03c      	b.n	80112d2 <SD_ioctl+0xa2>

  switch (cmd)
 8011258:	79bb      	ldrb	r3, [r7, #6]
 801125a:	2b03      	cmp	r3, #3
 801125c:	d834      	bhi.n	80112c8 <SD_ioctl+0x98>
 801125e:	a201      	add	r2, pc, #4	; (adr r2, 8011264 <SD_ioctl+0x34>)
 8011260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011264:	08011275 	.word	0x08011275
 8011268:	0801127d 	.word	0x0801127d
 801126c:	08011295 	.word	0x08011295
 8011270:	080112af 	.word	0x080112af
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011274:	2300      	movs	r3, #0
 8011276:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801127a:	e028      	b.n	80112ce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801127c:	f107 030c 	add.w	r3, r7, #12
 8011280:	4618      	mov	r0, r3
 8011282:	f7ff fedf 	bl	8011044 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011288:	683b      	ldr	r3, [r7, #0]
 801128a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801128c:	2300      	movs	r3, #0
 801128e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011292:	e01c      	b.n	80112ce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011294:	f107 030c 	add.w	r3, r7, #12
 8011298:	4618      	mov	r0, r3
 801129a:	f7ff fed3 	bl	8011044 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801129e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112a0:	b29a      	uxth	r2, r3
 80112a2:	683b      	ldr	r3, [r7, #0]
 80112a4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80112a6:	2300      	movs	r3, #0
 80112a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80112ac:	e00f      	b.n	80112ce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80112ae:	f107 030c 	add.w	r3, r7, #12
 80112b2:	4618      	mov	r0, r3
 80112b4:	f7ff fec6 	bl	8011044 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80112b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ba:	0a5a      	lsrs	r2, r3, #9
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80112c0:	2300      	movs	r3, #0
 80112c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80112c6:	e002      	b.n	80112ce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80112c8:	2304      	movs	r3, #4
 80112ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80112ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80112d2:	4618      	mov	r0, r3
 80112d4:	3730      	adds	r7, #48	; 0x30
 80112d6:	46bd      	mov	sp, r7
 80112d8:	bd80      	pop	{r7, pc}
 80112da:	bf00      	nop
 80112dc:	20000009 	.word	0x20000009

080112e0 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b084      	sub	sp, #16
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
 80112e8:	460b      	mov	r3, r1
 80112ea:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80112ec:	f44f 701d 	mov.w	r0, #628	; 0x274
 80112f0:	f006 fef2 	bl	80180d8 <USBD_static_malloc>
 80112f4:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d109      	bne.n	8011310 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	32b0      	adds	r2, #176	; 0xb0
 8011306:	2100      	movs	r1, #0
 8011308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801130c:	2302      	movs	r3, #2
 801130e:	e06e      	b.n	80113ee <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	32b0      	adds	r2, #176	; 0xb0
 801131a:	68f9      	ldr	r1, [r7, #12]
 801131c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	32b0      	adds	r2, #176	; 0xb0
 801132a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	7c1b      	ldrb	r3, [r3, #16]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d12b      	bne.n	8011394 <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801133c:	4b2e      	ldr	r3, [pc, #184]	; (80113f8 <USBD_MSC_Init+0x118>)
 801133e:	7819      	ldrb	r1, [r3, #0]
 8011340:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011344:	2202      	movs	r2, #2
 8011346:	6878      	ldr	r0, [r7, #4]
 8011348:	f006 fd35 	bl	8017db6 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 801134c:	4b2a      	ldr	r3, [pc, #168]	; (80113f8 <USBD_MSC_Init+0x118>)
 801134e:	781b      	ldrb	r3, [r3, #0]
 8011350:	f003 020f 	and.w	r2, r3, #15
 8011354:	6879      	ldr	r1, [r7, #4]
 8011356:	4613      	mov	r3, r2
 8011358:	009b      	lsls	r3, r3, #2
 801135a:	4413      	add	r3, r2
 801135c:	009b      	lsls	r3, r3, #2
 801135e:	440b      	add	r3, r1
 8011360:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011364:	2201      	movs	r2, #1
 8011366:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8011368:	4b24      	ldr	r3, [pc, #144]	; (80113fc <USBD_MSC_Init+0x11c>)
 801136a:	7819      	ldrb	r1, [r3, #0]
 801136c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011370:	2202      	movs	r2, #2
 8011372:	6878      	ldr	r0, [r7, #4]
 8011374:	f006 fd1f 	bl	8017db6 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8011378:	4b20      	ldr	r3, [pc, #128]	; (80113fc <USBD_MSC_Init+0x11c>)
 801137a:	781b      	ldrb	r3, [r3, #0]
 801137c:	f003 020f 	and.w	r2, r3, #15
 8011380:	6879      	ldr	r1, [r7, #4]
 8011382:	4613      	mov	r3, r2
 8011384:	009b      	lsls	r3, r3, #2
 8011386:	4413      	add	r3, r2
 8011388:	009b      	lsls	r3, r3, #2
 801138a:	440b      	add	r3, r1
 801138c:	3324      	adds	r3, #36	; 0x24
 801138e:	2201      	movs	r2, #1
 8011390:	801a      	strh	r2, [r3, #0]
 8011392:	e028      	b.n	80113e6 <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8011394:	4b18      	ldr	r3, [pc, #96]	; (80113f8 <USBD_MSC_Init+0x118>)
 8011396:	7819      	ldrb	r1, [r3, #0]
 8011398:	2340      	movs	r3, #64	; 0x40
 801139a:	2202      	movs	r2, #2
 801139c:	6878      	ldr	r0, [r7, #4]
 801139e:	f006 fd0a 	bl	8017db6 <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 80113a2:	4b15      	ldr	r3, [pc, #84]	; (80113f8 <USBD_MSC_Init+0x118>)
 80113a4:	781b      	ldrb	r3, [r3, #0]
 80113a6:	f003 020f 	and.w	r2, r3, #15
 80113aa:	6879      	ldr	r1, [r7, #4]
 80113ac:	4613      	mov	r3, r2
 80113ae:	009b      	lsls	r3, r3, #2
 80113b0:	4413      	add	r3, r2
 80113b2:	009b      	lsls	r3, r3, #2
 80113b4:	440b      	add	r3, r1
 80113b6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80113ba:	2201      	movs	r2, #1
 80113bc:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80113be:	4b0f      	ldr	r3, [pc, #60]	; (80113fc <USBD_MSC_Init+0x11c>)
 80113c0:	7819      	ldrb	r1, [r3, #0]
 80113c2:	2340      	movs	r3, #64	; 0x40
 80113c4:	2202      	movs	r2, #2
 80113c6:	6878      	ldr	r0, [r7, #4]
 80113c8:	f006 fcf5 	bl	8017db6 <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 80113cc:	4b0b      	ldr	r3, [pc, #44]	; (80113fc <USBD_MSC_Init+0x11c>)
 80113ce:	781b      	ldrb	r3, [r3, #0]
 80113d0:	f003 020f 	and.w	r2, r3, #15
 80113d4:	6879      	ldr	r1, [r7, #4]
 80113d6:	4613      	mov	r3, r2
 80113d8:	009b      	lsls	r3, r3, #2
 80113da:	4413      	add	r3, r2
 80113dc:	009b      	lsls	r3, r3, #2
 80113de:	440b      	add	r3, r1
 80113e0:	3324      	adds	r3, #36	; 0x24
 80113e2:	2201      	movs	r2, #1
 80113e4:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80113e6:	6878      	ldr	r0, [r7, #4]
 80113e8:	f000 fa2c 	bl	8011844 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80113ec:	2300      	movs	r3, #0
}
 80113ee:	4618      	mov	r0, r3
 80113f0:	3710      	adds	r7, #16
 80113f2:	46bd      	mov	sp, r7
 80113f4:	bd80      	pop	{r7, pc}
 80113f6:	bf00      	nop
 80113f8:	2000006f 	.word	0x2000006f
 80113fc:	2000006e 	.word	0x2000006e

08011400 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011400:	b580      	push	{r7, lr}
 8011402:	b082      	sub	sp, #8
 8011404:	af00      	add	r7, sp, #0
 8011406:	6078      	str	r0, [r7, #4]
 8011408:	460b      	mov	r3, r1
 801140a:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 801140c:	4b26      	ldr	r3, [pc, #152]	; (80114a8 <USBD_MSC_DeInit+0xa8>)
 801140e:	781b      	ldrb	r3, [r3, #0]
 8011410:	4619      	mov	r1, r3
 8011412:	6878      	ldr	r0, [r7, #4]
 8011414:	f006 fcf5 	bl	8017e02 <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8011418:	4b23      	ldr	r3, [pc, #140]	; (80114a8 <USBD_MSC_DeInit+0xa8>)
 801141a:	781b      	ldrb	r3, [r3, #0]
 801141c:	f003 020f 	and.w	r2, r3, #15
 8011420:	6879      	ldr	r1, [r7, #4]
 8011422:	4613      	mov	r3, r2
 8011424:	009b      	lsls	r3, r3, #2
 8011426:	4413      	add	r3, r2
 8011428:	009b      	lsls	r3, r3, #2
 801142a:	440b      	add	r3, r1
 801142c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011430:	2200      	movs	r2, #0
 8011432:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8011434:	4b1d      	ldr	r3, [pc, #116]	; (80114ac <USBD_MSC_DeInit+0xac>)
 8011436:	781b      	ldrb	r3, [r3, #0]
 8011438:	4619      	mov	r1, r3
 801143a:	6878      	ldr	r0, [r7, #4]
 801143c:	f006 fce1 	bl	8017e02 <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8011440:	4b1a      	ldr	r3, [pc, #104]	; (80114ac <USBD_MSC_DeInit+0xac>)
 8011442:	781b      	ldrb	r3, [r3, #0]
 8011444:	f003 020f 	and.w	r2, r3, #15
 8011448:	6879      	ldr	r1, [r7, #4]
 801144a:	4613      	mov	r3, r2
 801144c:	009b      	lsls	r3, r3, #2
 801144e:	4413      	add	r3, r2
 8011450:	009b      	lsls	r3, r3, #2
 8011452:	440b      	add	r3, r1
 8011454:	3324      	adds	r3, #36	; 0x24
 8011456:	2200      	movs	r2, #0
 8011458:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	32b0      	adds	r2, #176	; 0xb0
 8011464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d018      	beq.n	801149e <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 801146c:	6878      	ldr	r0, [r7, #4]
 801146e:	f000 fa67 	bl	8011940 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	32b0      	adds	r2, #176	; 0xb0
 801147c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011480:	4618      	mov	r0, r3
 8011482:	f006 fe37 	bl	80180f4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	32b0      	adds	r2, #176	; 0xb0
 8011490:	2100      	movs	r1, #0
 8011492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	2200      	movs	r2, #0
 801149a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801149e:	2300      	movs	r3, #0
}
 80114a0:	4618      	mov	r0, r3
 80114a2:	3708      	adds	r7, #8
 80114a4:	46bd      	mov	sp, r7
 80114a6:	bd80      	pop	{r7, pc}
 80114a8:	2000006f 	.word	0x2000006f
 80114ac:	2000006e 	.word	0x2000006e

080114b0 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b086      	sub	sp, #24
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
 80114b8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	32b0      	adds	r2, #176	; 0xb0
 80114c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114c8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80114ca:	2300      	movs	r3, #0
 80114cc:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80114ce:	2300      	movs	r3, #0
 80114d0:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80114d2:	693b      	ldr	r3, [r7, #16]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d101      	bne.n	80114dc <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80114d8:	2303      	movs	r3, #3
 80114da:	e0e1      	b.n	80116a0 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80114dc:	683b      	ldr	r3, [r7, #0]
 80114de:	781b      	ldrb	r3, [r3, #0]
 80114e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d053      	beq.n	8011590 <USBD_MSC_Setup+0xe0>
 80114e8:	2b20      	cmp	r3, #32
 80114ea:	f040 80d1 	bne.w	8011690 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80114ee:	683b      	ldr	r3, [r7, #0]
 80114f0:	785b      	ldrb	r3, [r3, #1]
 80114f2:	2bfe      	cmp	r3, #254	; 0xfe
 80114f4:	d002      	beq.n	80114fc <USBD_MSC_Setup+0x4c>
 80114f6:	2bff      	cmp	r3, #255	; 0xff
 80114f8:	d02a      	beq.n	8011550 <USBD_MSC_Setup+0xa0>
 80114fa:	e041      	b.n	8011580 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	885b      	ldrh	r3, [r3, #2]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d11e      	bne.n	8011542 <USBD_MSC_Setup+0x92>
 8011504:	683b      	ldr	r3, [r7, #0]
 8011506:	88db      	ldrh	r3, [r3, #6]
 8011508:	2b01      	cmp	r3, #1
 801150a:	d11a      	bne.n	8011542 <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 801150c:	683b      	ldr	r3, [r7, #0]
 801150e:	781b      	ldrb	r3, [r3, #0]
 8011510:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8011512:	2b00      	cmp	r3, #0
 8011514:	da15      	bge.n	8011542 <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801151c:	687a      	ldr	r2, [r7, #4]
 801151e:	33b0      	adds	r3, #176	; 0xb0
 8011520:	009b      	lsls	r3, r3, #2
 8011522:	4413      	add	r3, r2
 8011524:	685b      	ldr	r3, [r3, #4]
 8011526:	699b      	ldr	r3, [r3, #24]
 8011528:	4798      	blx	r3
 801152a:	4603      	mov	r3, r0
 801152c:	461a      	mov	r2, r3
 801152e:	693b      	ldr	r3, [r7, #16]
 8011530:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8011532:	693b      	ldr	r3, [r7, #16]
 8011534:	2201      	movs	r2, #1
 8011536:	4619      	mov	r1, r3
 8011538:	6878      	ldr	r0, [r7, #4]
 801153a:	f003 f923 	bl	8014784 <USBD_CtlSendData>
 801153e:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011540:	e025      	b.n	801158e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8011542:	6839      	ldr	r1, [r7, #0]
 8011544:	6878      	ldr	r0, [r7, #4]
 8011546:	f003 f8ac 	bl	80146a2 <USBD_CtlError>
            ret = USBD_FAIL;
 801154a:	2303      	movs	r3, #3
 801154c:	75fb      	strb	r3, [r7, #23]
          break;
 801154e:	e01e      	b.n	801158e <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	885b      	ldrh	r3, [r3, #2]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d10c      	bne.n	8011572 <USBD_MSC_Setup+0xc2>
 8011558:	683b      	ldr	r3, [r7, #0]
 801155a:	88db      	ldrh	r3, [r3, #6]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d108      	bne.n	8011572 <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8011560:	683b      	ldr	r3, [r7, #0]
 8011562:	781b      	ldrb	r3, [r3, #0]
 8011564:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8011566:	2b00      	cmp	r3, #0
 8011568:	db03      	blt.n	8011572 <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 801156a:	6878      	ldr	r0, [r7, #4]
 801156c:	f000 f9b4 	bl	80118d8 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011570:	e00d      	b.n	801158e <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8011572:	6839      	ldr	r1, [r7, #0]
 8011574:	6878      	ldr	r0, [r7, #4]
 8011576:	f003 f894 	bl	80146a2 <USBD_CtlError>
            ret = USBD_FAIL;
 801157a:	2303      	movs	r3, #3
 801157c:	75fb      	strb	r3, [r7, #23]
          break;
 801157e:	e006      	b.n	801158e <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8011580:	6839      	ldr	r1, [r7, #0]
 8011582:	6878      	ldr	r0, [r7, #4]
 8011584:	f003 f88d 	bl	80146a2 <USBD_CtlError>
          ret = USBD_FAIL;
 8011588:	2303      	movs	r3, #3
 801158a:	75fb      	strb	r3, [r7, #23]
          break;
 801158c:	bf00      	nop
      }
      break;
 801158e:	e086      	b.n	801169e <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011590:	683b      	ldr	r3, [r7, #0]
 8011592:	785b      	ldrb	r3, [r3, #1]
 8011594:	2b0b      	cmp	r3, #11
 8011596:	d872      	bhi.n	801167e <USBD_MSC_Setup+0x1ce>
 8011598:	a201      	add	r2, pc, #4	; (adr r2, 80115a0 <USBD_MSC_Setup+0xf0>)
 801159a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801159e:	bf00      	nop
 80115a0:	080115d1 	.word	0x080115d1
 80115a4:	0801164d 	.word	0x0801164d
 80115a8:	0801167f 	.word	0x0801167f
 80115ac:	0801167f 	.word	0x0801167f
 80115b0:	0801167f 	.word	0x0801167f
 80115b4:	0801167f 	.word	0x0801167f
 80115b8:	0801167f 	.word	0x0801167f
 80115bc:	0801167f 	.word	0x0801167f
 80115c0:	0801167f 	.word	0x0801167f
 80115c4:	0801167f 	.word	0x0801167f
 80115c8:	080115fb 	.word	0x080115fb
 80115cc:	08011625 	.word	0x08011625
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80115d6:	b2db      	uxtb	r3, r3
 80115d8:	2b03      	cmp	r3, #3
 80115da:	d107      	bne.n	80115ec <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80115dc:	f107 030e 	add.w	r3, r7, #14
 80115e0:	2202      	movs	r2, #2
 80115e2:	4619      	mov	r1, r3
 80115e4:	6878      	ldr	r0, [r7, #4]
 80115e6:	f003 f8cd 	bl	8014784 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80115ea:	e050      	b.n	801168e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 80115ec:	6839      	ldr	r1, [r7, #0]
 80115ee:	6878      	ldr	r0, [r7, #4]
 80115f0:	f003 f857 	bl	80146a2 <USBD_CtlError>
            ret = USBD_FAIL;
 80115f4:	2303      	movs	r3, #3
 80115f6:	75fb      	strb	r3, [r7, #23]
          break;
 80115f8:	e049      	b.n	801168e <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011600:	b2db      	uxtb	r3, r3
 8011602:	2b03      	cmp	r3, #3
 8011604:	d107      	bne.n	8011616 <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8011606:	693b      	ldr	r3, [r7, #16]
 8011608:	3304      	adds	r3, #4
 801160a:	2201      	movs	r2, #1
 801160c:	4619      	mov	r1, r3
 801160e:	6878      	ldr	r0, [r7, #4]
 8011610:	f003 f8b8 	bl	8014784 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011614:	e03b      	b.n	801168e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8011616:	6839      	ldr	r1, [r7, #0]
 8011618:	6878      	ldr	r0, [r7, #4]
 801161a:	f003 f842 	bl	80146a2 <USBD_CtlError>
            ret = USBD_FAIL;
 801161e:	2303      	movs	r3, #3
 8011620:	75fb      	strb	r3, [r7, #23]
          break;
 8011622:	e034      	b.n	801168e <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801162a:	b2db      	uxtb	r3, r3
 801162c:	2b03      	cmp	r3, #3
 801162e:	d106      	bne.n	801163e <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	885b      	ldrh	r3, [r3, #2]
 8011634:	b2db      	uxtb	r3, r3
 8011636:	461a      	mov	r2, r3
 8011638:	693b      	ldr	r3, [r7, #16]
 801163a:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801163c:	e027      	b.n	801168e <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 801163e:	6839      	ldr	r1, [r7, #0]
 8011640:	6878      	ldr	r0, [r7, #4]
 8011642:	f003 f82e 	bl	80146a2 <USBD_CtlError>
            ret = USBD_FAIL;
 8011646:	2303      	movs	r3, #3
 8011648:	75fb      	strb	r3, [r7, #23]
          break;
 801164a:	e020      	b.n	801168e <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011652:	b2db      	uxtb	r3, r3
 8011654:	2b03      	cmp	r3, #3
 8011656:	d119      	bne.n	801168c <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8011658:	683b      	ldr	r3, [r7, #0]
 801165a:	885b      	ldrh	r3, [r3, #2]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d115      	bne.n	801168c <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	889b      	ldrh	r3, [r3, #4]
 8011664:	b2db      	uxtb	r3, r3
 8011666:	4619      	mov	r1, r3
 8011668:	6878      	ldr	r0, [r7, #4]
 801166a:	f006 fbe9 	bl	8017e40 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 801166e:	683b      	ldr	r3, [r7, #0]
 8011670:	889b      	ldrh	r3, [r3, #4]
 8011672:	b2db      	uxtb	r3, r3
 8011674:	4619      	mov	r1, r3
 8011676:	6878      	ldr	r0, [r7, #4]
 8011678:	f000 fb2e 	bl	8011cd8 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 801167c:	e006      	b.n	801168c <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 801167e:	6839      	ldr	r1, [r7, #0]
 8011680:	6878      	ldr	r0, [r7, #4]
 8011682:	f003 f80e 	bl	80146a2 <USBD_CtlError>
          ret = USBD_FAIL;
 8011686:	2303      	movs	r3, #3
 8011688:	75fb      	strb	r3, [r7, #23]
          break;
 801168a:	e000      	b.n	801168e <USBD_MSC_Setup+0x1de>
          break;
 801168c:	bf00      	nop
      }
      break;
 801168e:	e006      	b.n	801169e <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8011690:	6839      	ldr	r1, [r7, #0]
 8011692:	6878      	ldr	r0, [r7, #4]
 8011694:	f003 f805 	bl	80146a2 <USBD_CtlError>
      ret = USBD_FAIL;
 8011698:	2303      	movs	r3, #3
 801169a:	75fb      	strb	r3, [r7, #23]
      break;
 801169c:	bf00      	nop
  }

  return (uint8_t)ret;
 801169e:	7dfb      	ldrb	r3, [r7, #23]
}
 80116a0:	4618      	mov	r0, r3
 80116a2:	3718      	adds	r7, #24
 80116a4:	46bd      	mov	sp, r7
 80116a6:	bd80      	pop	{r7, pc}

080116a8 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b082      	sub	sp, #8
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
 80116b0:	460b      	mov	r3, r1
 80116b2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80116b4:	78fb      	ldrb	r3, [r7, #3]
 80116b6:	4619      	mov	r1, r3
 80116b8:	6878      	ldr	r0, [r7, #4]
 80116ba:	f000 f959 	bl	8011970 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80116be:	2300      	movs	r3, #0
}
 80116c0:	4618      	mov	r0, r3
 80116c2:	3708      	adds	r7, #8
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd80      	pop	{r7, pc}

080116c8 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b082      	sub	sp, #8
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	6078      	str	r0, [r7, #4]
 80116d0:	460b      	mov	r3, r1
 80116d2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80116d4:	78fb      	ldrb	r3, [r7, #3]
 80116d6:	4619      	mov	r1, r3
 80116d8:	6878      	ldr	r0, [r7, #4]
 80116da:	f000 f983 	bl	80119e4 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80116de:	2300      	movs	r3, #0
}
 80116e0:	4618      	mov	r0, r3
 80116e2:	3708      	adds	r7, #8
 80116e4:	46bd      	mov	sp, r7
 80116e6:	bd80      	pop	{r7, pc}

080116e8 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80116e8:	b580      	push	{r7, lr}
 80116ea:	b084      	sub	sp, #16
 80116ec:	af00      	add	r7, sp, #0
 80116ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80116f0:	2181      	movs	r1, #129	; 0x81
 80116f2:	4812      	ldr	r0, [pc, #72]	; (801173c <USBD_MSC_GetHSCfgDesc+0x54>)
 80116f4:	f002 f972 	bl	80139dc <USBD_GetEpDesc>
 80116f8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80116fa:	2101      	movs	r1, #1
 80116fc:	480f      	ldr	r0, [pc, #60]	; (801173c <USBD_MSC_GetHSCfgDesc+0x54>)
 80116fe:	f002 f96d 	bl	80139dc <USBD_GetEpDesc>
 8011702:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d006      	beq.n	8011718 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	2200      	movs	r2, #0
 801170e:	711a      	strb	r2, [r3, #4]
 8011710:	2200      	movs	r2, #0
 8011712:	f042 0202 	orr.w	r2, r2, #2
 8011716:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d006      	beq.n	801172c <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 801171e:	68bb      	ldr	r3, [r7, #8]
 8011720:	2200      	movs	r2, #0
 8011722:	711a      	strb	r2, [r3, #4]
 8011724:	2200      	movs	r2, #0
 8011726:	f042 0202 	orr.w	r2, r2, #2
 801172a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	2220      	movs	r2, #32
 8011730:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8011732:	4b02      	ldr	r3, [pc, #8]	; (801173c <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8011734:	4618      	mov	r0, r3
 8011736:	3710      	adds	r7, #16
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}
 801173c:	20000044 	.word	0x20000044

08011740 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b084      	sub	sp, #16
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8011748:	2181      	movs	r1, #129	; 0x81
 801174a:	4812      	ldr	r0, [pc, #72]	; (8011794 <USBD_MSC_GetFSCfgDesc+0x54>)
 801174c:	f002 f946 	bl	80139dc <USBD_GetEpDesc>
 8011750:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8011752:	2101      	movs	r1, #1
 8011754:	480f      	ldr	r0, [pc, #60]	; (8011794 <USBD_MSC_GetFSCfgDesc+0x54>)
 8011756:	f002 f941 	bl	80139dc <USBD_GetEpDesc>
 801175a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d006      	beq.n	8011770 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	2200      	movs	r2, #0
 8011766:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801176a:	711a      	strb	r2, [r3, #4]
 801176c:	2200      	movs	r2, #0
 801176e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8011770:	68bb      	ldr	r3, [r7, #8]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d006      	beq.n	8011784 <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8011776:	68bb      	ldr	r3, [r7, #8]
 8011778:	2200      	movs	r2, #0
 801177a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801177e:	711a      	strb	r2, [r3, #4]
 8011780:	2200      	movs	r2, #0
 8011782:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	2220      	movs	r2, #32
 8011788:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 801178a:	4b02      	ldr	r3, [pc, #8]	; (8011794 <USBD_MSC_GetFSCfgDesc+0x54>)
}
 801178c:	4618      	mov	r0, r3
 801178e:	3710      	adds	r7, #16
 8011790:	46bd      	mov	sp, r7
 8011792:	bd80      	pop	{r7, pc}
 8011794:	20000044 	.word	0x20000044

08011798 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011798:	b580      	push	{r7, lr}
 801179a:	b084      	sub	sp, #16
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 80117a0:	2181      	movs	r1, #129	; 0x81
 80117a2:	4812      	ldr	r0, [pc, #72]	; (80117ec <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80117a4:	f002 f91a 	bl	80139dc <USBD_GetEpDesc>
 80117a8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 80117aa:	2101      	movs	r1, #1
 80117ac:	480f      	ldr	r0, [pc, #60]	; (80117ec <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 80117ae:	f002 f915 	bl	80139dc <USBD_GetEpDesc>
 80117b2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d006      	beq.n	80117c8 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	2200      	movs	r2, #0
 80117be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80117c2:	711a      	strb	r2, [r3, #4]
 80117c4:	2200      	movs	r2, #0
 80117c6:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 80117c8:	68bb      	ldr	r3, [r7, #8]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d006      	beq.n	80117dc <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 80117ce:	68bb      	ldr	r3, [r7, #8]
 80117d0:	2200      	movs	r2, #0
 80117d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80117d6:	711a      	strb	r2, [r3, #4]
 80117d8:	2200      	movs	r2, #0
 80117da:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	2220      	movs	r2, #32
 80117e0:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 80117e2:	4b02      	ldr	r3, [pc, #8]	; (80117ec <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 80117e4:	4618      	mov	r0, r3
 80117e6:	3710      	adds	r7, #16
 80117e8:	46bd      	mov	sp, r7
 80117ea:	bd80      	pop	{r7, pc}
 80117ec:	20000044 	.word	0x20000044

080117f0 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80117f0:	b480      	push	{r7}
 80117f2:	b083      	sub	sp, #12
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	220a      	movs	r2, #10
 80117fc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80117fe:	4b03      	ldr	r3, [pc, #12]	; (801180c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011800:	4618      	mov	r0, r3
 8011802:	370c      	adds	r7, #12
 8011804:	46bd      	mov	sp, r7
 8011806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180a:	4770      	bx	lr
 801180c:	20000064 	.word	0x20000064

08011810 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8011810:	b480      	push	{r7}
 8011812:	b083      	sub	sp, #12
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
 8011818:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d101      	bne.n	8011824 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011820:	2303      	movs	r3, #3
 8011822:	e009      	b.n	8011838 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801182a:	687a      	ldr	r2, [r7, #4]
 801182c:	33b0      	adds	r3, #176	; 0xb0
 801182e:	009b      	lsls	r3, r3, #2
 8011830:	4413      	add	r3, r2
 8011832:	683a      	ldr	r2, [r7, #0]
 8011834:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8011836:	2300      	movs	r3, #0
}
 8011838:	4618      	mov	r0, r3
 801183a:	370c      	adds	r7, #12
 801183c:	46bd      	mov	sp, r7
 801183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011842:	4770      	bx	lr

08011844 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8011844:	b580      	push	{r7, lr}
 8011846:	b084      	sub	sp, #16
 8011848:	af00      	add	r7, sp, #0
 801184a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	32b0      	adds	r2, #176	; 0xb0
 8011856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801185a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d032      	beq.n	80118c8 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	2200      	movs	r2, #0
 8011866:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	2200      	movs	r2, #0
 801186c:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	2200      	movs	r2, #0
 8011872:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	2200      	movs	r2, #0
 801187a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	2200      	movs	r2, #0
 8011882:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801188c:	687a      	ldr	r2, [r7, #4]
 801188e:	33b0      	adds	r3, #176	; 0xb0
 8011890:	009b      	lsls	r3, r3, #2
 8011892:	4413      	add	r3, r2
 8011894:	685b      	ldr	r3, [r3, #4]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	2000      	movs	r0, #0
 801189a:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 801189c:	4b0c      	ldr	r3, [pc, #48]	; (80118d0 <MSC_BOT_Init+0x8c>)
 801189e:	781b      	ldrb	r3, [r3, #0]
 80118a0:	4619      	mov	r1, r3
 80118a2:	6878      	ldr	r0, [r7, #4]
 80118a4:	f006 facc 	bl	8017e40 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 80118a8:	4b0a      	ldr	r3, [pc, #40]	; (80118d4 <MSC_BOT_Init+0x90>)
 80118aa:	781b      	ldrb	r3, [r3, #0]
 80118ac:	4619      	mov	r1, r3
 80118ae:	6878      	ldr	r0, [r7, #4]
 80118b0:	f006 fac6 	bl	8017e40 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80118b4:	4b06      	ldr	r3, [pc, #24]	; (80118d0 <MSC_BOT_Init+0x8c>)
 80118b6:	7819      	ldrb	r1, [r3, #0]
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80118be:	231f      	movs	r3, #31
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	f006 fb86 	bl	8017fd2 <USBD_LL_PrepareReceive>
 80118c6:	e000      	b.n	80118ca <MSC_BOT_Init+0x86>
    return;
 80118c8:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80118ca:	3710      	adds	r7, #16
 80118cc:	46bd      	mov	sp, r7
 80118ce:	bd80      	pop	{r7, pc}
 80118d0:	2000006f 	.word	0x2000006f
 80118d4:	2000006e 	.word	0x2000006e

080118d8 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80118d8:	b580      	push	{r7, lr}
 80118da:	b084      	sub	sp, #16
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	32b0      	adds	r2, #176	; 0xb0
 80118ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118ee:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d01b      	beq.n	801192e <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	2200      	movs	r2, #0
 80118fa:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	2201      	movs	r2, #1
 8011900:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 8011902:	4b0d      	ldr	r3, [pc, #52]	; (8011938 <MSC_BOT_Reset+0x60>)
 8011904:	781b      	ldrb	r3, [r3, #0]
 8011906:	4619      	mov	r1, r3
 8011908:	6878      	ldr	r0, [r7, #4]
 801190a:	f006 fad7 	bl	8017ebc <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 801190e:	4b0b      	ldr	r3, [pc, #44]	; (801193c <MSC_BOT_Reset+0x64>)
 8011910:	781b      	ldrb	r3, [r3, #0]
 8011912:	4619      	mov	r1, r3
 8011914:	6878      	ldr	r0, [r7, #4]
 8011916:	f006 fad1 	bl	8017ebc <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 801191a:	4b08      	ldr	r3, [pc, #32]	; (801193c <MSC_BOT_Reset+0x64>)
 801191c:	7819      	ldrb	r1, [r3, #0]
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8011924:	231f      	movs	r3, #31
 8011926:	6878      	ldr	r0, [r7, #4]
 8011928:	f006 fb53 	bl	8017fd2 <USBD_LL_PrepareReceive>
 801192c:	e000      	b.n	8011930 <MSC_BOT_Reset+0x58>
    return;
 801192e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8011930:	3710      	adds	r7, #16
 8011932:	46bd      	mov	sp, r7
 8011934:	bd80      	pop	{r7, pc}
 8011936:	bf00      	nop
 8011938:	2000006e 	.word	0x2000006e
 801193c:	2000006f 	.word	0x2000006f

08011940 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8011940:	b480      	push	{r7}
 8011942:	b085      	sub	sp, #20
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	32b0      	adds	r2, #176	; 0xb0
 8011952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011956:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	2b00      	cmp	r3, #0
 801195c:	d002      	beq.n	8011964 <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	2200      	movs	r2, #0
 8011962:	721a      	strb	r2, [r3, #8]
  }
}
 8011964:	bf00      	nop
 8011966:	3714      	adds	r7, #20
 8011968:	46bd      	mov	sp, r7
 801196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196e:	4770      	bx	lr

08011970 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b084      	sub	sp, #16
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
 8011978:	460b      	mov	r3, r1
 801197a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	32b0      	adds	r2, #176	; 0xb0
 8011986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801198a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d020      	beq.n	80119d4 <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	7a1b      	ldrb	r3, [r3, #8]
 8011996:	2b02      	cmp	r3, #2
 8011998:	d005      	beq.n	80119a6 <MSC_BOT_DataIn+0x36>
 801199a:	2b02      	cmp	r3, #2
 801199c:	db1c      	blt.n	80119d8 <MSC_BOT_DataIn+0x68>
 801199e:	3b03      	subs	r3, #3
 80119a0:	2b01      	cmp	r3, #1
 80119a2:	d819      	bhi.n	80119d8 <MSC_BOT_DataIn+0x68>
 80119a4:	e011      	b.n	80119ca <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80119b2:	461a      	mov	r2, r3
 80119b4:	6878      	ldr	r0, [r7, #4]
 80119b6:	f000 f9c9 	bl	8011d4c <SCSI_ProcessCmd>
 80119ba:	4603      	mov	r3, r0
 80119bc:	2b00      	cmp	r3, #0
 80119be:	da0d      	bge.n	80119dc <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80119c0:	2101      	movs	r1, #1
 80119c2:	6878      	ldr	r0, [r7, #4]
 80119c4:	f000 f90c 	bl	8011be0 <MSC_BOT_SendCSW>
      }
      break;
 80119c8:	e008      	b.n	80119dc <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80119ca:	2100      	movs	r1, #0
 80119cc:	6878      	ldr	r0, [r7, #4]
 80119ce:	f000 f907 	bl	8011be0 <MSC_BOT_SendCSW>
      break;
 80119d2:	e004      	b.n	80119de <MSC_BOT_DataIn+0x6e>
    return;
 80119d4:	bf00      	nop
 80119d6:	e002      	b.n	80119de <MSC_BOT_DataIn+0x6e>

    default:
      break;
 80119d8:	bf00      	nop
 80119da:	e000      	b.n	80119de <MSC_BOT_DataIn+0x6e>
      break;
 80119dc:	bf00      	nop
  }
}
 80119de:	3710      	adds	r7, #16
 80119e0:	46bd      	mov	sp, r7
 80119e2:	bd80      	pop	{r7, pc}

080119e4 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b084      	sub	sp, #16
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
 80119ec:	460b      	mov	r3, r1
 80119ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	32b0      	adds	r2, #176	; 0xb0
 80119fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119fe:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d01c      	beq.n	8011a40 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	7a1b      	ldrb	r3, [r3, #8]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d002      	beq.n	8011a14 <MSC_BOT_DataOut+0x30>
 8011a0e:	2b01      	cmp	r3, #1
 8011a10:	d004      	beq.n	8011a1c <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8011a12:	e018      	b.n	8011a46 <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 8011a14:	6878      	ldr	r0, [r7, #4]
 8011a16:	f000 f819 	bl	8011a4c <MSC_BOT_CBW_Decode>
      break;
 8011a1a:	e014      	b.n	8011a46 <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8011a28:	461a      	mov	r2, r3
 8011a2a:	6878      	ldr	r0, [r7, #4]
 8011a2c:	f000 f98e 	bl	8011d4c <SCSI_ProcessCmd>
 8011a30:	4603      	mov	r3, r0
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	da06      	bge.n	8011a44 <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8011a36:	2101      	movs	r1, #1
 8011a38:	6878      	ldr	r0, [r7, #4]
 8011a3a:	f000 f8d1 	bl	8011be0 <MSC_BOT_SendCSW>
      break;
 8011a3e:	e001      	b.n	8011a44 <MSC_BOT_DataOut+0x60>
    return;
 8011a40:	bf00      	nop
 8011a42:	e000      	b.n	8011a46 <MSC_BOT_DataOut+0x62>
      break;
 8011a44:	bf00      	nop
  }
}
 8011a46:	3710      	adds	r7, #16
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	bd80      	pop	{r7, pc}

08011a4c <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b084      	sub	sp, #16
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	32b0      	adds	r2, #176	; 0xb0
 8011a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a62:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d079      	beq.n	8011b5e <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8011a82:	4b3a      	ldr	r3, [pc, #232]	; (8011b6c <MSC_BOT_CBW_Decode+0x120>)
 8011a84:	781b      	ldrb	r3, [r3, #0]
 8011a86:	4619      	mov	r1, r3
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f006 fac3 	bl	8018014 <USBD_LL_GetRxDataSize>
 8011a8e:	4603      	mov	r3, r0
 8011a90:	2b1f      	cmp	r3, #31
 8011a92:	d114      	bne.n	8011abe <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8011a9a:	4a35      	ldr	r2, [pc, #212]	; (8011b70 <MSC_BOT_CBW_Decode+0x124>)
 8011a9c:	4293      	cmp	r3, r2
 8011a9e:	d10e      	bne.n	8011abe <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8011aa6:	2b01      	cmp	r3, #1
 8011aa8:	d809      	bhi.n	8011abe <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d004      	beq.n	8011abe <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8011aba:	2b10      	cmp	r3, #16
 8011abc:	d90e      	bls.n	8011adc <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011ac4:	2320      	movs	r3, #32
 8011ac6:	2205      	movs	r2, #5
 8011ac8:	6878      	ldr	r0, [r7, #4]
 8011aca:	f000 fe28 	bl	801271e <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	2202      	movs	r2, #2
 8011ad2:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8011ad4:	6878      	ldr	r0, [r7, #4]
 8011ad6:	f000 f8bd 	bl	8011c54 <MSC_BOT_Abort>
 8011ada:	e043      	b.n	8011b64 <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8011ae8:	461a      	mov	r2, r3
 8011aea:	6878      	ldr	r0, [r7, #4]
 8011aec:	f000 f92e 	bl	8011d4c <SCSI_ProcessCmd>
 8011af0:	4603      	mov	r3, r0
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	da0c      	bge.n	8011b10 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	7a1b      	ldrb	r3, [r3, #8]
 8011afa:	2b05      	cmp	r3, #5
 8011afc:	d104      	bne.n	8011b08 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8011afe:	2101      	movs	r1, #1
 8011b00:	6878      	ldr	r0, [r7, #4]
 8011b02:	f000 f86d 	bl	8011be0 <MSC_BOT_SendCSW>
 8011b06:	e02d      	b.n	8011b64 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8011b08:	6878      	ldr	r0, [r7, #4]
 8011b0a:	f000 f8a3 	bl	8011c54 <MSC_BOT_Abort>
 8011b0e:	e029      	b.n	8011b64 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	7a1b      	ldrb	r3, [r3, #8]
 8011b14:	2b02      	cmp	r3, #2
 8011b16:	d024      	beq.n	8011b62 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8011b1c:	2b01      	cmp	r3, #1
 8011b1e:	d020      	beq.n	8011b62 <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8011b24:	2b03      	cmp	r3, #3
 8011b26:	d01c      	beq.n	8011b62 <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	68db      	ldr	r3, [r3, #12]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d009      	beq.n	8011b44 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	f103 0110 	add.w	r1, r3, #16
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	68db      	ldr	r3, [r3, #12]
 8011b3a:	461a      	mov	r2, r3
 8011b3c:	6878      	ldr	r0, [r7, #4]
 8011b3e:	f000 f819 	bl	8011b74 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8011b42:	e00f      	b.n	8011b64 <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	68db      	ldr	r3, [r3, #12]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d104      	bne.n	8011b56 <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8011b4c:	2100      	movs	r1, #0
 8011b4e:	6878      	ldr	r0, [r7, #4]
 8011b50:	f000 f846 	bl	8011be0 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8011b54:	e006      	b.n	8011b64 <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8011b56:	6878      	ldr	r0, [r7, #4]
 8011b58:	f000 f87c 	bl	8011c54 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8011b5c:	e002      	b.n	8011b64 <MSC_BOT_CBW_Decode+0x118>
    return;
 8011b5e:	bf00      	nop
 8011b60:	e000      	b.n	8011b64 <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 8011b62:	bf00      	nop
    }
  }
}
 8011b64:	3710      	adds	r7, #16
 8011b66:	46bd      	mov	sp, r7
 8011b68:	bd80      	pop	{r7, pc}
 8011b6a:	bf00      	nop
 8011b6c:	2000006f 	.word	0x2000006f
 8011b70:	43425355 	.word	0x43425355

08011b74 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8011b74:	b580      	push	{r7, lr}
 8011b76:	b086      	sub	sp, #24
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	60f8      	str	r0, [r7, #12]
 8011b7c:	60b9      	str	r1, [r7, #8]
 8011b7e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011b86:	68fb      	ldr	r3, [r7, #12]
 8011b88:	32b0      	adds	r2, #176	; 0xb0
 8011b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b8e:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8011b90:	697b      	ldr	r3, [r7, #20]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d01e      	beq.n	8011bd4 <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 8011b96:	697b      	ldr	r3, [r7, #20]
 8011b98:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011b9c:	687a      	ldr	r2, [r7, #4]
 8011b9e:	4293      	cmp	r3, r2
 8011ba0:	bf28      	it	cs
 8011ba2:	4613      	movcs	r3, r2
 8011ba4:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8011ba6:	697b      	ldr	r3, [r7, #20]
 8011ba8:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	1ad2      	subs	r2, r2, r3
 8011bb0:	697b      	ldr	r3, [r7, #20]
 8011bb2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8011bb6:	697b      	ldr	r3, [r7, #20]
 8011bb8:	2200      	movs	r2, #0
 8011bba:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8011bbe:	697b      	ldr	r3, [r7, #20]
 8011bc0:	2204      	movs	r2, #4
 8011bc2:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 8011bc4:	4b05      	ldr	r3, [pc, #20]	; (8011bdc <MSC_BOT_SendData+0x68>)
 8011bc6:	7819      	ldrb	r1, [r3, #0]
 8011bc8:	693b      	ldr	r3, [r7, #16]
 8011bca:	68ba      	ldr	r2, [r7, #8]
 8011bcc:	68f8      	ldr	r0, [r7, #12]
 8011bce:	f006 f9df 	bl	8017f90 <USBD_LL_Transmit>
 8011bd2:	e000      	b.n	8011bd6 <MSC_BOT_SendData+0x62>
    return;
 8011bd4:	bf00      	nop
}
 8011bd6:	3718      	adds	r7, #24
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	bd80      	pop	{r7, pc}
 8011bdc:	2000006e 	.word	0x2000006e

08011be0 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b084      	sub	sp, #16
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
 8011be8:	460b      	mov	r3, r1
 8011bea:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	32b0      	adds	r2, #176	; 0xb0
 8011bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bfa:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d01d      	beq.n	8011c3e <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8011c02:	68fb      	ldr	r3, [r7, #12]
 8011c04:	4a10      	ldr	r2, [pc, #64]	; (8011c48 <MSC_BOT_SendCSW+0x68>)
 8011c06:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	78fa      	ldrb	r2, [r7, #3]
 8011c0e:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	2200      	movs	r2, #0
 8011c16:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 8011c18:	4b0c      	ldr	r3, [pc, #48]	; (8011c4c <MSC_BOT_SendCSW+0x6c>)
 8011c1a:	7819      	ldrb	r1, [r3, #0]
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8011c22:	230d      	movs	r3, #13
 8011c24:	6878      	ldr	r0, [r7, #4]
 8011c26:	f006 f9b3 	bl	8017f90 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8011c2a:	4b09      	ldr	r3, [pc, #36]	; (8011c50 <MSC_BOT_SendCSW+0x70>)
 8011c2c:	7819      	ldrb	r1, [r3, #0]
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8011c34:	231f      	movs	r3, #31
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f006 f9cb 	bl	8017fd2 <USBD_LL_PrepareReceive>
 8011c3c:	e000      	b.n	8011c40 <MSC_BOT_SendCSW+0x60>
    return;
 8011c3e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8011c40:	3710      	adds	r7, #16
 8011c42:	46bd      	mov	sp, r7
 8011c44:	bd80      	pop	{r7, pc}
 8011c46:	bf00      	nop
 8011c48:	53425355 	.word	0x53425355
 8011c4c:	2000006e 	.word	0x2000006e
 8011c50:	2000006f 	.word	0x2000006f

08011c54 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b084      	sub	sp, #16
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	32b0      	adds	r2, #176	; 0xb0
 8011c66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c6a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d02a      	beq.n	8011cc8 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d10e      	bne.n	8011c9a <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d009      	beq.n	8011c9a <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d105      	bne.n	8011c9a <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8011c8e:	4b10      	ldr	r3, [pc, #64]	; (8011cd0 <MSC_BOT_Abort+0x7c>)
 8011c90:	781b      	ldrb	r3, [r3, #0]
 8011c92:	4619      	mov	r1, r3
 8011c94:	6878      	ldr	r0, [r7, #4]
 8011c96:	f006 f8f2 	bl	8017e7e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8011c9a:	4b0e      	ldr	r3, [pc, #56]	; (8011cd4 <MSC_BOT_Abort+0x80>)
 8011c9c:	781b      	ldrb	r3, [r3, #0]
 8011c9e:	4619      	mov	r1, r3
 8011ca0:	6878      	ldr	r0, [r7, #4]
 8011ca2:	f006 f8ec 	bl	8017e7e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	7a5b      	ldrb	r3, [r3, #9]
 8011caa:	2b02      	cmp	r3, #2
 8011cac:	d10d      	bne.n	8011cca <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8011cae:	4b09      	ldr	r3, [pc, #36]	; (8011cd4 <MSC_BOT_Abort+0x80>)
 8011cb0:	781b      	ldrb	r3, [r3, #0]
 8011cb2:	4619      	mov	r1, r3
 8011cb4:	6878      	ldr	r0, [r7, #4]
 8011cb6:	f006 f8e2 	bl	8017e7e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8011cba:	4b05      	ldr	r3, [pc, #20]	; (8011cd0 <MSC_BOT_Abort+0x7c>)
 8011cbc:	781b      	ldrb	r3, [r3, #0]
 8011cbe:	4619      	mov	r1, r3
 8011cc0:	6878      	ldr	r0, [r7, #4]
 8011cc2:	f006 f8dc 	bl	8017e7e <USBD_LL_StallEP>
 8011cc6:	e000      	b.n	8011cca <MSC_BOT_Abort+0x76>
    return;
 8011cc8:	bf00      	nop
  }
}
 8011cca:	3710      	adds	r7, #16
 8011ccc:	46bd      	mov	sp, r7
 8011cce:	bd80      	pop	{r7, pc}
 8011cd0:	2000006f 	.word	0x2000006f
 8011cd4:	2000006e 	.word	0x2000006e

08011cd8 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b084      	sub	sp, #16
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
 8011ce0:	460b      	mov	r3, r1
 8011ce2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	32b0      	adds	r2, #176	; 0xb0
 8011cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011cf2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d01d      	beq.n	8011d36 <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	7a5b      	ldrb	r3, [r3, #9]
 8011cfe:	2b02      	cmp	r3, #2
 8011d00:	d10c      	bne.n	8011d1c <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8011d02:	4b10      	ldr	r3, [pc, #64]	; (8011d44 <MSC_BOT_CplClrFeature+0x6c>)
 8011d04:	781b      	ldrb	r3, [r3, #0]
 8011d06:	4619      	mov	r1, r3
 8011d08:	6878      	ldr	r0, [r7, #4]
 8011d0a:	f006 f8b8 	bl	8017e7e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8011d0e:	4b0e      	ldr	r3, [pc, #56]	; (8011d48 <MSC_BOT_CplClrFeature+0x70>)
 8011d10:	781b      	ldrb	r3, [r3, #0]
 8011d12:	4619      	mov	r1, r3
 8011d14:	6878      	ldr	r0, [r7, #4]
 8011d16:	f006 f8b2 	bl	8017e7e <USBD_LL_StallEP>
 8011d1a:	e00f      	b.n	8011d3c <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8011d1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	da0a      	bge.n	8011d3a <MSC_BOT_CplClrFeature+0x62>
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	7a5b      	ldrb	r3, [r3, #9]
 8011d28:	2b01      	cmp	r3, #1
 8011d2a:	d006      	beq.n	8011d3a <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8011d2c:	2101      	movs	r1, #1
 8011d2e:	6878      	ldr	r0, [r7, #4]
 8011d30:	f7ff ff56 	bl	8011be0 <MSC_BOT_SendCSW>
 8011d34:	e002      	b.n	8011d3c <MSC_BOT_CplClrFeature+0x64>
    return;
 8011d36:	bf00      	nop
 8011d38:	e000      	b.n	8011d3c <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8011d3a:	bf00      	nop
  }
}
 8011d3c:	3710      	adds	r7, #16
 8011d3e:	46bd      	mov	sp, r7
 8011d40:	bd80      	pop	{r7, pc}
 8011d42:	bf00      	nop
 8011d44:	2000006e 	.word	0x2000006e
 8011d48:	2000006f 	.word	0x2000006f

08011d4c <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b086      	sub	sp, #24
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	60f8      	str	r0, [r7, #12]
 8011d54:	460b      	mov	r3, r1
 8011d56:	607a      	str	r2, [r7, #4]
 8011d58:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	32b0      	adds	r2, #176	; 0xb0
 8011d64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d68:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8011d6a:	693b      	ldr	r3, [r7, #16]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d102      	bne.n	8011d76 <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8011d70:	f04f 33ff 	mov.w	r3, #4294967295
 8011d74:	e168      	b.n	8012048 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	781b      	ldrb	r3, [r3, #0]
 8011d7a:	2baa      	cmp	r3, #170	; 0xaa
 8011d7c:	f000 8144 	beq.w	8012008 <SCSI_ProcessCmd+0x2bc>
 8011d80:	2baa      	cmp	r3, #170	; 0xaa
 8011d82:	f300 8153 	bgt.w	801202c <SCSI_ProcessCmd+0x2e0>
 8011d86:	2ba8      	cmp	r3, #168	; 0xa8
 8011d88:	f000 812c 	beq.w	8011fe4 <SCSI_ProcessCmd+0x298>
 8011d8c:	2ba8      	cmp	r3, #168	; 0xa8
 8011d8e:	f300 814d 	bgt.w	801202c <SCSI_ProcessCmd+0x2e0>
 8011d92:	2b5a      	cmp	r3, #90	; 0x5a
 8011d94:	f300 80c0 	bgt.w	8011f18 <SCSI_ProcessCmd+0x1cc>
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	f2c0 8147 	blt.w	801202c <SCSI_ProcessCmd+0x2e0>
 8011d9e:	2b5a      	cmp	r3, #90	; 0x5a
 8011da0:	f200 8144 	bhi.w	801202c <SCSI_ProcessCmd+0x2e0>
 8011da4:	a201      	add	r2, pc, #4	; (adr r2, 8011dac <SCSI_ProcessCmd+0x60>)
 8011da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011daa:	bf00      	nop
 8011dac:	08011f1f 	.word	0x08011f1f
 8011db0:	0801202d 	.word	0x0801202d
 8011db4:	0801202d 	.word	0x0801202d
 8011db8:	08011f31 	.word	0x08011f31
 8011dbc:	0801202d 	.word	0x0801202d
 8011dc0:	0801202d 	.word	0x0801202d
 8011dc4:	0801202d 	.word	0x0801202d
 8011dc8:	0801202d 	.word	0x0801202d
 8011dcc:	0801202d 	.word	0x0801202d
 8011dd0:	0801202d 	.word	0x0801202d
 8011dd4:	0801202d 	.word	0x0801202d
 8011dd8:	0801202d 	.word	0x0801202d
 8011ddc:	0801202d 	.word	0x0801202d
 8011de0:	0801202d 	.word	0x0801202d
 8011de4:	0801202d 	.word	0x0801202d
 8011de8:	0801202d 	.word	0x0801202d
 8011dec:	0801202d 	.word	0x0801202d
 8011df0:	0801202d 	.word	0x0801202d
 8011df4:	08011f43 	.word	0x08011f43
 8011df8:	0801202d 	.word	0x0801202d
 8011dfc:	0801202d 	.word	0x0801202d
 8011e00:	0801202d 	.word	0x0801202d
 8011e04:	0801202d 	.word	0x0801202d
 8011e08:	0801202d 	.word	0x0801202d
 8011e0c:	0801202d 	.word	0x0801202d
 8011e10:	0801202d 	.word	0x0801202d
 8011e14:	08011f79 	.word	0x08011f79
 8011e18:	08011f55 	.word	0x08011f55
 8011e1c:	0801202d 	.word	0x0801202d
 8011e20:	0801202d 	.word	0x0801202d
 8011e24:	08011f67 	.word	0x08011f67
 8011e28:	0801202d 	.word	0x0801202d
 8011e2c:	0801202d 	.word	0x0801202d
 8011e30:	0801202d 	.word	0x0801202d
 8011e34:	0801202d 	.word	0x0801202d
 8011e38:	08011f9d 	.word	0x08011f9d
 8011e3c:	0801202d 	.word	0x0801202d
 8011e40:	08011faf 	.word	0x08011faf
 8011e44:	0801202d 	.word	0x0801202d
 8011e48:	0801202d 	.word	0x0801202d
 8011e4c:	08011fd3 	.word	0x08011fd3
 8011e50:	0801202d 	.word	0x0801202d
 8011e54:	08011ff7 	.word	0x08011ff7
 8011e58:	0801202d 	.word	0x0801202d
 8011e5c:	0801202d 	.word	0x0801202d
 8011e60:	0801202d 	.word	0x0801202d
 8011e64:	0801202d 	.word	0x0801202d
 8011e68:	0801201b 	.word	0x0801201b
 8011e6c:	0801202d 	.word	0x0801202d
 8011e70:	0801202d 	.word	0x0801202d
 8011e74:	0801202d 	.word	0x0801202d
 8011e78:	0801202d 	.word	0x0801202d
 8011e7c:	0801202d 	.word	0x0801202d
 8011e80:	0801202d 	.word	0x0801202d
 8011e84:	0801202d 	.word	0x0801202d
 8011e88:	0801202d 	.word	0x0801202d
 8011e8c:	0801202d 	.word	0x0801202d
 8011e90:	0801202d 	.word	0x0801202d
 8011e94:	0801202d 	.word	0x0801202d
 8011e98:	0801202d 	.word	0x0801202d
 8011e9c:	0801202d 	.word	0x0801202d
 8011ea0:	0801202d 	.word	0x0801202d
 8011ea4:	0801202d 	.word	0x0801202d
 8011ea8:	0801202d 	.word	0x0801202d
 8011eac:	0801202d 	.word	0x0801202d
 8011eb0:	0801202d 	.word	0x0801202d
 8011eb4:	0801202d 	.word	0x0801202d
 8011eb8:	0801202d 	.word	0x0801202d
 8011ebc:	0801202d 	.word	0x0801202d
 8011ec0:	0801202d 	.word	0x0801202d
 8011ec4:	0801202d 	.word	0x0801202d
 8011ec8:	0801202d 	.word	0x0801202d
 8011ecc:	0801202d 	.word	0x0801202d
 8011ed0:	0801202d 	.word	0x0801202d
 8011ed4:	0801202d 	.word	0x0801202d
 8011ed8:	0801202d 	.word	0x0801202d
 8011edc:	0801202d 	.word	0x0801202d
 8011ee0:	0801202d 	.word	0x0801202d
 8011ee4:	0801202d 	.word	0x0801202d
 8011ee8:	0801202d 	.word	0x0801202d
 8011eec:	0801202d 	.word	0x0801202d
 8011ef0:	0801202d 	.word	0x0801202d
 8011ef4:	0801202d 	.word	0x0801202d
 8011ef8:	0801202d 	.word	0x0801202d
 8011efc:	0801202d 	.word	0x0801202d
 8011f00:	0801202d 	.word	0x0801202d
 8011f04:	0801202d 	.word	0x0801202d
 8011f08:	0801202d 	.word	0x0801202d
 8011f0c:	0801202d 	.word	0x0801202d
 8011f10:	0801202d 	.word	0x0801202d
 8011f14:	08011f8b 	.word	0x08011f8b
 8011f18:	2b9e      	cmp	r3, #158	; 0x9e
 8011f1a:	d051      	beq.n	8011fc0 <SCSI_ProcessCmd+0x274>
 8011f1c:	e086      	b.n	801202c <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8011f1e:	7afb      	ldrb	r3, [r7, #11]
 8011f20:	687a      	ldr	r2, [r7, #4]
 8011f22:	4619      	mov	r1, r3
 8011f24:	68f8      	ldr	r0, [r7, #12]
 8011f26:	f000 f893 	bl	8012050 <SCSI_TestUnitReady>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	75fb      	strb	r3, [r7, #23]
      break;
 8011f2e:	e089      	b.n	8012044 <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8011f30:	7afb      	ldrb	r3, [r7, #11]
 8011f32:	687a      	ldr	r2, [r7, #4]
 8011f34:	4619      	mov	r1, r3
 8011f36:	68f8      	ldr	r0, [r7, #12]
 8011f38:	f000 fb6e 	bl	8012618 <SCSI_RequestSense>
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8011f40:	e080      	b.n	8012044 <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8011f42:	7afb      	ldrb	r3, [r7, #11]
 8011f44:	687a      	ldr	r2, [r7, #4]
 8011f46:	4619      	mov	r1, r3
 8011f48:	68f8      	ldr	r0, [r7, #12]
 8011f4a:	f000 f8db 	bl	8012104 <SCSI_Inquiry>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	75fb      	strb	r3, [r7, #23]
      break;
 8011f52:	e077      	b.n	8012044 <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8011f54:	7afb      	ldrb	r3, [r7, #11]
 8011f56:	687a      	ldr	r2, [r7, #4]
 8011f58:	4619      	mov	r1, r3
 8011f5a:	68f8      	ldr	r0, [r7, #12]
 8011f5c:	f000 fc2a 	bl	80127b4 <SCSI_StartStopUnit>
 8011f60:	4603      	mov	r3, r0
 8011f62:	75fb      	strb	r3, [r7, #23]
      break;
 8011f64:	e06e      	b.n	8012044 <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8011f66:	7afb      	ldrb	r3, [r7, #11]
 8011f68:	687a      	ldr	r2, [r7, #4]
 8011f6a:	4619      	mov	r1, r3
 8011f6c:	68f8      	ldr	r0, [r7, #12]
 8011f6e:	f000 fc76 	bl	801285e <SCSI_AllowPreventRemovable>
 8011f72:	4603      	mov	r3, r0
 8011f74:	75fb      	strb	r3, [r7, #23]
      break;
 8011f76:	e065      	b.n	8012044 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8011f78:	7afb      	ldrb	r3, [r7, #11]
 8011f7a:	687a      	ldr	r2, [r7, #4]
 8011f7c:	4619      	mov	r1, r3
 8011f7e:	68f8      	ldr	r0, [r7, #12]
 8011f80:	f000 faea 	bl	8012558 <SCSI_ModeSense6>
 8011f84:	4603      	mov	r3, r0
 8011f86:	75fb      	strb	r3, [r7, #23]
      break;
 8011f88:	e05c      	b.n	8012044 <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8011f8a:	7afb      	ldrb	r3, [r7, #11]
 8011f8c:	687a      	ldr	r2, [r7, #4]
 8011f8e:	4619      	mov	r1, r3
 8011f90:	68f8      	ldr	r0, [r7, #12]
 8011f92:	f000 fb11 	bl	80125b8 <SCSI_ModeSense10>
 8011f96:	4603      	mov	r3, r0
 8011f98:	75fb      	strb	r3, [r7, #23]
      break;
 8011f9a:	e053      	b.n	8012044 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8011f9c:	7afb      	ldrb	r3, [r7, #11]
 8011f9e:	687a      	ldr	r2, [r7, #4]
 8011fa0:	4619      	mov	r1, r3
 8011fa2:	68f8      	ldr	r0, [r7, #12]
 8011fa4:	f000 fa5d 	bl	8012462 <SCSI_ReadFormatCapacity>
 8011fa8:	4603      	mov	r3, r0
 8011faa:	75fb      	strb	r3, [r7, #23]
      break;
 8011fac:	e04a      	b.n	8012044 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8011fae:	7afb      	ldrb	r3, [r7, #11]
 8011fb0:	687a      	ldr	r2, [r7, #4]
 8011fb2:	4619      	mov	r1, r3
 8011fb4:	68f8      	ldr	r0, [r7, #12]
 8011fb6:	f000 f923 	bl	8012200 <SCSI_ReadCapacity10>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	75fb      	strb	r3, [r7, #23]
      break;
 8011fbe:	e041      	b.n	8012044 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8011fc0:	7afb      	ldrb	r3, [r7, #11]
 8011fc2:	687a      	ldr	r2, [r7, #4]
 8011fc4:	4619      	mov	r1, r3
 8011fc6:	68f8      	ldr	r0, [r7, #12]
 8011fc8:	f000 f998 	bl	80122fc <SCSI_ReadCapacity16>
 8011fcc:	4603      	mov	r3, r0
 8011fce:	75fb      	strb	r3, [r7, #23]
      break;
 8011fd0:	e038      	b.n	8012044 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8011fd2:	7afb      	ldrb	r3, [r7, #11]
 8011fd4:	687a      	ldr	r2, [r7, #4]
 8011fd6:	4619      	mov	r1, r3
 8011fd8:	68f8      	ldr	r0, [r7, #12]
 8011fda:	f000 fc6d 	bl	80128b8 <SCSI_Read10>
 8011fde:	4603      	mov	r3, r0
 8011fe0:	75fb      	strb	r3, [r7, #23]
      break;
 8011fe2:	e02f      	b.n	8012044 <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8011fe4:	7afb      	ldrb	r3, [r7, #11]
 8011fe6:	687a      	ldr	r2, [r7, #4]
 8011fe8:	4619      	mov	r1, r3
 8011fea:	68f8      	ldr	r0, [r7, #12]
 8011fec:	f000 fd0e 	bl	8012a0c <SCSI_Read12>
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8011ff4:	e026      	b.n	8012044 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8011ff6:	7afb      	ldrb	r3, [r7, #11]
 8011ff8:	687a      	ldr	r2, [r7, #4]
 8011ffa:	4619      	mov	r1, r3
 8011ffc:	68f8      	ldr	r0, [r7, #12]
 8011ffe:	f000 fdb9 	bl	8012b74 <SCSI_Write10>
 8012002:	4603      	mov	r3, r0
 8012004:	75fb      	strb	r3, [r7, #23]
      break;
 8012006:	e01d      	b.n	8012044 <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8012008:	7afb      	ldrb	r3, [r7, #11]
 801200a:	687a      	ldr	r2, [r7, #4]
 801200c:	4619      	mov	r1, r3
 801200e:	68f8      	ldr	r0, [r7, #12]
 8012010:	f000 fe86 	bl	8012d20 <SCSI_Write12>
 8012014:	4603      	mov	r3, r0
 8012016:	75fb      	strb	r3, [r7, #23]
      break;
 8012018:	e014      	b.n	8012044 <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 801201a:	7afb      	ldrb	r3, [r7, #11]
 801201c:	687a      	ldr	r2, [r7, #4]
 801201e:	4619      	mov	r1, r3
 8012020:	68f8      	ldr	r0, [r7, #12]
 8012022:	f000 ff63 	bl	8012eec <SCSI_Verify10>
 8012026:	4603      	mov	r3, r0
 8012028:	75fb      	strb	r3, [r7, #23]
      break;
 801202a:	e00b      	b.n	8012044 <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 801202c:	7af9      	ldrb	r1, [r7, #11]
 801202e:	2320      	movs	r3, #32
 8012030:	2205      	movs	r2, #5
 8012032:	68f8      	ldr	r0, [r7, #12]
 8012034:	f000 fb73 	bl	801271e <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8012038:	693b      	ldr	r3, [r7, #16]
 801203a:	2202      	movs	r2, #2
 801203c:	725a      	strb	r2, [r3, #9]
      ret = -1;
 801203e:	23ff      	movs	r3, #255	; 0xff
 8012040:	75fb      	strb	r3, [r7, #23]
      break;
 8012042:	bf00      	nop
  }

  return ret;
 8012044:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012048:	4618      	mov	r0, r3
 801204a:	3718      	adds	r7, #24
 801204c:	46bd      	mov	sp, r7
 801204e:	bd80      	pop	{r7, pc}

08012050 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b086      	sub	sp, #24
 8012054:	af00      	add	r7, sp, #0
 8012056:	60f8      	str	r0, [r7, #12]
 8012058:	460b      	mov	r3, r1
 801205a:	607a      	str	r2, [r7, #4]
 801205c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	32b0      	adds	r2, #176	; 0xb0
 8012068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801206c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801206e:	697b      	ldr	r3, [r7, #20]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d102      	bne.n	801207a <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 8012074:	f04f 33ff 	mov.w	r3, #4294967295
 8012078:	e03f      	b.n	80120fa <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 801207a:	697b      	ldr	r3, [r7, #20]
 801207c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012080:	2b00      	cmp	r3, #0
 8012082:	d00a      	beq.n	801209a <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012084:	697b      	ldr	r3, [r7, #20]
 8012086:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801208a:	2320      	movs	r3, #32
 801208c:	2205      	movs	r2, #5
 801208e:	68f8      	ldr	r0, [r7, #12]
 8012090:	f000 fb45 	bl	801271e <SCSI_SenseCode>

    return -1;
 8012094:	f04f 33ff 	mov.w	r3, #4294967295
 8012098:	e02f      	b.n	80120fa <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801209a:	697b      	ldr	r3, [r7, #20]
 801209c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80120a0:	2b02      	cmp	r3, #2
 80120a2:	d10b      	bne.n	80120bc <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80120a4:	7af9      	ldrb	r1, [r7, #11]
 80120a6:	233a      	movs	r3, #58	; 0x3a
 80120a8:	2202      	movs	r2, #2
 80120aa:	68f8      	ldr	r0, [r7, #12]
 80120ac:	f000 fb37 	bl	801271e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80120b0:	697b      	ldr	r3, [r7, #20]
 80120b2:	2205      	movs	r2, #5
 80120b4:	721a      	strb	r2, [r3, #8]
    return -1;
 80120b6:	f04f 33ff 	mov.w	r3, #4294967295
 80120ba:	e01e      	b.n	80120fa <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80120c2:	68fa      	ldr	r2, [r7, #12]
 80120c4:	33b0      	adds	r3, #176	; 0xb0
 80120c6:	009b      	lsls	r3, r3, #2
 80120c8:	4413      	add	r3, r2
 80120ca:	685b      	ldr	r3, [r3, #4]
 80120cc:	689b      	ldr	r3, [r3, #8]
 80120ce:	7afa      	ldrb	r2, [r7, #11]
 80120d0:	4610      	mov	r0, r2
 80120d2:	4798      	blx	r3
 80120d4:	4603      	mov	r3, r0
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d00b      	beq.n	80120f2 <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80120da:	7af9      	ldrb	r1, [r7, #11]
 80120dc:	233a      	movs	r3, #58	; 0x3a
 80120de:	2202      	movs	r2, #2
 80120e0:	68f8      	ldr	r0, [r7, #12]
 80120e2:	f000 fb1c 	bl	801271e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80120e6:	697b      	ldr	r3, [r7, #20]
 80120e8:	2205      	movs	r2, #5
 80120ea:	721a      	strb	r2, [r3, #8]

    return -1;
 80120ec:	f04f 33ff 	mov.w	r3, #4294967295
 80120f0:	e003      	b.n	80120fa <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 80120f2:	697b      	ldr	r3, [r7, #20]
 80120f4:	2200      	movs	r2, #0
 80120f6:	60da      	str	r2, [r3, #12]

  return 0;
 80120f8:	2300      	movs	r3, #0
}
 80120fa:	4618      	mov	r0, r3
 80120fc:	3718      	adds	r7, #24
 80120fe:	46bd      	mov	sp, r7
 8012100:	bd80      	pop	{r7, pc}
	...

08012104 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012104:	b580      	push	{r7, lr}
 8012106:	b088      	sub	sp, #32
 8012108:	af00      	add	r7, sp, #0
 801210a:	60f8      	str	r0, [r7, #12]
 801210c:	460b      	mov	r3, r1
 801210e:	607a      	str	r2, [r7, #4]
 8012110:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012112:	68fb      	ldr	r3, [r7, #12]
 8012114:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	32b0      	adds	r2, #176	; 0xb0
 801211c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012120:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8012122:	69bb      	ldr	r3, [r7, #24]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d102      	bne.n	801212e <SCSI_Inquiry+0x2a>
  {
    return -1;
 8012128:	f04f 33ff 	mov.w	r3, #4294967295
 801212c:	e05f      	b.n	80121ee <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801212e:	69bb      	ldr	r3, [r7, #24]
 8012130:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012134:	2b00      	cmp	r3, #0
 8012136:	d10a      	bne.n	801214e <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012138:	69bb      	ldr	r3, [r7, #24]
 801213a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801213e:	2320      	movs	r3, #32
 8012140:	2205      	movs	r2, #5
 8012142:	68f8      	ldr	r0, [r7, #12]
 8012144:	f000 faeb 	bl	801271e <SCSI_SenseCode>
    return -1;
 8012148:	f04f 33ff 	mov.w	r3, #4294967295
 801214c:	e04f      	b.n	80121ee <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	3301      	adds	r3, #1
 8012152:	781b      	ldrb	r3, [r3, #0]
 8012154:	f003 0301 	and.w	r3, r3, #1
 8012158:	2b00      	cmp	r3, #0
 801215a:	d020      	beq.n	801219e <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	3302      	adds	r3, #2
 8012160:	781b      	ldrb	r3, [r3, #0]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d105      	bne.n	8012172 <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8012166:	2206      	movs	r2, #6
 8012168:	4923      	ldr	r1, [pc, #140]	; (80121f8 <SCSI_Inquiry+0xf4>)
 801216a:	69b8      	ldr	r0, [r7, #24]
 801216c:	f001 f844 	bl	80131f8 <SCSI_UpdateBotData>
 8012170:	e03c      	b.n	80121ec <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	3302      	adds	r3, #2
 8012176:	781b      	ldrb	r3, [r3, #0]
 8012178:	2b80      	cmp	r3, #128	; 0x80
 801217a:	d105      	bne.n	8012188 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 801217c:	2208      	movs	r2, #8
 801217e:	491f      	ldr	r1, [pc, #124]	; (80121fc <SCSI_Inquiry+0xf8>)
 8012180:	69b8      	ldr	r0, [r7, #24]
 8012182:	f001 f839 	bl	80131f8 <SCSI_UpdateBotData>
 8012186:	e031      	b.n	80121ec <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8012188:	69bb      	ldr	r3, [r7, #24]
 801218a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801218e:	2324      	movs	r3, #36	; 0x24
 8012190:	2205      	movs	r2, #5
 8012192:	68f8      	ldr	r0, [r7, #12]
 8012194:	f000 fac3 	bl	801271e <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8012198:	f04f 33ff 	mov.w	r3, #4294967295
 801219c:	e027      	b.n	80121ee <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80121a4:	68fa      	ldr	r2, [r7, #12]
 80121a6:	33b0      	adds	r3, #176	; 0xb0
 80121a8:	009b      	lsls	r3, r3, #2
 80121aa:	4413      	add	r3, r2
 80121ac:	685b      	ldr	r3, [r3, #4]
 80121ae:	69d9      	ldr	r1, [r3, #28]
 80121b0:	7afa      	ldrb	r2, [r7, #11]
 80121b2:	4613      	mov	r3, r2
 80121b4:	00db      	lsls	r3, r3, #3
 80121b6:	4413      	add	r3, r2
 80121b8:	009b      	lsls	r3, r3, #2
 80121ba:	440b      	add	r3, r1
 80121bc:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80121be:	697b      	ldr	r3, [r7, #20]
 80121c0:	3304      	adds	r3, #4
 80121c2:	781b      	ldrb	r3, [r3, #0]
 80121c4:	b29b      	uxth	r3, r3
 80121c6:	3305      	adds	r3, #5
 80121c8:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	3304      	adds	r3, #4
 80121ce:	781b      	ldrb	r3, [r3, #0]
 80121d0:	b29b      	uxth	r3, r3
 80121d2:	8bfa      	ldrh	r2, [r7, #30]
 80121d4:	429a      	cmp	r2, r3
 80121d6:	d303      	bcc.n	80121e0 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	3304      	adds	r3, #4
 80121dc:	781b      	ldrb	r3, [r3, #0]
 80121de:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80121e0:	8bfb      	ldrh	r3, [r7, #30]
 80121e2:	461a      	mov	r2, r3
 80121e4:	6979      	ldr	r1, [r7, #20]
 80121e6:	69b8      	ldr	r0, [r7, #24]
 80121e8:	f001 f806 	bl	80131f8 <SCSI_UpdateBotData>
  }

  return 0;
 80121ec:	2300      	movs	r3, #0
}
 80121ee:	4618      	mov	r0, r3
 80121f0:	3720      	adds	r7, #32
 80121f2:	46bd      	mov	sp, r7
 80121f4:	bd80      	pop	{r7, pc}
 80121f6:	bf00      	nop
 80121f8:	20000070 	.word	0x20000070
 80121fc:	20000078 	.word	0x20000078

08012200 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012200:	b580      	push	{r7, lr}
 8012202:	b086      	sub	sp, #24
 8012204:	af00      	add	r7, sp, #0
 8012206:	60f8      	str	r0, [r7, #12]
 8012208:	460b      	mov	r3, r1
 801220a:	607a      	str	r2, [r7, #4]
 801220c:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	32b0      	adds	r2, #176	; 0xb0
 8012218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801221c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801221e:	697b      	ldr	r3, [r7, #20]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d102      	bne.n	801222a <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 8012224:	f04f 33ff 	mov.w	r3, #4294967295
 8012228:	e064      	b.n	80122f4 <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012230:	68fa      	ldr	r2, [r7, #12]
 8012232:	33b0      	adds	r3, #176	; 0xb0
 8012234:	009b      	lsls	r3, r3, #2
 8012236:	4413      	add	r3, r2
 8012238:	685b      	ldr	r3, [r3, #4]
 801223a:	685b      	ldr	r3, [r3, #4]
 801223c:	697a      	ldr	r2, [r7, #20]
 801223e:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8012242:	697a      	ldr	r2, [r7, #20]
 8012244:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8012248:	7af8      	ldrb	r0, [r7, #11]
 801224a:	4798      	blx	r3
 801224c:	4603      	mov	r3, r0
 801224e:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8012250:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d104      	bne.n	8012262 <SCSI_ReadCapacity10+0x62>
 8012258:	697b      	ldr	r3, [r7, #20]
 801225a:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801225e:	2b02      	cmp	r3, #2
 8012260:	d108      	bne.n	8012274 <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012262:	7af9      	ldrb	r1, [r7, #11]
 8012264:	233a      	movs	r3, #58	; 0x3a
 8012266:	2202      	movs	r2, #2
 8012268:	68f8      	ldr	r0, [r7, #12]
 801226a:	f000 fa58 	bl	801271e <SCSI_SenseCode>
    return -1;
 801226e:	f04f 33ff 	mov.w	r3, #4294967295
 8012272:	e03f      	b.n	80122f4 <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8012274:	697b      	ldr	r3, [r7, #20]
 8012276:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801227a:	3b01      	subs	r3, #1
 801227c:	0e1b      	lsrs	r3, r3, #24
 801227e:	b2da      	uxtb	r2, r3
 8012280:	697b      	ldr	r3, [r7, #20]
 8012282:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8012284:	697b      	ldr	r3, [r7, #20]
 8012286:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801228a:	3b01      	subs	r3, #1
 801228c:	0c1b      	lsrs	r3, r3, #16
 801228e:	b2da      	uxtb	r2, r3
 8012290:	697b      	ldr	r3, [r7, #20]
 8012292:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8012294:	697b      	ldr	r3, [r7, #20]
 8012296:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801229a:	3b01      	subs	r3, #1
 801229c:	0a1b      	lsrs	r3, r3, #8
 801229e:	b2da      	uxtb	r2, r3
 80122a0:	697b      	ldr	r3, [r7, #20]
 80122a2:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80122a4:	697b      	ldr	r3, [r7, #20]
 80122a6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80122aa:	b2db      	uxtb	r3, r3
 80122ac:	3b01      	subs	r3, #1
 80122ae:	b2da      	uxtb	r2, r3
 80122b0:	697b      	ldr	r3, [r7, #20]
 80122b2:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80122b4:	697b      	ldr	r3, [r7, #20]
 80122b6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80122ba:	161b      	asrs	r3, r3, #24
 80122bc:	b2da      	uxtb	r2, r3
 80122be:	697b      	ldr	r3, [r7, #20]
 80122c0:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80122c2:	697b      	ldr	r3, [r7, #20]
 80122c4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80122c8:	141b      	asrs	r3, r3, #16
 80122ca:	b2da      	uxtb	r2, r3
 80122cc:	697b      	ldr	r3, [r7, #20]
 80122ce:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80122d0:	697b      	ldr	r3, [r7, #20]
 80122d2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80122d6:	0a1b      	lsrs	r3, r3, #8
 80122d8:	b29b      	uxth	r3, r3
 80122da:	b2da      	uxtb	r2, r3
 80122dc:	697b      	ldr	r3, [r7, #20]
 80122de:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80122e0:	697b      	ldr	r3, [r7, #20]
 80122e2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80122e6:	b2da      	uxtb	r2, r3
 80122e8:	697b      	ldr	r3, [r7, #20]
 80122ea:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80122ec:	697b      	ldr	r3, [r7, #20]
 80122ee:	2208      	movs	r2, #8
 80122f0:	60da      	str	r2, [r3, #12]

  return 0;
 80122f2:	2300      	movs	r3, #0

}
 80122f4:	4618      	mov	r0, r3
 80122f6:	3718      	adds	r7, #24
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bd80      	pop	{r7, pc}

080122fc <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b088      	sub	sp, #32
 8012300:	af00      	add	r7, sp, #0
 8012302:	60f8      	str	r0, [r7, #12]
 8012304:	460b      	mov	r3, r1
 8012306:	607a      	str	r2, [r7, #4]
 8012308:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	32b0      	adds	r2, #176	; 0xb0
 8012314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012318:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 801231a:	69bb      	ldr	r3, [r7, #24]
 801231c:	2b00      	cmp	r3, #0
 801231e:	d102      	bne.n	8012326 <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8012320:	f04f 33ff 	mov.w	r3, #4294967295
 8012324:	e099      	b.n	801245a <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801232c:	68fa      	ldr	r2, [r7, #12]
 801232e:	33b0      	adds	r3, #176	; 0xb0
 8012330:	009b      	lsls	r3, r3, #2
 8012332:	4413      	add	r3, r2
 8012334:	685b      	ldr	r3, [r3, #4]
 8012336:	685b      	ldr	r3, [r3, #4]
 8012338:	69ba      	ldr	r2, [r7, #24]
 801233a:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801233e:	69ba      	ldr	r2, [r7, #24]
 8012340:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8012344:	7af8      	ldrb	r0, [r7, #11]
 8012346:	4798      	blx	r3
 8012348:	4603      	mov	r3, r0
 801234a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801234c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d104      	bne.n	801235e <SCSI_ReadCapacity16+0x62>
 8012354:	69bb      	ldr	r3, [r7, #24]
 8012356:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801235a:	2b02      	cmp	r3, #2
 801235c:	d108      	bne.n	8012370 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801235e:	7af9      	ldrb	r1, [r7, #11]
 8012360:	233a      	movs	r3, #58	; 0x3a
 8012362:	2202      	movs	r2, #2
 8012364:	68f8      	ldr	r0, [r7, #12]
 8012366:	f000 f9da 	bl	801271e <SCSI_SenseCode>
    return -1;
 801236a:	f04f 33ff 	mov.w	r3, #4294967295
 801236e:	e074      	b.n	801245a <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	330a      	adds	r3, #10
 8012374:	781b      	ldrb	r3, [r3, #0]
 8012376:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	330b      	adds	r3, #11
 801237c:	781b      	ldrb	r3, [r3, #0]
 801237e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012380:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	330c      	adds	r3, #12
 8012386:	781b      	ldrb	r3, [r3, #0]
 8012388:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801238a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 801238c:	687a      	ldr	r2, [r7, #4]
 801238e:	320d      	adds	r2, #13
 8012390:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8012392:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012394:	69bb      	ldr	r3, [r7, #24]
 8012396:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8012398:	2300      	movs	r3, #0
 801239a:	77fb      	strb	r3, [r7, #31]
 801239c:	e007      	b.n	80123ae <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 801239e:	7ffb      	ldrb	r3, [r7, #31]
 80123a0:	69ba      	ldr	r2, [r7, #24]
 80123a2:	4413      	add	r3, r2
 80123a4:	2200      	movs	r2, #0
 80123a6:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80123a8:	7ffb      	ldrb	r3, [r7, #31]
 80123aa:	3301      	adds	r3, #1
 80123ac:	77fb      	strb	r3, [r7, #31]
 80123ae:	7ffa      	ldrb	r2, [r7, #31]
 80123b0:	69bb      	ldr	r3, [r7, #24]
 80123b2:	68db      	ldr	r3, [r3, #12]
 80123b4:	429a      	cmp	r2, r3
 80123b6:	d3f2      	bcc.n	801239e <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80123b8:	69bb      	ldr	r3, [r7, #24]
 80123ba:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80123be:	3b01      	subs	r3, #1
 80123c0:	0e1b      	lsrs	r3, r3, #24
 80123c2:	b2da      	uxtb	r2, r3
 80123c4:	69bb      	ldr	r3, [r7, #24]
 80123c6:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80123c8:	69bb      	ldr	r3, [r7, #24]
 80123ca:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80123ce:	3b01      	subs	r3, #1
 80123d0:	0c1b      	lsrs	r3, r3, #16
 80123d2:	b2da      	uxtb	r2, r3
 80123d4:	69bb      	ldr	r3, [r7, #24]
 80123d6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80123d8:	69bb      	ldr	r3, [r7, #24]
 80123da:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80123de:	3b01      	subs	r3, #1
 80123e0:	0a1b      	lsrs	r3, r3, #8
 80123e2:	b2da      	uxtb	r2, r3
 80123e4:	69bb      	ldr	r3, [r7, #24]
 80123e6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80123e8:	69bb      	ldr	r3, [r7, #24]
 80123ea:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80123ee:	b2db      	uxtb	r3, r3
 80123f0:	3b01      	subs	r3, #1
 80123f2:	b2da      	uxtb	r2, r3
 80123f4:	69bb      	ldr	r3, [r7, #24]
 80123f6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80123f8:	69bb      	ldr	r3, [r7, #24]
 80123fa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80123fe:	161b      	asrs	r3, r3, #24
 8012400:	b2da      	uxtb	r2, r3
 8012402:	69bb      	ldr	r3, [r7, #24]
 8012404:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8012406:	69bb      	ldr	r3, [r7, #24]
 8012408:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801240c:	141b      	asrs	r3, r3, #16
 801240e:	b2da      	uxtb	r2, r3
 8012410:	69bb      	ldr	r3, [r7, #24]
 8012412:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8012414:	69bb      	ldr	r3, [r7, #24]
 8012416:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801241a:	0a1b      	lsrs	r3, r3, #8
 801241c:	b29b      	uxth	r3, r3
 801241e:	b2da      	uxtb	r2, r3
 8012420:	69bb      	ldr	r3, [r7, #24]
 8012422:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8012424:	69bb      	ldr	r3, [r7, #24]
 8012426:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801242a:	b2da      	uxtb	r2, r3
 801242c:	69bb      	ldr	r3, [r7, #24]
 801242e:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	330a      	adds	r3, #10
 8012434:	781b      	ldrb	r3, [r3, #0]
 8012436:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	330b      	adds	r3, #11
 801243c:	781b      	ldrb	r3, [r3, #0]
 801243e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012440:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	330c      	adds	r3, #12
 8012446:	781b      	ldrb	r3, [r3, #0]
 8012448:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801244a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 801244c:	687a      	ldr	r2, [r7, #4]
 801244e:	320d      	adds	r2, #13
 8012450:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8012452:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012454:	69bb      	ldr	r3, [r7, #24]
 8012456:	60da      	str	r2, [r3, #12]

  return 0;
 8012458:	2300      	movs	r3, #0
}
 801245a:	4618      	mov	r0, r3
 801245c:	3720      	adds	r7, #32
 801245e:	46bd      	mov	sp, r7
 8012460:	bd80      	pop	{r7, pc}

08012462 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012462:	b580      	push	{r7, lr}
 8012464:	b088      	sub	sp, #32
 8012466:	af00      	add	r7, sp, #0
 8012468:	60f8      	str	r0, [r7, #12]
 801246a:	460b      	mov	r3, r1
 801246c:	607a      	str	r2, [r7, #4]
 801246e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	32b0      	adds	r2, #176	; 0xb0
 801247a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801247e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8012480:	69bb      	ldr	r3, [r7, #24]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d102      	bne.n	801248c <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8012486:	f04f 33ff 	mov.w	r3, #4294967295
 801248a:	e061      	b.n	8012550 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012492:	68fa      	ldr	r2, [r7, #12]
 8012494:	33b0      	adds	r3, #176	; 0xb0
 8012496:	009b      	lsls	r3, r3, #2
 8012498:	4413      	add	r3, r2
 801249a:	685b      	ldr	r3, [r3, #4]
 801249c:	685b      	ldr	r3, [r3, #4]
 801249e:	f107 0214 	add.w	r2, r7, #20
 80124a2:	f107 0110 	add.w	r1, r7, #16
 80124a6:	7af8      	ldrb	r0, [r7, #11]
 80124a8:	4798      	blx	r3
 80124aa:	4603      	mov	r3, r0
 80124ac:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80124ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d104      	bne.n	80124c0 <SCSI_ReadFormatCapacity+0x5e>
 80124b6:	69bb      	ldr	r3, [r7, #24]
 80124b8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80124bc:	2b02      	cmp	r3, #2
 80124be:	d108      	bne.n	80124d2 <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80124c0:	7af9      	ldrb	r1, [r7, #11]
 80124c2:	233a      	movs	r3, #58	; 0x3a
 80124c4:	2202      	movs	r2, #2
 80124c6:	68f8      	ldr	r0, [r7, #12]
 80124c8:	f000 f929 	bl	801271e <SCSI_SenseCode>
    return -1;
 80124cc:	f04f 33ff 	mov.w	r3, #4294967295
 80124d0:	e03e      	b.n	8012550 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 80124d2:	2300      	movs	r3, #0
 80124d4:	83fb      	strh	r3, [r7, #30]
 80124d6:	e007      	b.n	80124e8 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 80124d8:	8bfb      	ldrh	r3, [r7, #30]
 80124da:	69ba      	ldr	r2, [r7, #24]
 80124dc:	4413      	add	r3, r2
 80124de:	2200      	movs	r2, #0
 80124e0:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80124e2:	8bfb      	ldrh	r3, [r7, #30]
 80124e4:	3301      	adds	r3, #1
 80124e6:	83fb      	strh	r3, [r7, #30]
 80124e8:	8bfb      	ldrh	r3, [r7, #30]
 80124ea:	2b0b      	cmp	r3, #11
 80124ec:	d9f4      	bls.n	80124d8 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 80124ee:	69bb      	ldr	r3, [r7, #24]
 80124f0:	2208      	movs	r2, #8
 80124f2:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80124f4:	693b      	ldr	r3, [r7, #16]
 80124f6:	3b01      	subs	r3, #1
 80124f8:	0e1b      	lsrs	r3, r3, #24
 80124fa:	b2da      	uxtb	r2, r3
 80124fc:	69bb      	ldr	r3, [r7, #24]
 80124fe:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8012500:	693b      	ldr	r3, [r7, #16]
 8012502:	3b01      	subs	r3, #1
 8012504:	0c1b      	lsrs	r3, r3, #16
 8012506:	b2da      	uxtb	r2, r3
 8012508:	69bb      	ldr	r3, [r7, #24]
 801250a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 801250c:	693b      	ldr	r3, [r7, #16]
 801250e:	3b01      	subs	r3, #1
 8012510:	0a1b      	lsrs	r3, r3, #8
 8012512:	b2da      	uxtb	r2, r3
 8012514:	69bb      	ldr	r3, [r7, #24]
 8012516:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8012518:	693b      	ldr	r3, [r7, #16]
 801251a:	b2db      	uxtb	r3, r3
 801251c:	3b01      	subs	r3, #1
 801251e:	b2da      	uxtb	r2, r3
 8012520:	69bb      	ldr	r3, [r7, #24]
 8012522:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8012524:	69bb      	ldr	r3, [r7, #24]
 8012526:	2202      	movs	r2, #2
 8012528:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 801252a:	8abb      	ldrh	r3, [r7, #20]
 801252c:	141b      	asrs	r3, r3, #16
 801252e:	b2da      	uxtb	r2, r3
 8012530:	69bb      	ldr	r3, [r7, #24]
 8012532:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8012534:	8abb      	ldrh	r3, [r7, #20]
 8012536:	0a1b      	lsrs	r3, r3, #8
 8012538:	b29b      	uxth	r3, r3
 801253a:	b2da      	uxtb	r2, r3
 801253c:	69bb      	ldr	r3, [r7, #24]
 801253e:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8012540:	8abb      	ldrh	r3, [r7, #20]
 8012542:	b2da      	uxtb	r2, r3
 8012544:	69bb      	ldr	r3, [r7, #24]
 8012546:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8012548:	69bb      	ldr	r3, [r7, #24]
 801254a:	220c      	movs	r2, #12
 801254c:	60da      	str	r2, [r3, #12]

  return 0;
 801254e:	2300      	movs	r3, #0
}
 8012550:	4618      	mov	r0, r3
 8012552:	3720      	adds	r7, #32
 8012554:	46bd      	mov	sp, r7
 8012556:	bd80      	pop	{r7, pc}

08012558 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012558:	b580      	push	{r7, lr}
 801255a:	b086      	sub	sp, #24
 801255c:	af00      	add	r7, sp, #0
 801255e:	60f8      	str	r0, [r7, #12]
 8012560:	460b      	mov	r3, r1
 8012562:	607a      	str	r2, [r7, #4]
 8012564:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	32b0      	adds	r2, #176	; 0xb0
 8012570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012574:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8012576:	2317      	movs	r3, #23
 8012578:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801257a:	693b      	ldr	r3, [r7, #16]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d102      	bne.n	8012586 <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8012580:	f04f 33ff 	mov.w	r3, #4294967295
 8012584:	e011      	b.n	80125aa <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	3304      	adds	r3, #4
 801258a:	781b      	ldrb	r3, [r3, #0]
 801258c:	b29b      	uxth	r3, r3
 801258e:	8afa      	ldrh	r2, [r7, #22]
 8012590:	429a      	cmp	r2, r3
 8012592:	d303      	bcc.n	801259c <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	3304      	adds	r3, #4
 8012598:	781b      	ldrb	r3, [r3, #0]
 801259a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 801259c:	8afb      	ldrh	r3, [r7, #22]
 801259e:	461a      	mov	r2, r3
 80125a0:	4904      	ldr	r1, [pc, #16]	; (80125b4 <SCSI_ModeSense6+0x5c>)
 80125a2:	6938      	ldr	r0, [r7, #16]
 80125a4:	f000 fe28 	bl	80131f8 <SCSI_UpdateBotData>

  return 0;
 80125a8:	2300      	movs	r3, #0
}
 80125aa:	4618      	mov	r0, r3
 80125ac:	3718      	adds	r7, #24
 80125ae:	46bd      	mov	sp, r7
 80125b0:	bd80      	pop	{r7, pc}
 80125b2:	bf00      	nop
 80125b4:	20000080 	.word	0x20000080

080125b8 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b086      	sub	sp, #24
 80125bc:	af00      	add	r7, sp, #0
 80125be:	60f8      	str	r0, [r7, #12]
 80125c0:	460b      	mov	r3, r1
 80125c2:	607a      	str	r2, [r7, #4]
 80125c4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	32b0      	adds	r2, #176	; 0xb0
 80125d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80125d4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80125d6:	231b      	movs	r3, #27
 80125d8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80125da:	693b      	ldr	r3, [r7, #16]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d102      	bne.n	80125e6 <SCSI_ModeSense10+0x2e>
  {
    return -1;
 80125e0:	f04f 33ff 	mov.w	r3, #4294967295
 80125e4:	e011      	b.n	801260a <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	3308      	adds	r3, #8
 80125ea:	781b      	ldrb	r3, [r3, #0]
 80125ec:	b29b      	uxth	r3, r3
 80125ee:	8afa      	ldrh	r2, [r7, #22]
 80125f0:	429a      	cmp	r2, r3
 80125f2:	d303      	bcc.n	80125fc <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	3308      	adds	r3, #8
 80125f8:	781b      	ldrb	r3, [r3, #0]
 80125fa:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80125fc:	8afb      	ldrh	r3, [r7, #22]
 80125fe:	461a      	mov	r2, r3
 8012600:	4904      	ldr	r1, [pc, #16]	; (8012614 <SCSI_ModeSense10+0x5c>)
 8012602:	6938      	ldr	r0, [r7, #16]
 8012604:	f000 fdf8 	bl	80131f8 <SCSI_UpdateBotData>

  return 0;
 8012608:	2300      	movs	r3, #0
}
 801260a:	4618      	mov	r0, r3
 801260c:	3718      	adds	r7, #24
 801260e:	46bd      	mov	sp, r7
 8012610:	bd80      	pop	{r7, pc}
 8012612:	bf00      	nop
 8012614:	20000098 	.word	0x20000098

08012618 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b086      	sub	sp, #24
 801261c:	af00      	add	r7, sp, #0
 801261e:	60f8      	str	r0, [r7, #12]
 8012620:	460b      	mov	r3, r1
 8012622:	607a      	str	r2, [r7, #4]
 8012624:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	32b0      	adds	r2, #176	; 0xb0
 8012630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012634:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8012636:	693b      	ldr	r3, [r7, #16]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d102      	bne.n	8012642 <SCSI_RequestSense+0x2a>
  {
    return -1;
 801263c:	f04f 33ff 	mov.w	r3, #4294967295
 8012640:	e069      	b.n	8012716 <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8012642:	693b      	ldr	r3, [r7, #16]
 8012644:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012648:	2b00      	cmp	r3, #0
 801264a:	d10a      	bne.n	8012662 <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801264c:	693b      	ldr	r3, [r7, #16]
 801264e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012652:	2320      	movs	r3, #32
 8012654:	2205      	movs	r2, #5
 8012656:	68f8      	ldr	r0, [r7, #12]
 8012658:	f000 f861 	bl	801271e <SCSI_SenseCode>
    return -1;
 801265c:	f04f 33ff 	mov.w	r3, #4294967295
 8012660:	e059      	b.n	8012716 <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8012662:	2300      	movs	r3, #0
 8012664:	75fb      	strb	r3, [r7, #23]
 8012666:	e007      	b.n	8012678 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8012668:	7dfb      	ldrb	r3, [r7, #23]
 801266a:	693a      	ldr	r2, [r7, #16]
 801266c:	4413      	add	r3, r2
 801266e:	2200      	movs	r2, #0
 8012670:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8012672:	7dfb      	ldrb	r3, [r7, #23]
 8012674:	3301      	adds	r3, #1
 8012676:	75fb      	strb	r3, [r7, #23]
 8012678:	7dfb      	ldrb	r3, [r7, #23]
 801267a:	2b11      	cmp	r3, #17
 801267c:	d9f4      	bls.n	8012668 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 801267e:	693b      	ldr	r3, [r7, #16]
 8012680:	2270      	movs	r2, #112	; 0x70
 8012682:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8012684:	693b      	ldr	r3, [r7, #16]
 8012686:	220c      	movs	r2, #12
 8012688:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 801268a:	693b      	ldr	r3, [r7, #16]
 801268c:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8012690:	693b      	ldr	r3, [r7, #16]
 8012692:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8012696:	429a      	cmp	r2, r3
 8012698:	d02e      	beq.n	80126f8 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 801269a:	693b      	ldr	r3, [r7, #16]
 801269c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80126a0:	461a      	mov	r2, r3
 80126a2:	693b      	ldr	r3, [r7, #16]
 80126a4:	3248      	adds	r2, #72	; 0x48
 80126a6:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 80126aa:	693b      	ldr	r3, [r7, #16]
 80126ac:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80126ae:	693b      	ldr	r3, [r7, #16]
 80126b0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80126b4:	693a      	ldr	r2, [r7, #16]
 80126b6:	3348      	adds	r3, #72	; 0x48
 80126b8:	00db      	lsls	r3, r3, #3
 80126ba:	4413      	add	r3, r2
 80126bc:	791a      	ldrb	r2, [r3, #4]
 80126be:	693b      	ldr	r3, [r7, #16]
 80126c0:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80126c2:	693b      	ldr	r3, [r7, #16]
 80126c4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80126c8:	693a      	ldr	r2, [r7, #16]
 80126ca:	3348      	adds	r3, #72	; 0x48
 80126cc:	00db      	lsls	r3, r3, #3
 80126ce:	4413      	add	r3, r2
 80126d0:	795a      	ldrb	r2, [r3, #5]
 80126d2:	693b      	ldr	r3, [r7, #16]
 80126d4:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80126d6:	693b      	ldr	r3, [r7, #16]
 80126d8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80126dc:	3301      	adds	r3, #1
 80126de:	b2da      	uxtb	r2, r3
 80126e0:	693b      	ldr	r3, [r7, #16]
 80126e2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80126e6:	693b      	ldr	r3, [r7, #16]
 80126e8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80126ec:	2b04      	cmp	r3, #4
 80126ee:	d103      	bne.n	80126f8 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 80126f0:	693b      	ldr	r3, [r7, #16]
 80126f2:	2200      	movs	r2, #0
 80126f4:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80126f8:	693b      	ldr	r3, [r7, #16]
 80126fa:	2212      	movs	r2, #18
 80126fc:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	3304      	adds	r3, #4
 8012702:	781b      	ldrb	r3, [r3, #0]
 8012704:	2b12      	cmp	r3, #18
 8012706:	d805      	bhi.n	8012714 <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	3304      	adds	r3, #4
 801270c:	781b      	ldrb	r3, [r3, #0]
 801270e:	461a      	mov	r2, r3
 8012710:	693b      	ldr	r3, [r7, #16]
 8012712:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8012714:	2300      	movs	r3, #0
}
 8012716:	4618      	mov	r0, r3
 8012718:	3718      	adds	r7, #24
 801271a:	46bd      	mov	sp, r7
 801271c:	bd80      	pop	{r7, pc}

0801271e <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 801271e:	b480      	push	{r7}
 8012720:	b085      	sub	sp, #20
 8012722:	af00      	add	r7, sp, #0
 8012724:	6078      	str	r0, [r7, #4]
 8012726:	4608      	mov	r0, r1
 8012728:	4611      	mov	r1, r2
 801272a:	461a      	mov	r2, r3
 801272c:	4603      	mov	r3, r0
 801272e:	70fb      	strb	r3, [r7, #3]
 8012730:	460b      	mov	r3, r1
 8012732:	70bb      	strb	r3, [r7, #2]
 8012734:	4613      	mov	r3, r2
 8012736:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	32b0      	adds	r2, #176	; 0xb0
 8012742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012746:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d02c      	beq.n	80127a8 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8012754:	461a      	mov	r2, r3
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	3248      	adds	r2, #72	; 0x48
 801275a:	78b9      	ldrb	r1, [r7, #2]
 801275c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8012766:	68fa      	ldr	r2, [r7, #12]
 8012768:	3348      	adds	r3, #72	; 0x48
 801276a:	00db      	lsls	r3, r3, #3
 801276c:	4413      	add	r3, r2
 801276e:	787a      	ldrb	r2, [r7, #1]
 8012770:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8012778:	68fa      	ldr	r2, [r7, #12]
 801277a:	3348      	adds	r3, #72	; 0x48
 801277c:	00db      	lsls	r3, r3, #3
 801277e:	4413      	add	r3, r2
 8012780:	2200      	movs	r2, #0
 8012782:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801278a:	3301      	adds	r3, #1
 801278c:	b2da      	uxtb	r2, r3
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801279a:	2b04      	cmp	r3, #4
 801279c:	d105      	bne.n	80127aa <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	2200      	movs	r2, #0
 80127a2:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 80127a6:	e000      	b.n	80127aa <SCSI_SenseCode+0x8c>
    return;
 80127a8:	bf00      	nop
  }
}
 80127aa:	3714      	adds	r7, #20
 80127ac:	46bd      	mov	sp, r7
 80127ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b2:	4770      	bx	lr

080127b4 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b086      	sub	sp, #24
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	60f8      	str	r0, [r7, #12]
 80127bc:	460b      	mov	r3, r1
 80127be:	607a      	str	r2, [r7, #4]
 80127c0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	32b0      	adds	r2, #176	; 0xb0
 80127cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80127d0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80127d2:	697b      	ldr	r3, [r7, #20]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d102      	bne.n	80127de <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 80127d8:	f04f 33ff 	mov.w	r3, #4294967295
 80127dc:	e03b      	b.n	8012856 <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80127de:	697b      	ldr	r3, [r7, #20]
 80127e0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80127e4:	2b01      	cmp	r3, #1
 80127e6:	d10f      	bne.n	8012808 <SCSI_StartStopUnit+0x54>
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	3304      	adds	r3, #4
 80127ec:	781b      	ldrb	r3, [r3, #0]
 80127ee:	f003 0303 	and.w	r3, r3, #3
 80127f2:	2b02      	cmp	r3, #2
 80127f4:	d108      	bne.n	8012808 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80127f6:	7af9      	ldrb	r1, [r7, #11]
 80127f8:	2324      	movs	r3, #36	; 0x24
 80127fa:	2205      	movs	r2, #5
 80127fc:	68f8      	ldr	r0, [r7, #12]
 80127fe:	f7ff ff8e 	bl	801271e <SCSI_SenseCode>

    return -1;
 8012802:	f04f 33ff 	mov.w	r3, #4294967295
 8012806:	e026      	b.n	8012856 <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	3304      	adds	r3, #4
 801280c:	781b      	ldrb	r3, [r3, #0]
 801280e:	f003 0303 	and.w	r3, r3, #3
 8012812:	2b01      	cmp	r3, #1
 8012814:	d104      	bne.n	8012820 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8012816:	697b      	ldr	r3, [r7, #20]
 8012818:	2200      	movs	r2, #0
 801281a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801281e:	e016      	b.n	801284e <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	3304      	adds	r3, #4
 8012824:	781b      	ldrb	r3, [r3, #0]
 8012826:	f003 0303 	and.w	r3, r3, #3
 801282a:	2b02      	cmp	r3, #2
 801282c:	d104      	bne.n	8012838 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 801282e:	697b      	ldr	r3, [r7, #20]
 8012830:	2202      	movs	r2, #2
 8012832:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8012836:	e00a      	b.n	801284e <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	3304      	adds	r3, #4
 801283c:	781b      	ldrb	r3, [r3, #0]
 801283e:	f003 0303 	and.w	r3, r3, #3
 8012842:	2b03      	cmp	r3, #3
 8012844:	d103      	bne.n	801284e <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8012846:	697b      	ldr	r3, [r7, #20]
 8012848:	2200      	movs	r2, #0
 801284a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 801284e:	697b      	ldr	r3, [r7, #20]
 8012850:	2200      	movs	r2, #0
 8012852:	60da      	str	r2, [r3, #12]

  return 0;
 8012854:	2300      	movs	r3, #0
}
 8012856:	4618      	mov	r0, r3
 8012858:	3718      	adds	r7, #24
 801285a:	46bd      	mov	sp, r7
 801285c:	bd80      	pop	{r7, pc}

0801285e <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801285e:	b480      	push	{r7}
 8012860:	b087      	sub	sp, #28
 8012862:	af00      	add	r7, sp, #0
 8012864:	60f8      	str	r0, [r7, #12]
 8012866:	460b      	mov	r3, r1
 8012868:	607a      	str	r2, [r7, #4]
 801286a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012872:	68fb      	ldr	r3, [r7, #12]
 8012874:	32b0      	adds	r2, #176	; 0xb0
 8012876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801287a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801287c:	697b      	ldr	r3, [r7, #20]
 801287e:	2b00      	cmp	r3, #0
 8012880:	d102      	bne.n	8012888 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 8012882:	f04f 33ff 	mov.w	r3, #4294967295
 8012886:	e011      	b.n	80128ac <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	3304      	adds	r3, #4
 801288c:	781b      	ldrb	r3, [r3, #0]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d104      	bne.n	801289c <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8012892:	697b      	ldr	r3, [r7, #20]
 8012894:	2200      	movs	r2, #0
 8012896:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801289a:	e003      	b.n	80128a4 <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 801289c:	697b      	ldr	r3, [r7, #20]
 801289e:	2201      	movs	r2, #1
 80128a0:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 80128a4:	697b      	ldr	r3, [r7, #20]
 80128a6:	2200      	movs	r2, #0
 80128a8:	60da      	str	r2, [r3, #12]

  return 0;
 80128aa:	2300      	movs	r3, #0
}
 80128ac:	4618      	mov	r0, r3
 80128ae:	371c      	adds	r7, #28
 80128b0:	46bd      	mov	sp, r7
 80128b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b6:	4770      	bx	lr

080128b8 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b086      	sub	sp, #24
 80128bc:	af00      	add	r7, sp, #0
 80128be:	60f8      	str	r0, [r7, #12]
 80128c0:	460b      	mov	r3, r1
 80128c2:	607a      	str	r2, [r7, #4]
 80128c4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	32b0      	adds	r2, #176	; 0xb0
 80128d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128d4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80128d6:	697b      	ldr	r3, [r7, #20]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d102      	bne.n	80128e2 <SCSI_Read10+0x2a>
  {
    return -1;
 80128dc:	f04f 33ff 	mov.w	r3, #4294967295
 80128e0:	e090      	b.n	8012a04 <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80128e2:	697b      	ldr	r3, [r7, #20]
 80128e4:	7a1b      	ldrb	r3, [r3, #8]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	f040 8082 	bne.w	80129f0 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80128ec:	697b      	ldr	r3, [r7, #20]
 80128ee:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80128f2:	b25b      	sxtb	r3, r3
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	db0a      	blt.n	801290e <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80128f8:	697b      	ldr	r3, [r7, #20]
 80128fa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80128fe:	2320      	movs	r3, #32
 8012900:	2205      	movs	r2, #5
 8012902:	68f8      	ldr	r0, [r7, #12]
 8012904:	f7ff ff0b 	bl	801271e <SCSI_SenseCode>
      return -1;
 8012908:	f04f 33ff 	mov.w	r3, #4294967295
 801290c:	e07a      	b.n	8012a04 <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801290e:	697b      	ldr	r3, [r7, #20]
 8012910:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012914:	2b02      	cmp	r3, #2
 8012916:	d108      	bne.n	801292a <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012918:	7af9      	ldrb	r1, [r7, #11]
 801291a:	233a      	movs	r3, #58	; 0x3a
 801291c:	2202      	movs	r2, #2
 801291e:	68f8      	ldr	r0, [r7, #12]
 8012920:	f7ff fefd 	bl	801271e <SCSI_SenseCode>

      return -1;
 8012924:	f04f 33ff 	mov.w	r3, #4294967295
 8012928:	e06c      	b.n	8012a04 <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012930:	68fa      	ldr	r2, [r7, #12]
 8012932:	33b0      	adds	r3, #176	; 0xb0
 8012934:	009b      	lsls	r3, r3, #2
 8012936:	4413      	add	r3, r2
 8012938:	685b      	ldr	r3, [r3, #4]
 801293a:	689b      	ldr	r3, [r3, #8]
 801293c:	7afa      	ldrb	r2, [r7, #11]
 801293e:	4610      	mov	r0, r2
 8012940:	4798      	blx	r3
 8012942:	4603      	mov	r3, r0
 8012944:	2b00      	cmp	r3, #0
 8012946:	d008      	beq.n	801295a <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012948:	7af9      	ldrb	r1, [r7, #11]
 801294a:	233a      	movs	r3, #58	; 0x3a
 801294c:	2202      	movs	r2, #2
 801294e:	68f8      	ldr	r0, [r7, #12]
 8012950:	f7ff fee5 	bl	801271e <SCSI_SenseCode>
      return -1;
 8012954:	f04f 33ff 	mov.w	r3, #4294967295
 8012958:	e054      	b.n	8012a04 <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	3302      	adds	r3, #2
 801295e:	781b      	ldrb	r3, [r3, #0]
 8012960:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	3303      	adds	r3, #3
 8012966:	781b      	ldrb	r3, [r3, #0]
 8012968:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801296a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	3304      	adds	r3, #4
 8012970:	781b      	ldrb	r3, [r3, #0]
 8012972:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8012974:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8012976:	687a      	ldr	r2, [r7, #4]
 8012978:	3205      	adds	r2, #5
 801297a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801297c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801297e:	697b      	ldr	r3, [r7, #20]
 8012980:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	3307      	adds	r3, #7
 8012988:	781b      	ldrb	r3, [r3, #0]
 801298a:	021b      	lsls	r3, r3, #8
 801298c:	687a      	ldr	r2, [r7, #4]
 801298e:	3208      	adds	r2, #8
 8012990:	7812      	ldrb	r2, [r2, #0]
 8012992:	431a      	orrs	r2, r3
 8012994:	697b      	ldr	r3, [r7, #20]
 8012996:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801299a:	697b      	ldr	r3, [r7, #20]
 801299c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80129a0:	697b      	ldr	r3, [r7, #20]
 80129a2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80129a6:	7af9      	ldrb	r1, [r7, #11]
 80129a8:	68f8      	ldr	r0, [r7, #12]
 80129aa:	f000 fadc 	bl	8012f66 <SCSI_CheckAddressRange>
 80129ae:	4603      	mov	r3, r0
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	da02      	bge.n	80129ba <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80129b4:	f04f 33ff 	mov.w	r3, #4294967295
 80129b8:	e024      	b.n	8012a04 <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80129ba:	697b      	ldr	r3, [r7, #20]
 80129bc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80129c0:	697b      	ldr	r3, [r7, #20]
 80129c2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80129c6:	6979      	ldr	r1, [r7, #20]
 80129c8:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80129cc:	fb01 f303 	mul.w	r3, r1, r3
 80129d0:	429a      	cmp	r2, r3
 80129d2:	d00a      	beq.n	80129ea <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80129d4:	697b      	ldr	r3, [r7, #20]
 80129d6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80129da:	2320      	movs	r3, #32
 80129dc:	2205      	movs	r2, #5
 80129de:	68f8      	ldr	r0, [r7, #12]
 80129e0:	f7ff fe9d 	bl	801271e <SCSI_SenseCode>
      return -1;
 80129e4:	f04f 33ff 	mov.w	r3, #4294967295
 80129e8:	e00c      	b.n	8012a04 <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80129ea:	697b      	ldr	r3, [r7, #20]
 80129ec:	2202      	movs	r2, #2
 80129ee:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80129f0:	697b      	ldr	r3, [r7, #20]
 80129f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80129f6:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80129f8:	7afb      	ldrb	r3, [r7, #11]
 80129fa:	4619      	mov	r1, r3
 80129fc:	68f8      	ldr	r0, [r7, #12]
 80129fe:	f000 fadf 	bl	8012fc0 <SCSI_ProcessRead>
 8012a02:	4603      	mov	r3, r0
}
 8012a04:	4618      	mov	r0, r3
 8012a06:	3718      	adds	r7, #24
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bd80      	pop	{r7, pc}

08012a0c <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012a0c:	b580      	push	{r7, lr}
 8012a0e:	b086      	sub	sp, #24
 8012a10:	af00      	add	r7, sp, #0
 8012a12:	60f8      	str	r0, [r7, #12]
 8012a14:	460b      	mov	r3, r1
 8012a16:	607a      	str	r2, [r7, #4]
 8012a18:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	32b0      	adds	r2, #176	; 0xb0
 8012a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a28:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012a2a:	697b      	ldr	r3, [r7, #20]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d102      	bne.n	8012a36 <SCSI_Read12+0x2a>
  {
    return -1;
 8012a30:	f04f 33ff 	mov.w	r3, #4294967295
 8012a34:	e09a      	b.n	8012b6c <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8012a36:	697b      	ldr	r3, [r7, #20]
 8012a38:	7a1b      	ldrb	r3, [r3, #8]
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	f040 808c 	bne.w	8012b58 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8012a40:	697b      	ldr	r3, [r7, #20]
 8012a42:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8012a46:	b25b      	sxtb	r3, r3
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	db0a      	blt.n	8012a62 <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012a4c:	697b      	ldr	r3, [r7, #20]
 8012a4e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012a52:	2320      	movs	r3, #32
 8012a54:	2205      	movs	r2, #5
 8012a56:	68f8      	ldr	r0, [r7, #12]
 8012a58:	f7ff fe61 	bl	801271e <SCSI_SenseCode>
      return -1;
 8012a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8012a60:	e084      	b.n	8012b6c <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8012a62:	697b      	ldr	r3, [r7, #20]
 8012a64:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012a68:	2b02      	cmp	r3, #2
 8012a6a:	d108      	bne.n	8012a7e <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012a6c:	7af9      	ldrb	r1, [r7, #11]
 8012a6e:	233a      	movs	r3, #58	; 0x3a
 8012a70:	2202      	movs	r2, #2
 8012a72:	68f8      	ldr	r0, [r7, #12]
 8012a74:	f7ff fe53 	bl	801271e <SCSI_SenseCode>
      return -1;
 8012a78:	f04f 33ff 	mov.w	r3, #4294967295
 8012a7c:	e076      	b.n	8012b6c <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012a84:	68fa      	ldr	r2, [r7, #12]
 8012a86:	33b0      	adds	r3, #176	; 0xb0
 8012a88:	009b      	lsls	r3, r3, #2
 8012a8a:	4413      	add	r3, r2
 8012a8c:	685b      	ldr	r3, [r3, #4]
 8012a8e:	689b      	ldr	r3, [r3, #8]
 8012a90:	7afa      	ldrb	r2, [r7, #11]
 8012a92:	4610      	mov	r0, r2
 8012a94:	4798      	blx	r3
 8012a96:	4603      	mov	r3, r0
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d008      	beq.n	8012aae <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012a9c:	7af9      	ldrb	r1, [r7, #11]
 8012a9e:	233a      	movs	r3, #58	; 0x3a
 8012aa0:	2202      	movs	r2, #2
 8012aa2:	68f8      	ldr	r0, [r7, #12]
 8012aa4:	f7ff fe3b 	bl	801271e <SCSI_SenseCode>
      return -1;
 8012aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8012aac:	e05e      	b.n	8012b6c <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	3302      	adds	r3, #2
 8012ab2:	781b      	ldrb	r3, [r3, #0]
 8012ab4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	3303      	adds	r3, #3
 8012aba:	781b      	ldrb	r3, [r3, #0]
 8012abc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012abe:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	3304      	adds	r3, #4
 8012ac4:	781b      	ldrb	r3, [r3, #0]
 8012ac6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8012ac8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8012aca:	687a      	ldr	r2, [r7, #4]
 8012acc:	3205      	adds	r2, #5
 8012ace:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8012ad0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012ad2:	697b      	ldr	r3, [r7, #20]
 8012ad4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	3306      	adds	r3, #6
 8012adc:	781b      	ldrb	r3, [r3, #0]
 8012ade:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8012ae0:	687b      	ldr	r3, [r7, #4]
 8012ae2:	3307      	adds	r3, #7
 8012ae4:	781b      	ldrb	r3, [r3, #0]
 8012ae6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012ae8:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	3308      	adds	r3, #8
 8012aee:	781b      	ldrb	r3, [r3, #0]
 8012af0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8012af2:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8012af4:	687a      	ldr	r2, [r7, #4]
 8012af6:	3209      	adds	r2, #9
 8012af8:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8012afa:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012afc:	697b      	ldr	r3, [r7, #20]
 8012afe:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8012b02:	697b      	ldr	r3, [r7, #20]
 8012b04:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8012b08:	697b      	ldr	r3, [r7, #20]
 8012b0a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012b0e:	7af9      	ldrb	r1, [r7, #11]
 8012b10:	68f8      	ldr	r0, [r7, #12]
 8012b12:	f000 fa28 	bl	8012f66 <SCSI_CheckAddressRange>
 8012b16:	4603      	mov	r3, r0
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	da02      	bge.n	8012b22 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8012b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8012b20:	e024      	b.n	8012b6c <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8012b22:	697b      	ldr	r3, [r7, #20]
 8012b24:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8012b28:	697b      	ldr	r3, [r7, #20]
 8012b2a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012b2e:	6979      	ldr	r1, [r7, #20]
 8012b30:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8012b34:	fb01 f303 	mul.w	r3, r1, r3
 8012b38:	429a      	cmp	r2, r3
 8012b3a:	d00a      	beq.n	8012b52 <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012b3c:	697b      	ldr	r3, [r7, #20]
 8012b3e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012b42:	2320      	movs	r3, #32
 8012b44:	2205      	movs	r2, #5
 8012b46:	68f8      	ldr	r0, [r7, #12]
 8012b48:	f7ff fde9 	bl	801271e <SCSI_SenseCode>
      return -1;
 8012b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8012b50:	e00c      	b.n	8012b6c <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8012b52:	697b      	ldr	r3, [r7, #20]
 8012b54:	2202      	movs	r2, #2
 8012b56:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8012b58:	697b      	ldr	r3, [r7, #20]
 8012b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012b5e:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8012b60:	7afb      	ldrb	r3, [r7, #11]
 8012b62:	4619      	mov	r1, r3
 8012b64:	68f8      	ldr	r0, [r7, #12]
 8012b66:	f000 fa2b 	bl	8012fc0 <SCSI_ProcessRead>
 8012b6a:	4603      	mov	r3, r0
}
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	3718      	adds	r7, #24
 8012b70:	46bd      	mov	sp, r7
 8012b72:	bd80      	pop	{r7, pc}

08012b74 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012b74:	b580      	push	{r7, lr}
 8012b76:	b086      	sub	sp, #24
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	60f8      	str	r0, [r7, #12]
 8012b7c:	460b      	mov	r3, r1
 8012b7e:	607a      	str	r2, [r7, #4]
 8012b80:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	32b0      	adds	r2, #176	; 0xb0
 8012b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b90:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8012b92:	697b      	ldr	r3, [r7, #20]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d102      	bne.n	8012b9e <SCSI_Write10+0x2a>
  {
    return -1;
 8012b98:	f04f 33ff 	mov.w	r3, #4294967295
 8012b9c:	e0ba      	b.n	8012d14 <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8012b9e:	697b      	ldr	r3, [r7, #20]
 8012ba0:	7a1b      	ldrb	r3, [r3, #8]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	f040 80b0 	bne.w	8012d08 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8012ba8:	697b      	ldr	r3, [r7, #20]
 8012baa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d10a      	bne.n	8012bc8 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012bb2:	697b      	ldr	r3, [r7, #20]
 8012bb4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012bb8:	2320      	movs	r3, #32
 8012bba:	2205      	movs	r2, #5
 8012bbc:	68f8      	ldr	r0, [r7, #12]
 8012bbe:	f7ff fdae 	bl	801271e <SCSI_SenseCode>
      return -1;
 8012bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8012bc6:	e0a5      	b.n	8012d14 <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8012bc8:	697b      	ldr	r3, [r7, #20]
 8012bca:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8012bce:	b25b      	sxtb	r3, r3
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	da0a      	bge.n	8012bea <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012bd4:	697b      	ldr	r3, [r7, #20]
 8012bd6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012bda:	2320      	movs	r3, #32
 8012bdc:	2205      	movs	r2, #5
 8012bde:	68f8      	ldr	r0, [r7, #12]
 8012be0:	f7ff fd9d 	bl	801271e <SCSI_SenseCode>
      return -1;
 8012be4:	f04f 33ff 	mov.w	r3, #4294967295
 8012be8:	e094      	b.n	8012d14 <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012bf0:	68fa      	ldr	r2, [r7, #12]
 8012bf2:	33b0      	adds	r3, #176	; 0xb0
 8012bf4:	009b      	lsls	r3, r3, #2
 8012bf6:	4413      	add	r3, r2
 8012bf8:	685b      	ldr	r3, [r3, #4]
 8012bfa:	689b      	ldr	r3, [r3, #8]
 8012bfc:	7afa      	ldrb	r2, [r7, #11]
 8012bfe:	4610      	mov	r0, r2
 8012c00:	4798      	blx	r3
 8012c02:	4603      	mov	r3, r0
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d008      	beq.n	8012c1a <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012c08:	7af9      	ldrb	r1, [r7, #11]
 8012c0a:	233a      	movs	r3, #58	; 0x3a
 8012c0c:	2202      	movs	r2, #2
 8012c0e:	68f8      	ldr	r0, [r7, #12]
 8012c10:	f7ff fd85 	bl	801271e <SCSI_SenseCode>
      return -1;
 8012c14:	f04f 33ff 	mov.w	r3, #4294967295
 8012c18:	e07c      	b.n	8012d14 <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012c20:	68fa      	ldr	r2, [r7, #12]
 8012c22:	33b0      	adds	r3, #176	; 0xb0
 8012c24:	009b      	lsls	r3, r3, #2
 8012c26:	4413      	add	r3, r2
 8012c28:	685b      	ldr	r3, [r3, #4]
 8012c2a:	68db      	ldr	r3, [r3, #12]
 8012c2c:	7afa      	ldrb	r2, [r7, #11]
 8012c2e:	4610      	mov	r0, r2
 8012c30:	4798      	blx	r3
 8012c32:	4603      	mov	r3, r0
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d008      	beq.n	8012c4a <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8012c38:	7af9      	ldrb	r1, [r7, #11]
 8012c3a:	2327      	movs	r3, #39	; 0x27
 8012c3c:	2202      	movs	r2, #2
 8012c3e:	68f8      	ldr	r0, [r7, #12]
 8012c40:	f7ff fd6d 	bl	801271e <SCSI_SenseCode>
      return -1;
 8012c44:	f04f 33ff 	mov.w	r3, #4294967295
 8012c48:	e064      	b.n	8012d14 <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	3302      	adds	r3, #2
 8012c4e:	781b      	ldrb	r3, [r3, #0]
 8012c50:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	3303      	adds	r3, #3
 8012c56:	781b      	ldrb	r3, [r3, #0]
 8012c58:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012c5a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8012c5c:	687b      	ldr	r3, [r7, #4]
 8012c5e:	3304      	adds	r3, #4
 8012c60:	781b      	ldrb	r3, [r3, #0]
 8012c62:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8012c64:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8012c66:	687a      	ldr	r2, [r7, #4]
 8012c68:	3205      	adds	r2, #5
 8012c6a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8012c6c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012c6e:	697b      	ldr	r3, [r7, #20]
 8012c70:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	3307      	adds	r3, #7
 8012c78:	781b      	ldrb	r3, [r3, #0]
 8012c7a:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8012c7c:	687a      	ldr	r2, [r7, #4]
 8012c7e:	3208      	adds	r2, #8
 8012c80:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8012c82:	431a      	orrs	r2, r3
 8012c84:	697b      	ldr	r3, [r7, #20]
 8012c86:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8012c8a:	697b      	ldr	r3, [r7, #20]
 8012c8c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8012c90:	697b      	ldr	r3, [r7, #20]
 8012c92:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012c96:	7af9      	ldrb	r1, [r7, #11]
 8012c98:	68f8      	ldr	r0, [r7, #12]
 8012c9a:	f000 f964 	bl	8012f66 <SCSI_CheckAddressRange>
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	da02      	bge.n	8012caa <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8012ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ca8:	e034      	b.n	8012d14 <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012caa:	697b      	ldr	r3, [r7, #20]
 8012cac:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012cb0:	697a      	ldr	r2, [r7, #20]
 8012cb2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8012cb6:	fb02 f303 	mul.w	r3, r2, r3
 8012cba:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8012cbc:	697b      	ldr	r3, [r7, #20]
 8012cbe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012cc2:	693a      	ldr	r2, [r7, #16]
 8012cc4:	429a      	cmp	r2, r3
 8012cc6:	d00a      	beq.n	8012cde <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012cc8:	697b      	ldr	r3, [r7, #20]
 8012cca:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012cce:	2320      	movs	r3, #32
 8012cd0:	2205      	movs	r2, #5
 8012cd2:	68f8      	ldr	r0, [r7, #12]
 8012cd4:	f7ff fd23 	bl	801271e <SCSI_SenseCode>
      return -1;
 8012cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8012cdc:	e01a      	b.n	8012d14 <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8012cde:	693b      	ldr	r3, [r7, #16]
 8012ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012ce4:	bf28      	it	cs
 8012ce6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8012cea:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8012cec:	697b      	ldr	r3, [r7, #20]
 8012cee:	2201      	movs	r2, #1
 8012cf0:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8012cf2:	4b0a      	ldr	r3, [pc, #40]	; (8012d1c <SCSI_Write10+0x1a8>)
 8012cf4:	7819      	ldrb	r1, [r3, #0]
 8012cf6:	697b      	ldr	r3, [r7, #20]
 8012cf8:	f103 0210 	add.w	r2, r3, #16
 8012cfc:	693b      	ldr	r3, [r7, #16]
 8012cfe:	68f8      	ldr	r0, [r7, #12]
 8012d00:	f005 f967 	bl	8017fd2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8012d04:	2300      	movs	r3, #0
 8012d06:	e005      	b.n	8012d14 <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 8012d08:	7afb      	ldrb	r3, [r7, #11]
 8012d0a:	4619      	mov	r1, r3
 8012d0c:	68f8      	ldr	r0, [r7, #12]
 8012d0e:	f000 f9dd 	bl	80130cc <SCSI_ProcessWrite>
 8012d12:	4603      	mov	r3, r0
}
 8012d14:	4618      	mov	r0, r3
 8012d16:	3718      	adds	r7, #24
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	bd80      	pop	{r7, pc}
 8012d1c:	2000006f 	.word	0x2000006f

08012d20 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b086      	sub	sp, #24
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	60f8      	str	r0, [r7, #12]
 8012d28:	460b      	mov	r3, r1
 8012d2a:	607a      	str	r2, [r7, #4]
 8012d2c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	32b0      	adds	r2, #176	; 0xb0
 8012d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d3c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8012d3e:	697b      	ldr	r3, [r7, #20]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d102      	bne.n	8012d4a <SCSI_Write12+0x2a>
  {
    return -1;
 8012d44:	f04f 33ff 	mov.w	r3, #4294967295
 8012d48:	e0ca      	b.n	8012ee0 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8012d4a:	697b      	ldr	r3, [r7, #20]
 8012d4c:	7a1b      	ldrb	r3, [r3, #8]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	f040 80c0 	bne.w	8012ed4 <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8012d54:	697b      	ldr	r3, [r7, #20]
 8012d56:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d10a      	bne.n	8012d74 <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012d5e:	697b      	ldr	r3, [r7, #20]
 8012d60:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012d64:	2320      	movs	r3, #32
 8012d66:	2205      	movs	r2, #5
 8012d68:	68f8      	ldr	r0, [r7, #12]
 8012d6a:	f7ff fcd8 	bl	801271e <SCSI_SenseCode>
      return -1;
 8012d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8012d72:	e0b5      	b.n	8012ee0 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8012d74:	697b      	ldr	r3, [r7, #20]
 8012d76:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8012d7a:	b25b      	sxtb	r3, r3
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	da0a      	bge.n	8012d96 <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012d80:	697b      	ldr	r3, [r7, #20]
 8012d82:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012d86:	2320      	movs	r3, #32
 8012d88:	2205      	movs	r2, #5
 8012d8a:	68f8      	ldr	r0, [r7, #12]
 8012d8c:	f7ff fcc7 	bl	801271e <SCSI_SenseCode>
      return -1;
 8012d90:	f04f 33ff 	mov.w	r3, #4294967295
 8012d94:	e0a4      	b.n	8012ee0 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012d9c:	68fa      	ldr	r2, [r7, #12]
 8012d9e:	33b0      	adds	r3, #176	; 0xb0
 8012da0:	009b      	lsls	r3, r3, #2
 8012da2:	4413      	add	r3, r2
 8012da4:	685b      	ldr	r3, [r3, #4]
 8012da6:	689b      	ldr	r3, [r3, #8]
 8012da8:	7afa      	ldrb	r2, [r7, #11]
 8012daa:	4610      	mov	r0, r2
 8012dac:	4798      	blx	r3
 8012dae:	4603      	mov	r3, r0
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d00b      	beq.n	8012dcc <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012db4:	7af9      	ldrb	r1, [r7, #11]
 8012db6:	233a      	movs	r3, #58	; 0x3a
 8012db8:	2202      	movs	r2, #2
 8012dba:	68f8      	ldr	r0, [r7, #12]
 8012dbc:	f7ff fcaf 	bl	801271e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8012dc0:	697b      	ldr	r3, [r7, #20]
 8012dc2:	2205      	movs	r2, #5
 8012dc4:	721a      	strb	r2, [r3, #8]
      return -1;
 8012dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8012dca:	e089      	b.n	8012ee0 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012dd2:	68fa      	ldr	r2, [r7, #12]
 8012dd4:	33b0      	adds	r3, #176	; 0xb0
 8012dd6:	009b      	lsls	r3, r3, #2
 8012dd8:	4413      	add	r3, r2
 8012dda:	685b      	ldr	r3, [r3, #4]
 8012ddc:	68db      	ldr	r3, [r3, #12]
 8012dde:	7afa      	ldrb	r2, [r7, #11]
 8012de0:	4610      	mov	r0, r2
 8012de2:	4798      	blx	r3
 8012de4:	4603      	mov	r3, r0
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d00b      	beq.n	8012e02 <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8012dea:	7af9      	ldrb	r1, [r7, #11]
 8012dec:	2327      	movs	r3, #39	; 0x27
 8012dee:	2202      	movs	r2, #2
 8012df0:	68f8      	ldr	r0, [r7, #12]
 8012df2:	f7ff fc94 	bl	801271e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8012df6:	697b      	ldr	r3, [r7, #20]
 8012df8:	2205      	movs	r2, #5
 8012dfa:	721a      	strb	r2, [r3, #8]
      return -1;
 8012dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8012e00:	e06e      	b.n	8012ee0 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	3302      	adds	r3, #2
 8012e06:	781b      	ldrb	r3, [r3, #0]
 8012e08:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	3303      	adds	r3, #3
 8012e0e:	781b      	ldrb	r3, [r3, #0]
 8012e10:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012e12:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	3304      	adds	r3, #4
 8012e18:	781b      	ldrb	r3, [r3, #0]
 8012e1a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8012e1c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8012e1e:	687a      	ldr	r2, [r7, #4]
 8012e20:	3205      	adds	r2, #5
 8012e22:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8012e24:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8012e26:	697b      	ldr	r3, [r7, #20]
 8012e28:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	3306      	adds	r3, #6
 8012e30:	781b      	ldrb	r3, [r3, #0]
 8012e32:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	3307      	adds	r3, #7
 8012e38:	781b      	ldrb	r3, [r3, #0]
 8012e3a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012e3c:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	3308      	adds	r3, #8
 8012e42:	781b      	ldrb	r3, [r3, #0]
 8012e44:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8012e46:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8012e48:	687a      	ldr	r2, [r7, #4]
 8012e4a:	3209      	adds	r2, #9
 8012e4c:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8012e4e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8012e50:	697b      	ldr	r3, [r7, #20]
 8012e52:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8012e56:	697b      	ldr	r3, [r7, #20]
 8012e58:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8012e5c:	697b      	ldr	r3, [r7, #20]
 8012e5e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012e62:	7af9      	ldrb	r1, [r7, #11]
 8012e64:	68f8      	ldr	r0, [r7, #12]
 8012e66:	f000 f87e 	bl	8012f66 <SCSI_CheckAddressRange>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	da02      	bge.n	8012e76 <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8012e70:	f04f 33ff 	mov.w	r3, #4294967295
 8012e74:	e034      	b.n	8012ee0 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012e76:	697b      	ldr	r3, [r7, #20]
 8012e78:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012e7c:	697a      	ldr	r2, [r7, #20]
 8012e7e:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8012e82:	fb02 f303 	mul.w	r3, r2, r3
 8012e86:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8012e88:	697b      	ldr	r3, [r7, #20]
 8012e8a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012e8e:	693a      	ldr	r2, [r7, #16]
 8012e90:	429a      	cmp	r2, r3
 8012e92:	d00a      	beq.n	8012eaa <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012e94:	697b      	ldr	r3, [r7, #20]
 8012e96:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012e9a:	2320      	movs	r3, #32
 8012e9c:	2205      	movs	r2, #5
 8012e9e:	68f8      	ldr	r0, [r7, #12]
 8012ea0:	f7ff fc3d 	bl	801271e <SCSI_SenseCode>
      return -1;
 8012ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ea8:	e01a      	b.n	8012ee0 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8012eaa:	693b      	ldr	r3, [r7, #16]
 8012eac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012eb0:	bf28      	it	cs
 8012eb2:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8012eb6:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8012eb8:	697b      	ldr	r3, [r7, #20]
 8012eba:	2201      	movs	r2, #1
 8012ebc:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8012ebe:	4b0a      	ldr	r3, [pc, #40]	; (8012ee8 <SCSI_Write12+0x1c8>)
 8012ec0:	7819      	ldrb	r1, [r3, #0]
 8012ec2:	697b      	ldr	r3, [r7, #20]
 8012ec4:	f103 0210 	add.w	r2, r3, #16
 8012ec8:	693b      	ldr	r3, [r7, #16]
 8012eca:	68f8      	ldr	r0, [r7, #12]
 8012ecc:	f005 f881 	bl	8017fd2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	e005      	b.n	8012ee0 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 8012ed4:	7afb      	ldrb	r3, [r7, #11]
 8012ed6:	4619      	mov	r1, r3
 8012ed8:	68f8      	ldr	r0, [r7, #12]
 8012eda:	f000 f8f7 	bl	80130cc <SCSI_ProcessWrite>
 8012ede:	4603      	mov	r3, r0
}
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	3718      	adds	r7, #24
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	bd80      	pop	{r7, pc}
 8012ee8:	2000006f 	.word	0x2000006f

08012eec <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b086      	sub	sp, #24
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	60f8      	str	r0, [r7, #12]
 8012ef4:	460b      	mov	r3, r1
 8012ef6:	607a      	str	r2, [r7, #4]
 8012ef8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	32b0      	adds	r2, #176	; 0xb0
 8012f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f08:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012f0a:	697b      	ldr	r3, [r7, #20]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d102      	bne.n	8012f16 <SCSI_Verify10+0x2a>
  {
    return -1;
 8012f10:	f04f 33ff 	mov.w	r3, #4294967295
 8012f14:	e023      	b.n	8012f5e <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	3301      	adds	r3, #1
 8012f1a:	781b      	ldrb	r3, [r3, #0]
 8012f1c:	f003 0302 	and.w	r3, r3, #2
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d008      	beq.n	8012f36 <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8012f24:	7af9      	ldrb	r1, [r7, #11]
 8012f26:	2324      	movs	r3, #36	; 0x24
 8012f28:	2205      	movs	r2, #5
 8012f2a:	68f8      	ldr	r0, [r7, #12]
 8012f2c:	f7ff fbf7 	bl	801271e <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8012f30:	f04f 33ff 	mov.w	r3, #4294967295
 8012f34:	e013      	b.n	8012f5e <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8012f36:	697b      	ldr	r3, [r7, #20]
 8012f38:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8012f3c:	697b      	ldr	r3, [r7, #20]
 8012f3e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012f42:	7af9      	ldrb	r1, [r7, #11]
 8012f44:	68f8      	ldr	r0, [r7, #12]
 8012f46:	f000 f80e 	bl	8012f66 <SCSI_CheckAddressRange>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	da02      	bge.n	8012f56 <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8012f50:	f04f 33ff 	mov.w	r3, #4294967295
 8012f54:	e003      	b.n	8012f5e <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 8012f56:	697b      	ldr	r3, [r7, #20]
 8012f58:	2200      	movs	r2, #0
 8012f5a:	60da      	str	r2, [r3, #12]

  return 0;
 8012f5c:	2300      	movs	r3, #0
}
 8012f5e:	4618      	mov	r0, r3
 8012f60:	3718      	adds	r7, #24
 8012f62:	46bd      	mov	sp, r7
 8012f64:	bd80      	pop	{r7, pc}

08012f66 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8012f66:	b580      	push	{r7, lr}
 8012f68:	b086      	sub	sp, #24
 8012f6a:	af00      	add	r7, sp, #0
 8012f6c:	60f8      	str	r0, [r7, #12]
 8012f6e:	607a      	str	r2, [r7, #4]
 8012f70:	603b      	str	r3, [r7, #0]
 8012f72:	460b      	mov	r3, r1
 8012f74:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	32b0      	adds	r2, #176	; 0xb0
 8012f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f84:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012f86:	697b      	ldr	r3, [r7, #20]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d102      	bne.n	8012f92 <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8012f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8012f90:	e011      	b.n	8012fb6 <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8012f92:	687a      	ldr	r2, [r7, #4]
 8012f94:	683b      	ldr	r3, [r7, #0]
 8012f96:	441a      	add	r2, r3
 8012f98:	697b      	ldr	r3, [r7, #20]
 8012f9a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	d908      	bls.n	8012fb4 <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8012fa2:	7af9      	ldrb	r1, [r7, #11]
 8012fa4:	2321      	movs	r3, #33	; 0x21
 8012fa6:	2205      	movs	r2, #5
 8012fa8:	68f8      	ldr	r0, [r7, #12]
 8012faa:	f7ff fbb8 	bl	801271e <SCSI_SenseCode>
    return -1;
 8012fae:	f04f 33ff 	mov.w	r3, #4294967295
 8012fb2:	e000      	b.n	8012fb6 <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 8012fb4:	2300      	movs	r3, #0
}
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	3718      	adds	r7, #24
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	bd80      	pop	{r7, pc}
	...

08012fc0 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8012fc0:	b590      	push	{r4, r7, lr}
 8012fc2:	b085      	sub	sp, #20
 8012fc4:	af00      	add	r7, sp, #0
 8012fc6:	6078      	str	r0, [r7, #4]
 8012fc8:	460b      	mov	r3, r1
 8012fca:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	32b0      	adds	r2, #176	; 0xb0
 8012fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fda:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d102      	bne.n	8012fe8 <SCSI_ProcessRead+0x28>
  {
    return -1;
 8012fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8012fe6:	e06a      	b.n	80130be <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8012fee:	68fa      	ldr	r2, [r7, #12]
 8012ff0:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8012ff4:	fb02 f303 	mul.w	r3, r2, r3
 8012ff8:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8012ffa:	68bb      	ldr	r3, [r7, #8]
 8012ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013000:	bf28      	it	cs
 8013002:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8013006:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801300e:	687a      	ldr	r2, [r7, #4]
 8013010:	33b0      	adds	r3, #176	; 0xb0
 8013012:	009b      	lsls	r3, r3, #2
 8013014:	4413      	add	r3, r2
 8013016:	685b      	ldr	r3, [r3, #4]
 8013018:	691c      	ldr	r4, [r3, #16]
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	f103 0110 	add.w	r1, r3, #16
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801302c:	4618      	mov	r0, r3
 801302e:	68bb      	ldr	r3, [r7, #8]
 8013030:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 8013034:	b29b      	uxth	r3, r3
 8013036:	78f8      	ldrb	r0, [r7, #3]
 8013038:	47a0      	blx	r4
 801303a:	4603      	mov	r3, r0
 801303c:	2b00      	cmp	r3, #0
 801303e:	da08      	bge.n	8013052 <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8013040:	78f9      	ldrb	r1, [r7, #3]
 8013042:	2311      	movs	r3, #17
 8013044:	2204      	movs	r2, #4
 8013046:	6878      	ldr	r0, [r7, #4]
 8013048:	f7ff fb69 	bl	801271e <SCSI_SenseCode>
    return -1;
 801304c:	f04f 33ff 	mov.w	r3, #4294967295
 8013050:	e035      	b.n	80130be <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 8013052:	4b1d      	ldr	r3, [pc, #116]	; (80130c8 <SCSI_ProcessRead+0x108>)
 8013054:	7819      	ldrb	r1, [r3, #0]
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	f103 0210 	add.w	r2, r3, #16
 801305c:	68bb      	ldr	r3, [r7, #8]
 801305e:	6878      	ldr	r0, [r7, #4]
 8013060:	f004 ff96 	bl	8017f90 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8013070:	4619      	mov	r1, r3
 8013072:	68bb      	ldr	r3, [r7, #8]
 8013074:	fbb3 f3f1 	udiv	r3, r3, r1
 8013078:	441a      	add	r2, r3
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801308c:	4619      	mov	r1, r3
 801308e:	68bb      	ldr	r3, [r7, #8]
 8013090:	fbb3 f3f1 	udiv	r3, r3, r1
 8013094:	1ad2      	subs	r2, r2, r3
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 80130a2:	68bb      	ldr	r3, [r7, #8]
 80130a4:	1ad2      	subs	r2, r2, r3
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 80130ac:	68fb      	ldr	r3, [r7, #12]
 80130ae:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d102      	bne.n	80130bc <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	2203      	movs	r2, #3
 80130ba:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80130bc:	2300      	movs	r3, #0
}
 80130be:	4618      	mov	r0, r3
 80130c0:	3714      	adds	r7, #20
 80130c2:	46bd      	mov	sp, r7
 80130c4:	bd90      	pop	{r4, r7, pc}
 80130c6:	bf00      	nop
 80130c8:	2000006e 	.word	0x2000006e

080130cc <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80130cc:	b590      	push	{r4, r7, lr}
 80130ce:	b085      	sub	sp, #20
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
 80130d4:	460b      	mov	r3, r1
 80130d6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	32b0      	adds	r2, #176	; 0xb0
 80130e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130e6:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d102      	bne.n	80130f4 <SCSI_ProcessWrite+0x28>
  {
    return -1;
 80130ee:	f04f 33ff 	mov.w	r3, #4294967295
 80130f2:	e07a      	b.n	80131ea <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80130fa:	68fa      	ldr	r2, [r7, #12]
 80130fc:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8013100:	fb02 f303 	mul.w	r3, r2, r3
 8013104:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 8013106:	68bb      	ldr	r3, [r7, #8]
 8013108:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801310c:	bf28      	it	cs
 801310e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8013112:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801311a:	687a      	ldr	r2, [r7, #4]
 801311c:	33b0      	adds	r3, #176	; 0xb0
 801311e:	009b      	lsls	r3, r3, #2
 8013120:	4413      	add	r3, r2
 8013122:	685b      	ldr	r3, [r3, #4]
 8013124:	695c      	ldr	r4, [r3, #20]
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	f103 0110 	add.w	r1, r3, #16
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8013138:	4618      	mov	r0, r3
 801313a:	68bb      	ldr	r3, [r7, #8]
 801313c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8013140:	b29b      	uxth	r3, r3
 8013142:	78f8      	ldrb	r0, [r7, #3]
 8013144:	47a0      	blx	r4
 8013146:	4603      	mov	r3, r0
 8013148:	2b00      	cmp	r3, #0
 801314a:	da08      	bge.n	801315e <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 801314c:	78f9      	ldrb	r1, [r7, #3]
 801314e:	2303      	movs	r3, #3
 8013150:	2204      	movs	r2, #4
 8013152:	6878      	ldr	r0, [r7, #4]
 8013154:	f7ff fae3 	bl	801271e <SCSI_SenseCode>
    return -1;
 8013158:	f04f 33ff 	mov.w	r3, #4294967295
 801315c:	e045      	b.n	80131ea <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801316a:	4619      	mov	r1, r3
 801316c:	68bb      	ldr	r3, [r7, #8]
 801316e:	fbb3 f3f1 	udiv	r3, r3, r1
 8013172:	441a      	add	r2, r3
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8013186:	4619      	mov	r1, r3
 8013188:	68bb      	ldr	r3, [r7, #8]
 801318a:	fbb3 f3f1 	udiv	r3, r3, r1
 801318e:	1ad2      	subs	r2, r2, r3
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801319c:	68bb      	ldr	r3, [r7, #8]
 801319e:	1ad2      	subs	r2, r2, r3
 80131a0:	68fb      	ldr	r3, [r7, #12]
 80131a2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d104      	bne.n	80131ba <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80131b0:	2100      	movs	r1, #0
 80131b2:	6878      	ldr	r0, [r7, #4]
 80131b4:	f7fe fd14 	bl	8011be0 <MSC_BOT_SendCSW>
 80131b8:	e016      	b.n	80131e8 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80131c0:	68fa      	ldr	r2, [r7, #12]
 80131c2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80131c6:	fb02 f303 	mul.w	r3, r2, r3
 80131ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80131ce:	bf28      	it	cs
 80131d0:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80131d4:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80131d6:	4b07      	ldr	r3, [pc, #28]	; (80131f4 <SCSI_ProcessWrite+0x128>)
 80131d8:	7819      	ldrb	r1, [r3, #0]
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	f103 0210 	add.w	r2, r3, #16
 80131e0:	68bb      	ldr	r3, [r7, #8]
 80131e2:	6878      	ldr	r0, [r7, #4]
 80131e4:	f004 fef5 	bl	8017fd2 <USBD_LL_PrepareReceive>
  }

  return 0;
 80131e8:	2300      	movs	r3, #0
}
 80131ea:	4618      	mov	r0, r3
 80131ec:	3714      	adds	r7, #20
 80131ee:	46bd      	mov	sp, r7
 80131f0:	bd90      	pop	{r4, r7, pc}
 80131f2:	bf00      	nop
 80131f4:	2000006f 	.word	0x2000006f

080131f8 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80131f8:	b480      	push	{r7}
 80131fa:	b087      	sub	sp, #28
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	60f8      	str	r0, [r7, #12]
 8013200:	60b9      	str	r1, [r7, #8]
 8013202:	4613      	mov	r3, r2
 8013204:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8013206:	88fb      	ldrh	r3, [r7, #6]
 8013208:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	2b00      	cmp	r3, #0
 801320e:	d102      	bne.n	8013216 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8013210:	f04f 33ff 	mov.w	r3, #4294967295
 8013214:	e013      	b.n	801323e <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8013216:	8afa      	ldrh	r2, [r7, #22]
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 801321c:	e00b      	b.n	8013236 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 801321e:	8afb      	ldrh	r3, [r7, #22]
 8013220:	3b01      	subs	r3, #1
 8013222:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8013224:	8afb      	ldrh	r3, [r7, #22]
 8013226:	68ba      	ldr	r2, [r7, #8]
 8013228:	441a      	add	r2, r3
 801322a:	8afb      	ldrh	r3, [r7, #22]
 801322c:	7811      	ldrb	r1, [r2, #0]
 801322e:	68fa      	ldr	r2, [r7, #12]
 8013230:	4413      	add	r3, r2
 8013232:	460a      	mov	r2, r1
 8013234:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8013236:	8afb      	ldrh	r3, [r7, #22]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d1f0      	bne.n	801321e <SCSI_UpdateBotData+0x26>
  }

  return 0;
 801323c:	2300      	movs	r3, #0
}
 801323e:	4618      	mov	r0, r3
 8013240:	371c      	adds	r7, #28
 8013242:	46bd      	mov	sp, r7
 8013244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013248:	4770      	bx	lr

0801324a <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801324a:	b580      	push	{r7, lr}
 801324c:	b086      	sub	sp, #24
 801324e:	af00      	add	r7, sp, #0
 8013250:	60f8      	str	r0, [r7, #12]
 8013252:	60b9      	str	r1, [r7, #8]
 8013254:	4613      	mov	r3, r2
 8013256:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d101      	bne.n	8013262 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801325e:	2303      	movs	r3, #3
 8013260:	e01f      	b.n	80132a2 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013262:	68fb      	ldr	r3, [r7, #12]
 8013264:	2200      	movs	r2, #0
 8013266:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	2200      	movs	r2, #0
 801326e:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	2200      	movs	r2, #0
 8013276:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801327a:	68bb      	ldr	r3, [r7, #8]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d003      	beq.n	8013288 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	68ba      	ldr	r2, [r7, #8]
 8013284:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	2201      	movs	r2, #1
 801328c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	79fa      	ldrb	r2, [r7, #7]
 8013294:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013296:	68f8      	ldr	r0, [r7, #12]
 8013298:	f004 fd26 	bl	8017ce8 <USBD_LL_Init>
 801329c:	4603      	mov	r3, r0
 801329e:	75fb      	strb	r3, [r7, #23]

  return ret;
 80132a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80132a2:	4618      	mov	r0, r3
 80132a4:	3718      	adds	r7, #24
 80132a6:	46bd      	mov	sp, r7
 80132a8:	bd80      	pop	{r7, pc}

080132aa <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80132aa:	b580      	push	{r7, lr}
 80132ac:	b084      	sub	sp, #16
 80132ae:	af00      	add	r7, sp, #0
 80132b0:	6078      	str	r0, [r7, #4]
 80132b2:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80132b4:	2300      	movs	r3, #0
 80132b6:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80132b8:	683b      	ldr	r3, [r7, #0]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d101      	bne.n	80132c2 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80132be:	2303      	movs	r3, #3
 80132c0:	e025      	b.n	801330e <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	683a      	ldr	r2, [r7, #0]
 80132c6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	32ae      	adds	r2, #174	; 0xae
 80132d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d00f      	beq.n	80132fe <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	32ae      	adds	r2, #174	; 0xae
 80132e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132ee:	f107 020e 	add.w	r2, r7, #14
 80132f2:	4610      	mov	r0, r2
 80132f4:	4798      	blx	r3
 80132f6:	4602      	mov	r2, r0
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8013304:	1c5a      	adds	r2, r3, #1
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801330c:	2300      	movs	r3, #0
}
 801330e:	4618      	mov	r0, r3
 8013310:	3710      	adds	r7, #16
 8013312:	46bd      	mov	sp, r7
 8013314:	bd80      	pop	{r7, pc}

08013316 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013316:	b580      	push	{r7, lr}
 8013318:	b082      	sub	sp, #8
 801331a:	af00      	add	r7, sp, #0
 801331c:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801331e:	6878      	ldr	r0, [r7, #4]
 8013320:	f004 fd2e 	bl	8017d80 <USBD_LL_Start>
 8013324:	4603      	mov	r3, r0
}
 8013326:	4618      	mov	r0, r3
 8013328:	3708      	adds	r7, #8
 801332a:	46bd      	mov	sp, r7
 801332c:	bd80      	pop	{r7, pc}

0801332e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801332e:	b480      	push	{r7}
 8013330:	b083      	sub	sp, #12
 8013332:	af00      	add	r7, sp, #0
 8013334:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013336:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013338:	4618      	mov	r0, r3
 801333a:	370c      	adds	r7, #12
 801333c:	46bd      	mov	sp, r7
 801333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013342:	4770      	bx	lr

08013344 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b084      	sub	sp, #16
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
 801334c:	460b      	mov	r3, r1
 801334e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013350:	2300      	movs	r3, #0
 8013352:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801335a:	2b00      	cmp	r3, #0
 801335c:	d009      	beq.n	8013372 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	78fa      	ldrb	r2, [r7, #3]
 8013368:	4611      	mov	r1, r2
 801336a:	6878      	ldr	r0, [r7, #4]
 801336c:	4798      	blx	r3
 801336e:	4603      	mov	r3, r0
 8013370:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013372:	7bfb      	ldrb	r3, [r7, #15]
}
 8013374:	4618      	mov	r0, r3
 8013376:	3710      	adds	r7, #16
 8013378:	46bd      	mov	sp, r7
 801337a:	bd80      	pop	{r7, pc}

0801337c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801337c:	b580      	push	{r7, lr}
 801337e:	b084      	sub	sp, #16
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
 8013384:	460b      	mov	r3, r1
 8013386:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013388:	2300      	movs	r3, #0
 801338a:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013392:	685b      	ldr	r3, [r3, #4]
 8013394:	78fa      	ldrb	r2, [r7, #3]
 8013396:	4611      	mov	r1, r2
 8013398:	6878      	ldr	r0, [r7, #4]
 801339a:	4798      	blx	r3
 801339c:	4603      	mov	r3, r0
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d001      	beq.n	80133a6 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80133a2:	2303      	movs	r3, #3
 80133a4:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80133a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80133a8:	4618      	mov	r0, r3
 80133aa:	3710      	adds	r7, #16
 80133ac:	46bd      	mov	sp, r7
 80133ae:	bd80      	pop	{r7, pc}

080133b0 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b084      	sub	sp, #16
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
 80133b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80133c0:	6839      	ldr	r1, [r7, #0]
 80133c2:	4618      	mov	r0, r3
 80133c4:	f001 f933 	bl	801462e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	2201      	movs	r2, #1
 80133cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80133d6:	461a      	mov	r2, r3
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80133e4:	f003 031f 	and.w	r3, r3, #31
 80133e8:	2b02      	cmp	r3, #2
 80133ea:	d01a      	beq.n	8013422 <USBD_LL_SetupStage+0x72>
 80133ec:	2b02      	cmp	r3, #2
 80133ee:	d822      	bhi.n	8013436 <USBD_LL_SetupStage+0x86>
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d002      	beq.n	80133fa <USBD_LL_SetupStage+0x4a>
 80133f4:	2b01      	cmp	r3, #1
 80133f6:	d00a      	beq.n	801340e <USBD_LL_SetupStage+0x5e>
 80133f8:	e01d      	b.n	8013436 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013400:	4619      	mov	r1, r3
 8013402:	6878      	ldr	r0, [r7, #4]
 8013404:	f000 fb60 	bl	8013ac8 <USBD_StdDevReq>
 8013408:	4603      	mov	r3, r0
 801340a:	73fb      	strb	r3, [r7, #15]
      break;
 801340c:	e020      	b.n	8013450 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013414:	4619      	mov	r1, r3
 8013416:	6878      	ldr	r0, [r7, #4]
 8013418:	f000 fbc8 	bl	8013bac <USBD_StdItfReq>
 801341c:	4603      	mov	r3, r0
 801341e:	73fb      	strb	r3, [r7, #15]
      break;
 8013420:	e016      	b.n	8013450 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013428:	4619      	mov	r1, r3
 801342a:	6878      	ldr	r0, [r7, #4]
 801342c:	f000 fc2a 	bl	8013c84 <USBD_StdEPReq>
 8013430:	4603      	mov	r3, r0
 8013432:	73fb      	strb	r3, [r7, #15]
      break;
 8013434:	e00c      	b.n	8013450 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801343c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013440:	b2db      	uxtb	r3, r3
 8013442:	4619      	mov	r1, r3
 8013444:	6878      	ldr	r0, [r7, #4]
 8013446:	f004 fd1a 	bl	8017e7e <USBD_LL_StallEP>
 801344a:	4603      	mov	r3, r0
 801344c:	73fb      	strb	r3, [r7, #15]
      break;
 801344e:	bf00      	nop
  }

  return ret;
 8013450:	7bfb      	ldrb	r3, [r7, #15]
}
 8013452:	4618      	mov	r0, r3
 8013454:	3710      	adds	r7, #16
 8013456:	46bd      	mov	sp, r7
 8013458:	bd80      	pop	{r7, pc}

0801345a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801345a:	b580      	push	{r7, lr}
 801345c:	b086      	sub	sp, #24
 801345e:	af00      	add	r7, sp, #0
 8013460:	60f8      	str	r0, [r7, #12]
 8013462:	460b      	mov	r3, r1
 8013464:	607a      	str	r2, [r7, #4]
 8013466:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013468:	2300      	movs	r3, #0
 801346a:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801346c:	7afb      	ldrb	r3, [r7, #11]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d16e      	bne.n	8013550 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013478:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013480:	2b03      	cmp	r3, #3
 8013482:	f040 8098 	bne.w	80135b6 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013486:	693b      	ldr	r3, [r7, #16]
 8013488:	689a      	ldr	r2, [r3, #8]
 801348a:	693b      	ldr	r3, [r7, #16]
 801348c:	68db      	ldr	r3, [r3, #12]
 801348e:	429a      	cmp	r2, r3
 8013490:	d913      	bls.n	80134ba <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013492:	693b      	ldr	r3, [r7, #16]
 8013494:	689a      	ldr	r2, [r3, #8]
 8013496:	693b      	ldr	r3, [r7, #16]
 8013498:	68db      	ldr	r3, [r3, #12]
 801349a:	1ad2      	subs	r2, r2, r3
 801349c:	693b      	ldr	r3, [r7, #16]
 801349e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80134a0:	693b      	ldr	r3, [r7, #16]
 80134a2:	68da      	ldr	r2, [r3, #12]
 80134a4:	693b      	ldr	r3, [r7, #16]
 80134a6:	689b      	ldr	r3, [r3, #8]
 80134a8:	4293      	cmp	r3, r2
 80134aa:	bf28      	it	cs
 80134ac:	4613      	movcs	r3, r2
 80134ae:	461a      	mov	r2, r3
 80134b0:	6879      	ldr	r1, [r7, #4]
 80134b2:	68f8      	ldr	r0, [r7, #12]
 80134b4:	f001 f992 	bl	80147dc <USBD_CtlContinueRx>
 80134b8:	e07d      	b.n	80135b6 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80134c0:	f003 031f 	and.w	r3, r3, #31
 80134c4:	2b02      	cmp	r3, #2
 80134c6:	d014      	beq.n	80134f2 <USBD_LL_DataOutStage+0x98>
 80134c8:	2b02      	cmp	r3, #2
 80134ca:	d81d      	bhi.n	8013508 <USBD_LL_DataOutStage+0xae>
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d002      	beq.n	80134d6 <USBD_LL_DataOutStage+0x7c>
 80134d0:	2b01      	cmp	r3, #1
 80134d2:	d003      	beq.n	80134dc <USBD_LL_DataOutStage+0x82>
 80134d4:	e018      	b.n	8013508 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80134d6:	2300      	movs	r3, #0
 80134d8:	75bb      	strb	r3, [r7, #22]
            break;
 80134da:	e018      	b.n	801350e <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80134e2:	b2db      	uxtb	r3, r3
 80134e4:	4619      	mov	r1, r3
 80134e6:	68f8      	ldr	r0, [r7, #12]
 80134e8:	f000 fa5e 	bl	80139a8 <USBD_CoreFindIF>
 80134ec:	4603      	mov	r3, r0
 80134ee:	75bb      	strb	r3, [r7, #22]
            break;
 80134f0:	e00d      	b.n	801350e <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80134f8:	b2db      	uxtb	r3, r3
 80134fa:	4619      	mov	r1, r3
 80134fc:	68f8      	ldr	r0, [r7, #12]
 80134fe:	f000 fa60 	bl	80139c2 <USBD_CoreFindEP>
 8013502:	4603      	mov	r3, r0
 8013504:	75bb      	strb	r3, [r7, #22]
            break;
 8013506:	e002      	b.n	801350e <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013508:	2300      	movs	r3, #0
 801350a:	75bb      	strb	r3, [r7, #22]
            break;
 801350c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801350e:	7dbb      	ldrb	r3, [r7, #22]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d119      	bne.n	8013548 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801351a:	b2db      	uxtb	r3, r3
 801351c:	2b03      	cmp	r3, #3
 801351e:	d113      	bne.n	8013548 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013520:	7dba      	ldrb	r2, [r7, #22]
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	32ae      	adds	r2, #174	; 0xae
 8013526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801352a:	691b      	ldr	r3, [r3, #16]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d00b      	beq.n	8013548 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013530:	7dba      	ldrb	r2, [r7, #22]
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013538:	7dba      	ldrb	r2, [r7, #22]
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	32ae      	adds	r2, #174	; 0xae
 801353e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013542:	691b      	ldr	r3, [r3, #16]
 8013544:	68f8      	ldr	r0, [r7, #12]
 8013546:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013548:	68f8      	ldr	r0, [r7, #12]
 801354a:	f001 f958 	bl	80147fe <USBD_CtlSendStatus>
 801354e:	e032      	b.n	80135b6 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013550:	7afb      	ldrb	r3, [r7, #11]
 8013552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013556:	b2db      	uxtb	r3, r3
 8013558:	4619      	mov	r1, r3
 801355a:	68f8      	ldr	r0, [r7, #12]
 801355c:	f000 fa31 	bl	80139c2 <USBD_CoreFindEP>
 8013560:	4603      	mov	r3, r0
 8013562:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013564:	7dbb      	ldrb	r3, [r7, #22]
 8013566:	2bff      	cmp	r3, #255	; 0xff
 8013568:	d025      	beq.n	80135b6 <USBD_LL_DataOutStage+0x15c>
 801356a:	7dbb      	ldrb	r3, [r7, #22]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d122      	bne.n	80135b6 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013576:	b2db      	uxtb	r3, r3
 8013578:	2b03      	cmp	r3, #3
 801357a:	d117      	bne.n	80135ac <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801357c:	7dba      	ldrb	r2, [r7, #22]
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	32ae      	adds	r2, #174	; 0xae
 8013582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013586:	699b      	ldr	r3, [r3, #24]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d00f      	beq.n	80135ac <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801358c:	7dba      	ldrb	r2, [r7, #22]
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013594:	7dba      	ldrb	r2, [r7, #22]
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	32ae      	adds	r2, #174	; 0xae
 801359a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801359e:	699b      	ldr	r3, [r3, #24]
 80135a0:	7afa      	ldrb	r2, [r7, #11]
 80135a2:	4611      	mov	r1, r2
 80135a4:	68f8      	ldr	r0, [r7, #12]
 80135a6:	4798      	blx	r3
 80135a8:	4603      	mov	r3, r0
 80135aa:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80135ac:	7dfb      	ldrb	r3, [r7, #23]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d001      	beq.n	80135b6 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80135b2:	7dfb      	ldrb	r3, [r7, #23]
 80135b4:	e000      	b.n	80135b8 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80135b6:	2300      	movs	r3, #0
}
 80135b8:	4618      	mov	r0, r3
 80135ba:	3718      	adds	r7, #24
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}

080135c0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80135c0:	b580      	push	{r7, lr}
 80135c2:	b086      	sub	sp, #24
 80135c4:	af00      	add	r7, sp, #0
 80135c6:	60f8      	str	r0, [r7, #12]
 80135c8:	460b      	mov	r3, r1
 80135ca:	607a      	str	r2, [r7, #4]
 80135cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80135ce:	7afb      	ldrb	r3, [r7, #11]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d16f      	bne.n	80136b4 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	3314      	adds	r3, #20
 80135d8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80135e0:	2b02      	cmp	r3, #2
 80135e2:	d15a      	bne.n	801369a <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80135e4:	693b      	ldr	r3, [r7, #16]
 80135e6:	689a      	ldr	r2, [r3, #8]
 80135e8:	693b      	ldr	r3, [r7, #16]
 80135ea:	68db      	ldr	r3, [r3, #12]
 80135ec:	429a      	cmp	r2, r3
 80135ee:	d914      	bls.n	801361a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80135f0:	693b      	ldr	r3, [r7, #16]
 80135f2:	689a      	ldr	r2, [r3, #8]
 80135f4:	693b      	ldr	r3, [r7, #16]
 80135f6:	68db      	ldr	r3, [r3, #12]
 80135f8:	1ad2      	subs	r2, r2, r3
 80135fa:	693b      	ldr	r3, [r7, #16]
 80135fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80135fe:	693b      	ldr	r3, [r7, #16]
 8013600:	689b      	ldr	r3, [r3, #8]
 8013602:	461a      	mov	r2, r3
 8013604:	6879      	ldr	r1, [r7, #4]
 8013606:	68f8      	ldr	r0, [r7, #12]
 8013608:	f001 f8d7 	bl	80147ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801360c:	2300      	movs	r3, #0
 801360e:	2200      	movs	r2, #0
 8013610:	2100      	movs	r1, #0
 8013612:	68f8      	ldr	r0, [r7, #12]
 8013614:	f004 fcdd 	bl	8017fd2 <USBD_LL_PrepareReceive>
 8013618:	e03f      	b.n	801369a <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801361a:	693b      	ldr	r3, [r7, #16]
 801361c:	68da      	ldr	r2, [r3, #12]
 801361e:	693b      	ldr	r3, [r7, #16]
 8013620:	689b      	ldr	r3, [r3, #8]
 8013622:	429a      	cmp	r2, r3
 8013624:	d11c      	bne.n	8013660 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013626:	693b      	ldr	r3, [r7, #16]
 8013628:	685a      	ldr	r2, [r3, #4]
 801362a:	693b      	ldr	r3, [r7, #16]
 801362c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801362e:	429a      	cmp	r2, r3
 8013630:	d316      	bcc.n	8013660 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013632:	693b      	ldr	r3, [r7, #16]
 8013634:	685a      	ldr	r2, [r3, #4]
 8013636:	68fb      	ldr	r3, [r7, #12]
 8013638:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801363c:	429a      	cmp	r2, r3
 801363e:	d20f      	bcs.n	8013660 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013640:	2200      	movs	r2, #0
 8013642:	2100      	movs	r1, #0
 8013644:	68f8      	ldr	r0, [r7, #12]
 8013646:	f001 f8b8 	bl	80147ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	2200      	movs	r2, #0
 801364e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013652:	2300      	movs	r3, #0
 8013654:	2200      	movs	r2, #0
 8013656:	2100      	movs	r1, #0
 8013658:	68f8      	ldr	r0, [r7, #12]
 801365a:	f004 fcba 	bl	8017fd2 <USBD_LL_PrepareReceive>
 801365e:	e01c      	b.n	801369a <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013666:	b2db      	uxtb	r3, r3
 8013668:	2b03      	cmp	r3, #3
 801366a:	d10f      	bne.n	801368c <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013672:	68db      	ldr	r3, [r3, #12]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d009      	beq.n	801368c <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	2200      	movs	r2, #0
 801367c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013686:	68db      	ldr	r3, [r3, #12]
 8013688:	68f8      	ldr	r0, [r7, #12]
 801368a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801368c:	2180      	movs	r1, #128	; 0x80
 801368e:	68f8      	ldr	r0, [r7, #12]
 8013690:	f004 fbf5 	bl	8017e7e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013694:	68f8      	ldr	r0, [r7, #12]
 8013696:	f001 f8c5 	bl	8014824 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d03a      	beq.n	801371a <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80136a4:	68f8      	ldr	r0, [r7, #12]
 80136a6:	f7ff fe42 	bl	801332e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	2200      	movs	r2, #0
 80136ae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80136b2:	e032      	b.n	801371a <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80136b4:	7afb      	ldrb	r3, [r7, #11]
 80136b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80136ba:	b2db      	uxtb	r3, r3
 80136bc:	4619      	mov	r1, r3
 80136be:	68f8      	ldr	r0, [r7, #12]
 80136c0:	f000 f97f 	bl	80139c2 <USBD_CoreFindEP>
 80136c4:	4603      	mov	r3, r0
 80136c6:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80136c8:	7dfb      	ldrb	r3, [r7, #23]
 80136ca:	2bff      	cmp	r3, #255	; 0xff
 80136cc:	d025      	beq.n	801371a <USBD_LL_DataInStage+0x15a>
 80136ce:	7dfb      	ldrb	r3, [r7, #23]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d122      	bne.n	801371a <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80136d4:	68fb      	ldr	r3, [r7, #12]
 80136d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80136da:	b2db      	uxtb	r3, r3
 80136dc:	2b03      	cmp	r3, #3
 80136de:	d11c      	bne.n	801371a <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80136e0:	7dfa      	ldrb	r2, [r7, #23]
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	32ae      	adds	r2, #174	; 0xae
 80136e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136ea:	695b      	ldr	r3, [r3, #20]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d014      	beq.n	801371a <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80136f0:	7dfa      	ldrb	r2, [r7, #23]
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80136f8:	7dfa      	ldrb	r2, [r7, #23]
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	32ae      	adds	r2, #174	; 0xae
 80136fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013702:	695b      	ldr	r3, [r3, #20]
 8013704:	7afa      	ldrb	r2, [r7, #11]
 8013706:	4611      	mov	r1, r2
 8013708:	68f8      	ldr	r0, [r7, #12]
 801370a:	4798      	blx	r3
 801370c:	4603      	mov	r3, r0
 801370e:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8013710:	7dbb      	ldrb	r3, [r7, #22]
 8013712:	2b00      	cmp	r3, #0
 8013714:	d001      	beq.n	801371a <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013716:	7dbb      	ldrb	r3, [r7, #22]
 8013718:	e000      	b.n	801371c <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801371a:	2300      	movs	r3, #0
}
 801371c:	4618      	mov	r0, r3
 801371e:	3718      	adds	r7, #24
 8013720:	46bd      	mov	sp, r7
 8013722:	bd80      	pop	{r7, pc}

08013724 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b084      	sub	sp, #16
 8013728:	af00      	add	r7, sp, #0
 801372a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801372c:	2300      	movs	r3, #0
 801372e:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	2201      	movs	r2, #1
 8013734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	2200      	movs	r2, #0
 801373c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	2200      	movs	r2, #0
 8013744:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	2200      	movs	r2, #0
 801374a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	2200      	movs	r2, #0
 8013752:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801375c:	2b00      	cmp	r3, #0
 801375e:	d014      	beq.n	801378a <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013766:	685b      	ldr	r3, [r3, #4]
 8013768:	2b00      	cmp	r3, #0
 801376a:	d00e      	beq.n	801378a <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013772:	685b      	ldr	r3, [r3, #4]
 8013774:	687a      	ldr	r2, [r7, #4]
 8013776:	6852      	ldr	r2, [r2, #4]
 8013778:	b2d2      	uxtb	r2, r2
 801377a:	4611      	mov	r1, r2
 801377c:	6878      	ldr	r0, [r7, #4]
 801377e:	4798      	blx	r3
 8013780:	4603      	mov	r3, r0
 8013782:	2b00      	cmp	r3, #0
 8013784:	d001      	beq.n	801378a <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8013786:	2303      	movs	r3, #3
 8013788:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801378a:	2340      	movs	r3, #64	; 0x40
 801378c:	2200      	movs	r2, #0
 801378e:	2100      	movs	r1, #0
 8013790:	6878      	ldr	r0, [r7, #4]
 8013792:	f004 fb10 	bl	8017db6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	2201      	movs	r2, #1
 801379a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	2240      	movs	r2, #64	; 0x40
 80137a2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80137a6:	2340      	movs	r3, #64	; 0x40
 80137a8:	2200      	movs	r2, #0
 80137aa:	2180      	movs	r1, #128	; 0x80
 80137ac:	6878      	ldr	r0, [r7, #4]
 80137ae:	f004 fb02 	bl	8017db6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	2201      	movs	r2, #1
 80137b6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	2240      	movs	r2, #64	; 0x40
 80137bc:	621a      	str	r2, [r3, #32]

  return ret;
 80137be:	7bfb      	ldrb	r3, [r7, #15]
}
 80137c0:	4618      	mov	r0, r3
 80137c2:	3710      	adds	r7, #16
 80137c4:	46bd      	mov	sp, r7
 80137c6:	bd80      	pop	{r7, pc}

080137c8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80137c8:	b480      	push	{r7}
 80137ca:	b083      	sub	sp, #12
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	6078      	str	r0, [r7, #4]
 80137d0:	460b      	mov	r3, r1
 80137d2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	78fa      	ldrb	r2, [r7, #3]
 80137d8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80137da:	2300      	movs	r3, #0
}
 80137dc:	4618      	mov	r0, r3
 80137de:	370c      	adds	r7, #12
 80137e0:	46bd      	mov	sp, r7
 80137e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e6:	4770      	bx	lr

080137e8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80137e8:	b480      	push	{r7}
 80137ea:	b083      	sub	sp, #12
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80137f6:	b2da      	uxtb	r2, r3
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	2204      	movs	r2, #4
 8013802:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013806:	2300      	movs	r3, #0
}
 8013808:	4618      	mov	r0, r3
 801380a:	370c      	adds	r7, #12
 801380c:	46bd      	mov	sp, r7
 801380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013812:	4770      	bx	lr

08013814 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013814:	b480      	push	{r7}
 8013816:	b083      	sub	sp, #12
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013822:	b2db      	uxtb	r3, r3
 8013824:	2b04      	cmp	r3, #4
 8013826:	d106      	bne.n	8013836 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801382e:	b2da      	uxtb	r2, r3
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8013836:	2300      	movs	r3, #0
}
 8013838:	4618      	mov	r0, r3
 801383a:	370c      	adds	r7, #12
 801383c:	46bd      	mov	sp, r7
 801383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013842:	4770      	bx	lr

08013844 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b082      	sub	sp, #8
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013852:	b2db      	uxtb	r3, r3
 8013854:	2b03      	cmp	r3, #3
 8013856:	d110      	bne.n	801387a <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801385e:	2b00      	cmp	r3, #0
 8013860:	d00b      	beq.n	801387a <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013868:	69db      	ldr	r3, [r3, #28]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d005      	beq.n	801387a <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013874:	69db      	ldr	r3, [r3, #28]
 8013876:	6878      	ldr	r0, [r7, #4]
 8013878:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801387a:	2300      	movs	r3, #0
}
 801387c:	4618      	mov	r0, r3
 801387e:	3708      	adds	r7, #8
 8013880:	46bd      	mov	sp, r7
 8013882:	bd80      	pop	{r7, pc}

08013884 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8013884:	b580      	push	{r7, lr}
 8013886:	b082      	sub	sp, #8
 8013888:	af00      	add	r7, sp, #0
 801388a:	6078      	str	r0, [r7, #4]
 801388c:	460b      	mov	r3, r1
 801388e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	32ae      	adds	r2, #174	; 0xae
 801389a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d101      	bne.n	80138a6 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80138a2:	2303      	movs	r3, #3
 80138a4:	e01c      	b.n	80138e0 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80138ac:	b2db      	uxtb	r3, r3
 80138ae:	2b03      	cmp	r3, #3
 80138b0:	d115      	bne.n	80138de <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	32ae      	adds	r2, #174	; 0xae
 80138bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138c0:	6a1b      	ldr	r3, [r3, #32]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d00b      	beq.n	80138de <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	32ae      	adds	r2, #174	; 0xae
 80138d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138d4:	6a1b      	ldr	r3, [r3, #32]
 80138d6:	78fa      	ldrb	r2, [r7, #3]
 80138d8:	4611      	mov	r1, r2
 80138da:	6878      	ldr	r0, [r7, #4]
 80138dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80138de:	2300      	movs	r3, #0
}
 80138e0:	4618      	mov	r0, r3
 80138e2:	3708      	adds	r7, #8
 80138e4:	46bd      	mov	sp, r7
 80138e6:	bd80      	pop	{r7, pc}

080138e8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80138e8:	b580      	push	{r7, lr}
 80138ea:	b082      	sub	sp, #8
 80138ec:	af00      	add	r7, sp, #0
 80138ee:	6078      	str	r0, [r7, #4]
 80138f0:	460b      	mov	r3, r1
 80138f2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	32ae      	adds	r2, #174	; 0xae
 80138fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d101      	bne.n	801390a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8013906:	2303      	movs	r3, #3
 8013908:	e01c      	b.n	8013944 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013910:	b2db      	uxtb	r3, r3
 8013912:	2b03      	cmp	r3, #3
 8013914:	d115      	bne.n	8013942 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	32ae      	adds	r2, #174	; 0xae
 8013920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013926:	2b00      	cmp	r3, #0
 8013928:	d00b      	beq.n	8013942 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	32ae      	adds	r2, #174	; 0xae
 8013934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801393a:	78fa      	ldrb	r2, [r7, #3]
 801393c:	4611      	mov	r1, r2
 801393e:	6878      	ldr	r0, [r7, #4]
 8013940:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013942:	2300      	movs	r3, #0
}
 8013944:	4618      	mov	r0, r3
 8013946:	3708      	adds	r7, #8
 8013948:	46bd      	mov	sp, r7
 801394a:	bd80      	pop	{r7, pc}

0801394c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801394c:	b480      	push	{r7}
 801394e:	b083      	sub	sp, #12
 8013950:	af00      	add	r7, sp, #0
 8013952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013954:	2300      	movs	r3, #0
}
 8013956:	4618      	mov	r0, r3
 8013958:	370c      	adds	r7, #12
 801395a:	46bd      	mov	sp, r7
 801395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013960:	4770      	bx	lr

08013962 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013962:	b580      	push	{r7, lr}
 8013964:	b084      	sub	sp, #16
 8013966:	af00      	add	r7, sp, #0
 8013968:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801396a:	2300      	movs	r3, #0
 801396c:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	2201      	movs	r2, #1
 8013972:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801397c:	2b00      	cmp	r3, #0
 801397e:	d00e      	beq.n	801399e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013986:	685b      	ldr	r3, [r3, #4]
 8013988:	687a      	ldr	r2, [r7, #4]
 801398a:	6852      	ldr	r2, [r2, #4]
 801398c:	b2d2      	uxtb	r2, r2
 801398e:	4611      	mov	r1, r2
 8013990:	6878      	ldr	r0, [r7, #4]
 8013992:	4798      	blx	r3
 8013994:	4603      	mov	r3, r0
 8013996:	2b00      	cmp	r3, #0
 8013998:	d001      	beq.n	801399e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801399a:	2303      	movs	r3, #3
 801399c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801399e:	7bfb      	ldrb	r3, [r7, #15]
}
 80139a0:	4618      	mov	r0, r3
 80139a2:	3710      	adds	r7, #16
 80139a4:	46bd      	mov	sp, r7
 80139a6:	bd80      	pop	{r7, pc}

080139a8 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80139a8:	b480      	push	{r7}
 80139aa:	b083      	sub	sp, #12
 80139ac:	af00      	add	r7, sp, #0
 80139ae:	6078      	str	r0, [r7, #4]
 80139b0:	460b      	mov	r3, r1
 80139b2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80139b4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80139b6:	4618      	mov	r0, r3
 80139b8:	370c      	adds	r7, #12
 80139ba:	46bd      	mov	sp, r7
 80139bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c0:	4770      	bx	lr

080139c2 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80139c2:	b480      	push	{r7}
 80139c4:	b083      	sub	sp, #12
 80139c6:	af00      	add	r7, sp, #0
 80139c8:	6078      	str	r0, [r7, #4]
 80139ca:	460b      	mov	r3, r1
 80139cc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80139ce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80139d0:	4618      	mov	r0, r3
 80139d2:	370c      	adds	r7, #12
 80139d4:	46bd      	mov	sp, r7
 80139d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139da:	4770      	bx	lr

080139dc <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	b086      	sub	sp, #24
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
 80139e4:	460b      	mov	r3, r1
 80139e6:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80139f0:	2300      	movs	r3, #0
 80139f2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	885b      	ldrh	r3, [r3, #2]
 80139f8:	b29a      	uxth	r2, r3
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	781b      	ldrb	r3, [r3, #0]
 80139fe:	b29b      	uxth	r3, r3
 8013a00:	429a      	cmp	r2, r3
 8013a02:	d920      	bls.n	8013a46 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	781b      	ldrb	r3, [r3, #0]
 8013a08:	b29b      	uxth	r3, r3
 8013a0a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8013a0c:	e013      	b.n	8013a36 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013a0e:	f107 030a 	add.w	r3, r7, #10
 8013a12:	4619      	mov	r1, r3
 8013a14:	6978      	ldr	r0, [r7, #20]
 8013a16:	f000 f81b 	bl	8013a50 <USBD_GetNextDesc>
 8013a1a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013a1c:	697b      	ldr	r3, [r7, #20]
 8013a1e:	785b      	ldrb	r3, [r3, #1]
 8013a20:	2b05      	cmp	r3, #5
 8013a22:	d108      	bne.n	8013a36 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8013a24:	697b      	ldr	r3, [r7, #20]
 8013a26:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8013a28:	693b      	ldr	r3, [r7, #16]
 8013a2a:	789b      	ldrb	r3, [r3, #2]
 8013a2c:	78fa      	ldrb	r2, [r7, #3]
 8013a2e:	429a      	cmp	r2, r3
 8013a30:	d008      	beq.n	8013a44 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8013a32:	2300      	movs	r3, #0
 8013a34:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8013a36:	68fb      	ldr	r3, [r7, #12]
 8013a38:	885b      	ldrh	r3, [r3, #2]
 8013a3a:	b29a      	uxth	r2, r3
 8013a3c:	897b      	ldrh	r3, [r7, #10]
 8013a3e:	429a      	cmp	r2, r3
 8013a40:	d8e5      	bhi.n	8013a0e <USBD_GetEpDesc+0x32>
 8013a42:	e000      	b.n	8013a46 <USBD_GetEpDesc+0x6a>
          break;
 8013a44:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8013a46:	693b      	ldr	r3, [r7, #16]
}
 8013a48:	4618      	mov	r0, r3
 8013a4a:	3718      	adds	r7, #24
 8013a4c:	46bd      	mov	sp, r7
 8013a4e:	bd80      	pop	{r7, pc}

08013a50 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8013a50:	b480      	push	{r7}
 8013a52:	b085      	sub	sp, #20
 8013a54:	af00      	add	r7, sp, #0
 8013a56:	6078      	str	r0, [r7, #4]
 8013a58:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8013a5e:	683b      	ldr	r3, [r7, #0]
 8013a60:	881a      	ldrh	r2, [r3, #0]
 8013a62:	68fb      	ldr	r3, [r7, #12]
 8013a64:	781b      	ldrb	r3, [r3, #0]
 8013a66:	b29b      	uxth	r3, r3
 8013a68:	4413      	add	r3, r2
 8013a6a:	b29a      	uxth	r2, r3
 8013a6c:	683b      	ldr	r3, [r7, #0]
 8013a6e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	781b      	ldrb	r3, [r3, #0]
 8013a74:	461a      	mov	r2, r3
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	4413      	add	r3, r2
 8013a7a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8013a7c:	68fb      	ldr	r3, [r7, #12]
}
 8013a7e:	4618      	mov	r0, r3
 8013a80:	3714      	adds	r7, #20
 8013a82:	46bd      	mov	sp, r7
 8013a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a88:	4770      	bx	lr

08013a8a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8013a8a:	b480      	push	{r7}
 8013a8c:	b087      	sub	sp, #28
 8013a8e:	af00      	add	r7, sp, #0
 8013a90:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013a96:	697b      	ldr	r3, [r7, #20]
 8013a98:	781b      	ldrb	r3, [r3, #0]
 8013a9a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8013a9c:	697b      	ldr	r3, [r7, #20]
 8013a9e:	3301      	adds	r3, #1
 8013aa0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013aa2:	697b      	ldr	r3, [r7, #20]
 8013aa4:	781b      	ldrb	r3, [r3, #0]
 8013aa6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013aa8:	8a3b      	ldrh	r3, [r7, #16]
 8013aaa:	021b      	lsls	r3, r3, #8
 8013aac:	b21a      	sxth	r2, r3
 8013aae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013ab2:	4313      	orrs	r3, r2
 8013ab4:	b21b      	sxth	r3, r3
 8013ab6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8013ab8:	89fb      	ldrh	r3, [r7, #14]
}
 8013aba:	4618      	mov	r0, r3
 8013abc:	371c      	adds	r7, #28
 8013abe:	46bd      	mov	sp, r7
 8013ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac4:	4770      	bx	lr
	...

08013ac8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b084      	sub	sp, #16
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
 8013ad0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013ad2:	2300      	movs	r3, #0
 8013ad4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013ad6:	683b      	ldr	r3, [r7, #0]
 8013ad8:	781b      	ldrb	r3, [r3, #0]
 8013ada:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013ade:	2b40      	cmp	r3, #64	; 0x40
 8013ae0:	d005      	beq.n	8013aee <USBD_StdDevReq+0x26>
 8013ae2:	2b40      	cmp	r3, #64	; 0x40
 8013ae4:	d857      	bhi.n	8013b96 <USBD_StdDevReq+0xce>
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d00f      	beq.n	8013b0a <USBD_StdDevReq+0x42>
 8013aea:	2b20      	cmp	r3, #32
 8013aec:	d153      	bne.n	8013b96 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	32ae      	adds	r2, #174	; 0xae
 8013af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013afc:	689b      	ldr	r3, [r3, #8]
 8013afe:	6839      	ldr	r1, [r7, #0]
 8013b00:	6878      	ldr	r0, [r7, #4]
 8013b02:	4798      	blx	r3
 8013b04:	4603      	mov	r3, r0
 8013b06:	73fb      	strb	r3, [r7, #15]
      break;
 8013b08:	e04a      	b.n	8013ba0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013b0a:	683b      	ldr	r3, [r7, #0]
 8013b0c:	785b      	ldrb	r3, [r3, #1]
 8013b0e:	2b09      	cmp	r3, #9
 8013b10:	d83b      	bhi.n	8013b8a <USBD_StdDevReq+0xc2>
 8013b12:	a201      	add	r2, pc, #4	; (adr r2, 8013b18 <USBD_StdDevReq+0x50>)
 8013b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b18:	08013b6d 	.word	0x08013b6d
 8013b1c:	08013b81 	.word	0x08013b81
 8013b20:	08013b8b 	.word	0x08013b8b
 8013b24:	08013b77 	.word	0x08013b77
 8013b28:	08013b8b 	.word	0x08013b8b
 8013b2c:	08013b4b 	.word	0x08013b4b
 8013b30:	08013b41 	.word	0x08013b41
 8013b34:	08013b8b 	.word	0x08013b8b
 8013b38:	08013b63 	.word	0x08013b63
 8013b3c:	08013b55 	.word	0x08013b55
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013b40:	6839      	ldr	r1, [r7, #0]
 8013b42:	6878      	ldr	r0, [r7, #4]
 8013b44:	f000 fa3c 	bl	8013fc0 <USBD_GetDescriptor>
          break;
 8013b48:	e024      	b.n	8013b94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013b4a:	6839      	ldr	r1, [r7, #0]
 8013b4c:	6878      	ldr	r0, [r7, #4]
 8013b4e:	f000 fbcb 	bl	80142e8 <USBD_SetAddress>
          break;
 8013b52:	e01f      	b.n	8013b94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8013b54:	6839      	ldr	r1, [r7, #0]
 8013b56:	6878      	ldr	r0, [r7, #4]
 8013b58:	f000 fc0a 	bl	8014370 <USBD_SetConfig>
 8013b5c:	4603      	mov	r3, r0
 8013b5e:	73fb      	strb	r3, [r7, #15]
          break;
 8013b60:	e018      	b.n	8013b94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8013b62:	6839      	ldr	r1, [r7, #0]
 8013b64:	6878      	ldr	r0, [r7, #4]
 8013b66:	f000 fcad 	bl	80144c4 <USBD_GetConfig>
          break;
 8013b6a:	e013      	b.n	8013b94 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013b6c:	6839      	ldr	r1, [r7, #0]
 8013b6e:	6878      	ldr	r0, [r7, #4]
 8013b70:	f000 fcde 	bl	8014530 <USBD_GetStatus>
          break;
 8013b74:	e00e      	b.n	8013b94 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013b76:	6839      	ldr	r1, [r7, #0]
 8013b78:	6878      	ldr	r0, [r7, #4]
 8013b7a:	f000 fd0d 	bl	8014598 <USBD_SetFeature>
          break;
 8013b7e:	e009      	b.n	8013b94 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013b80:	6839      	ldr	r1, [r7, #0]
 8013b82:	6878      	ldr	r0, [r7, #4]
 8013b84:	f000 fd31 	bl	80145ea <USBD_ClrFeature>
          break;
 8013b88:	e004      	b.n	8013b94 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8013b8a:	6839      	ldr	r1, [r7, #0]
 8013b8c:	6878      	ldr	r0, [r7, #4]
 8013b8e:	f000 fd88 	bl	80146a2 <USBD_CtlError>
          break;
 8013b92:	bf00      	nop
      }
      break;
 8013b94:	e004      	b.n	8013ba0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8013b96:	6839      	ldr	r1, [r7, #0]
 8013b98:	6878      	ldr	r0, [r7, #4]
 8013b9a:	f000 fd82 	bl	80146a2 <USBD_CtlError>
      break;
 8013b9e:	bf00      	nop
  }

  return ret;
 8013ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	3710      	adds	r7, #16
 8013ba6:	46bd      	mov	sp, r7
 8013ba8:	bd80      	pop	{r7, pc}
 8013baa:	bf00      	nop

08013bac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b084      	sub	sp, #16
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
 8013bb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013bba:	683b      	ldr	r3, [r7, #0]
 8013bbc:	781b      	ldrb	r3, [r3, #0]
 8013bbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013bc2:	2b40      	cmp	r3, #64	; 0x40
 8013bc4:	d005      	beq.n	8013bd2 <USBD_StdItfReq+0x26>
 8013bc6:	2b40      	cmp	r3, #64	; 0x40
 8013bc8:	d852      	bhi.n	8013c70 <USBD_StdItfReq+0xc4>
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d001      	beq.n	8013bd2 <USBD_StdItfReq+0x26>
 8013bce:	2b20      	cmp	r3, #32
 8013bd0:	d14e      	bne.n	8013c70 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013bd8:	b2db      	uxtb	r3, r3
 8013bda:	3b01      	subs	r3, #1
 8013bdc:	2b02      	cmp	r3, #2
 8013bde:	d840      	bhi.n	8013c62 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013be0:	683b      	ldr	r3, [r7, #0]
 8013be2:	889b      	ldrh	r3, [r3, #4]
 8013be4:	b2db      	uxtb	r3, r3
 8013be6:	2b01      	cmp	r3, #1
 8013be8:	d836      	bhi.n	8013c58 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8013bea:	683b      	ldr	r3, [r7, #0]
 8013bec:	889b      	ldrh	r3, [r3, #4]
 8013bee:	b2db      	uxtb	r3, r3
 8013bf0:	4619      	mov	r1, r3
 8013bf2:	6878      	ldr	r0, [r7, #4]
 8013bf4:	f7ff fed8 	bl	80139a8 <USBD_CoreFindIF>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013bfc:	7bbb      	ldrb	r3, [r7, #14]
 8013bfe:	2bff      	cmp	r3, #255	; 0xff
 8013c00:	d01d      	beq.n	8013c3e <USBD_StdItfReq+0x92>
 8013c02:	7bbb      	ldrb	r3, [r7, #14]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d11a      	bne.n	8013c3e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8013c08:	7bba      	ldrb	r2, [r7, #14]
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	32ae      	adds	r2, #174	; 0xae
 8013c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c12:	689b      	ldr	r3, [r3, #8]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d00f      	beq.n	8013c38 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8013c18:	7bba      	ldrb	r2, [r7, #14]
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013c20:	7bba      	ldrb	r2, [r7, #14]
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	32ae      	adds	r2, #174	; 0xae
 8013c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c2a:	689b      	ldr	r3, [r3, #8]
 8013c2c:	6839      	ldr	r1, [r7, #0]
 8013c2e:	6878      	ldr	r0, [r7, #4]
 8013c30:	4798      	blx	r3
 8013c32:	4603      	mov	r3, r0
 8013c34:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013c36:	e004      	b.n	8013c42 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8013c38:	2303      	movs	r3, #3
 8013c3a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013c3c:	e001      	b.n	8013c42 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8013c3e:	2303      	movs	r3, #3
 8013c40:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013c42:	683b      	ldr	r3, [r7, #0]
 8013c44:	88db      	ldrh	r3, [r3, #6]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d110      	bne.n	8013c6c <USBD_StdItfReq+0xc0>
 8013c4a:	7bfb      	ldrb	r3, [r7, #15]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d10d      	bne.n	8013c6c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013c50:	6878      	ldr	r0, [r7, #4]
 8013c52:	f000 fdd4 	bl	80147fe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013c56:	e009      	b.n	8013c6c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8013c58:	6839      	ldr	r1, [r7, #0]
 8013c5a:	6878      	ldr	r0, [r7, #4]
 8013c5c:	f000 fd21 	bl	80146a2 <USBD_CtlError>
          break;
 8013c60:	e004      	b.n	8013c6c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8013c62:	6839      	ldr	r1, [r7, #0]
 8013c64:	6878      	ldr	r0, [r7, #4]
 8013c66:	f000 fd1c 	bl	80146a2 <USBD_CtlError>
          break;
 8013c6a:	e000      	b.n	8013c6e <USBD_StdItfReq+0xc2>
          break;
 8013c6c:	bf00      	nop
      }
      break;
 8013c6e:	e004      	b.n	8013c7a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8013c70:	6839      	ldr	r1, [r7, #0]
 8013c72:	6878      	ldr	r0, [r7, #4]
 8013c74:	f000 fd15 	bl	80146a2 <USBD_CtlError>
      break;
 8013c78:	bf00      	nop
  }

  return ret;
 8013c7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	3710      	adds	r7, #16
 8013c80:	46bd      	mov	sp, r7
 8013c82:	bd80      	pop	{r7, pc}

08013c84 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b084      	sub	sp, #16
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	6078      	str	r0, [r7, #4]
 8013c8c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8013c8e:	2300      	movs	r3, #0
 8013c90:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8013c92:	683b      	ldr	r3, [r7, #0]
 8013c94:	889b      	ldrh	r3, [r3, #4]
 8013c96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013c98:	683b      	ldr	r3, [r7, #0]
 8013c9a:	781b      	ldrb	r3, [r3, #0]
 8013c9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013ca0:	2b40      	cmp	r3, #64	; 0x40
 8013ca2:	d007      	beq.n	8013cb4 <USBD_StdEPReq+0x30>
 8013ca4:	2b40      	cmp	r3, #64	; 0x40
 8013ca6:	f200 817f 	bhi.w	8013fa8 <USBD_StdEPReq+0x324>
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d02a      	beq.n	8013d04 <USBD_StdEPReq+0x80>
 8013cae:	2b20      	cmp	r3, #32
 8013cb0:	f040 817a 	bne.w	8013fa8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8013cb4:	7bbb      	ldrb	r3, [r7, #14]
 8013cb6:	4619      	mov	r1, r3
 8013cb8:	6878      	ldr	r0, [r7, #4]
 8013cba:	f7ff fe82 	bl	80139c2 <USBD_CoreFindEP>
 8013cbe:	4603      	mov	r3, r0
 8013cc0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013cc2:	7b7b      	ldrb	r3, [r7, #13]
 8013cc4:	2bff      	cmp	r3, #255	; 0xff
 8013cc6:	f000 8174 	beq.w	8013fb2 <USBD_StdEPReq+0x32e>
 8013cca:	7b7b      	ldrb	r3, [r7, #13]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	f040 8170 	bne.w	8013fb2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8013cd2:	7b7a      	ldrb	r2, [r7, #13]
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8013cda:	7b7a      	ldrb	r2, [r7, #13]
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	32ae      	adds	r2, #174	; 0xae
 8013ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ce4:	689b      	ldr	r3, [r3, #8]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	f000 8163 	beq.w	8013fb2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8013cec:	7b7a      	ldrb	r2, [r7, #13]
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	32ae      	adds	r2, #174	; 0xae
 8013cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013cf6:	689b      	ldr	r3, [r3, #8]
 8013cf8:	6839      	ldr	r1, [r7, #0]
 8013cfa:	6878      	ldr	r0, [r7, #4]
 8013cfc:	4798      	blx	r3
 8013cfe:	4603      	mov	r3, r0
 8013d00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8013d02:	e156      	b.n	8013fb2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013d04:	683b      	ldr	r3, [r7, #0]
 8013d06:	785b      	ldrb	r3, [r3, #1]
 8013d08:	2b03      	cmp	r3, #3
 8013d0a:	d008      	beq.n	8013d1e <USBD_StdEPReq+0x9a>
 8013d0c:	2b03      	cmp	r3, #3
 8013d0e:	f300 8145 	bgt.w	8013f9c <USBD_StdEPReq+0x318>
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	f000 809b 	beq.w	8013e4e <USBD_StdEPReq+0x1ca>
 8013d18:	2b01      	cmp	r3, #1
 8013d1a:	d03c      	beq.n	8013d96 <USBD_StdEPReq+0x112>
 8013d1c:	e13e      	b.n	8013f9c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d24:	b2db      	uxtb	r3, r3
 8013d26:	2b02      	cmp	r3, #2
 8013d28:	d002      	beq.n	8013d30 <USBD_StdEPReq+0xac>
 8013d2a:	2b03      	cmp	r3, #3
 8013d2c:	d016      	beq.n	8013d5c <USBD_StdEPReq+0xd8>
 8013d2e:	e02c      	b.n	8013d8a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013d30:	7bbb      	ldrb	r3, [r7, #14]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d00d      	beq.n	8013d52 <USBD_StdEPReq+0xce>
 8013d36:	7bbb      	ldrb	r3, [r7, #14]
 8013d38:	2b80      	cmp	r3, #128	; 0x80
 8013d3a:	d00a      	beq.n	8013d52 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013d3c:	7bbb      	ldrb	r3, [r7, #14]
 8013d3e:	4619      	mov	r1, r3
 8013d40:	6878      	ldr	r0, [r7, #4]
 8013d42:	f004 f89c 	bl	8017e7e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013d46:	2180      	movs	r1, #128	; 0x80
 8013d48:	6878      	ldr	r0, [r7, #4]
 8013d4a:	f004 f898 	bl	8017e7e <USBD_LL_StallEP>
 8013d4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013d50:	e020      	b.n	8013d94 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8013d52:	6839      	ldr	r1, [r7, #0]
 8013d54:	6878      	ldr	r0, [r7, #4]
 8013d56:	f000 fca4 	bl	80146a2 <USBD_CtlError>
              break;
 8013d5a:	e01b      	b.n	8013d94 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013d5c:	683b      	ldr	r3, [r7, #0]
 8013d5e:	885b      	ldrh	r3, [r3, #2]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d10e      	bne.n	8013d82 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013d64:	7bbb      	ldrb	r3, [r7, #14]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d00b      	beq.n	8013d82 <USBD_StdEPReq+0xfe>
 8013d6a:	7bbb      	ldrb	r3, [r7, #14]
 8013d6c:	2b80      	cmp	r3, #128	; 0x80
 8013d6e:	d008      	beq.n	8013d82 <USBD_StdEPReq+0xfe>
 8013d70:	683b      	ldr	r3, [r7, #0]
 8013d72:	88db      	ldrh	r3, [r3, #6]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d104      	bne.n	8013d82 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013d78:	7bbb      	ldrb	r3, [r7, #14]
 8013d7a:	4619      	mov	r1, r3
 8013d7c:	6878      	ldr	r0, [r7, #4]
 8013d7e:	f004 f87e 	bl	8017e7e <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8013d82:	6878      	ldr	r0, [r7, #4]
 8013d84:	f000 fd3b 	bl	80147fe <USBD_CtlSendStatus>

              break;
 8013d88:	e004      	b.n	8013d94 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8013d8a:	6839      	ldr	r1, [r7, #0]
 8013d8c:	6878      	ldr	r0, [r7, #4]
 8013d8e:	f000 fc88 	bl	80146a2 <USBD_CtlError>
              break;
 8013d92:	bf00      	nop
          }
          break;
 8013d94:	e107      	b.n	8013fa6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d9c:	b2db      	uxtb	r3, r3
 8013d9e:	2b02      	cmp	r3, #2
 8013da0:	d002      	beq.n	8013da8 <USBD_StdEPReq+0x124>
 8013da2:	2b03      	cmp	r3, #3
 8013da4:	d016      	beq.n	8013dd4 <USBD_StdEPReq+0x150>
 8013da6:	e04b      	b.n	8013e40 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013da8:	7bbb      	ldrb	r3, [r7, #14]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d00d      	beq.n	8013dca <USBD_StdEPReq+0x146>
 8013dae:	7bbb      	ldrb	r3, [r7, #14]
 8013db0:	2b80      	cmp	r3, #128	; 0x80
 8013db2:	d00a      	beq.n	8013dca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013db4:	7bbb      	ldrb	r3, [r7, #14]
 8013db6:	4619      	mov	r1, r3
 8013db8:	6878      	ldr	r0, [r7, #4]
 8013dba:	f004 f860 	bl	8017e7e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013dbe:	2180      	movs	r1, #128	; 0x80
 8013dc0:	6878      	ldr	r0, [r7, #4]
 8013dc2:	f004 f85c 	bl	8017e7e <USBD_LL_StallEP>
 8013dc6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013dc8:	e040      	b.n	8013e4c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8013dca:	6839      	ldr	r1, [r7, #0]
 8013dcc:	6878      	ldr	r0, [r7, #4]
 8013dce:	f000 fc68 	bl	80146a2 <USBD_CtlError>
              break;
 8013dd2:	e03b      	b.n	8013e4c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013dd4:	683b      	ldr	r3, [r7, #0]
 8013dd6:	885b      	ldrh	r3, [r3, #2]
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d136      	bne.n	8013e4a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013ddc:	7bbb      	ldrb	r3, [r7, #14]
 8013dde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d004      	beq.n	8013df0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013de6:	7bbb      	ldrb	r3, [r7, #14]
 8013de8:	4619      	mov	r1, r3
 8013dea:	6878      	ldr	r0, [r7, #4]
 8013dec:	f004 f866 	bl	8017ebc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013df0:	6878      	ldr	r0, [r7, #4]
 8013df2:	f000 fd04 	bl	80147fe <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8013df6:	7bbb      	ldrb	r3, [r7, #14]
 8013df8:	4619      	mov	r1, r3
 8013dfa:	6878      	ldr	r0, [r7, #4]
 8013dfc:	f7ff fde1 	bl	80139c2 <USBD_CoreFindEP>
 8013e00:	4603      	mov	r3, r0
 8013e02:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013e04:	7b7b      	ldrb	r3, [r7, #13]
 8013e06:	2bff      	cmp	r3, #255	; 0xff
 8013e08:	d01f      	beq.n	8013e4a <USBD_StdEPReq+0x1c6>
 8013e0a:	7b7b      	ldrb	r3, [r7, #13]
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d11c      	bne.n	8013e4a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8013e10:	7b7a      	ldrb	r2, [r7, #13]
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8013e18:	7b7a      	ldrb	r2, [r7, #13]
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	32ae      	adds	r2, #174	; 0xae
 8013e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e22:	689b      	ldr	r3, [r3, #8]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d010      	beq.n	8013e4a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013e28:	7b7a      	ldrb	r2, [r7, #13]
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	32ae      	adds	r2, #174	; 0xae
 8013e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013e32:	689b      	ldr	r3, [r3, #8]
 8013e34:	6839      	ldr	r1, [r7, #0]
 8013e36:	6878      	ldr	r0, [r7, #4]
 8013e38:	4798      	blx	r3
 8013e3a:	4603      	mov	r3, r0
 8013e3c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8013e3e:	e004      	b.n	8013e4a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8013e40:	6839      	ldr	r1, [r7, #0]
 8013e42:	6878      	ldr	r0, [r7, #4]
 8013e44:	f000 fc2d 	bl	80146a2 <USBD_CtlError>
              break;
 8013e48:	e000      	b.n	8013e4c <USBD_StdEPReq+0x1c8>
              break;
 8013e4a:	bf00      	nop
          }
          break;
 8013e4c:	e0ab      	b.n	8013fa6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e54:	b2db      	uxtb	r3, r3
 8013e56:	2b02      	cmp	r3, #2
 8013e58:	d002      	beq.n	8013e60 <USBD_StdEPReq+0x1dc>
 8013e5a:	2b03      	cmp	r3, #3
 8013e5c:	d032      	beq.n	8013ec4 <USBD_StdEPReq+0x240>
 8013e5e:	e097      	b.n	8013f90 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013e60:	7bbb      	ldrb	r3, [r7, #14]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d007      	beq.n	8013e76 <USBD_StdEPReq+0x1f2>
 8013e66:	7bbb      	ldrb	r3, [r7, #14]
 8013e68:	2b80      	cmp	r3, #128	; 0x80
 8013e6a:	d004      	beq.n	8013e76 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8013e6c:	6839      	ldr	r1, [r7, #0]
 8013e6e:	6878      	ldr	r0, [r7, #4]
 8013e70:	f000 fc17 	bl	80146a2 <USBD_CtlError>
                break;
 8013e74:	e091      	b.n	8013f9a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013e76:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	da0b      	bge.n	8013e96 <USBD_StdEPReq+0x212>
 8013e7e:	7bbb      	ldrb	r3, [r7, #14]
 8013e80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013e84:	4613      	mov	r3, r2
 8013e86:	009b      	lsls	r3, r3, #2
 8013e88:	4413      	add	r3, r2
 8013e8a:	009b      	lsls	r3, r3, #2
 8013e8c:	3310      	adds	r3, #16
 8013e8e:	687a      	ldr	r2, [r7, #4]
 8013e90:	4413      	add	r3, r2
 8013e92:	3304      	adds	r3, #4
 8013e94:	e00b      	b.n	8013eae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013e96:	7bbb      	ldrb	r3, [r7, #14]
 8013e98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013e9c:	4613      	mov	r3, r2
 8013e9e:	009b      	lsls	r3, r3, #2
 8013ea0:	4413      	add	r3, r2
 8013ea2:	009b      	lsls	r3, r3, #2
 8013ea4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013ea8:	687a      	ldr	r2, [r7, #4]
 8013eaa:	4413      	add	r3, r2
 8013eac:	3304      	adds	r3, #4
 8013eae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013eb0:	68bb      	ldr	r3, [r7, #8]
 8013eb2:	2200      	movs	r2, #0
 8013eb4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013eb6:	68bb      	ldr	r3, [r7, #8]
 8013eb8:	2202      	movs	r2, #2
 8013eba:	4619      	mov	r1, r3
 8013ebc:	6878      	ldr	r0, [r7, #4]
 8013ebe:	f000 fc61 	bl	8014784 <USBD_CtlSendData>
              break;
 8013ec2:	e06a      	b.n	8013f9a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013ec4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	da11      	bge.n	8013ef0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013ecc:	7bbb      	ldrb	r3, [r7, #14]
 8013ece:	f003 020f 	and.w	r2, r3, #15
 8013ed2:	6879      	ldr	r1, [r7, #4]
 8013ed4:	4613      	mov	r3, r2
 8013ed6:	009b      	lsls	r3, r3, #2
 8013ed8:	4413      	add	r3, r2
 8013eda:	009b      	lsls	r3, r3, #2
 8013edc:	440b      	add	r3, r1
 8013ede:	3324      	adds	r3, #36	; 0x24
 8013ee0:	881b      	ldrh	r3, [r3, #0]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d117      	bne.n	8013f16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013ee6:	6839      	ldr	r1, [r7, #0]
 8013ee8:	6878      	ldr	r0, [r7, #4]
 8013eea:	f000 fbda 	bl	80146a2 <USBD_CtlError>
                  break;
 8013eee:	e054      	b.n	8013f9a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013ef0:	7bbb      	ldrb	r3, [r7, #14]
 8013ef2:	f003 020f 	and.w	r2, r3, #15
 8013ef6:	6879      	ldr	r1, [r7, #4]
 8013ef8:	4613      	mov	r3, r2
 8013efa:	009b      	lsls	r3, r3, #2
 8013efc:	4413      	add	r3, r2
 8013efe:	009b      	lsls	r3, r3, #2
 8013f00:	440b      	add	r3, r1
 8013f02:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013f06:	881b      	ldrh	r3, [r3, #0]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d104      	bne.n	8013f16 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013f0c:	6839      	ldr	r1, [r7, #0]
 8013f0e:	6878      	ldr	r0, [r7, #4]
 8013f10:	f000 fbc7 	bl	80146a2 <USBD_CtlError>
                  break;
 8013f14:	e041      	b.n	8013f9a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013f16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	da0b      	bge.n	8013f36 <USBD_StdEPReq+0x2b2>
 8013f1e:	7bbb      	ldrb	r3, [r7, #14]
 8013f20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013f24:	4613      	mov	r3, r2
 8013f26:	009b      	lsls	r3, r3, #2
 8013f28:	4413      	add	r3, r2
 8013f2a:	009b      	lsls	r3, r3, #2
 8013f2c:	3310      	adds	r3, #16
 8013f2e:	687a      	ldr	r2, [r7, #4]
 8013f30:	4413      	add	r3, r2
 8013f32:	3304      	adds	r3, #4
 8013f34:	e00b      	b.n	8013f4e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013f36:	7bbb      	ldrb	r3, [r7, #14]
 8013f38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013f3c:	4613      	mov	r3, r2
 8013f3e:	009b      	lsls	r3, r3, #2
 8013f40:	4413      	add	r3, r2
 8013f42:	009b      	lsls	r3, r3, #2
 8013f44:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8013f48:	687a      	ldr	r2, [r7, #4]
 8013f4a:	4413      	add	r3, r2
 8013f4c:	3304      	adds	r3, #4
 8013f4e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013f50:	7bbb      	ldrb	r3, [r7, #14]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d002      	beq.n	8013f5c <USBD_StdEPReq+0x2d8>
 8013f56:	7bbb      	ldrb	r3, [r7, #14]
 8013f58:	2b80      	cmp	r3, #128	; 0x80
 8013f5a:	d103      	bne.n	8013f64 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8013f5c:	68bb      	ldr	r3, [r7, #8]
 8013f5e:	2200      	movs	r2, #0
 8013f60:	601a      	str	r2, [r3, #0]
 8013f62:	e00e      	b.n	8013f82 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013f64:	7bbb      	ldrb	r3, [r7, #14]
 8013f66:	4619      	mov	r1, r3
 8013f68:	6878      	ldr	r0, [r7, #4]
 8013f6a:	f003 ffc6 	bl	8017efa <USBD_LL_IsStallEP>
 8013f6e:	4603      	mov	r3, r0
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d003      	beq.n	8013f7c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8013f74:	68bb      	ldr	r3, [r7, #8]
 8013f76:	2201      	movs	r2, #1
 8013f78:	601a      	str	r2, [r3, #0]
 8013f7a:	e002      	b.n	8013f82 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8013f7c:	68bb      	ldr	r3, [r7, #8]
 8013f7e:	2200      	movs	r2, #0
 8013f80:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013f82:	68bb      	ldr	r3, [r7, #8]
 8013f84:	2202      	movs	r2, #2
 8013f86:	4619      	mov	r1, r3
 8013f88:	6878      	ldr	r0, [r7, #4]
 8013f8a:	f000 fbfb 	bl	8014784 <USBD_CtlSendData>
              break;
 8013f8e:	e004      	b.n	8013f9a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8013f90:	6839      	ldr	r1, [r7, #0]
 8013f92:	6878      	ldr	r0, [r7, #4]
 8013f94:	f000 fb85 	bl	80146a2 <USBD_CtlError>
              break;
 8013f98:	bf00      	nop
          }
          break;
 8013f9a:	e004      	b.n	8013fa6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8013f9c:	6839      	ldr	r1, [r7, #0]
 8013f9e:	6878      	ldr	r0, [r7, #4]
 8013fa0:	f000 fb7f 	bl	80146a2 <USBD_CtlError>
          break;
 8013fa4:	bf00      	nop
      }
      break;
 8013fa6:	e005      	b.n	8013fb4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8013fa8:	6839      	ldr	r1, [r7, #0]
 8013faa:	6878      	ldr	r0, [r7, #4]
 8013fac:	f000 fb79 	bl	80146a2 <USBD_CtlError>
      break;
 8013fb0:	e000      	b.n	8013fb4 <USBD_StdEPReq+0x330>
      break;
 8013fb2:	bf00      	nop
  }

  return ret;
 8013fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	3710      	adds	r7, #16
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	bd80      	pop	{r7, pc}
	...

08013fc0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013fc0:	b580      	push	{r7, lr}
 8013fc2:	b084      	sub	sp, #16
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	6078      	str	r0, [r7, #4]
 8013fc8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013fca:	2300      	movs	r3, #0
 8013fcc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013fce:	2300      	movs	r3, #0
 8013fd0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013fd6:	683b      	ldr	r3, [r7, #0]
 8013fd8:	885b      	ldrh	r3, [r3, #2]
 8013fda:	0a1b      	lsrs	r3, r3, #8
 8013fdc:	b29b      	uxth	r3, r3
 8013fde:	3b01      	subs	r3, #1
 8013fe0:	2b0e      	cmp	r3, #14
 8013fe2:	f200 8152 	bhi.w	801428a <USBD_GetDescriptor+0x2ca>
 8013fe6:	a201      	add	r2, pc, #4	; (adr r2, 8013fec <USBD_GetDescriptor+0x2c>)
 8013fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fec:	0801405d 	.word	0x0801405d
 8013ff0:	08014075 	.word	0x08014075
 8013ff4:	080140b5 	.word	0x080140b5
 8013ff8:	0801428b 	.word	0x0801428b
 8013ffc:	0801428b 	.word	0x0801428b
 8014000:	0801422b 	.word	0x0801422b
 8014004:	08014257 	.word	0x08014257
 8014008:	0801428b 	.word	0x0801428b
 801400c:	0801428b 	.word	0x0801428b
 8014010:	0801428b 	.word	0x0801428b
 8014014:	0801428b 	.word	0x0801428b
 8014018:	0801428b 	.word	0x0801428b
 801401c:	0801428b 	.word	0x0801428b
 8014020:	0801428b 	.word	0x0801428b
 8014024:	08014029 	.word	0x08014029
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801402e:	69db      	ldr	r3, [r3, #28]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d00b      	beq.n	801404c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801403a:	69db      	ldr	r3, [r3, #28]
 801403c:	687a      	ldr	r2, [r7, #4]
 801403e:	7c12      	ldrb	r2, [r2, #16]
 8014040:	f107 0108 	add.w	r1, r7, #8
 8014044:	4610      	mov	r0, r2
 8014046:	4798      	blx	r3
 8014048:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801404a:	e126      	b.n	801429a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801404c:	6839      	ldr	r1, [r7, #0]
 801404e:	6878      	ldr	r0, [r7, #4]
 8014050:	f000 fb27 	bl	80146a2 <USBD_CtlError>
        err++;
 8014054:	7afb      	ldrb	r3, [r7, #11]
 8014056:	3301      	adds	r3, #1
 8014058:	72fb      	strb	r3, [r7, #11]
      break;
 801405a:	e11e      	b.n	801429a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	687a      	ldr	r2, [r7, #4]
 8014066:	7c12      	ldrb	r2, [r2, #16]
 8014068:	f107 0108 	add.w	r1, r7, #8
 801406c:	4610      	mov	r0, r2
 801406e:	4798      	blx	r3
 8014070:	60f8      	str	r0, [r7, #12]
      break;
 8014072:	e112      	b.n	801429a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	7c1b      	ldrb	r3, [r3, #16]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d10d      	bne.n	8014098 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014084:	f107 0208 	add.w	r2, r7, #8
 8014088:	4610      	mov	r0, r2
 801408a:	4798      	blx	r3
 801408c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801408e:	68fb      	ldr	r3, [r7, #12]
 8014090:	3301      	adds	r3, #1
 8014092:	2202      	movs	r2, #2
 8014094:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014096:	e100      	b.n	801429a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140a0:	f107 0208 	add.w	r2, r7, #8
 80140a4:	4610      	mov	r0, r2
 80140a6:	4798      	blx	r3
 80140a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	3301      	adds	r3, #1
 80140ae:	2202      	movs	r2, #2
 80140b0:	701a      	strb	r2, [r3, #0]
      break;
 80140b2:	e0f2      	b.n	801429a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80140b4:	683b      	ldr	r3, [r7, #0]
 80140b6:	885b      	ldrh	r3, [r3, #2]
 80140b8:	b2db      	uxtb	r3, r3
 80140ba:	2b05      	cmp	r3, #5
 80140bc:	f200 80ac 	bhi.w	8014218 <USBD_GetDescriptor+0x258>
 80140c0:	a201      	add	r2, pc, #4	; (adr r2, 80140c8 <USBD_GetDescriptor+0x108>)
 80140c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140c6:	bf00      	nop
 80140c8:	080140e1 	.word	0x080140e1
 80140cc:	08014115 	.word	0x08014115
 80140d0:	08014149 	.word	0x08014149
 80140d4:	0801417d 	.word	0x0801417d
 80140d8:	080141b1 	.word	0x080141b1
 80140dc:	080141e5 	.word	0x080141e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80140e6:	685b      	ldr	r3, [r3, #4]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d00b      	beq.n	8014104 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80140f2:	685b      	ldr	r3, [r3, #4]
 80140f4:	687a      	ldr	r2, [r7, #4]
 80140f6:	7c12      	ldrb	r2, [r2, #16]
 80140f8:	f107 0108 	add.w	r1, r7, #8
 80140fc:	4610      	mov	r0, r2
 80140fe:	4798      	blx	r3
 8014100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014102:	e091      	b.n	8014228 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014104:	6839      	ldr	r1, [r7, #0]
 8014106:	6878      	ldr	r0, [r7, #4]
 8014108:	f000 facb 	bl	80146a2 <USBD_CtlError>
            err++;
 801410c:	7afb      	ldrb	r3, [r7, #11]
 801410e:	3301      	adds	r3, #1
 8014110:	72fb      	strb	r3, [r7, #11]
          break;
 8014112:	e089      	b.n	8014228 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801411a:	689b      	ldr	r3, [r3, #8]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d00b      	beq.n	8014138 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014126:	689b      	ldr	r3, [r3, #8]
 8014128:	687a      	ldr	r2, [r7, #4]
 801412a:	7c12      	ldrb	r2, [r2, #16]
 801412c:	f107 0108 	add.w	r1, r7, #8
 8014130:	4610      	mov	r0, r2
 8014132:	4798      	blx	r3
 8014134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014136:	e077      	b.n	8014228 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014138:	6839      	ldr	r1, [r7, #0]
 801413a:	6878      	ldr	r0, [r7, #4]
 801413c:	f000 fab1 	bl	80146a2 <USBD_CtlError>
            err++;
 8014140:	7afb      	ldrb	r3, [r7, #11]
 8014142:	3301      	adds	r3, #1
 8014144:	72fb      	strb	r3, [r7, #11]
          break;
 8014146:	e06f      	b.n	8014228 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801414e:	68db      	ldr	r3, [r3, #12]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d00b      	beq.n	801416c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801415a:	68db      	ldr	r3, [r3, #12]
 801415c:	687a      	ldr	r2, [r7, #4]
 801415e:	7c12      	ldrb	r2, [r2, #16]
 8014160:	f107 0108 	add.w	r1, r7, #8
 8014164:	4610      	mov	r0, r2
 8014166:	4798      	blx	r3
 8014168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801416a:	e05d      	b.n	8014228 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801416c:	6839      	ldr	r1, [r7, #0]
 801416e:	6878      	ldr	r0, [r7, #4]
 8014170:	f000 fa97 	bl	80146a2 <USBD_CtlError>
            err++;
 8014174:	7afb      	ldrb	r3, [r7, #11]
 8014176:	3301      	adds	r3, #1
 8014178:	72fb      	strb	r3, [r7, #11]
          break;
 801417a:	e055      	b.n	8014228 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014182:	691b      	ldr	r3, [r3, #16]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d00b      	beq.n	80141a0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801418e:	691b      	ldr	r3, [r3, #16]
 8014190:	687a      	ldr	r2, [r7, #4]
 8014192:	7c12      	ldrb	r2, [r2, #16]
 8014194:	f107 0108 	add.w	r1, r7, #8
 8014198:	4610      	mov	r0, r2
 801419a:	4798      	blx	r3
 801419c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801419e:	e043      	b.n	8014228 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80141a0:	6839      	ldr	r1, [r7, #0]
 80141a2:	6878      	ldr	r0, [r7, #4]
 80141a4:	f000 fa7d 	bl	80146a2 <USBD_CtlError>
            err++;
 80141a8:	7afb      	ldrb	r3, [r7, #11]
 80141aa:	3301      	adds	r3, #1
 80141ac:	72fb      	strb	r3, [r7, #11]
          break;
 80141ae:	e03b      	b.n	8014228 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80141b6:	695b      	ldr	r3, [r3, #20]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d00b      	beq.n	80141d4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80141c2:	695b      	ldr	r3, [r3, #20]
 80141c4:	687a      	ldr	r2, [r7, #4]
 80141c6:	7c12      	ldrb	r2, [r2, #16]
 80141c8:	f107 0108 	add.w	r1, r7, #8
 80141cc:	4610      	mov	r0, r2
 80141ce:	4798      	blx	r3
 80141d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80141d2:	e029      	b.n	8014228 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80141d4:	6839      	ldr	r1, [r7, #0]
 80141d6:	6878      	ldr	r0, [r7, #4]
 80141d8:	f000 fa63 	bl	80146a2 <USBD_CtlError>
            err++;
 80141dc:	7afb      	ldrb	r3, [r7, #11]
 80141de:	3301      	adds	r3, #1
 80141e0:	72fb      	strb	r3, [r7, #11]
          break;
 80141e2:	e021      	b.n	8014228 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80141ea:	699b      	ldr	r3, [r3, #24]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d00b      	beq.n	8014208 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80141f6:	699b      	ldr	r3, [r3, #24]
 80141f8:	687a      	ldr	r2, [r7, #4]
 80141fa:	7c12      	ldrb	r2, [r2, #16]
 80141fc:	f107 0108 	add.w	r1, r7, #8
 8014200:	4610      	mov	r0, r2
 8014202:	4798      	blx	r3
 8014204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014206:	e00f      	b.n	8014228 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014208:	6839      	ldr	r1, [r7, #0]
 801420a:	6878      	ldr	r0, [r7, #4]
 801420c:	f000 fa49 	bl	80146a2 <USBD_CtlError>
            err++;
 8014210:	7afb      	ldrb	r3, [r7, #11]
 8014212:	3301      	adds	r3, #1
 8014214:	72fb      	strb	r3, [r7, #11]
          break;
 8014216:	e007      	b.n	8014228 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014218:	6839      	ldr	r1, [r7, #0]
 801421a:	6878      	ldr	r0, [r7, #4]
 801421c:	f000 fa41 	bl	80146a2 <USBD_CtlError>
          err++;
 8014220:	7afb      	ldrb	r3, [r7, #11]
 8014222:	3301      	adds	r3, #1
 8014224:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8014226:	bf00      	nop
      }
      break;
 8014228:	e037      	b.n	801429a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	7c1b      	ldrb	r3, [r3, #16]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d109      	bne.n	8014246 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801423a:	f107 0208 	add.w	r2, r7, #8
 801423e:	4610      	mov	r0, r2
 8014240:	4798      	blx	r3
 8014242:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014244:	e029      	b.n	801429a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014246:	6839      	ldr	r1, [r7, #0]
 8014248:	6878      	ldr	r0, [r7, #4]
 801424a:	f000 fa2a 	bl	80146a2 <USBD_CtlError>
        err++;
 801424e:	7afb      	ldrb	r3, [r7, #11]
 8014250:	3301      	adds	r3, #1
 8014252:	72fb      	strb	r3, [r7, #11]
      break;
 8014254:	e021      	b.n	801429a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	7c1b      	ldrb	r3, [r3, #16]
 801425a:	2b00      	cmp	r3, #0
 801425c:	d10d      	bne.n	801427a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014266:	f107 0208 	add.w	r2, r7, #8
 801426a:	4610      	mov	r0, r2
 801426c:	4798      	blx	r3
 801426e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	3301      	adds	r3, #1
 8014274:	2207      	movs	r2, #7
 8014276:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014278:	e00f      	b.n	801429a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801427a:	6839      	ldr	r1, [r7, #0]
 801427c:	6878      	ldr	r0, [r7, #4]
 801427e:	f000 fa10 	bl	80146a2 <USBD_CtlError>
        err++;
 8014282:	7afb      	ldrb	r3, [r7, #11]
 8014284:	3301      	adds	r3, #1
 8014286:	72fb      	strb	r3, [r7, #11]
      break;
 8014288:	e007      	b.n	801429a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801428a:	6839      	ldr	r1, [r7, #0]
 801428c:	6878      	ldr	r0, [r7, #4]
 801428e:	f000 fa08 	bl	80146a2 <USBD_CtlError>
      err++;
 8014292:	7afb      	ldrb	r3, [r7, #11]
 8014294:	3301      	adds	r3, #1
 8014296:	72fb      	strb	r3, [r7, #11]
      break;
 8014298:	bf00      	nop
  }

  if (err != 0U)
 801429a:	7afb      	ldrb	r3, [r7, #11]
 801429c:	2b00      	cmp	r3, #0
 801429e:	d11e      	bne.n	80142de <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80142a0:	683b      	ldr	r3, [r7, #0]
 80142a2:	88db      	ldrh	r3, [r3, #6]
 80142a4:	2b00      	cmp	r3, #0
 80142a6:	d016      	beq.n	80142d6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80142a8:	893b      	ldrh	r3, [r7, #8]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d00e      	beq.n	80142cc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80142ae:	683b      	ldr	r3, [r7, #0]
 80142b0:	88da      	ldrh	r2, [r3, #6]
 80142b2:	893b      	ldrh	r3, [r7, #8]
 80142b4:	4293      	cmp	r3, r2
 80142b6:	bf28      	it	cs
 80142b8:	4613      	movcs	r3, r2
 80142ba:	b29b      	uxth	r3, r3
 80142bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80142be:	893b      	ldrh	r3, [r7, #8]
 80142c0:	461a      	mov	r2, r3
 80142c2:	68f9      	ldr	r1, [r7, #12]
 80142c4:	6878      	ldr	r0, [r7, #4]
 80142c6:	f000 fa5d 	bl	8014784 <USBD_CtlSendData>
 80142ca:	e009      	b.n	80142e0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80142cc:	6839      	ldr	r1, [r7, #0]
 80142ce:	6878      	ldr	r0, [r7, #4]
 80142d0:	f000 f9e7 	bl	80146a2 <USBD_CtlError>
 80142d4:	e004      	b.n	80142e0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80142d6:	6878      	ldr	r0, [r7, #4]
 80142d8:	f000 fa91 	bl	80147fe <USBD_CtlSendStatus>
 80142dc:	e000      	b.n	80142e0 <USBD_GetDescriptor+0x320>
    return;
 80142de:	bf00      	nop
  }
}
 80142e0:	3710      	adds	r7, #16
 80142e2:	46bd      	mov	sp, r7
 80142e4:	bd80      	pop	{r7, pc}
 80142e6:	bf00      	nop

080142e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80142e8:	b580      	push	{r7, lr}
 80142ea:	b084      	sub	sp, #16
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	6078      	str	r0, [r7, #4]
 80142f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80142f2:	683b      	ldr	r3, [r7, #0]
 80142f4:	889b      	ldrh	r3, [r3, #4]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d131      	bne.n	801435e <USBD_SetAddress+0x76>
 80142fa:	683b      	ldr	r3, [r7, #0]
 80142fc:	88db      	ldrh	r3, [r3, #6]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d12d      	bne.n	801435e <USBD_SetAddress+0x76>
 8014302:	683b      	ldr	r3, [r7, #0]
 8014304:	885b      	ldrh	r3, [r3, #2]
 8014306:	2b7f      	cmp	r3, #127	; 0x7f
 8014308:	d829      	bhi.n	801435e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801430a:	683b      	ldr	r3, [r7, #0]
 801430c:	885b      	ldrh	r3, [r3, #2]
 801430e:	b2db      	uxtb	r3, r3
 8014310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014314:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801431c:	b2db      	uxtb	r3, r3
 801431e:	2b03      	cmp	r3, #3
 8014320:	d104      	bne.n	801432c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014322:	6839      	ldr	r1, [r7, #0]
 8014324:	6878      	ldr	r0, [r7, #4]
 8014326:	f000 f9bc 	bl	80146a2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801432a:	e01d      	b.n	8014368 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	7bfa      	ldrb	r2, [r7, #15]
 8014330:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014334:	7bfb      	ldrb	r3, [r7, #15]
 8014336:	4619      	mov	r1, r3
 8014338:	6878      	ldr	r0, [r7, #4]
 801433a:	f003 fe0a 	bl	8017f52 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801433e:	6878      	ldr	r0, [r7, #4]
 8014340:	f000 fa5d 	bl	80147fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014344:	7bfb      	ldrb	r3, [r7, #15]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d004      	beq.n	8014354 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	2202      	movs	r2, #2
 801434e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014352:	e009      	b.n	8014368 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	2201      	movs	r2, #1
 8014358:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801435c:	e004      	b.n	8014368 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801435e:	6839      	ldr	r1, [r7, #0]
 8014360:	6878      	ldr	r0, [r7, #4]
 8014362:	f000 f99e 	bl	80146a2 <USBD_CtlError>
  }
}
 8014366:	bf00      	nop
 8014368:	bf00      	nop
 801436a:	3710      	adds	r7, #16
 801436c:	46bd      	mov	sp, r7
 801436e:	bd80      	pop	{r7, pc}

08014370 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014370:	b580      	push	{r7, lr}
 8014372:	b084      	sub	sp, #16
 8014374:	af00      	add	r7, sp, #0
 8014376:	6078      	str	r0, [r7, #4]
 8014378:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801437a:	2300      	movs	r3, #0
 801437c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801437e:	683b      	ldr	r3, [r7, #0]
 8014380:	885b      	ldrh	r3, [r3, #2]
 8014382:	b2da      	uxtb	r2, r3
 8014384:	4b4e      	ldr	r3, [pc, #312]	; (80144c0 <USBD_SetConfig+0x150>)
 8014386:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014388:	4b4d      	ldr	r3, [pc, #308]	; (80144c0 <USBD_SetConfig+0x150>)
 801438a:	781b      	ldrb	r3, [r3, #0]
 801438c:	2b01      	cmp	r3, #1
 801438e:	d905      	bls.n	801439c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014390:	6839      	ldr	r1, [r7, #0]
 8014392:	6878      	ldr	r0, [r7, #4]
 8014394:	f000 f985 	bl	80146a2 <USBD_CtlError>
    return USBD_FAIL;
 8014398:	2303      	movs	r3, #3
 801439a:	e08c      	b.n	80144b6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80143a2:	b2db      	uxtb	r3, r3
 80143a4:	2b02      	cmp	r3, #2
 80143a6:	d002      	beq.n	80143ae <USBD_SetConfig+0x3e>
 80143a8:	2b03      	cmp	r3, #3
 80143aa:	d029      	beq.n	8014400 <USBD_SetConfig+0x90>
 80143ac:	e075      	b.n	801449a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80143ae:	4b44      	ldr	r3, [pc, #272]	; (80144c0 <USBD_SetConfig+0x150>)
 80143b0:	781b      	ldrb	r3, [r3, #0]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d020      	beq.n	80143f8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80143b6:	4b42      	ldr	r3, [pc, #264]	; (80144c0 <USBD_SetConfig+0x150>)
 80143b8:	781b      	ldrb	r3, [r3, #0]
 80143ba:	461a      	mov	r2, r3
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80143c0:	4b3f      	ldr	r3, [pc, #252]	; (80144c0 <USBD_SetConfig+0x150>)
 80143c2:	781b      	ldrb	r3, [r3, #0]
 80143c4:	4619      	mov	r1, r3
 80143c6:	6878      	ldr	r0, [r7, #4]
 80143c8:	f7fe ffbc 	bl	8013344 <USBD_SetClassConfig>
 80143cc:	4603      	mov	r3, r0
 80143ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80143d0:	7bfb      	ldrb	r3, [r7, #15]
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d008      	beq.n	80143e8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80143d6:	6839      	ldr	r1, [r7, #0]
 80143d8:	6878      	ldr	r0, [r7, #4]
 80143da:	f000 f962 	bl	80146a2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	2202      	movs	r2, #2
 80143e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80143e6:	e065      	b.n	80144b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80143e8:	6878      	ldr	r0, [r7, #4]
 80143ea:	f000 fa08 	bl	80147fe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	2203      	movs	r2, #3
 80143f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80143f6:	e05d      	b.n	80144b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80143f8:	6878      	ldr	r0, [r7, #4]
 80143fa:	f000 fa00 	bl	80147fe <USBD_CtlSendStatus>
      break;
 80143fe:	e059      	b.n	80144b4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014400:	4b2f      	ldr	r3, [pc, #188]	; (80144c0 <USBD_SetConfig+0x150>)
 8014402:	781b      	ldrb	r3, [r3, #0]
 8014404:	2b00      	cmp	r3, #0
 8014406:	d112      	bne.n	801442e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	2202      	movs	r2, #2
 801440c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8014410:	4b2b      	ldr	r3, [pc, #172]	; (80144c0 <USBD_SetConfig+0x150>)
 8014412:	781b      	ldrb	r3, [r3, #0]
 8014414:	461a      	mov	r2, r3
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801441a:	4b29      	ldr	r3, [pc, #164]	; (80144c0 <USBD_SetConfig+0x150>)
 801441c:	781b      	ldrb	r3, [r3, #0]
 801441e:	4619      	mov	r1, r3
 8014420:	6878      	ldr	r0, [r7, #4]
 8014422:	f7fe ffab 	bl	801337c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014426:	6878      	ldr	r0, [r7, #4]
 8014428:	f000 f9e9 	bl	80147fe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801442c:	e042      	b.n	80144b4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801442e:	4b24      	ldr	r3, [pc, #144]	; (80144c0 <USBD_SetConfig+0x150>)
 8014430:	781b      	ldrb	r3, [r3, #0]
 8014432:	461a      	mov	r2, r3
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	685b      	ldr	r3, [r3, #4]
 8014438:	429a      	cmp	r2, r3
 801443a:	d02a      	beq.n	8014492 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	685b      	ldr	r3, [r3, #4]
 8014440:	b2db      	uxtb	r3, r3
 8014442:	4619      	mov	r1, r3
 8014444:	6878      	ldr	r0, [r7, #4]
 8014446:	f7fe ff99 	bl	801337c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801444a:	4b1d      	ldr	r3, [pc, #116]	; (80144c0 <USBD_SetConfig+0x150>)
 801444c:	781b      	ldrb	r3, [r3, #0]
 801444e:	461a      	mov	r2, r3
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014454:	4b1a      	ldr	r3, [pc, #104]	; (80144c0 <USBD_SetConfig+0x150>)
 8014456:	781b      	ldrb	r3, [r3, #0]
 8014458:	4619      	mov	r1, r3
 801445a:	6878      	ldr	r0, [r7, #4]
 801445c:	f7fe ff72 	bl	8013344 <USBD_SetClassConfig>
 8014460:	4603      	mov	r3, r0
 8014462:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014464:	7bfb      	ldrb	r3, [r7, #15]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d00f      	beq.n	801448a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801446a:	6839      	ldr	r1, [r7, #0]
 801446c:	6878      	ldr	r0, [r7, #4]
 801446e:	f000 f918 	bl	80146a2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	685b      	ldr	r3, [r3, #4]
 8014476:	b2db      	uxtb	r3, r3
 8014478:	4619      	mov	r1, r3
 801447a:	6878      	ldr	r0, [r7, #4]
 801447c:	f7fe ff7e 	bl	801337c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	2202      	movs	r2, #2
 8014484:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014488:	e014      	b.n	80144b4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801448a:	6878      	ldr	r0, [r7, #4]
 801448c:	f000 f9b7 	bl	80147fe <USBD_CtlSendStatus>
      break;
 8014490:	e010      	b.n	80144b4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014492:	6878      	ldr	r0, [r7, #4]
 8014494:	f000 f9b3 	bl	80147fe <USBD_CtlSendStatus>
      break;
 8014498:	e00c      	b.n	80144b4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801449a:	6839      	ldr	r1, [r7, #0]
 801449c:	6878      	ldr	r0, [r7, #4]
 801449e:	f000 f900 	bl	80146a2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80144a2:	4b07      	ldr	r3, [pc, #28]	; (80144c0 <USBD_SetConfig+0x150>)
 80144a4:	781b      	ldrb	r3, [r3, #0]
 80144a6:	4619      	mov	r1, r3
 80144a8:	6878      	ldr	r0, [r7, #4]
 80144aa:	f7fe ff67 	bl	801337c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80144ae:	2303      	movs	r3, #3
 80144b0:	73fb      	strb	r3, [r7, #15]
      break;
 80144b2:	bf00      	nop
  }

  return ret;
 80144b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80144b6:	4618      	mov	r0, r3
 80144b8:	3710      	adds	r7, #16
 80144ba:	46bd      	mov	sp, r7
 80144bc:	bd80      	pop	{r7, pc}
 80144be:	bf00      	nop
 80144c0:	200026e0 	.word	0x200026e0

080144c4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b082      	sub	sp, #8
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	6078      	str	r0, [r7, #4]
 80144cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80144ce:	683b      	ldr	r3, [r7, #0]
 80144d0:	88db      	ldrh	r3, [r3, #6]
 80144d2:	2b01      	cmp	r3, #1
 80144d4:	d004      	beq.n	80144e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80144d6:	6839      	ldr	r1, [r7, #0]
 80144d8:	6878      	ldr	r0, [r7, #4]
 80144da:	f000 f8e2 	bl	80146a2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80144de:	e023      	b.n	8014528 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80144e6:	b2db      	uxtb	r3, r3
 80144e8:	2b02      	cmp	r3, #2
 80144ea:	dc02      	bgt.n	80144f2 <USBD_GetConfig+0x2e>
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	dc03      	bgt.n	80144f8 <USBD_GetConfig+0x34>
 80144f0:	e015      	b.n	801451e <USBD_GetConfig+0x5a>
 80144f2:	2b03      	cmp	r3, #3
 80144f4:	d00b      	beq.n	801450e <USBD_GetConfig+0x4a>
 80144f6:	e012      	b.n	801451e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	2200      	movs	r2, #0
 80144fc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	3308      	adds	r3, #8
 8014502:	2201      	movs	r2, #1
 8014504:	4619      	mov	r1, r3
 8014506:	6878      	ldr	r0, [r7, #4]
 8014508:	f000 f93c 	bl	8014784 <USBD_CtlSendData>
        break;
 801450c:	e00c      	b.n	8014528 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	3304      	adds	r3, #4
 8014512:	2201      	movs	r2, #1
 8014514:	4619      	mov	r1, r3
 8014516:	6878      	ldr	r0, [r7, #4]
 8014518:	f000 f934 	bl	8014784 <USBD_CtlSendData>
        break;
 801451c:	e004      	b.n	8014528 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801451e:	6839      	ldr	r1, [r7, #0]
 8014520:	6878      	ldr	r0, [r7, #4]
 8014522:	f000 f8be 	bl	80146a2 <USBD_CtlError>
        break;
 8014526:	bf00      	nop
}
 8014528:	bf00      	nop
 801452a:	3708      	adds	r7, #8
 801452c:	46bd      	mov	sp, r7
 801452e:	bd80      	pop	{r7, pc}

08014530 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b082      	sub	sp, #8
 8014534:	af00      	add	r7, sp, #0
 8014536:	6078      	str	r0, [r7, #4]
 8014538:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014540:	b2db      	uxtb	r3, r3
 8014542:	3b01      	subs	r3, #1
 8014544:	2b02      	cmp	r3, #2
 8014546:	d81e      	bhi.n	8014586 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014548:	683b      	ldr	r3, [r7, #0]
 801454a:	88db      	ldrh	r3, [r3, #6]
 801454c:	2b02      	cmp	r3, #2
 801454e:	d004      	beq.n	801455a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014550:	6839      	ldr	r1, [r7, #0]
 8014552:	6878      	ldr	r0, [r7, #4]
 8014554:	f000 f8a5 	bl	80146a2 <USBD_CtlError>
        break;
 8014558:	e01a      	b.n	8014590 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	2201      	movs	r2, #1
 801455e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014566:	2b00      	cmp	r3, #0
 8014568:	d005      	beq.n	8014576 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	68db      	ldr	r3, [r3, #12]
 801456e:	f043 0202 	orr.w	r2, r3, #2
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	330c      	adds	r3, #12
 801457a:	2202      	movs	r2, #2
 801457c:	4619      	mov	r1, r3
 801457e:	6878      	ldr	r0, [r7, #4]
 8014580:	f000 f900 	bl	8014784 <USBD_CtlSendData>
      break;
 8014584:	e004      	b.n	8014590 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014586:	6839      	ldr	r1, [r7, #0]
 8014588:	6878      	ldr	r0, [r7, #4]
 801458a:	f000 f88a 	bl	80146a2 <USBD_CtlError>
      break;
 801458e:	bf00      	nop
  }
}
 8014590:	bf00      	nop
 8014592:	3708      	adds	r7, #8
 8014594:	46bd      	mov	sp, r7
 8014596:	bd80      	pop	{r7, pc}

08014598 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014598:	b580      	push	{r7, lr}
 801459a:	b082      	sub	sp, #8
 801459c:	af00      	add	r7, sp, #0
 801459e:	6078      	str	r0, [r7, #4]
 80145a0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80145a2:	683b      	ldr	r3, [r7, #0]
 80145a4:	885b      	ldrh	r3, [r3, #2]
 80145a6:	2b01      	cmp	r3, #1
 80145a8:	d107      	bne.n	80145ba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	2201      	movs	r2, #1
 80145ae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80145b2:	6878      	ldr	r0, [r7, #4]
 80145b4:	f000 f923 	bl	80147fe <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80145b8:	e013      	b.n	80145e2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80145ba:	683b      	ldr	r3, [r7, #0]
 80145bc:	885b      	ldrh	r3, [r3, #2]
 80145be:	2b02      	cmp	r3, #2
 80145c0:	d10b      	bne.n	80145da <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80145c2:	683b      	ldr	r3, [r7, #0]
 80145c4:	889b      	ldrh	r3, [r3, #4]
 80145c6:	0a1b      	lsrs	r3, r3, #8
 80145c8:	b29b      	uxth	r3, r3
 80145ca:	b2da      	uxtb	r2, r3
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80145d2:	6878      	ldr	r0, [r7, #4]
 80145d4:	f000 f913 	bl	80147fe <USBD_CtlSendStatus>
}
 80145d8:	e003      	b.n	80145e2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80145da:	6839      	ldr	r1, [r7, #0]
 80145dc:	6878      	ldr	r0, [r7, #4]
 80145de:	f000 f860 	bl	80146a2 <USBD_CtlError>
}
 80145e2:	bf00      	nop
 80145e4:	3708      	adds	r7, #8
 80145e6:	46bd      	mov	sp, r7
 80145e8:	bd80      	pop	{r7, pc}

080145ea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80145ea:	b580      	push	{r7, lr}
 80145ec:	b082      	sub	sp, #8
 80145ee:	af00      	add	r7, sp, #0
 80145f0:	6078      	str	r0, [r7, #4]
 80145f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80145fa:	b2db      	uxtb	r3, r3
 80145fc:	3b01      	subs	r3, #1
 80145fe:	2b02      	cmp	r3, #2
 8014600:	d80b      	bhi.n	801461a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014602:	683b      	ldr	r3, [r7, #0]
 8014604:	885b      	ldrh	r3, [r3, #2]
 8014606:	2b01      	cmp	r3, #1
 8014608:	d10c      	bne.n	8014624 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	2200      	movs	r2, #0
 801460e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014612:	6878      	ldr	r0, [r7, #4]
 8014614:	f000 f8f3 	bl	80147fe <USBD_CtlSendStatus>
      }
      break;
 8014618:	e004      	b.n	8014624 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801461a:	6839      	ldr	r1, [r7, #0]
 801461c:	6878      	ldr	r0, [r7, #4]
 801461e:	f000 f840 	bl	80146a2 <USBD_CtlError>
      break;
 8014622:	e000      	b.n	8014626 <USBD_ClrFeature+0x3c>
      break;
 8014624:	bf00      	nop
  }
}
 8014626:	bf00      	nop
 8014628:	3708      	adds	r7, #8
 801462a:	46bd      	mov	sp, r7
 801462c:	bd80      	pop	{r7, pc}

0801462e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801462e:	b580      	push	{r7, lr}
 8014630:	b084      	sub	sp, #16
 8014632:	af00      	add	r7, sp, #0
 8014634:	6078      	str	r0, [r7, #4]
 8014636:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014638:	683b      	ldr	r3, [r7, #0]
 801463a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	781a      	ldrb	r2, [r3, #0]
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	3301      	adds	r3, #1
 8014648:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801464a:	68fb      	ldr	r3, [r7, #12]
 801464c:	781a      	ldrb	r2, [r3, #0]
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	3301      	adds	r3, #1
 8014656:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014658:	68f8      	ldr	r0, [r7, #12]
 801465a:	f7ff fa16 	bl	8013a8a <SWAPBYTE>
 801465e:	4603      	mov	r3, r0
 8014660:	461a      	mov	r2, r3
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	3301      	adds	r3, #1
 801466a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	3301      	adds	r3, #1
 8014670:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014672:	68f8      	ldr	r0, [r7, #12]
 8014674:	f7ff fa09 	bl	8013a8a <SWAPBYTE>
 8014678:	4603      	mov	r3, r0
 801467a:	461a      	mov	r2, r3
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	3301      	adds	r3, #1
 8014684:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	3301      	adds	r3, #1
 801468a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801468c:	68f8      	ldr	r0, [r7, #12]
 801468e:	f7ff f9fc 	bl	8013a8a <SWAPBYTE>
 8014692:	4603      	mov	r3, r0
 8014694:	461a      	mov	r2, r3
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	80da      	strh	r2, [r3, #6]
}
 801469a:	bf00      	nop
 801469c:	3710      	adds	r7, #16
 801469e:	46bd      	mov	sp, r7
 80146a0:	bd80      	pop	{r7, pc}

080146a2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80146a2:	b580      	push	{r7, lr}
 80146a4:	b082      	sub	sp, #8
 80146a6:	af00      	add	r7, sp, #0
 80146a8:	6078      	str	r0, [r7, #4]
 80146aa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80146ac:	2180      	movs	r1, #128	; 0x80
 80146ae:	6878      	ldr	r0, [r7, #4]
 80146b0:	f003 fbe5 	bl	8017e7e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80146b4:	2100      	movs	r1, #0
 80146b6:	6878      	ldr	r0, [r7, #4]
 80146b8:	f003 fbe1 	bl	8017e7e <USBD_LL_StallEP>
}
 80146bc:	bf00      	nop
 80146be:	3708      	adds	r7, #8
 80146c0:	46bd      	mov	sp, r7
 80146c2:	bd80      	pop	{r7, pc}

080146c4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b086      	sub	sp, #24
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	60f8      	str	r0, [r7, #12]
 80146cc:	60b9      	str	r1, [r7, #8]
 80146ce:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80146d0:	2300      	movs	r3, #0
 80146d2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80146d4:	68fb      	ldr	r3, [r7, #12]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d036      	beq.n	8014748 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80146de:	6938      	ldr	r0, [r7, #16]
 80146e0:	f000 f836 	bl	8014750 <USBD_GetLen>
 80146e4:	4603      	mov	r3, r0
 80146e6:	3301      	adds	r3, #1
 80146e8:	b29b      	uxth	r3, r3
 80146ea:	005b      	lsls	r3, r3, #1
 80146ec:	b29a      	uxth	r2, r3
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80146f2:	7dfb      	ldrb	r3, [r7, #23]
 80146f4:	68ba      	ldr	r2, [r7, #8]
 80146f6:	4413      	add	r3, r2
 80146f8:	687a      	ldr	r2, [r7, #4]
 80146fa:	7812      	ldrb	r2, [r2, #0]
 80146fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80146fe:	7dfb      	ldrb	r3, [r7, #23]
 8014700:	3301      	adds	r3, #1
 8014702:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014704:	7dfb      	ldrb	r3, [r7, #23]
 8014706:	68ba      	ldr	r2, [r7, #8]
 8014708:	4413      	add	r3, r2
 801470a:	2203      	movs	r2, #3
 801470c:	701a      	strb	r2, [r3, #0]
  idx++;
 801470e:	7dfb      	ldrb	r3, [r7, #23]
 8014710:	3301      	adds	r3, #1
 8014712:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014714:	e013      	b.n	801473e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014716:	7dfb      	ldrb	r3, [r7, #23]
 8014718:	68ba      	ldr	r2, [r7, #8]
 801471a:	4413      	add	r3, r2
 801471c:	693a      	ldr	r2, [r7, #16]
 801471e:	7812      	ldrb	r2, [r2, #0]
 8014720:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014722:	693b      	ldr	r3, [r7, #16]
 8014724:	3301      	adds	r3, #1
 8014726:	613b      	str	r3, [r7, #16]
    idx++;
 8014728:	7dfb      	ldrb	r3, [r7, #23]
 801472a:	3301      	adds	r3, #1
 801472c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801472e:	7dfb      	ldrb	r3, [r7, #23]
 8014730:	68ba      	ldr	r2, [r7, #8]
 8014732:	4413      	add	r3, r2
 8014734:	2200      	movs	r2, #0
 8014736:	701a      	strb	r2, [r3, #0]
    idx++;
 8014738:	7dfb      	ldrb	r3, [r7, #23]
 801473a:	3301      	adds	r3, #1
 801473c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801473e:	693b      	ldr	r3, [r7, #16]
 8014740:	781b      	ldrb	r3, [r3, #0]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d1e7      	bne.n	8014716 <USBD_GetString+0x52>
 8014746:	e000      	b.n	801474a <USBD_GetString+0x86>
    return;
 8014748:	bf00      	nop
  }
}
 801474a:	3718      	adds	r7, #24
 801474c:	46bd      	mov	sp, r7
 801474e:	bd80      	pop	{r7, pc}

08014750 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014750:	b480      	push	{r7}
 8014752:	b085      	sub	sp, #20
 8014754:	af00      	add	r7, sp, #0
 8014756:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014758:	2300      	movs	r3, #0
 801475a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014760:	e005      	b.n	801476e <USBD_GetLen+0x1e>
  {
    len++;
 8014762:	7bfb      	ldrb	r3, [r7, #15]
 8014764:	3301      	adds	r3, #1
 8014766:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014768:	68bb      	ldr	r3, [r7, #8]
 801476a:	3301      	adds	r3, #1
 801476c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801476e:	68bb      	ldr	r3, [r7, #8]
 8014770:	781b      	ldrb	r3, [r3, #0]
 8014772:	2b00      	cmp	r3, #0
 8014774:	d1f5      	bne.n	8014762 <USBD_GetLen+0x12>
  }

  return len;
 8014776:	7bfb      	ldrb	r3, [r7, #15]
}
 8014778:	4618      	mov	r0, r3
 801477a:	3714      	adds	r7, #20
 801477c:	46bd      	mov	sp, r7
 801477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014782:	4770      	bx	lr

08014784 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014784:	b580      	push	{r7, lr}
 8014786:	b084      	sub	sp, #16
 8014788:	af00      	add	r7, sp, #0
 801478a:	60f8      	str	r0, [r7, #12]
 801478c:	60b9      	str	r1, [r7, #8]
 801478e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	2202      	movs	r2, #2
 8014794:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	687a      	ldr	r2, [r7, #4]
 801479c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	687a      	ldr	r2, [r7, #4]
 80147a2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	68ba      	ldr	r2, [r7, #8]
 80147a8:	2100      	movs	r1, #0
 80147aa:	68f8      	ldr	r0, [r7, #12]
 80147ac:	f003 fbf0 	bl	8017f90 <USBD_LL_Transmit>

  return USBD_OK;
 80147b0:	2300      	movs	r3, #0
}
 80147b2:	4618      	mov	r0, r3
 80147b4:	3710      	adds	r7, #16
 80147b6:	46bd      	mov	sp, r7
 80147b8:	bd80      	pop	{r7, pc}

080147ba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80147ba:	b580      	push	{r7, lr}
 80147bc:	b084      	sub	sp, #16
 80147be:	af00      	add	r7, sp, #0
 80147c0:	60f8      	str	r0, [r7, #12]
 80147c2:	60b9      	str	r1, [r7, #8]
 80147c4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	68ba      	ldr	r2, [r7, #8]
 80147ca:	2100      	movs	r1, #0
 80147cc:	68f8      	ldr	r0, [r7, #12]
 80147ce:	f003 fbdf 	bl	8017f90 <USBD_LL_Transmit>

  return USBD_OK;
 80147d2:	2300      	movs	r3, #0
}
 80147d4:	4618      	mov	r0, r3
 80147d6:	3710      	adds	r7, #16
 80147d8:	46bd      	mov	sp, r7
 80147da:	bd80      	pop	{r7, pc}

080147dc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	b084      	sub	sp, #16
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	60f8      	str	r0, [r7, #12]
 80147e4:	60b9      	str	r1, [r7, #8]
 80147e6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	68ba      	ldr	r2, [r7, #8]
 80147ec:	2100      	movs	r1, #0
 80147ee:	68f8      	ldr	r0, [r7, #12]
 80147f0:	f003 fbef 	bl	8017fd2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80147f4:	2300      	movs	r3, #0
}
 80147f6:	4618      	mov	r0, r3
 80147f8:	3710      	adds	r7, #16
 80147fa:	46bd      	mov	sp, r7
 80147fc:	bd80      	pop	{r7, pc}

080147fe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80147fe:	b580      	push	{r7, lr}
 8014800:	b082      	sub	sp, #8
 8014802:	af00      	add	r7, sp, #0
 8014804:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	2204      	movs	r2, #4
 801480a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801480e:	2300      	movs	r3, #0
 8014810:	2200      	movs	r2, #0
 8014812:	2100      	movs	r1, #0
 8014814:	6878      	ldr	r0, [r7, #4]
 8014816:	f003 fbbb 	bl	8017f90 <USBD_LL_Transmit>

  return USBD_OK;
 801481a:	2300      	movs	r3, #0
}
 801481c:	4618      	mov	r0, r3
 801481e:	3708      	adds	r7, #8
 8014820:	46bd      	mov	sp, r7
 8014822:	bd80      	pop	{r7, pc}

08014824 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014824:	b580      	push	{r7, lr}
 8014826:	b082      	sub	sp, #8
 8014828:	af00      	add	r7, sp, #0
 801482a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	2205      	movs	r2, #5
 8014830:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014834:	2300      	movs	r3, #0
 8014836:	2200      	movs	r2, #0
 8014838:	2100      	movs	r1, #0
 801483a:	6878      	ldr	r0, [r7, #4]
 801483c:	f003 fbc9 	bl	8017fd2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014840:	2300      	movs	r3, #0
}
 8014842:	4618      	mov	r0, r3
 8014844:	3708      	adds	r7, #8
 8014846:	46bd      	mov	sp, r7
 8014848:	bd80      	pop	{r7, pc}
	...

0801484c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 801484c:	b580      	push	{r7, lr}
 801484e:	b084      	sub	sp, #16
 8014850:	af00      	add	r7, sp, #0
 8014852:	4603      	mov	r3, r0
 8014854:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8014856:	79fb      	ldrb	r3, [r7, #7]
 8014858:	4a08      	ldr	r2, [pc, #32]	; (801487c <disk_status+0x30>)
 801485a:	009b      	lsls	r3, r3, #2
 801485c:	4413      	add	r3, r2
 801485e:	685b      	ldr	r3, [r3, #4]
 8014860:	685b      	ldr	r3, [r3, #4]
 8014862:	79fa      	ldrb	r2, [r7, #7]
 8014864:	4905      	ldr	r1, [pc, #20]	; (801487c <disk_status+0x30>)
 8014866:	440a      	add	r2, r1
 8014868:	7a12      	ldrb	r2, [r2, #8]
 801486a:	4610      	mov	r0, r2
 801486c:	4798      	blx	r3
 801486e:	4603      	mov	r3, r0
 8014870:	73fb      	strb	r3, [r7, #15]
  return stat;
 8014872:	7bfb      	ldrb	r3, [r7, #15]
}
 8014874:	4618      	mov	r0, r3
 8014876:	3710      	adds	r7, #16
 8014878:	46bd      	mov	sp, r7
 801487a:	bd80      	pop	{r7, pc}
 801487c:	200028ec 	.word	0x200028ec

08014880 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8014880:	b580      	push	{r7, lr}
 8014882:	b084      	sub	sp, #16
 8014884:	af00      	add	r7, sp, #0
 8014886:	4603      	mov	r3, r0
 8014888:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 801488a:	2300      	movs	r3, #0
 801488c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801488e:	79fb      	ldrb	r3, [r7, #7]
 8014890:	4a0d      	ldr	r2, [pc, #52]	; (80148c8 <disk_initialize+0x48>)
 8014892:	5cd3      	ldrb	r3, [r2, r3]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d111      	bne.n	80148bc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8014898:	79fb      	ldrb	r3, [r7, #7]
 801489a:	4a0b      	ldr	r2, [pc, #44]	; (80148c8 <disk_initialize+0x48>)
 801489c:	2101      	movs	r1, #1
 801489e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80148a0:	79fb      	ldrb	r3, [r7, #7]
 80148a2:	4a09      	ldr	r2, [pc, #36]	; (80148c8 <disk_initialize+0x48>)
 80148a4:	009b      	lsls	r3, r3, #2
 80148a6:	4413      	add	r3, r2
 80148a8:	685b      	ldr	r3, [r3, #4]
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	79fa      	ldrb	r2, [r7, #7]
 80148ae:	4906      	ldr	r1, [pc, #24]	; (80148c8 <disk_initialize+0x48>)
 80148b0:	440a      	add	r2, r1
 80148b2:	7a12      	ldrb	r2, [r2, #8]
 80148b4:	4610      	mov	r0, r2
 80148b6:	4798      	blx	r3
 80148b8:	4603      	mov	r3, r0
 80148ba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80148bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80148be:	4618      	mov	r0, r3
 80148c0:	3710      	adds	r7, #16
 80148c2:	46bd      	mov	sp, r7
 80148c4:	bd80      	pop	{r7, pc}
 80148c6:	bf00      	nop
 80148c8:	200028ec 	.word	0x200028ec

080148cc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80148cc:	b590      	push	{r4, r7, lr}
 80148ce:	b087      	sub	sp, #28
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	60b9      	str	r1, [r7, #8]
 80148d4:	607a      	str	r2, [r7, #4]
 80148d6:	603b      	str	r3, [r7, #0]
 80148d8:	4603      	mov	r3, r0
 80148da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80148dc:	7bfb      	ldrb	r3, [r7, #15]
 80148de:	4a0a      	ldr	r2, [pc, #40]	; (8014908 <disk_read+0x3c>)
 80148e0:	009b      	lsls	r3, r3, #2
 80148e2:	4413      	add	r3, r2
 80148e4:	685b      	ldr	r3, [r3, #4]
 80148e6:	689c      	ldr	r4, [r3, #8]
 80148e8:	7bfb      	ldrb	r3, [r7, #15]
 80148ea:	4a07      	ldr	r2, [pc, #28]	; (8014908 <disk_read+0x3c>)
 80148ec:	4413      	add	r3, r2
 80148ee:	7a18      	ldrb	r0, [r3, #8]
 80148f0:	683b      	ldr	r3, [r7, #0]
 80148f2:	687a      	ldr	r2, [r7, #4]
 80148f4:	68b9      	ldr	r1, [r7, #8]
 80148f6:	47a0      	blx	r4
 80148f8:	4603      	mov	r3, r0
 80148fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80148fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80148fe:	4618      	mov	r0, r3
 8014900:	371c      	adds	r7, #28
 8014902:	46bd      	mov	sp, r7
 8014904:	bd90      	pop	{r4, r7, pc}
 8014906:	bf00      	nop
 8014908:	200028ec 	.word	0x200028ec

0801490c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801490c:	b590      	push	{r4, r7, lr}
 801490e:	b087      	sub	sp, #28
 8014910:	af00      	add	r7, sp, #0
 8014912:	60b9      	str	r1, [r7, #8]
 8014914:	607a      	str	r2, [r7, #4]
 8014916:	603b      	str	r3, [r7, #0]
 8014918:	4603      	mov	r3, r0
 801491a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801491c:	7bfb      	ldrb	r3, [r7, #15]
 801491e:	4a0a      	ldr	r2, [pc, #40]	; (8014948 <disk_write+0x3c>)
 8014920:	009b      	lsls	r3, r3, #2
 8014922:	4413      	add	r3, r2
 8014924:	685b      	ldr	r3, [r3, #4]
 8014926:	68dc      	ldr	r4, [r3, #12]
 8014928:	7bfb      	ldrb	r3, [r7, #15]
 801492a:	4a07      	ldr	r2, [pc, #28]	; (8014948 <disk_write+0x3c>)
 801492c:	4413      	add	r3, r2
 801492e:	7a18      	ldrb	r0, [r3, #8]
 8014930:	683b      	ldr	r3, [r7, #0]
 8014932:	687a      	ldr	r2, [r7, #4]
 8014934:	68b9      	ldr	r1, [r7, #8]
 8014936:	47a0      	blx	r4
 8014938:	4603      	mov	r3, r0
 801493a:	75fb      	strb	r3, [r7, #23]
  return res;
 801493c:	7dfb      	ldrb	r3, [r7, #23]
}
 801493e:	4618      	mov	r0, r3
 8014940:	371c      	adds	r7, #28
 8014942:	46bd      	mov	sp, r7
 8014944:	bd90      	pop	{r4, r7, pc}
 8014946:	bf00      	nop
 8014948:	200028ec 	.word	0x200028ec

0801494c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b084      	sub	sp, #16
 8014950:	af00      	add	r7, sp, #0
 8014952:	4603      	mov	r3, r0
 8014954:	603a      	str	r2, [r7, #0]
 8014956:	71fb      	strb	r3, [r7, #7]
 8014958:	460b      	mov	r3, r1
 801495a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 801495c:	79fb      	ldrb	r3, [r7, #7]
 801495e:	4a09      	ldr	r2, [pc, #36]	; (8014984 <disk_ioctl+0x38>)
 8014960:	009b      	lsls	r3, r3, #2
 8014962:	4413      	add	r3, r2
 8014964:	685b      	ldr	r3, [r3, #4]
 8014966:	691b      	ldr	r3, [r3, #16]
 8014968:	79fa      	ldrb	r2, [r7, #7]
 801496a:	4906      	ldr	r1, [pc, #24]	; (8014984 <disk_ioctl+0x38>)
 801496c:	440a      	add	r2, r1
 801496e:	7a10      	ldrb	r0, [r2, #8]
 8014970:	79b9      	ldrb	r1, [r7, #6]
 8014972:	683a      	ldr	r2, [r7, #0]
 8014974:	4798      	blx	r3
 8014976:	4603      	mov	r3, r0
 8014978:	73fb      	strb	r3, [r7, #15]
  return res;
 801497a:	7bfb      	ldrb	r3, [r7, #15]
}
 801497c:	4618      	mov	r0, r3
 801497e:	3710      	adds	r7, #16
 8014980:	46bd      	mov	sp, r7
 8014982:	bd80      	pop	{r7, pc}
 8014984:	200028ec 	.word	0x200028ec

08014988 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8014988:	b480      	push	{r7}
 801498a:	b085      	sub	sp, #20
 801498c:	af00      	add	r7, sp, #0
 801498e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	3301      	adds	r3, #1
 8014994:	781b      	ldrb	r3, [r3, #0]
 8014996:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8014998:	89fb      	ldrh	r3, [r7, #14]
 801499a:	021b      	lsls	r3, r3, #8
 801499c:	b21a      	sxth	r2, r3
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	781b      	ldrb	r3, [r3, #0]
 80149a2:	b21b      	sxth	r3, r3
 80149a4:	4313      	orrs	r3, r2
 80149a6:	b21b      	sxth	r3, r3
 80149a8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80149aa:	89fb      	ldrh	r3, [r7, #14]
}
 80149ac:	4618      	mov	r0, r3
 80149ae:	3714      	adds	r7, #20
 80149b0:	46bd      	mov	sp, r7
 80149b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b6:	4770      	bx	lr

080149b8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80149b8:	b480      	push	{r7}
 80149ba:	b085      	sub	sp, #20
 80149bc:	af00      	add	r7, sp, #0
 80149be:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	3303      	adds	r3, #3
 80149c4:	781b      	ldrb	r3, [r3, #0]
 80149c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	021b      	lsls	r3, r3, #8
 80149cc:	687a      	ldr	r2, [r7, #4]
 80149ce:	3202      	adds	r2, #2
 80149d0:	7812      	ldrb	r2, [r2, #0]
 80149d2:	4313      	orrs	r3, r2
 80149d4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80149d6:	68fb      	ldr	r3, [r7, #12]
 80149d8:	021b      	lsls	r3, r3, #8
 80149da:	687a      	ldr	r2, [r7, #4]
 80149dc:	3201      	adds	r2, #1
 80149de:	7812      	ldrb	r2, [r2, #0]
 80149e0:	4313      	orrs	r3, r2
 80149e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80149e4:	68fb      	ldr	r3, [r7, #12]
 80149e6:	021b      	lsls	r3, r3, #8
 80149e8:	687a      	ldr	r2, [r7, #4]
 80149ea:	7812      	ldrb	r2, [r2, #0]
 80149ec:	4313      	orrs	r3, r2
 80149ee:	60fb      	str	r3, [r7, #12]
	return rv;
 80149f0:	68fb      	ldr	r3, [r7, #12]
}
 80149f2:	4618      	mov	r0, r3
 80149f4:	3714      	adds	r7, #20
 80149f6:	46bd      	mov	sp, r7
 80149f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149fc:	4770      	bx	lr

080149fe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80149fe:	b480      	push	{r7}
 8014a00:	b083      	sub	sp, #12
 8014a02:	af00      	add	r7, sp, #0
 8014a04:	6078      	str	r0, [r7, #4]
 8014a06:	460b      	mov	r3, r1
 8014a08:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	1c5a      	adds	r2, r3, #1
 8014a0e:	607a      	str	r2, [r7, #4]
 8014a10:	887a      	ldrh	r2, [r7, #2]
 8014a12:	b2d2      	uxtb	r2, r2
 8014a14:	701a      	strb	r2, [r3, #0]
 8014a16:	887b      	ldrh	r3, [r7, #2]
 8014a18:	0a1b      	lsrs	r3, r3, #8
 8014a1a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	1c5a      	adds	r2, r3, #1
 8014a20:	607a      	str	r2, [r7, #4]
 8014a22:	887a      	ldrh	r2, [r7, #2]
 8014a24:	b2d2      	uxtb	r2, r2
 8014a26:	701a      	strb	r2, [r3, #0]
}
 8014a28:	bf00      	nop
 8014a2a:	370c      	adds	r7, #12
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a32:	4770      	bx	lr

08014a34 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8014a34:	b480      	push	{r7}
 8014a36:	b083      	sub	sp, #12
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
 8014a3c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	1c5a      	adds	r2, r3, #1
 8014a42:	607a      	str	r2, [r7, #4]
 8014a44:	683a      	ldr	r2, [r7, #0]
 8014a46:	b2d2      	uxtb	r2, r2
 8014a48:	701a      	strb	r2, [r3, #0]
 8014a4a:	683b      	ldr	r3, [r7, #0]
 8014a4c:	0a1b      	lsrs	r3, r3, #8
 8014a4e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	1c5a      	adds	r2, r3, #1
 8014a54:	607a      	str	r2, [r7, #4]
 8014a56:	683a      	ldr	r2, [r7, #0]
 8014a58:	b2d2      	uxtb	r2, r2
 8014a5a:	701a      	strb	r2, [r3, #0]
 8014a5c:	683b      	ldr	r3, [r7, #0]
 8014a5e:	0a1b      	lsrs	r3, r3, #8
 8014a60:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	1c5a      	adds	r2, r3, #1
 8014a66:	607a      	str	r2, [r7, #4]
 8014a68:	683a      	ldr	r2, [r7, #0]
 8014a6a:	b2d2      	uxtb	r2, r2
 8014a6c:	701a      	strb	r2, [r3, #0]
 8014a6e:	683b      	ldr	r3, [r7, #0]
 8014a70:	0a1b      	lsrs	r3, r3, #8
 8014a72:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	1c5a      	adds	r2, r3, #1
 8014a78:	607a      	str	r2, [r7, #4]
 8014a7a:	683a      	ldr	r2, [r7, #0]
 8014a7c:	b2d2      	uxtb	r2, r2
 8014a7e:	701a      	strb	r2, [r3, #0]
}
 8014a80:	bf00      	nop
 8014a82:	370c      	adds	r7, #12
 8014a84:	46bd      	mov	sp, r7
 8014a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a8a:	4770      	bx	lr

08014a8c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8014a8c:	b480      	push	{r7}
 8014a8e:	b087      	sub	sp, #28
 8014a90:	af00      	add	r7, sp, #0
 8014a92:	60f8      	str	r0, [r7, #12]
 8014a94:	60b9      	str	r1, [r7, #8]
 8014a96:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8014a9c:	68bb      	ldr	r3, [r7, #8]
 8014a9e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d00d      	beq.n	8014ac2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8014aa6:	693a      	ldr	r2, [r7, #16]
 8014aa8:	1c53      	adds	r3, r2, #1
 8014aaa:	613b      	str	r3, [r7, #16]
 8014aac:	697b      	ldr	r3, [r7, #20]
 8014aae:	1c59      	adds	r1, r3, #1
 8014ab0:	6179      	str	r1, [r7, #20]
 8014ab2:	7812      	ldrb	r2, [r2, #0]
 8014ab4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	3b01      	subs	r3, #1
 8014aba:	607b      	str	r3, [r7, #4]
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d1f1      	bne.n	8014aa6 <mem_cpy+0x1a>
	}
}
 8014ac2:	bf00      	nop
 8014ac4:	371c      	adds	r7, #28
 8014ac6:	46bd      	mov	sp, r7
 8014ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014acc:	4770      	bx	lr

08014ace <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8014ace:	b480      	push	{r7}
 8014ad0:	b087      	sub	sp, #28
 8014ad2:	af00      	add	r7, sp, #0
 8014ad4:	60f8      	str	r0, [r7, #12]
 8014ad6:	60b9      	str	r1, [r7, #8]
 8014ad8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8014ada:	68fb      	ldr	r3, [r7, #12]
 8014adc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8014ade:	697b      	ldr	r3, [r7, #20]
 8014ae0:	1c5a      	adds	r2, r3, #1
 8014ae2:	617a      	str	r2, [r7, #20]
 8014ae4:	68ba      	ldr	r2, [r7, #8]
 8014ae6:	b2d2      	uxtb	r2, r2
 8014ae8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	3b01      	subs	r3, #1
 8014aee:	607b      	str	r3, [r7, #4]
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d1f3      	bne.n	8014ade <mem_set+0x10>
}
 8014af6:	bf00      	nop
 8014af8:	bf00      	nop
 8014afa:	371c      	adds	r7, #28
 8014afc:	46bd      	mov	sp, r7
 8014afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b02:	4770      	bx	lr

08014b04 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8014b04:	b480      	push	{r7}
 8014b06:	b089      	sub	sp, #36	; 0x24
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	60f8      	str	r0, [r7, #12]
 8014b0c:	60b9      	str	r1, [r7, #8]
 8014b0e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	61fb      	str	r3, [r7, #28]
 8014b14:	68bb      	ldr	r3, [r7, #8]
 8014b16:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8014b18:	2300      	movs	r3, #0
 8014b1a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8014b1c:	69fb      	ldr	r3, [r7, #28]
 8014b1e:	1c5a      	adds	r2, r3, #1
 8014b20:	61fa      	str	r2, [r7, #28]
 8014b22:	781b      	ldrb	r3, [r3, #0]
 8014b24:	4619      	mov	r1, r3
 8014b26:	69bb      	ldr	r3, [r7, #24]
 8014b28:	1c5a      	adds	r2, r3, #1
 8014b2a:	61ba      	str	r2, [r7, #24]
 8014b2c:	781b      	ldrb	r3, [r3, #0]
 8014b2e:	1acb      	subs	r3, r1, r3
 8014b30:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	3b01      	subs	r3, #1
 8014b36:	607b      	str	r3, [r7, #4]
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d002      	beq.n	8014b44 <mem_cmp+0x40>
 8014b3e:	697b      	ldr	r3, [r7, #20]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d0eb      	beq.n	8014b1c <mem_cmp+0x18>

	return r;
 8014b44:	697b      	ldr	r3, [r7, #20]
}
 8014b46:	4618      	mov	r0, r3
 8014b48:	3724      	adds	r7, #36	; 0x24
 8014b4a:	46bd      	mov	sp, r7
 8014b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b50:	4770      	bx	lr

08014b52 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8014b52:	b480      	push	{r7}
 8014b54:	b083      	sub	sp, #12
 8014b56:	af00      	add	r7, sp, #0
 8014b58:	6078      	str	r0, [r7, #4]
 8014b5a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8014b5c:	e002      	b.n	8014b64 <chk_chr+0x12>
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	3301      	adds	r3, #1
 8014b62:	607b      	str	r3, [r7, #4]
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	781b      	ldrb	r3, [r3, #0]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	d005      	beq.n	8014b78 <chk_chr+0x26>
 8014b6c:	687b      	ldr	r3, [r7, #4]
 8014b6e:	781b      	ldrb	r3, [r3, #0]
 8014b70:	461a      	mov	r2, r3
 8014b72:	683b      	ldr	r3, [r7, #0]
 8014b74:	4293      	cmp	r3, r2
 8014b76:	d1f2      	bne.n	8014b5e <chk_chr+0xc>
	return *str;
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	781b      	ldrb	r3, [r3, #0]
}
 8014b7c:	4618      	mov	r0, r3
 8014b7e:	370c      	adds	r7, #12
 8014b80:	46bd      	mov	sp, r7
 8014b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b86:	4770      	bx	lr

08014b88 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b086      	sub	sp, #24
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8014b90:	2300      	movs	r3, #0
 8014b92:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	78db      	ldrb	r3, [r3, #3]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d034      	beq.n	8014c06 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ba0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8014ba2:	687b      	ldr	r3, [r7, #4]
 8014ba4:	7858      	ldrb	r0, [r3, #1]
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014bac:	2301      	movs	r3, #1
 8014bae:	697a      	ldr	r2, [r7, #20]
 8014bb0:	f7ff feac 	bl	801490c <disk_write>
 8014bb4:	4603      	mov	r3, r0
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d002      	beq.n	8014bc0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8014bba:	2301      	movs	r3, #1
 8014bbc:	73fb      	strb	r3, [r7, #15]
 8014bbe:	e022      	b.n	8014c06 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014bca:	697a      	ldr	r2, [r7, #20]
 8014bcc:	1ad2      	subs	r2, r2, r3
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	6a1b      	ldr	r3, [r3, #32]
 8014bd2:	429a      	cmp	r2, r3
 8014bd4:	d217      	bcs.n	8014c06 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	789b      	ldrb	r3, [r3, #2]
 8014bda:	613b      	str	r3, [r7, #16]
 8014bdc:	e010      	b.n	8014c00 <sync_window+0x78>
					wsect += fs->fsize;
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	6a1b      	ldr	r3, [r3, #32]
 8014be2:	697a      	ldr	r2, [r7, #20]
 8014be4:	4413      	add	r3, r2
 8014be6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	7858      	ldrb	r0, [r3, #1]
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014bf2:	2301      	movs	r3, #1
 8014bf4:	697a      	ldr	r2, [r7, #20]
 8014bf6:	f7ff fe89 	bl	801490c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8014bfa:	693b      	ldr	r3, [r7, #16]
 8014bfc:	3b01      	subs	r3, #1
 8014bfe:	613b      	str	r3, [r7, #16]
 8014c00:	693b      	ldr	r3, [r7, #16]
 8014c02:	2b01      	cmp	r3, #1
 8014c04:	d8eb      	bhi.n	8014bde <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8014c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c08:	4618      	mov	r0, r3
 8014c0a:	3718      	adds	r7, #24
 8014c0c:	46bd      	mov	sp, r7
 8014c0e:	bd80      	pop	{r7, pc}

08014c10 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8014c10:	b580      	push	{r7, lr}
 8014c12:	b084      	sub	sp, #16
 8014c14:	af00      	add	r7, sp, #0
 8014c16:	6078      	str	r0, [r7, #4]
 8014c18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014c22:	683a      	ldr	r2, [r7, #0]
 8014c24:	429a      	cmp	r2, r3
 8014c26:	d01b      	beq.n	8014c60 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8014c28:	6878      	ldr	r0, [r7, #4]
 8014c2a:	f7ff ffad 	bl	8014b88 <sync_window>
 8014c2e:	4603      	mov	r3, r0
 8014c30:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8014c32:	7bfb      	ldrb	r3, [r7, #15]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d113      	bne.n	8014c60 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	7858      	ldrb	r0, [r3, #1]
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014c42:	2301      	movs	r3, #1
 8014c44:	683a      	ldr	r2, [r7, #0]
 8014c46:	f7ff fe41 	bl	80148cc <disk_read>
 8014c4a:	4603      	mov	r3, r0
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d004      	beq.n	8014c5a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8014c50:	f04f 33ff 	mov.w	r3, #4294967295
 8014c54:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8014c56:	2301      	movs	r3, #1
 8014c58:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	683a      	ldr	r2, [r7, #0]
 8014c5e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8014c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c62:	4618      	mov	r0, r3
 8014c64:	3710      	adds	r7, #16
 8014c66:	46bd      	mov	sp, r7
 8014c68:	bd80      	pop	{r7, pc}
	...

08014c6c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b084      	sub	sp, #16
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8014c74:	6878      	ldr	r0, [r7, #4]
 8014c76:	f7ff ff87 	bl	8014b88 <sync_window>
 8014c7a:	4603      	mov	r3, r0
 8014c7c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8014c7e:	7bfb      	ldrb	r3, [r7, #15]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d159      	bne.n	8014d38 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	781b      	ldrb	r3, [r3, #0]
 8014c88:	2b03      	cmp	r3, #3
 8014c8a:	d149      	bne.n	8014d20 <sync_fs+0xb4>
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	791b      	ldrb	r3, [r3, #4]
 8014c90:	2b01      	cmp	r3, #1
 8014c92:	d145      	bne.n	8014d20 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	899b      	ldrh	r3, [r3, #12]
 8014c9e:	461a      	mov	r2, r3
 8014ca0:	2100      	movs	r1, #0
 8014ca2:	f7ff ff14 	bl	8014ace <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8014ca6:	687b      	ldr	r3, [r7, #4]
 8014ca8:	3338      	adds	r3, #56	; 0x38
 8014caa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014cae:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	f7ff fea3 	bl	80149fe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	3338      	adds	r3, #56	; 0x38
 8014cbc:	4921      	ldr	r1, [pc, #132]	; (8014d44 <sync_fs+0xd8>)
 8014cbe:	4618      	mov	r0, r3
 8014cc0:	f7ff feb8 	bl	8014a34 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	3338      	adds	r3, #56	; 0x38
 8014cc8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014ccc:	491e      	ldr	r1, [pc, #120]	; (8014d48 <sync_fs+0xdc>)
 8014cce:	4618      	mov	r0, r3
 8014cd0:	f7ff feb0 	bl	8014a34 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	3338      	adds	r3, #56	; 0x38
 8014cd8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	699b      	ldr	r3, [r3, #24]
 8014ce0:	4619      	mov	r1, r3
 8014ce2:	4610      	mov	r0, r2
 8014ce4:	f7ff fea6 	bl	8014a34 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	3338      	adds	r3, #56	; 0x38
 8014cec:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	695b      	ldr	r3, [r3, #20]
 8014cf4:	4619      	mov	r1, r3
 8014cf6:	4610      	mov	r0, r2
 8014cf8:	f7ff fe9c 	bl	8014a34 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d00:	1c5a      	adds	r2, r3, #1
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	7858      	ldrb	r0, [r3, #1]
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014d14:	2301      	movs	r3, #1
 8014d16:	f7ff fdf9 	bl	801490c <disk_write>
			fs->fsi_flag = 0;
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	785b      	ldrb	r3, [r3, #1]
 8014d24:	2200      	movs	r2, #0
 8014d26:	2100      	movs	r1, #0
 8014d28:	4618      	mov	r0, r3
 8014d2a:	f7ff fe0f 	bl	801494c <disk_ioctl>
 8014d2e:	4603      	mov	r3, r0
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d001      	beq.n	8014d38 <sync_fs+0xcc>
 8014d34:	2301      	movs	r3, #1
 8014d36:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8014d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	3710      	adds	r7, #16
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	bd80      	pop	{r7, pc}
 8014d42:	bf00      	nop
 8014d44:	41615252 	.word	0x41615252
 8014d48:	61417272 	.word	0x61417272

08014d4c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8014d4c:	b480      	push	{r7}
 8014d4e:	b083      	sub	sp, #12
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	6078      	str	r0, [r7, #4]
 8014d54:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8014d56:	683b      	ldr	r3, [r7, #0]
 8014d58:	3b02      	subs	r3, #2
 8014d5a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	69db      	ldr	r3, [r3, #28]
 8014d60:	3b02      	subs	r3, #2
 8014d62:	683a      	ldr	r2, [r7, #0]
 8014d64:	429a      	cmp	r2, r3
 8014d66:	d301      	bcc.n	8014d6c <clust2sect+0x20>
 8014d68:	2300      	movs	r3, #0
 8014d6a:	e008      	b.n	8014d7e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	895b      	ldrh	r3, [r3, #10]
 8014d70:	461a      	mov	r2, r3
 8014d72:	683b      	ldr	r3, [r7, #0]
 8014d74:	fb03 f202 	mul.w	r2, r3, r2
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d7c:	4413      	add	r3, r2
}
 8014d7e:	4618      	mov	r0, r3
 8014d80:	370c      	adds	r7, #12
 8014d82:	46bd      	mov	sp, r7
 8014d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d88:	4770      	bx	lr

08014d8a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8014d8a:	b580      	push	{r7, lr}
 8014d8c:	b086      	sub	sp, #24
 8014d8e:	af00      	add	r7, sp, #0
 8014d90:	6078      	str	r0, [r7, #4]
 8014d92:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8014d9a:	683b      	ldr	r3, [r7, #0]
 8014d9c:	2b01      	cmp	r3, #1
 8014d9e:	d904      	bls.n	8014daa <get_fat+0x20>
 8014da0:	693b      	ldr	r3, [r7, #16]
 8014da2:	69db      	ldr	r3, [r3, #28]
 8014da4:	683a      	ldr	r2, [r7, #0]
 8014da6:	429a      	cmp	r2, r3
 8014da8:	d302      	bcc.n	8014db0 <get_fat+0x26>
		val = 1;	/* Internal error */
 8014daa:	2301      	movs	r3, #1
 8014dac:	617b      	str	r3, [r7, #20]
 8014dae:	e0bb      	b.n	8014f28 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8014db0:	f04f 33ff 	mov.w	r3, #4294967295
 8014db4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8014db6:	693b      	ldr	r3, [r7, #16]
 8014db8:	781b      	ldrb	r3, [r3, #0]
 8014dba:	2b03      	cmp	r3, #3
 8014dbc:	f000 8083 	beq.w	8014ec6 <get_fat+0x13c>
 8014dc0:	2b03      	cmp	r3, #3
 8014dc2:	f300 80a7 	bgt.w	8014f14 <get_fat+0x18a>
 8014dc6:	2b01      	cmp	r3, #1
 8014dc8:	d002      	beq.n	8014dd0 <get_fat+0x46>
 8014dca:	2b02      	cmp	r3, #2
 8014dcc:	d056      	beq.n	8014e7c <get_fat+0xf2>
 8014dce:	e0a1      	b.n	8014f14 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8014dd0:	683b      	ldr	r3, [r7, #0]
 8014dd2:	60fb      	str	r3, [r7, #12]
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	085b      	lsrs	r3, r3, #1
 8014dd8:	68fa      	ldr	r2, [r7, #12]
 8014dda:	4413      	add	r3, r2
 8014ddc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014dde:	693b      	ldr	r3, [r7, #16]
 8014de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014de2:	693b      	ldr	r3, [r7, #16]
 8014de4:	899b      	ldrh	r3, [r3, #12]
 8014de6:	4619      	mov	r1, r3
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8014dee:	4413      	add	r3, r2
 8014df0:	4619      	mov	r1, r3
 8014df2:	6938      	ldr	r0, [r7, #16]
 8014df4:	f7ff ff0c 	bl	8014c10 <move_window>
 8014df8:	4603      	mov	r3, r0
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	f040 808d 	bne.w	8014f1a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	1c5a      	adds	r2, r3, #1
 8014e04:	60fa      	str	r2, [r7, #12]
 8014e06:	693a      	ldr	r2, [r7, #16]
 8014e08:	8992      	ldrh	r2, [r2, #12]
 8014e0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8014e0e:	fb01 f202 	mul.w	r2, r1, r2
 8014e12:	1a9b      	subs	r3, r3, r2
 8014e14:	693a      	ldr	r2, [r7, #16]
 8014e16:	4413      	add	r3, r2
 8014e18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014e1c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014e1e:	693b      	ldr	r3, [r7, #16]
 8014e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014e22:	693b      	ldr	r3, [r7, #16]
 8014e24:	899b      	ldrh	r3, [r3, #12]
 8014e26:	4619      	mov	r1, r3
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8014e2e:	4413      	add	r3, r2
 8014e30:	4619      	mov	r1, r3
 8014e32:	6938      	ldr	r0, [r7, #16]
 8014e34:	f7ff feec 	bl	8014c10 <move_window>
 8014e38:	4603      	mov	r3, r0
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d16f      	bne.n	8014f1e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8014e3e:	693b      	ldr	r3, [r7, #16]
 8014e40:	899b      	ldrh	r3, [r3, #12]
 8014e42:	461a      	mov	r2, r3
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	fbb3 f1f2 	udiv	r1, r3, r2
 8014e4a:	fb01 f202 	mul.w	r2, r1, r2
 8014e4e:	1a9b      	subs	r3, r3, r2
 8014e50:	693a      	ldr	r2, [r7, #16]
 8014e52:	4413      	add	r3, r2
 8014e54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014e58:	021b      	lsls	r3, r3, #8
 8014e5a:	461a      	mov	r2, r3
 8014e5c:	68bb      	ldr	r3, [r7, #8]
 8014e5e:	4313      	orrs	r3, r2
 8014e60:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8014e62:	683b      	ldr	r3, [r7, #0]
 8014e64:	f003 0301 	and.w	r3, r3, #1
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d002      	beq.n	8014e72 <get_fat+0xe8>
 8014e6c:	68bb      	ldr	r3, [r7, #8]
 8014e6e:	091b      	lsrs	r3, r3, #4
 8014e70:	e002      	b.n	8014e78 <get_fat+0xee>
 8014e72:	68bb      	ldr	r3, [r7, #8]
 8014e74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8014e78:	617b      	str	r3, [r7, #20]
			break;
 8014e7a:	e055      	b.n	8014f28 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014e7c:	693b      	ldr	r3, [r7, #16]
 8014e7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014e80:	693b      	ldr	r3, [r7, #16]
 8014e82:	899b      	ldrh	r3, [r3, #12]
 8014e84:	085b      	lsrs	r3, r3, #1
 8014e86:	b29b      	uxth	r3, r3
 8014e88:	4619      	mov	r1, r3
 8014e8a:	683b      	ldr	r3, [r7, #0]
 8014e8c:	fbb3 f3f1 	udiv	r3, r3, r1
 8014e90:	4413      	add	r3, r2
 8014e92:	4619      	mov	r1, r3
 8014e94:	6938      	ldr	r0, [r7, #16]
 8014e96:	f7ff febb 	bl	8014c10 <move_window>
 8014e9a:	4603      	mov	r3, r0
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d140      	bne.n	8014f22 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8014ea0:	693b      	ldr	r3, [r7, #16]
 8014ea2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014ea6:	683b      	ldr	r3, [r7, #0]
 8014ea8:	005b      	lsls	r3, r3, #1
 8014eaa:	693a      	ldr	r2, [r7, #16]
 8014eac:	8992      	ldrh	r2, [r2, #12]
 8014eae:	fbb3 f0f2 	udiv	r0, r3, r2
 8014eb2:	fb00 f202 	mul.w	r2, r0, r2
 8014eb6:	1a9b      	subs	r3, r3, r2
 8014eb8:	440b      	add	r3, r1
 8014eba:	4618      	mov	r0, r3
 8014ebc:	f7ff fd64 	bl	8014988 <ld_word>
 8014ec0:	4603      	mov	r3, r0
 8014ec2:	617b      	str	r3, [r7, #20]
			break;
 8014ec4:	e030      	b.n	8014f28 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014ec6:	693b      	ldr	r3, [r7, #16]
 8014ec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014eca:	693b      	ldr	r3, [r7, #16]
 8014ecc:	899b      	ldrh	r3, [r3, #12]
 8014ece:	089b      	lsrs	r3, r3, #2
 8014ed0:	b29b      	uxth	r3, r3
 8014ed2:	4619      	mov	r1, r3
 8014ed4:	683b      	ldr	r3, [r7, #0]
 8014ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8014eda:	4413      	add	r3, r2
 8014edc:	4619      	mov	r1, r3
 8014ede:	6938      	ldr	r0, [r7, #16]
 8014ee0:	f7ff fe96 	bl	8014c10 <move_window>
 8014ee4:	4603      	mov	r3, r0
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d11d      	bne.n	8014f26 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8014eea:	693b      	ldr	r3, [r7, #16]
 8014eec:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014ef0:	683b      	ldr	r3, [r7, #0]
 8014ef2:	009b      	lsls	r3, r3, #2
 8014ef4:	693a      	ldr	r2, [r7, #16]
 8014ef6:	8992      	ldrh	r2, [r2, #12]
 8014ef8:	fbb3 f0f2 	udiv	r0, r3, r2
 8014efc:	fb00 f202 	mul.w	r2, r0, r2
 8014f00:	1a9b      	subs	r3, r3, r2
 8014f02:	440b      	add	r3, r1
 8014f04:	4618      	mov	r0, r3
 8014f06:	f7ff fd57 	bl	80149b8 <ld_dword>
 8014f0a:	4603      	mov	r3, r0
 8014f0c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8014f10:	617b      	str	r3, [r7, #20]
			break;
 8014f12:	e009      	b.n	8014f28 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8014f14:	2301      	movs	r3, #1
 8014f16:	617b      	str	r3, [r7, #20]
 8014f18:	e006      	b.n	8014f28 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014f1a:	bf00      	nop
 8014f1c:	e004      	b.n	8014f28 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8014f1e:	bf00      	nop
 8014f20:	e002      	b.n	8014f28 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8014f22:	bf00      	nop
 8014f24:	e000      	b.n	8014f28 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8014f26:	bf00      	nop
		}
	}

	return val;
 8014f28:	697b      	ldr	r3, [r7, #20]
}
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	3718      	adds	r7, #24
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	bd80      	pop	{r7, pc}

08014f32 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8014f32:	b590      	push	{r4, r7, lr}
 8014f34:	b089      	sub	sp, #36	; 0x24
 8014f36:	af00      	add	r7, sp, #0
 8014f38:	60f8      	str	r0, [r7, #12]
 8014f3a:	60b9      	str	r1, [r7, #8]
 8014f3c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8014f3e:	2302      	movs	r3, #2
 8014f40:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8014f42:	68bb      	ldr	r3, [r7, #8]
 8014f44:	2b01      	cmp	r3, #1
 8014f46:	f240 8102 	bls.w	801514e <put_fat+0x21c>
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	69db      	ldr	r3, [r3, #28]
 8014f4e:	68ba      	ldr	r2, [r7, #8]
 8014f50:	429a      	cmp	r2, r3
 8014f52:	f080 80fc 	bcs.w	801514e <put_fat+0x21c>
		switch (fs->fs_type) {
 8014f56:	68fb      	ldr	r3, [r7, #12]
 8014f58:	781b      	ldrb	r3, [r3, #0]
 8014f5a:	2b03      	cmp	r3, #3
 8014f5c:	f000 80b6 	beq.w	80150cc <put_fat+0x19a>
 8014f60:	2b03      	cmp	r3, #3
 8014f62:	f300 80fd 	bgt.w	8015160 <put_fat+0x22e>
 8014f66:	2b01      	cmp	r3, #1
 8014f68:	d003      	beq.n	8014f72 <put_fat+0x40>
 8014f6a:	2b02      	cmp	r3, #2
 8014f6c:	f000 8083 	beq.w	8015076 <put_fat+0x144>
 8014f70:	e0f6      	b.n	8015160 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8014f72:	68bb      	ldr	r3, [r7, #8]
 8014f74:	61bb      	str	r3, [r7, #24]
 8014f76:	69bb      	ldr	r3, [r7, #24]
 8014f78:	085b      	lsrs	r3, r3, #1
 8014f7a:	69ba      	ldr	r2, [r7, #24]
 8014f7c:	4413      	add	r3, r2
 8014f7e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	899b      	ldrh	r3, [r3, #12]
 8014f88:	4619      	mov	r1, r3
 8014f8a:	69bb      	ldr	r3, [r7, #24]
 8014f8c:	fbb3 f3f1 	udiv	r3, r3, r1
 8014f90:	4413      	add	r3, r2
 8014f92:	4619      	mov	r1, r3
 8014f94:	68f8      	ldr	r0, [r7, #12]
 8014f96:	f7ff fe3b 	bl	8014c10 <move_window>
 8014f9a:	4603      	mov	r3, r0
 8014f9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8014f9e:	7ffb      	ldrb	r3, [r7, #31]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	f040 80d6 	bne.w	8015152 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014fac:	69bb      	ldr	r3, [r7, #24]
 8014fae:	1c5a      	adds	r2, r3, #1
 8014fb0:	61ba      	str	r2, [r7, #24]
 8014fb2:	68fa      	ldr	r2, [r7, #12]
 8014fb4:	8992      	ldrh	r2, [r2, #12]
 8014fb6:	fbb3 f0f2 	udiv	r0, r3, r2
 8014fba:	fb00 f202 	mul.w	r2, r0, r2
 8014fbe:	1a9b      	subs	r3, r3, r2
 8014fc0:	440b      	add	r3, r1
 8014fc2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8014fc4:	68bb      	ldr	r3, [r7, #8]
 8014fc6:	f003 0301 	and.w	r3, r3, #1
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	d00d      	beq.n	8014fea <put_fat+0xb8>
 8014fce:	697b      	ldr	r3, [r7, #20]
 8014fd0:	781b      	ldrb	r3, [r3, #0]
 8014fd2:	b25b      	sxtb	r3, r3
 8014fd4:	f003 030f 	and.w	r3, r3, #15
 8014fd8:	b25a      	sxtb	r2, r3
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	b2db      	uxtb	r3, r3
 8014fde:	011b      	lsls	r3, r3, #4
 8014fe0:	b25b      	sxtb	r3, r3
 8014fe2:	4313      	orrs	r3, r2
 8014fe4:	b25b      	sxtb	r3, r3
 8014fe6:	b2db      	uxtb	r3, r3
 8014fe8:	e001      	b.n	8014fee <put_fat+0xbc>
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	b2db      	uxtb	r3, r3
 8014fee:	697a      	ldr	r2, [r7, #20]
 8014ff0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	2201      	movs	r2, #1
 8014ff6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014ffc:	68fb      	ldr	r3, [r7, #12]
 8014ffe:	899b      	ldrh	r3, [r3, #12]
 8015000:	4619      	mov	r1, r3
 8015002:	69bb      	ldr	r3, [r7, #24]
 8015004:	fbb3 f3f1 	udiv	r3, r3, r1
 8015008:	4413      	add	r3, r2
 801500a:	4619      	mov	r1, r3
 801500c:	68f8      	ldr	r0, [r7, #12]
 801500e:	f7ff fdff 	bl	8014c10 <move_window>
 8015012:	4603      	mov	r3, r0
 8015014:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015016:	7ffb      	ldrb	r3, [r7, #31]
 8015018:	2b00      	cmp	r3, #0
 801501a:	f040 809c 	bne.w	8015156 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 801501e:	68fb      	ldr	r3, [r7, #12]
 8015020:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	899b      	ldrh	r3, [r3, #12]
 8015028:	461a      	mov	r2, r3
 801502a:	69bb      	ldr	r3, [r7, #24]
 801502c:	fbb3 f0f2 	udiv	r0, r3, r2
 8015030:	fb00 f202 	mul.w	r2, r0, r2
 8015034:	1a9b      	subs	r3, r3, r2
 8015036:	440b      	add	r3, r1
 8015038:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801503a:	68bb      	ldr	r3, [r7, #8]
 801503c:	f003 0301 	and.w	r3, r3, #1
 8015040:	2b00      	cmp	r3, #0
 8015042:	d003      	beq.n	801504c <put_fat+0x11a>
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	091b      	lsrs	r3, r3, #4
 8015048:	b2db      	uxtb	r3, r3
 801504a:	e00e      	b.n	801506a <put_fat+0x138>
 801504c:	697b      	ldr	r3, [r7, #20]
 801504e:	781b      	ldrb	r3, [r3, #0]
 8015050:	b25b      	sxtb	r3, r3
 8015052:	f023 030f 	bic.w	r3, r3, #15
 8015056:	b25a      	sxtb	r2, r3
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	0a1b      	lsrs	r3, r3, #8
 801505c:	b25b      	sxtb	r3, r3
 801505e:	f003 030f 	and.w	r3, r3, #15
 8015062:	b25b      	sxtb	r3, r3
 8015064:	4313      	orrs	r3, r2
 8015066:	b25b      	sxtb	r3, r3
 8015068:	b2db      	uxtb	r3, r3
 801506a:	697a      	ldr	r2, [r7, #20]
 801506c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	2201      	movs	r2, #1
 8015072:	70da      	strb	r2, [r3, #3]
			break;
 8015074:	e074      	b.n	8015160 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8015076:	68fb      	ldr	r3, [r7, #12]
 8015078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	899b      	ldrh	r3, [r3, #12]
 801507e:	085b      	lsrs	r3, r3, #1
 8015080:	b29b      	uxth	r3, r3
 8015082:	4619      	mov	r1, r3
 8015084:	68bb      	ldr	r3, [r7, #8]
 8015086:	fbb3 f3f1 	udiv	r3, r3, r1
 801508a:	4413      	add	r3, r2
 801508c:	4619      	mov	r1, r3
 801508e:	68f8      	ldr	r0, [r7, #12]
 8015090:	f7ff fdbe 	bl	8014c10 <move_window>
 8015094:	4603      	mov	r3, r0
 8015096:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015098:	7ffb      	ldrb	r3, [r7, #31]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d15d      	bne.n	801515a <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80150a4:	68bb      	ldr	r3, [r7, #8]
 80150a6:	005b      	lsls	r3, r3, #1
 80150a8:	68fa      	ldr	r2, [r7, #12]
 80150aa:	8992      	ldrh	r2, [r2, #12]
 80150ac:	fbb3 f0f2 	udiv	r0, r3, r2
 80150b0:	fb00 f202 	mul.w	r2, r0, r2
 80150b4:	1a9b      	subs	r3, r3, r2
 80150b6:	440b      	add	r3, r1
 80150b8:	687a      	ldr	r2, [r7, #4]
 80150ba:	b292      	uxth	r2, r2
 80150bc:	4611      	mov	r1, r2
 80150be:	4618      	mov	r0, r3
 80150c0:	f7ff fc9d 	bl	80149fe <st_word>
			fs->wflag = 1;
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	2201      	movs	r2, #1
 80150c8:	70da      	strb	r2, [r3, #3]
			break;
 80150ca:	e049      	b.n	8015160 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80150cc:	68fb      	ldr	r3, [r7, #12]
 80150ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80150d0:	68fb      	ldr	r3, [r7, #12]
 80150d2:	899b      	ldrh	r3, [r3, #12]
 80150d4:	089b      	lsrs	r3, r3, #2
 80150d6:	b29b      	uxth	r3, r3
 80150d8:	4619      	mov	r1, r3
 80150da:	68bb      	ldr	r3, [r7, #8]
 80150dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80150e0:	4413      	add	r3, r2
 80150e2:	4619      	mov	r1, r3
 80150e4:	68f8      	ldr	r0, [r7, #12]
 80150e6:	f7ff fd93 	bl	8014c10 <move_window>
 80150ea:	4603      	mov	r3, r0
 80150ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80150ee:	7ffb      	ldrb	r3, [r7, #31]
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d134      	bne.n	801515e <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015100:	68bb      	ldr	r3, [r7, #8]
 8015102:	009b      	lsls	r3, r3, #2
 8015104:	68fa      	ldr	r2, [r7, #12]
 8015106:	8992      	ldrh	r2, [r2, #12]
 8015108:	fbb3 f0f2 	udiv	r0, r3, r2
 801510c:	fb00 f202 	mul.w	r2, r0, r2
 8015110:	1a9b      	subs	r3, r3, r2
 8015112:	440b      	add	r3, r1
 8015114:	4618      	mov	r0, r3
 8015116:	f7ff fc4f 	bl	80149b8 <ld_dword>
 801511a:	4603      	mov	r3, r0
 801511c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8015120:	4323      	orrs	r3, r4
 8015122:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801512a:	68bb      	ldr	r3, [r7, #8]
 801512c:	009b      	lsls	r3, r3, #2
 801512e:	68fa      	ldr	r2, [r7, #12]
 8015130:	8992      	ldrh	r2, [r2, #12]
 8015132:	fbb3 f0f2 	udiv	r0, r3, r2
 8015136:	fb00 f202 	mul.w	r2, r0, r2
 801513a:	1a9b      	subs	r3, r3, r2
 801513c:	440b      	add	r3, r1
 801513e:	6879      	ldr	r1, [r7, #4]
 8015140:	4618      	mov	r0, r3
 8015142:	f7ff fc77 	bl	8014a34 <st_dword>
			fs->wflag = 1;
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	2201      	movs	r2, #1
 801514a:	70da      	strb	r2, [r3, #3]
			break;
 801514c:	e008      	b.n	8015160 <put_fat+0x22e>
		}
	}
 801514e:	bf00      	nop
 8015150:	e006      	b.n	8015160 <put_fat+0x22e>
			if (res != FR_OK) break;
 8015152:	bf00      	nop
 8015154:	e004      	b.n	8015160 <put_fat+0x22e>
			if (res != FR_OK) break;
 8015156:	bf00      	nop
 8015158:	e002      	b.n	8015160 <put_fat+0x22e>
			if (res != FR_OK) break;
 801515a:	bf00      	nop
 801515c:	e000      	b.n	8015160 <put_fat+0x22e>
			if (res != FR_OK) break;
 801515e:	bf00      	nop
	return res;
 8015160:	7ffb      	ldrb	r3, [r7, #31]
}
 8015162:	4618      	mov	r0, r3
 8015164:	3724      	adds	r7, #36	; 0x24
 8015166:	46bd      	mov	sp, r7
 8015168:	bd90      	pop	{r4, r7, pc}

0801516a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801516a:	b580      	push	{r7, lr}
 801516c:	b088      	sub	sp, #32
 801516e:	af00      	add	r7, sp, #0
 8015170:	60f8      	str	r0, [r7, #12]
 8015172:	60b9      	str	r1, [r7, #8]
 8015174:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8015176:	2300      	movs	r3, #0
 8015178:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8015180:	68bb      	ldr	r3, [r7, #8]
 8015182:	2b01      	cmp	r3, #1
 8015184:	d904      	bls.n	8015190 <remove_chain+0x26>
 8015186:	69bb      	ldr	r3, [r7, #24]
 8015188:	69db      	ldr	r3, [r3, #28]
 801518a:	68ba      	ldr	r2, [r7, #8]
 801518c:	429a      	cmp	r2, r3
 801518e:	d301      	bcc.n	8015194 <remove_chain+0x2a>
 8015190:	2302      	movs	r3, #2
 8015192:	e04b      	b.n	801522c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	2b00      	cmp	r3, #0
 8015198:	d00c      	beq.n	80151b4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801519a:	f04f 32ff 	mov.w	r2, #4294967295
 801519e:	6879      	ldr	r1, [r7, #4]
 80151a0:	69b8      	ldr	r0, [r7, #24]
 80151a2:	f7ff fec6 	bl	8014f32 <put_fat>
 80151a6:	4603      	mov	r3, r0
 80151a8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80151aa:	7ffb      	ldrb	r3, [r7, #31]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d001      	beq.n	80151b4 <remove_chain+0x4a>
 80151b0:	7ffb      	ldrb	r3, [r7, #31]
 80151b2:	e03b      	b.n	801522c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80151b4:	68b9      	ldr	r1, [r7, #8]
 80151b6:	68f8      	ldr	r0, [r7, #12]
 80151b8:	f7ff fde7 	bl	8014d8a <get_fat>
 80151bc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80151be:	697b      	ldr	r3, [r7, #20]
 80151c0:	2b00      	cmp	r3, #0
 80151c2:	d031      	beq.n	8015228 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80151c4:	697b      	ldr	r3, [r7, #20]
 80151c6:	2b01      	cmp	r3, #1
 80151c8:	d101      	bne.n	80151ce <remove_chain+0x64>
 80151ca:	2302      	movs	r3, #2
 80151cc:	e02e      	b.n	801522c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80151ce:	697b      	ldr	r3, [r7, #20]
 80151d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151d4:	d101      	bne.n	80151da <remove_chain+0x70>
 80151d6:	2301      	movs	r3, #1
 80151d8:	e028      	b.n	801522c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80151da:	2200      	movs	r2, #0
 80151dc:	68b9      	ldr	r1, [r7, #8]
 80151de:	69b8      	ldr	r0, [r7, #24]
 80151e0:	f7ff fea7 	bl	8014f32 <put_fat>
 80151e4:	4603      	mov	r3, r0
 80151e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80151e8:	7ffb      	ldrb	r3, [r7, #31]
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d001      	beq.n	80151f2 <remove_chain+0x88>
 80151ee:	7ffb      	ldrb	r3, [r7, #31]
 80151f0:	e01c      	b.n	801522c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80151f2:	69bb      	ldr	r3, [r7, #24]
 80151f4:	699a      	ldr	r2, [r3, #24]
 80151f6:	69bb      	ldr	r3, [r7, #24]
 80151f8:	69db      	ldr	r3, [r3, #28]
 80151fa:	3b02      	subs	r3, #2
 80151fc:	429a      	cmp	r2, r3
 80151fe:	d20b      	bcs.n	8015218 <remove_chain+0xae>
			fs->free_clst++;
 8015200:	69bb      	ldr	r3, [r7, #24]
 8015202:	699b      	ldr	r3, [r3, #24]
 8015204:	1c5a      	adds	r2, r3, #1
 8015206:	69bb      	ldr	r3, [r7, #24]
 8015208:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 801520a:	69bb      	ldr	r3, [r7, #24]
 801520c:	791b      	ldrb	r3, [r3, #4]
 801520e:	f043 0301 	orr.w	r3, r3, #1
 8015212:	b2da      	uxtb	r2, r3
 8015214:	69bb      	ldr	r3, [r7, #24]
 8015216:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8015218:	697b      	ldr	r3, [r7, #20]
 801521a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801521c:	69bb      	ldr	r3, [r7, #24]
 801521e:	69db      	ldr	r3, [r3, #28]
 8015220:	68ba      	ldr	r2, [r7, #8]
 8015222:	429a      	cmp	r2, r3
 8015224:	d3c6      	bcc.n	80151b4 <remove_chain+0x4a>
 8015226:	e000      	b.n	801522a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8015228:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801522a:	2300      	movs	r3, #0
}
 801522c:	4618      	mov	r0, r3
 801522e:	3720      	adds	r7, #32
 8015230:	46bd      	mov	sp, r7
 8015232:	bd80      	pop	{r7, pc}

08015234 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8015234:	b580      	push	{r7, lr}
 8015236:	b088      	sub	sp, #32
 8015238:	af00      	add	r7, sp, #0
 801523a:	6078      	str	r0, [r7, #4]
 801523c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8015244:	683b      	ldr	r3, [r7, #0]
 8015246:	2b00      	cmp	r3, #0
 8015248:	d10d      	bne.n	8015266 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801524a:	693b      	ldr	r3, [r7, #16]
 801524c:	695b      	ldr	r3, [r3, #20]
 801524e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8015250:	69bb      	ldr	r3, [r7, #24]
 8015252:	2b00      	cmp	r3, #0
 8015254:	d004      	beq.n	8015260 <create_chain+0x2c>
 8015256:	693b      	ldr	r3, [r7, #16]
 8015258:	69db      	ldr	r3, [r3, #28]
 801525a:	69ba      	ldr	r2, [r7, #24]
 801525c:	429a      	cmp	r2, r3
 801525e:	d31b      	bcc.n	8015298 <create_chain+0x64>
 8015260:	2301      	movs	r3, #1
 8015262:	61bb      	str	r3, [r7, #24]
 8015264:	e018      	b.n	8015298 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8015266:	6839      	ldr	r1, [r7, #0]
 8015268:	6878      	ldr	r0, [r7, #4]
 801526a:	f7ff fd8e 	bl	8014d8a <get_fat>
 801526e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	2b01      	cmp	r3, #1
 8015274:	d801      	bhi.n	801527a <create_chain+0x46>
 8015276:	2301      	movs	r3, #1
 8015278:	e070      	b.n	801535c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801527a:	68fb      	ldr	r3, [r7, #12]
 801527c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015280:	d101      	bne.n	8015286 <create_chain+0x52>
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	e06a      	b.n	801535c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8015286:	693b      	ldr	r3, [r7, #16]
 8015288:	69db      	ldr	r3, [r3, #28]
 801528a:	68fa      	ldr	r2, [r7, #12]
 801528c:	429a      	cmp	r2, r3
 801528e:	d201      	bcs.n	8015294 <create_chain+0x60>
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	e063      	b.n	801535c <create_chain+0x128>
		scl = clst;
 8015294:	683b      	ldr	r3, [r7, #0]
 8015296:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8015298:	69bb      	ldr	r3, [r7, #24]
 801529a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801529c:	69fb      	ldr	r3, [r7, #28]
 801529e:	3301      	adds	r3, #1
 80152a0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80152a2:	693b      	ldr	r3, [r7, #16]
 80152a4:	69db      	ldr	r3, [r3, #28]
 80152a6:	69fa      	ldr	r2, [r7, #28]
 80152a8:	429a      	cmp	r2, r3
 80152aa:	d307      	bcc.n	80152bc <create_chain+0x88>
				ncl = 2;
 80152ac:	2302      	movs	r3, #2
 80152ae:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80152b0:	69fa      	ldr	r2, [r7, #28]
 80152b2:	69bb      	ldr	r3, [r7, #24]
 80152b4:	429a      	cmp	r2, r3
 80152b6:	d901      	bls.n	80152bc <create_chain+0x88>
 80152b8:	2300      	movs	r3, #0
 80152ba:	e04f      	b.n	801535c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80152bc:	69f9      	ldr	r1, [r7, #28]
 80152be:	6878      	ldr	r0, [r7, #4]
 80152c0:	f7ff fd63 	bl	8014d8a <get_fat>
 80152c4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d00e      	beq.n	80152ea <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	2b01      	cmp	r3, #1
 80152d0:	d003      	beq.n	80152da <create_chain+0xa6>
 80152d2:	68fb      	ldr	r3, [r7, #12]
 80152d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152d8:	d101      	bne.n	80152de <create_chain+0xaa>
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	e03e      	b.n	801535c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80152de:	69fa      	ldr	r2, [r7, #28]
 80152e0:	69bb      	ldr	r3, [r7, #24]
 80152e2:	429a      	cmp	r2, r3
 80152e4:	d1da      	bne.n	801529c <create_chain+0x68>
 80152e6:	2300      	movs	r3, #0
 80152e8:	e038      	b.n	801535c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80152ea:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80152ec:	f04f 32ff 	mov.w	r2, #4294967295
 80152f0:	69f9      	ldr	r1, [r7, #28]
 80152f2:	6938      	ldr	r0, [r7, #16]
 80152f4:	f7ff fe1d 	bl	8014f32 <put_fat>
 80152f8:	4603      	mov	r3, r0
 80152fa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80152fc:	7dfb      	ldrb	r3, [r7, #23]
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d109      	bne.n	8015316 <create_chain+0xe2>
 8015302:	683b      	ldr	r3, [r7, #0]
 8015304:	2b00      	cmp	r3, #0
 8015306:	d006      	beq.n	8015316 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8015308:	69fa      	ldr	r2, [r7, #28]
 801530a:	6839      	ldr	r1, [r7, #0]
 801530c:	6938      	ldr	r0, [r7, #16]
 801530e:	f7ff fe10 	bl	8014f32 <put_fat>
 8015312:	4603      	mov	r3, r0
 8015314:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8015316:	7dfb      	ldrb	r3, [r7, #23]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d116      	bne.n	801534a <create_chain+0x116>
		fs->last_clst = ncl;
 801531c:	693b      	ldr	r3, [r7, #16]
 801531e:	69fa      	ldr	r2, [r7, #28]
 8015320:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8015322:	693b      	ldr	r3, [r7, #16]
 8015324:	699a      	ldr	r2, [r3, #24]
 8015326:	693b      	ldr	r3, [r7, #16]
 8015328:	69db      	ldr	r3, [r3, #28]
 801532a:	3b02      	subs	r3, #2
 801532c:	429a      	cmp	r2, r3
 801532e:	d804      	bhi.n	801533a <create_chain+0x106>
 8015330:	693b      	ldr	r3, [r7, #16]
 8015332:	699b      	ldr	r3, [r3, #24]
 8015334:	1e5a      	subs	r2, r3, #1
 8015336:	693b      	ldr	r3, [r7, #16]
 8015338:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 801533a:	693b      	ldr	r3, [r7, #16]
 801533c:	791b      	ldrb	r3, [r3, #4]
 801533e:	f043 0301 	orr.w	r3, r3, #1
 8015342:	b2da      	uxtb	r2, r3
 8015344:	693b      	ldr	r3, [r7, #16]
 8015346:	711a      	strb	r2, [r3, #4]
 8015348:	e007      	b.n	801535a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801534a:	7dfb      	ldrb	r3, [r7, #23]
 801534c:	2b01      	cmp	r3, #1
 801534e:	d102      	bne.n	8015356 <create_chain+0x122>
 8015350:	f04f 33ff 	mov.w	r3, #4294967295
 8015354:	e000      	b.n	8015358 <create_chain+0x124>
 8015356:	2301      	movs	r3, #1
 8015358:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801535a:	69fb      	ldr	r3, [r7, #28]
}
 801535c:	4618      	mov	r0, r3
 801535e:	3720      	adds	r7, #32
 8015360:	46bd      	mov	sp, r7
 8015362:	bd80      	pop	{r7, pc}

08015364 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8015364:	b480      	push	{r7}
 8015366:	b087      	sub	sp, #28
 8015368:	af00      	add	r7, sp, #0
 801536a:	6078      	str	r0, [r7, #4]
 801536c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015378:	3304      	adds	r3, #4
 801537a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	899b      	ldrh	r3, [r3, #12]
 8015380:	461a      	mov	r2, r3
 8015382:	683b      	ldr	r3, [r7, #0]
 8015384:	fbb3 f3f2 	udiv	r3, r3, r2
 8015388:	68fa      	ldr	r2, [r7, #12]
 801538a:	8952      	ldrh	r2, [r2, #10]
 801538c:	fbb3 f3f2 	udiv	r3, r3, r2
 8015390:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015392:	693b      	ldr	r3, [r7, #16]
 8015394:	1d1a      	adds	r2, r3, #4
 8015396:	613a      	str	r2, [r7, #16]
 8015398:	681b      	ldr	r3, [r3, #0]
 801539a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801539c:	68bb      	ldr	r3, [r7, #8]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d101      	bne.n	80153a6 <clmt_clust+0x42>
 80153a2:	2300      	movs	r3, #0
 80153a4:	e010      	b.n	80153c8 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80153a6:	697a      	ldr	r2, [r7, #20]
 80153a8:	68bb      	ldr	r3, [r7, #8]
 80153aa:	429a      	cmp	r2, r3
 80153ac:	d307      	bcc.n	80153be <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80153ae:	697a      	ldr	r2, [r7, #20]
 80153b0:	68bb      	ldr	r3, [r7, #8]
 80153b2:	1ad3      	subs	r3, r2, r3
 80153b4:	617b      	str	r3, [r7, #20]
 80153b6:	693b      	ldr	r3, [r7, #16]
 80153b8:	3304      	adds	r3, #4
 80153ba:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80153bc:	e7e9      	b.n	8015392 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80153be:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80153c0:	693b      	ldr	r3, [r7, #16]
 80153c2:	681a      	ldr	r2, [r3, #0]
 80153c4:	697b      	ldr	r3, [r7, #20]
 80153c6:	4413      	add	r3, r2
}
 80153c8:	4618      	mov	r0, r3
 80153ca:	371c      	adds	r7, #28
 80153cc:	46bd      	mov	sp, r7
 80153ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d2:	4770      	bx	lr

080153d4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80153d4:	b580      	push	{r7, lr}
 80153d6:	b086      	sub	sp, #24
 80153d8:	af00      	add	r7, sp, #0
 80153da:	6078      	str	r0, [r7, #4]
 80153dc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80153e4:	683b      	ldr	r3, [r7, #0]
 80153e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80153ea:	d204      	bcs.n	80153f6 <dir_sdi+0x22>
 80153ec:	683b      	ldr	r3, [r7, #0]
 80153ee:	f003 031f 	and.w	r3, r3, #31
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d001      	beq.n	80153fa <dir_sdi+0x26>
		return FR_INT_ERR;
 80153f6:	2302      	movs	r3, #2
 80153f8:	e071      	b.n	80154de <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	683a      	ldr	r2, [r7, #0]
 80153fe:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8015400:	687b      	ldr	r3, [r7, #4]
 8015402:	689b      	ldr	r3, [r3, #8]
 8015404:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8015406:	697b      	ldr	r3, [r7, #20]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d106      	bne.n	801541a <dir_sdi+0x46>
 801540c:	693b      	ldr	r3, [r7, #16]
 801540e:	781b      	ldrb	r3, [r3, #0]
 8015410:	2b02      	cmp	r3, #2
 8015412:	d902      	bls.n	801541a <dir_sdi+0x46>
		clst = fs->dirbase;
 8015414:	693b      	ldr	r3, [r7, #16]
 8015416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015418:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801541a:	697b      	ldr	r3, [r7, #20]
 801541c:	2b00      	cmp	r3, #0
 801541e:	d10c      	bne.n	801543a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8015420:	683b      	ldr	r3, [r7, #0]
 8015422:	095b      	lsrs	r3, r3, #5
 8015424:	693a      	ldr	r2, [r7, #16]
 8015426:	8912      	ldrh	r2, [r2, #8]
 8015428:	4293      	cmp	r3, r2
 801542a:	d301      	bcc.n	8015430 <dir_sdi+0x5c>
 801542c:	2302      	movs	r3, #2
 801542e:	e056      	b.n	80154de <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8015430:	693b      	ldr	r3, [r7, #16]
 8015432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	619a      	str	r2, [r3, #24]
 8015438:	e02d      	b.n	8015496 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801543a:	693b      	ldr	r3, [r7, #16]
 801543c:	895b      	ldrh	r3, [r3, #10]
 801543e:	461a      	mov	r2, r3
 8015440:	693b      	ldr	r3, [r7, #16]
 8015442:	899b      	ldrh	r3, [r3, #12]
 8015444:	fb02 f303 	mul.w	r3, r2, r3
 8015448:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801544a:	e019      	b.n	8015480 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	6979      	ldr	r1, [r7, #20]
 8015450:	4618      	mov	r0, r3
 8015452:	f7ff fc9a 	bl	8014d8a <get_fat>
 8015456:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015458:	697b      	ldr	r3, [r7, #20]
 801545a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801545e:	d101      	bne.n	8015464 <dir_sdi+0x90>
 8015460:	2301      	movs	r3, #1
 8015462:	e03c      	b.n	80154de <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8015464:	697b      	ldr	r3, [r7, #20]
 8015466:	2b01      	cmp	r3, #1
 8015468:	d904      	bls.n	8015474 <dir_sdi+0xa0>
 801546a:	693b      	ldr	r3, [r7, #16]
 801546c:	69db      	ldr	r3, [r3, #28]
 801546e:	697a      	ldr	r2, [r7, #20]
 8015470:	429a      	cmp	r2, r3
 8015472:	d301      	bcc.n	8015478 <dir_sdi+0xa4>
 8015474:	2302      	movs	r3, #2
 8015476:	e032      	b.n	80154de <dir_sdi+0x10a>
			ofs -= csz;
 8015478:	683a      	ldr	r2, [r7, #0]
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	1ad3      	subs	r3, r2, r3
 801547e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015480:	683a      	ldr	r2, [r7, #0]
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	429a      	cmp	r2, r3
 8015486:	d2e1      	bcs.n	801544c <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8015488:	6979      	ldr	r1, [r7, #20]
 801548a:	6938      	ldr	r0, [r7, #16]
 801548c:	f7ff fc5e 	bl	8014d4c <clust2sect>
 8015490:	4602      	mov	r2, r0
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	697a      	ldr	r2, [r7, #20]
 801549a:	615a      	str	r2, [r3, #20]
	if (!dp->sect) return FR_INT_ERR;
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	699b      	ldr	r3, [r3, #24]
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	d101      	bne.n	80154a8 <dir_sdi+0xd4>
 80154a4:	2302      	movs	r3, #2
 80154a6:	e01a      	b.n	80154de <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	699a      	ldr	r2, [r3, #24]
 80154ac:	693b      	ldr	r3, [r7, #16]
 80154ae:	899b      	ldrh	r3, [r3, #12]
 80154b0:	4619      	mov	r1, r3
 80154b2:	683b      	ldr	r3, [r7, #0]
 80154b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80154b8:	441a      	add	r2, r3
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80154be:	693b      	ldr	r3, [r7, #16]
 80154c0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80154c4:	693b      	ldr	r3, [r7, #16]
 80154c6:	899b      	ldrh	r3, [r3, #12]
 80154c8:	461a      	mov	r2, r3
 80154ca:	683b      	ldr	r3, [r7, #0]
 80154cc:	fbb3 f0f2 	udiv	r0, r3, r2
 80154d0:	fb00 f202 	mul.w	r2, r0, r2
 80154d4:	1a9b      	subs	r3, r3, r2
 80154d6:	18ca      	adds	r2, r1, r3
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	61da      	str	r2, [r3, #28]

	return FR_OK;
 80154dc:	2300      	movs	r3, #0
}
 80154de:	4618      	mov	r0, r3
 80154e0:	3718      	adds	r7, #24
 80154e2:	46bd      	mov	sp, r7
 80154e4:	bd80      	pop	{r7, pc}

080154e6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80154e6:	b580      	push	{r7, lr}
 80154e8:	b086      	sub	sp, #24
 80154ea:	af00      	add	r7, sp, #0
 80154ec:	6078      	str	r0, [r7, #4]
 80154ee:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	691b      	ldr	r3, [r3, #16]
 80154fa:	3320      	adds	r3, #32
 80154fc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	699b      	ldr	r3, [r3, #24]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d003      	beq.n	801550e <dir_next+0x28>
 8015506:	68bb      	ldr	r3, [r7, #8]
 8015508:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801550c:	d301      	bcc.n	8015512 <dir_next+0x2c>
 801550e:	2304      	movs	r3, #4
 8015510:	e0bb      	b.n	801568a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	899b      	ldrh	r3, [r3, #12]
 8015516:	461a      	mov	r2, r3
 8015518:	68bb      	ldr	r3, [r7, #8]
 801551a:	fbb3 f1f2 	udiv	r1, r3, r2
 801551e:	fb01 f202 	mul.w	r2, r1, r2
 8015522:	1a9b      	subs	r3, r3, r2
 8015524:	2b00      	cmp	r3, #0
 8015526:	f040 809d 	bne.w	8015664 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	699b      	ldr	r3, [r3, #24]
 801552e:	1c5a      	adds	r2, r3, #1
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	619a      	str	r2, [r3, #24]

		if (!dp->clust) {		/* Static table */
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	695b      	ldr	r3, [r3, #20]
 8015538:	2b00      	cmp	r3, #0
 801553a:	d10b      	bne.n	8015554 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801553c:	68bb      	ldr	r3, [r7, #8]
 801553e:	095b      	lsrs	r3, r3, #5
 8015540:	68fa      	ldr	r2, [r7, #12]
 8015542:	8912      	ldrh	r2, [r2, #8]
 8015544:	4293      	cmp	r3, r2
 8015546:	f0c0 808d 	bcc.w	8015664 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	2200      	movs	r2, #0
 801554e:	619a      	str	r2, [r3, #24]
 8015550:	2304      	movs	r3, #4
 8015552:	e09a      	b.n	801568a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	899b      	ldrh	r3, [r3, #12]
 8015558:	461a      	mov	r2, r3
 801555a:	68bb      	ldr	r3, [r7, #8]
 801555c:	fbb3 f3f2 	udiv	r3, r3, r2
 8015560:	68fa      	ldr	r2, [r7, #12]
 8015562:	8952      	ldrh	r2, [r2, #10]
 8015564:	3a01      	subs	r2, #1
 8015566:	4013      	ands	r3, r2
 8015568:	2b00      	cmp	r3, #0
 801556a:	d17b      	bne.n	8015664 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801556c:	687a      	ldr	r2, [r7, #4]
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	695b      	ldr	r3, [r3, #20]
 8015572:	4619      	mov	r1, r3
 8015574:	4610      	mov	r0, r2
 8015576:	f7ff fc08 	bl	8014d8a <get_fat>
 801557a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801557c:	697b      	ldr	r3, [r7, #20]
 801557e:	2b01      	cmp	r3, #1
 8015580:	d801      	bhi.n	8015586 <dir_next+0xa0>
 8015582:	2302      	movs	r3, #2
 8015584:	e081      	b.n	801568a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015586:	697b      	ldr	r3, [r7, #20]
 8015588:	f1b3 3fff 	cmp.w	r3, #4294967295
 801558c:	d101      	bne.n	8015592 <dir_next+0xac>
 801558e:	2301      	movs	r3, #1
 8015590:	e07b      	b.n	801568a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	69db      	ldr	r3, [r3, #28]
 8015596:	697a      	ldr	r2, [r7, #20]
 8015598:	429a      	cmp	r2, r3
 801559a:	d359      	bcc.n	8015650 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 801559c:	683b      	ldr	r3, [r7, #0]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d104      	bne.n	80155ac <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	2200      	movs	r2, #0
 80155a6:	619a      	str	r2, [r3, #24]
 80155a8:	2304      	movs	r3, #4
 80155aa:	e06e      	b.n	801568a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80155ac:	687a      	ldr	r2, [r7, #4]
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	695b      	ldr	r3, [r3, #20]
 80155b2:	4619      	mov	r1, r3
 80155b4:	4610      	mov	r0, r2
 80155b6:	f7ff fe3d 	bl	8015234 <create_chain>
 80155ba:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80155bc:	697b      	ldr	r3, [r7, #20]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d101      	bne.n	80155c6 <dir_next+0xe0>
 80155c2:	2307      	movs	r3, #7
 80155c4:	e061      	b.n	801568a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80155c6:	697b      	ldr	r3, [r7, #20]
 80155c8:	2b01      	cmp	r3, #1
 80155ca:	d101      	bne.n	80155d0 <dir_next+0xea>
 80155cc:	2302      	movs	r3, #2
 80155ce:	e05c      	b.n	801568a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80155d0:	697b      	ldr	r3, [r7, #20]
 80155d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155d6:	d101      	bne.n	80155dc <dir_next+0xf6>
 80155d8:	2301      	movs	r3, #1
 80155da:	e056      	b.n	801568a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80155dc:	68f8      	ldr	r0, [r7, #12]
 80155de:	f7ff fad3 	bl	8014b88 <sync_window>
 80155e2:	4603      	mov	r3, r0
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d001      	beq.n	80155ec <dir_next+0x106>
 80155e8:	2301      	movs	r3, #1
 80155ea:	e04e      	b.n	801568a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80155ec:	68fb      	ldr	r3, [r7, #12]
 80155ee:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	899b      	ldrh	r3, [r3, #12]
 80155f6:	461a      	mov	r2, r3
 80155f8:	2100      	movs	r1, #0
 80155fa:	f7ff fa68 	bl	8014ace <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80155fe:	2300      	movs	r3, #0
 8015600:	613b      	str	r3, [r7, #16]
 8015602:	6979      	ldr	r1, [r7, #20]
 8015604:	68f8      	ldr	r0, [r7, #12]
 8015606:	f7ff fba1 	bl	8014d4c <clust2sect>
 801560a:	4602      	mov	r2, r0
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	635a      	str	r2, [r3, #52]	; 0x34
 8015610:	e012      	b.n	8015638 <dir_next+0x152>
						fs->wflag = 1;
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	2201      	movs	r2, #1
 8015616:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8015618:	68f8      	ldr	r0, [r7, #12]
 801561a:	f7ff fab5 	bl	8014b88 <sync_window>
 801561e:	4603      	mov	r3, r0
 8015620:	2b00      	cmp	r3, #0
 8015622:	d001      	beq.n	8015628 <dir_next+0x142>
 8015624:	2301      	movs	r3, #1
 8015626:	e030      	b.n	801568a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015628:	693b      	ldr	r3, [r7, #16]
 801562a:	3301      	adds	r3, #1
 801562c:	613b      	str	r3, [r7, #16]
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015632:	1c5a      	adds	r2, r3, #1
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	635a      	str	r2, [r3, #52]	; 0x34
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	895b      	ldrh	r3, [r3, #10]
 801563c:	461a      	mov	r2, r3
 801563e:	693b      	ldr	r3, [r7, #16]
 8015640:	4293      	cmp	r3, r2
 8015642:	d3e6      	bcc.n	8015612 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015648:	693b      	ldr	r3, [r7, #16]
 801564a:	1ad2      	subs	r2, r2, r3
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	697a      	ldr	r2, [r7, #20]
 8015654:	615a      	str	r2, [r3, #20]
				dp->sect = clust2sect(fs, clst);
 8015656:	6979      	ldr	r1, [r7, #20]
 8015658:	68f8      	ldr	r0, [r7, #12]
 801565a:	f7ff fb77 	bl	8014d4c <clust2sect>
 801565e:	4602      	mov	r2, r0
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	68ba      	ldr	r2, [r7, #8]
 8015668:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	899b      	ldrh	r3, [r3, #12]
 8015674:	461a      	mov	r2, r3
 8015676:	68bb      	ldr	r3, [r7, #8]
 8015678:	fbb3 f0f2 	udiv	r0, r3, r2
 801567c:	fb00 f202 	mul.w	r2, r0, r2
 8015680:	1a9b      	subs	r3, r3, r2
 8015682:	18ca      	adds	r2, r1, r3
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8015688:	2300      	movs	r3, #0
}
 801568a:	4618      	mov	r0, r3
 801568c:	3718      	adds	r7, #24
 801568e:	46bd      	mov	sp, r7
 8015690:	bd80      	pop	{r7, pc}

08015692 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8015692:	b580      	push	{r7, lr}
 8015694:	b086      	sub	sp, #24
 8015696:	af00      	add	r7, sp, #0
 8015698:	6078      	str	r0, [r7, #4]
 801569a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80156a2:	2100      	movs	r1, #0
 80156a4:	6878      	ldr	r0, [r7, #4]
 80156a6:	f7ff fe95 	bl	80153d4 <dir_sdi>
 80156aa:	4603      	mov	r3, r0
 80156ac:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80156ae:	7dfb      	ldrb	r3, [r7, #23]
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d12b      	bne.n	801570c <dir_alloc+0x7a>
		n = 0;
 80156b4:	2300      	movs	r3, #0
 80156b6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	699b      	ldr	r3, [r3, #24]
 80156bc:	4619      	mov	r1, r3
 80156be:	68f8      	ldr	r0, [r7, #12]
 80156c0:	f7ff faa6 	bl	8014c10 <move_window>
 80156c4:	4603      	mov	r3, r0
 80156c6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80156c8:	7dfb      	ldrb	r3, [r7, #23]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d11d      	bne.n	801570a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	69db      	ldr	r3, [r3, #28]
 80156d2:	781b      	ldrb	r3, [r3, #0]
 80156d4:	2be5      	cmp	r3, #229	; 0xe5
 80156d6:	d004      	beq.n	80156e2 <dir_alloc+0x50>
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	69db      	ldr	r3, [r3, #28]
 80156dc:	781b      	ldrb	r3, [r3, #0]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d107      	bne.n	80156f2 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80156e2:	693b      	ldr	r3, [r7, #16]
 80156e4:	3301      	adds	r3, #1
 80156e6:	613b      	str	r3, [r7, #16]
 80156e8:	693a      	ldr	r2, [r7, #16]
 80156ea:	683b      	ldr	r3, [r7, #0]
 80156ec:	429a      	cmp	r2, r3
 80156ee:	d102      	bne.n	80156f6 <dir_alloc+0x64>
 80156f0:	e00c      	b.n	801570c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80156f2:	2300      	movs	r3, #0
 80156f4:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80156f6:	2101      	movs	r1, #1
 80156f8:	6878      	ldr	r0, [r7, #4]
 80156fa:	f7ff fef4 	bl	80154e6 <dir_next>
 80156fe:	4603      	mov	r3, r0
 8015700:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8015702:	7dfb      	ldrb	r3, [r7, #23]
 8015704:	2b00      	cmp	r3, #0
 8015706:	d0d7      	beq.n	80156b8 <dir_alloc+0x26>
 8015708:	e000      	b.n	801570c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 801570a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801570c:	7dfb      	ldrb	r3, [r7, #23]
 801570e:	2b04      	cmp	r3, #4
 8015710:	d101      	bne.n	8015716 <dir_alloc+0x84>
 8015712:	2307      	movs	r3, #7
 8015714:	75fb      	strb	r3, [r7, #23]
	return res;
 8015716:	7dfb      	ldrb	r3, [r7, #23]
}
 8015718:	4618      	mov	r0, r3
 801571a:	3718      	adds	r7, #24
 801571c:	46bd      	mov	sp, r7
 801571e:	bd80      	pop	{r7, pc}

08015720 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8015720:	b580      	push	{r7, lr}
 8015722:	b084      	sub	sp, #16
 8015724:	af00      	add	r7, sp, #0
 8015726:	6078      	str	r0, [r7, #4]
 8015728:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 801572a:	683b      	ldr	r3, [r7, #0]
 801572c:	331a      	adds	r3, #26
 801572e:	4618      	mov	r0, r3
 8015730:	f7ff f92a 	bl	8014988 <ld_word>
 8015734:	4603      	mov	r3, r0
 8015736:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	781b      	ldrb	r3, [r3, #0]
 801573c:	2b03      	cmp	r3, #3
 801573e:	d109      	bne.n	8015754 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8015740:	683b      	ldr	r3, [r7, #0]
 8015742:	3314      	adds	r3, #20
 8015744:	4618      	mov	r0, r3
 8015746:	f7ff f91f 	bl	8014988 <ld_word>
 801574a:	4603      	mov	r3, r0
 801574c:	041b      	lsls	r3, r3, #16
 801574e:	68fa      	ldr	r2, [r7, #12]
 8015750:	4313      	orrs	r3, r2
 8015752:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8015754:	68fb      	ldr	r3, [r7, #12]
}
 8015756:	4618      	mov	r0, r3
 8015758:	3710      	adds	r7, #16
 801575a:	46bd      	mov	sp, r7
 801575c:	bd80      	pop	{r7, pc}

0801575e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801575e:	b580      	push	{r7, lr}
 8015760:	b084      	sub	sp, #16
 8015762:	af00      	add	r7, sp, #0
 8015764:	60f8      	str	r0, [r7, #12]
 8015766:	60b9      	str	r1, [r7, #8]
 8015768:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 801576a:	68bb      	ldr	r3, [r7, #8]
 801576c:	331a      	adds	r3, #26
 801576e:	687a      	ldr	r2, [r7, #4]
 8015770:	b292      	uxth	r2, r2
 8015772:	4611      	mov	r1, r2
 8015774:	4618      	mov	r0, r3
 8015776:	f7ff f942 	bl	80149fe <st_word>
	if (fs->fs_type == FS_FAT32) {
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	781b      	ldrb	r3, [r3, #0]
 801577e:	2b03      	cmp	r3, #3
 8015780:	d109      	bne.n	8015796 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8015782:	68bb      	ldr	r3, [r7, #8]
 8015784:	f103 0214 	add.w	r2, r3, #20
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	0c1b      	lsrs	r3, r3, #16
 801578c:	b29b      	uxth	r3, r3
 801578e:	4619      	mov	r1, r3
 8015790:	4610      	mov	r0, r2
 8015792:	f7ff f934 	bl	80149fe <st_word>
	}
}
 8015796:	bf00      	nop
 8015798:	3710      	adds	r7, #16
 801579a:	46bd      	mov	sp, r7
 801579c:	bd80      	pop	{r7, pc}
	...

080157a0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80157a0:	b590      	push	{r4, r7, lr}
 80157a2:	b087      	sub	sp, #28
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	6078      	str	r0, [r7, #4]
 80157a8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80157aa:	683b      	ldr	r3, [r7, #0]
 80157ac:	331a      	adds	r3, #26
 80157ae:	4618      	mov	r0, r3
 80157b0:	f7ff f8ea 	bl	8014988 <ld_word>
 80157b4:	4603      	mov	r3, r0
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d001      	beq.n	80157be <cmp_lfn+0x1e>
 80157ba:	2300      	movs	r3, #0
 80157bc:	e059      	b.n	8015872 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80157be:	683b      	ldr	r3, [r7, #0]
 80157c0:	781b      	ldrb	r3, [r3, #0]
 80157c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80157c6:	1e5a      	subs	r2, r3, #1
 80157c8:	4613      	mov	r3, r2
 80157ca:	005b      	lsls	r3, r3, #1
 80157cc:	4413      	add	r3, r2
 80157ce:	009b      	lsls	r3, r3, #2
 80157d0:	4413      	add	r3, r2
 80157d2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80157d4:	2301      	movs	r3, #1
 80157d6:	81fb      	strh	r3, [r7, #14]
 80157d8:	2300      	movs	r3, #0
 80157da:	613b      	str	r3, [r7, #16]
 80157dc:	e033      	b.n	8015846 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80157de:	4a27      	ldr	r2, [pc, #156]	; (801587c <cmp_lfn+0xdc>)
 80157e0:	693b      	ldr	r3, [r7, #16]
 80157e2:	4413      	add	r3, r2
 80157e4:	781b      	ldrb	r3, [r3, #0]
 80157e6:	461a      	mov	r2, r3
 80157e8:	683b      	ldr	r3, [r7, #0]
 80157ea:	4413      	add	r3, r2
 80157ec:	4618      	mov	r0, r3
 80157ee:	f7ff f8cb 	bl	8014988 <ld_word>
 80157f2:	4603      	mov	r3, r0
 80157f4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80157f6:	89fb      	ldrh	r3, [r7, #14]
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d01a      	beq.n	8015832 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80157fc:	697b      	ldr	r3, [r7, #20]
 80157fe:	2bfe      	cmp	r3, #254	; 0xfe
 8015800:	d812      	bhi.n	8015828 <cmp_lfn+0x88>
 8015802:	89bb      	ldrh	r3, [r7, #12]
 8015804:	4618      	mov	r0, r3
 8015806:	f001 feb3 	bl	8017570 <ff_wtoupper>
 801580a:	4603      	mov	r3, r0
 801580c:	461c      	mov	r4, r3
 801580e:	697b      	ldr	r3, [r7, #20]
 8015810:	1c5a      	adds	r2, r3, #1
 8015812:	617a      	str	r2, [r7, #20]
 8015814:	005b      	lsls	r3, r3, #1
 8015816:	687a      	ldr	r2, [r7, #4]
 8015818:	4413      	add	r3, r2
 801581a:	881b      	ldrh	r3, [r3, #0]
 801581c:	4618      	mov	r0, r3
 801581e:	f001 fea7 	bl	8017570 <ff_wtoupper>
 8015822:	4603      	mov	r3, r0
 8015824:	429c      	cmp	r4, r3
 8015826:	d001      	beq.n	801582c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8015828:	2300      	movs	r3, #0
 801582a:	e022      	b.n	8015872 <cmp_lfn+0xd2>
			}
			wc = uc;
 801582c:	89bb      	ldrh	r3, [r7, #12]
 801582e:	81fb      	strh	r3, [r7, #14]
 8015830:	e006      	b.n	8015840 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8015832:	89bb      	ldrh	r3, [r7, #12]
 8015834:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015838:	4293      	cmp	r3, r2
 801583a:	d001      	beq.n	8015840 <cmp_lfn+0xa0>
 801583c:	2300      	movs	r3, #0
 801583e:	e018      	b.n	8015872 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8015840:	693b      	ldr	r3, [r7, #16]
 8015842:	3301      	adds	r3, #1
 8015844:	613b      	str	r3, [r7, #16]
 8015846:	693b      	ldr	r3, [r7, #16]
 8015848:	2b0c      	cmp	r3, #12
 801584a:	d9c8      	bls.n	80157de <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 801584c:	683b      	ldr	r3, [r7, #0]
 801584e:	781b      	ldrb	r3, [r3, #0]
 8015850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015854:	2b00      	cmp	r3, #0
 8015856:	d00b      	beq.n	8015870 <cmp_lfn+0xd0>
 8015858:	89fb      	ldrh	r3, [r7, #14]
 801585a:	2b00      	cmp	r3, #0
 801585c:	d008      	beq.n	8015870 <cmp_lfn+0xd0>
 801585e:	697b      	ldr	r3, [r7, #20]
 8015860:	005b      	lsls	r3, r3, #1
 8015862:	687a      	ldr	r2, [r7, #4]
 8015864:	4413      	add	r3, r2
 8015866:	881b      	ldrh	r3, [r3, #0]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d001      	beq.n	8015870 <cmp_lfn+0xd0>
 801586c:	2300      	movs	r3, #0
 801586e:	e000      	b.n	8015872 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8015870:	2301      	movs	r3, #1
}
 8015872:	4618      	mov	r0, r3
 8015874:	371c      	adds	r7, #28
 8015876:	46bd      	mov	sp, r7
 8015878:	bd90      	pop	{r4, r7, pc}
 801587a:	bf00      	nop
 801587c:	08018c1c 	.word	0x08018c1c

08015880 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8015880:	b580      	push	{r7, lr}
 8015882:	b088      	sub	sp, #32
 8015884:	af00      	add	r7, sp, #0
 8015886:	60f8      	str	r0, [r7, #12]
 8015888:	60b9      	str	r1, [r7, #8]
 801588a:	4611      	mov	r1, r2
 801588c:	461a      	mov	r2, r3
 801588e:	460b      	mov	r3, r1
 8015890:	71fb      	strb	r3, [r7, #7]
 8015892:	4613      	mov	r3, r2
 8015894:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8015896:	68bb      	ldr	r3, [r7, #8]
 8015898:	330d      	adds	r3, #13
 801589a:	79ba      	ldrb	r2, [r7, #6]
 801589c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801589e:	68bb      	ldr	r3, [r7, #8]
 80158a0:	330b      	adds	r3, #11
 80158a2:	220f      	movs	r2, #15
 80158a4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80158a6:	68bb      	ldr	r3, [r7, #8]
 80158a8:	330c      	adds	r3, #12
 80158aa:	2200      	movs	r2, #0
 80158ac:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80158ae:	68bb      	ldr	r3, [r7, #8]
 80158b0:	331a      	adds	r3, #26
 80158b2:	2100      	movs	r1, #0
 80158b4:	4618      	mov	r0, r3
 80158b6:	f7ff f8a2 	bl	80149fe <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80158ba:	79fb      	ldrb	r3, [r7, #7]
 80158bc:	1e5a      	subs	r2, r3, #1
 80158be:	4613      	mov	r3, r2
 80158c0:	005b      	lsls	r3, r3, #1
 80158c2:	4413      	add	r3, r2
 80158c4:	009b      	lsls	r3, r3, #2
 80158c6:	4413      	add	r3, r2
 80158c8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80158ca:	2300      	movs	r3, #0
 80158cc:	82fb      	strh	r3, [r7, #22]
 80158ce:	2300      	movs	r3, #0
 80158d0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80158d2:	8afb      	ldrh	r3, [r7, #22]
 80158d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80158d8:	4293      	cmp	r3, r2
 80158da:	d007      	beq.n	80158ec <put_lfn+0x6c>
 80158dc:	69fb      	ldr	r3, [r7, #28]
 80158de:	1c5a      	adds	r2, r3, #1
 80158e0:	61fa      	str	r2, [r7, #28]
 80158e2:	005b      	lsls	r3, r3, #1
 80158e4:	68fa      	ldr	r2, [r7, #12]
 80158e6:	4413      	add	r3, r2
 80158e8:	881b      	ldrh	r3, [r3, #0]
 80158ea:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80158ec:	4a17      	ldr	r2, [pc, #92]	; (801594c <put_lfn+0xcc>)
 80158ee:	69bb      	ldr	r3, [r7, #24]
 80158f0:	4413      	add	r3, r2
 80158f2:	781b      	ldrb	r3, [r3, #0]
 80158f4:	461a      	mov	r2, r3
 80158f6:	68bb      	ldr	r3, [r7, #8]
 80158f8:	4413      	add	r3, r2
 80158fa:	8afa      	ldrh	r2, [r7, #22]
 80158fc:	4611      	mov	r1, r2
 80158fe:	4618      	mov	r0, r3
 8015900:	f7ff f87d 	bl	80149fe <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8015904:	8afb      	ldrh	r3, [r7, #22]
 8015906:	2b00      	cmp	r3, #0
 8015908:	d102      	bne.n	8015910 <put_lfn+0x90>
 801590a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801590e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8015910:	69bb      	ldr	r3, [r7, #24]
 8015912:	3301      	adds	r3, #1
 8015914:	61bb      	str	r3, [r7, #24]
 8015916:	69bb      	ldr	r3, [r7, #24]
 8015918:	2b0c      	cmp	r3, #12
 801591a:	d9da      	bls.n	80158d2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 801591c:	8afb      	ldrh	r3, [r7, #22]
 801591e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015922:	4293      	cmp	r3, r2
 8015924:	d006      	beq.n	8015934 <put_lfn+0xb4>
 8015926:	69fb      	ldr	r3, [r7, #28]
 8015928:	005b      	lsls	r3, r3, #1
 801592a:	68fa      	ldr	r2, [r7, #12]
 801592c:	4413      	add	r3, r2
 801592e:	881b      	ldrh	r3, [r3, #0]
 8015930:	2b00      	cmp	r3, #0
 8015932:	d103      	bne.n	801593c <put_lfn+0xbc>
 8015934:	79fb      	ldrb	r3, [r7, #7]
 8015936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801593a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 801593c:	68bb      	ldr	r3, [r7, #8]
 801593e:	79fa      	ldrb	r2, [r7, #7]
 8015940:	701a      	strb	r2, [r3, #0]
}
 8015942:	bf00      	nop
 8015944:	3720      	adds	r7, #32
 8015946:	46bd      	mov	sp, r7
 8015948:	bd80      	pop	{r7, pc}
 801594a:	bf00      	nop
 801594c:	08018c1c 	.word	0x08018c1c

08015950 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8015950:	b580      	push	{r7, lr}
 8015952:	b08c      	sub	sp, #48	; 0x30
 8015954:	af00      	add	r7, sp, #0
 8015956:	60f8      	str	r0, [r7, #12]
 8015958:	60b9      	str	r1, [r7, #8]
 801595a:	607a      	str	r2, [r7, #4]
 801595c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801595e:	220b      	movs	r2, #11
 8015960:	68b9      	ldr	r1, [r7, #8]
 8015962:	68f8      	ldr	r0, [r7, #12]
 8015964:	f7ff f892 	bl	8014a8c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8015968:	683b      	ldr	r3, [r7, #0]
 801596a:	2b05      	cmp	r3, #5
 801596c:	d92b      	bls.n	80159c6 <gen_numname+0x76>
		sr = seq;
 801596e:	683b      	ldr	r3, [r7, #0]
 8015970:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8015972:	e022      	b.n	80159ba <gen_numname+0x6a>
			wc = *lfn++;
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	1c9a      	adds	r2, r3, #2
 8015978:	607a      	str	r2, [r7, #4]
 801597a:	881b      	ldrh	r3, [r3, #0]
 801597c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 801597e:	2300      	movs	r3, #0
 8015980:	62bb      	str	r3, [r7, #40]	; 0x28
 8015982:	e017      	b.n	80159b4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8015984:	69fb      	ldr	r3, [r7, #28]
 8015986:	005a      	lsls	r2, r3, #1
 8015988:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801598a:	f003 0301 	and.w	r3, r3, #1
 801598e:	4413      	add	r3, r2
 8015990:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8015992:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015994:	085b      	lsrs	r3, r3, #1
 8015996:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8015998:	69fb      	ldr	r3, [r7, #28]
 801599a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d005      	beq.n	80159ae <gen_numname+0x5e>
 80159a2:	69fb      	ldr	r3, [r7, #28]
 80159a4:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80159a8:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80159ac:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80159ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159b0:	3301      	adds	r3, #1
 80159b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80159b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159b6:	2b0f      	cmp	r3, #15
 80159b8:	d9e4      	bls.n	8015984 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	881b      	ldrh	r3, [r3, #0]
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d1d8      	bne.n	8015974 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80159c2:	69fb      	ldr	r3, [r7, #28]
 80159c4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80159c6:	2307      	movs	r3, #7
 80159c8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80159ca:	683b      	ldr	r3, [r7, #0]
 80159cc:	b2db      	uxtb	r3, r3
 80159ce:	f003 030f 	and.w	r3, r3, #15
 80159d2:	b2db      	uxtb	r3, r3
 80159d4:	3330      	adds	r3, #48	; 0x30
 80159d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80159da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80159de:	2b39      	cmp	r3, #57	; 0x39
 80159e0:	d904      	bls.n	80159ec <gen_numname+0x9c>
 80159e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80159e6:	3307      	adds	r3, #7
 80159e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80159ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159ee:	1e5a      	subs	r2, r3, #1
 80159f0:	62ba      	str	r2, [r7, #40]	; 0x28
 80159f2:	3330      	adds	r3, #48	; 0x30
 80159f4:	443b      	add	r3, r7
 80159f6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80159fa:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80159fe:	683b      	ldr	r3, [r7, #0]
 8015a00:	091b      	lsrs	r3, r3, #4
 8015a02:	603b      	str	r3, [r7, #0]
	} while (seq);
 8015a04:	683b      	ldr	r3, [r7, #0]
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d1df      	bne.n	80159ca <gen_numname+0x7a>
	ns[i] = '~';
 8015a0a:	f107 0214 	add.w	r2, r7, #20
 8015a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a10:	4413      	add	r3, r2
 8015a12:	227e      	movs	r2, #126	; 0x7e
 8015a14:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8015a16:	2300      	movs	r3, #0
 8015a18:	627b      	str	r3, [r7, #36]	; 0x24
 8015a1a:	e002      	b.n	8015a22 <gen_numname+0xd2>
 8015a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a1e:	3301      	adds	r3, #1
 8015a20:	627b      	str	r3, [r7, #36]	; 0x24
 8015a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a26:	429a      	cmp	r2, r3
 8015a28:	d205      	bcs.n	8015a36 <gen_numname+0xe6>
 8015a2a:	68fa      	ldr	r2, [r7, #12]
 8015a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a2e:	4413      	add	r3, r2
 8015a30:	781b      	ldrb	r3, [r3, #0]
 8015a32:	2b20      	cmp	r3, #32
 8015a34:	d1f2      	bne.n	8015a1c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8015a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a38:	2b07      	cmp	r3, #7
 8015a3a:	d807      	bhi.n	8015a4c <gen_numname+0xfc>
 8015a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a3e:	1c5a      	adds	r2, r3, #1
 8015a40:	62ba      	str	r2, [r7, #40]	; 0x28
 8015a42:	3330      	adds	r3, #48	; 0x30
 8015a44:	443b      	add	r3, r7
 8015a46:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8015a4a:	e000      	b.n	8015a4e <gen_numname+0xfe>
 8015a4c:	2120      	movs	r1, #32
 8015a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a50:	1c5a      	adds	r2, r3, #1
 8015a52:	627a      	str	r2, [r7, #36]	; 0x24
 8015a54:	68fa      	ldr	r2, [r7, #12]
 8015a56:	4413      	add	r3, r2
 8015a58:	460a      	mov	r2, r1
 8015a5a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8015a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a5e:	2b07      	cmp	r3, #7
 8015a60:	d9e9      	bls.n	8015a36 <gen_numname+0xe6>
}
 8015a62:	bf00      	nop
 8015a64:	bf00      	nop
 8015a66:	3730      	adds	r7, #48	; 0x30
 8015a68:	46bd      	mov	sp, r7
 8015a6a:	bd80      	pop	{r7, pc}

08015a6c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8015a6c:	b480      	push	{r7}
 8015a6e:	b085      	sub	sp, #20
 8015a70:	af00      	add	r7, sp, #0
 8015a72:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8015a74:	2300      	movs	r3, #0
 8015a76:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8015a78:	230b      	movs	r3, #11
 8015a7a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8015a7c:	7bfb      	ldrb	r3, [r7, #15]
 8015a7e:	b2da      	uxtb	r2, r3
 8015a80:	0852      	lsrs	r2, r2, #1
 8015a82:	01db      	lsls	r3, r3, #7
 8015a84:	4313      	orrs	r3, r2
 8015a86:	b2da      	uxtb	r2, r3
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	1c59      	adds	r1, r3, #1
 8015a8c:	6079      	str	r1, [r7, #4]
 8015a8e:	781b      	ldrb	r3, [r3, #0]
 8015a90:	4413      	add	r3, r2
 8015a92:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8015a94:	68bb      	ldr	r3, [r7, #8]
 8015a96:	3b01      	subs	r3, #1
 8015a98:	60bb      	str	r3, [r7, #8]
 8015a9a:	68bb      	ldr	r3, [r7, #8]
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d1ed      	bne.n	8015a7c <sum_sfn+0x10>
	return sum;
 8015aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8015aa2:	4618      	mov	r0, r3
 8015aa4:	3714      	adds	r7, #20
 8015aa6:	46bd      	mov	sp, r7
 8015aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aac:	4770      	bx	lr

08015aae <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8015aae:	b580      	push	{r7, lr}
 8015ab0:	b086      	sub	sp, #24
 8015ab2:	af00      	add	r7, sp, #0
 8015ab4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015abc:	2100      	movs	r1, #0
 8015abe:	6878      	ldr	r0, [r7, #4]
 8015ac0:	f7ff fc88 	bl	80153d4 <dir_sdi>
 8015ac4:	4603      	mov	r3, r0
 8015ac6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8015ac8:	7dfb      	ldrb	r3, [r7, #23]
 8015aca:	2b00      	cmp	r3, #0
 8015acc:	d001      	beq.n	8015ad2 <dir_find+0x24>
 8015ace:	7dfb      	ldrb	r3, [r7, #23]
 8015ad0:	e0a9      	b.n	8015c26 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8015ad2:	23ff      	movs	r3, #255	; 0xff
 8015ad4:	753b      	strb	r3, [r7, #20]
 8015ad6:	7d3b      	ldrb	r3, [r7, #20]
 8015ad8:	757b      	strb	r3, [r7, #21]
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	f04f 32ff 	mov.w	r2, #4294967295
 8015ae0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
	do {
		res = move_window(fs, dp->sect);
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	699b      	ldr	r3, [r3, #24]
 8015ae6:	4619      	mov	r1, r3
 8015ae8:	6938      	ldr	r0, [r7, #16]
 8015aea:	f7ff f891 	bl	8014c10 <move_window>
 8015aee:	4603      	mov	r3, r0
 8015af0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8015af2:	7dfb      	ldrb	r3, [r7, #23]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	f040 8090 	bne.w	8015c1a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	69db      	ldr	r3, [r3, #28]
 8015afe:	781b      	ldrb	r3, [r3, #0]
 8015b00:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8015b02:	7dbb      	ldrb	r3, [r7, #22]
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d102      	bne.n	8015b0e <dir_find+0x60>
 8015b08:	2304      	movs	r3, #4
 8015b0a:	75fb      	strb	r3, [r7, #23]
 8015b0c:	e08a      	b.n	8015c24 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	69db      	ldr	r3, [r3, #28]
 8015b12:	330b      	adds	r3, #11
 8015b14:	781b      	ldrb	r3, [r3, #0]
 8015b16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015b1a:	73fb      	strb	r3, [r7, #15]
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	7bfa      	ldrb	r2, [r7, #15]
 8015b20:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8015b22:	7dbb      	ldrb	r3, [r7, #22]
 8015b24:	2be5      	cmp	r3, #229	; 0xe5
 8015b26:	d007      	beq.n	8015b38 <dir_find+0x8a>
 8015b28:	7bfb      	ldrb	r3, [r7, #15]
 8015b2a:	f003 0308 	and.w	r3, r3, #8
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d009      	beq.n	8015b46 <dir_find+0x98>
 8015b32:	7bfb      	ldrb	r3, [r7, #15]
 8015b34:	2b0f      	cmp	r3, #15
 8015b36:	d006      	beq.n	8015b46 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8015b38:	23ff      	movs	r3, #255	; 0xff
 8015b3a:	757b      	strb	r3, [r7, #21]
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8015b42:	62da      	str	r2, [r3, #44]	; 0x2c
 8015b44:	e05e      	b.n	8015c04 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8015b46:	7bfb      	ldrb	r3, [r7, #15]
 8015b48:	2b0f      	cmp	r3, #15
 8015b4a:	d136      	bne.n	8015bba <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8015b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d154      	bne.n	8015c04 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8015b5a:	7dbb      	ldrb	r3, [r7, #22]
 8015b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d00d      	beq.n	8015b80 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	69db      	ldr	r3, [r3, #28]
 8015b68:	7b5b      	ldrb	r3, [r3, #13]
 8015b6a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8015b6c:	7dbb      	ldrb	r3, [r7, #22]
 8015b6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015b72:	75bb      	strb	r3, [r7, #22]
 8015b74:	7dbb      	ldrb	r3, [r7, #22]
 8015b76:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	691a      	ldr	r2, [r3, #16]
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	62da      	str	r2, [r3, #44]	; 0x2c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8015b80:	7dba      	ldrb	r2, [r7, #22]
 8015b82:	7d7b      	ldrb	r3, [r7, #21]
 8015b84:	429a      	cmp	r2, r3
 8015b86:	d115      	bne.n	8015bb4 <dir_find+0x106>
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	69db      	ldr	r3, [r3, #28]
 8015b8c:	330d      	adds	r3, #13
 8015b8e:	781b      	ldrb	r3, [r3, #0]
 8015b90:	7d3a      	ldrb	r2, [r7, #20]
 8015b92:	429a      	cmp	r2, r3
 8015b94:	d10e      	bne.n	8015bb4 <dir_find+0x106>
 8015b96:	693b      	ldr	r3, [r7, #16]
 8015b98:	691a      	ldr	r2, [r3, #16]
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	69db      	ldr	r3, [r3, #28]
 8015b9e:	4619      	mov	r1, r3
 8015ba0:	4610      	mov	r0, r2
 8015ba2:	f7ff fdfd 	bl	80157a0 <cmp_lfn>
 8015ba6:	4603      	mov	r3, r0
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d003      	beq.n	8015bb4 <dir_find+0x106>
 8015bac:	7d7b      	ldrb	r3, [r7, #21]
 8015bae:	3b01      	subs	r3, #1
 8015bb0:	b2db      	uxtb	r3, r3
 8015bb2:	e000      	b.n	8015bb6 <dir_find+0x108>
 8015bb4:	23ff      	movs	r3, #255	; 0xff
 8015bb6:	757b      	strb	r3, [r7, #21]
 8015bb8:	e024      	b.n	8015c04 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8015bba:	7d7b      	ldrb	r3, [r7, #21]
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d109      	bne.n	8015bd4 <dir_find+0x126>
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	69db      	ldr	r3, [r3, #28]
 8015bc4:	4618      	mov	r0, r3
 8015bc6:	f7ff ff51 	bl	8015a6c <sum_sfn>
 8015bca:	4603      	mov	r3, r0
 8015bcc:	461a      	mov	r2, r3
 8015bce:	7d3b      	ldrb	r3, [r7, #20]
 8015bd0:	4293      	cmp	r3, r2
 8015bd2:	d024      	beq.n	8015c1e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8015bda:	f003 0301 	and.w	r3, r3, #1
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	d10a      	bne.n	8015bf8 <dir_find+0x14a>
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	69d8      	ldr	r0, [r3, #28]
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	3320      	adds	r3, #32
 8015bea:	220b      	movs	r2, #11
 8015bec:	4619      	mov	r1, r3
 8015bee:	f7fe ff89 	bl	8014b04 <mem_cmp>
 8015bf2:	4603      	mov	r3, r0
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d014      	beq.n	8015c22 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8015bf8:	23ff      	movs	r3, #255	; 0xff
 8015bfa:	757b      	strb	r3, [r7, #21]
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8015c02:	62da      	str	r2, [r3, #44]	; 0x2c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8015c04:	2100      	movs	r1, #0
 8015c06:	6878      	ldr	r0, [r7, #4]
 8015c08:	f7ff fc6d 	bl	80154e6 <dir_next>
 8015c0c:	4603      	mov	r3, r0
 8015c0e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8015c10:	7dfb      	ldrb	r3, [r7, #23]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	f43f af65 	beq.w	8015ae2 <dir_find+0x34>
 8015c18:	e004      	b.n	8015c24 <dir_find+0x176>
		if (res != FR_OK) break;
 8015c1a:	bf00      	nop
 8015c1c:	e002      	b.n	8015c24 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8015c1e:	bf00      	nop
 8015c20:	e000      	b.n	8015c24 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8015c22:	bf00      	nop

	return res;
 8015c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8015c26:	4618      	mov	r0, r3
 8015c28:	3718      	adds	r7, #24
 8015c2a:	46bd      	mov	sp, r7
 8015c2c:	bd80      	pop	{r7, pc}
	...

08015c30 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8015c30:	b580      	push	{r7, lr}
 8015c32:	b08c      	sub	sp, #48	; 0x30
 8015c34:	af00      	add	r7, sp, #0
 8015c36:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8015c44:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d001      	beq.n	8015c50 <dir_register+0x20>
 8015c4c:	2306      	movs	r3, #6
 8015c4e:	e0e0      	b.n	8015e12 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8015c50:	2300      	movs	r3, #0
 8015c52:	627b      	str	r3, [r7, #36]	; 0x24
 8015c54:	e002      	b.n	8015c5c <dir_register+0x2c>
 8015c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c58:	3301      	adds	r3, #1
 8015c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8015c5c:	69fb      	ldr	r3, [r7, #28]
 8015c5e:	691a      	ldr	r2, [r3, #16]
 8015c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c62:	005b      	lsls	r3, r3, #1
 8015c64:	4413      	add	r3, r2
 8015c66:	881b      	ldrh	r3, [r3, #0]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d1f4      	bne.n	8015c56 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	f103 0120 	add.w	r1, r3, #32
 8015c72:	f107 030c 	add.w	r3, r7, #12
 8015c76:	220c      	movs	r2, #12
 8015c78:	4618      	mov	r0, r3
 8015c7a:	f7fe ff07 	bl	8014a8c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8015c7e:	7dfb      	ldrb	r3, [r7, #23]
 8015c80:	f003 0301 	and.w	r3, r3, #1
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d032      	beq.n	8015cee <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	2240      	movs	r2, #64	; 0x40
 8015c8c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		for (n = 1; n < 100; n++) {
 8015c90:	2301      	movs	r3, #1
 8015c92:	62bb      	str	r3, [r7, #40]	; 0x28
 8015c94:	e016      	b.n	8015cc4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	f103 0020 	add.w	r0, r3, #32
 8015c9c:	69fb      	ldr	r3, [r7, #28]
 8015c9e:	691a      	ldr	r2, [r3, #16]
 8015ca0:	f107 010c 	add.w	r1, r7, #12
 8015ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ca6:	f7ff fe53 	bl	8015950 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8015caa:	6878      	ldr	r0, [r7, #4]
 8015cac:	f7ff feff 	bl	8015aae <dir_find>
 8015cb0:	4603      	mov	r3, r0
 8015cb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8015cb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d106      	bne.n	8015ccc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8015cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cc0:	3301      	adds	r3, #1
 8015cc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8015cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cc6:	2b63      	cmp	r3, #99	; 0x63
 8015cc8:	d9e5      	bls.n	8015c96 <dir_register+0x66>
 8015cca:	e000      	b.n	8015cce <dir_register+0x9e>
			if (res != FR_OK) break;
 8015ccc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8015cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cd0:	2b64      	cmp	r3, #100	; 0x64
 8015cd2:	d101      	bne.n	8015cd8 <dir_register+0xa8>
 8015cd4:	2307      	movs	r3, #7
 8015cd6:	e09c      	b.n	8015e12 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8015cd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015cdc:	2b04      	cmp	r3, #4
 8015cde:	d002      	beq.n	8015ce6 <dir_register+0xb6>
 8015ce0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015ce4:	e095      	b.n	8015e12 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8015ce6:	7dfa      	ldrb	r2, [r7, #23]
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8015cee:	7dfb      	ldrb	r3, [r7, #23]
 8015cf0:	f003 0302 	and.w	r3, r3, #2
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d007      	beq.n	8015d08 <dir_register+0xd8>
 8015cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cfa:	330c      	adds	r3, #12
 8015cfc:	4a47      	ldr	r2, [pc, #284]	; (8015e1c <dir_register+0x1ec>)
 8015cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8015d02:	089b      	lsrs	r3, r3, #2
 8015d04:	3301      	adds	r3, #1
 8015d06:	e000      	b.n	8015d0a <dir_register+0xda>
 8015d08:	2301      	movs	r3, #1
 8015d0a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8015d0c:	6a39      	ldr	r1, [r7, #32]
 8015d0e:	6878      	ldr	r0, [r7, #4]
 8015d10:	f7ff fcbf 	bl	8015692 <dir_alloc>
 8015d14:	4603      	mov	r3, r0
 8015d16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8015d1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d148      	bne.n	8015db4 <dir_register+0x184>
 8015d22:	6a3b      	ldr	r3, [r7, #32]
 8015d24:	3b01      	subs	r3, #1
 8015d26:	623b      	str	r3, [r7, #32]
 8015d28:	6a3b      	ldr	r3, [r7, #32]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d042      	beq.n	8015db4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	691a      	ldr	r2, [r3, #16]
 8015d32:	6a3b      	ldr	r3, [r7, #32]
 8015d34:	015b      	lsls	r3, r3, #5
 8015d36:	1ad3      	subs	r3, r2, r3
 8015d38:	4619      	mov	r1, r3
 8015d3a:	6878      	ldr	r0, [r7, #4]
 8015d3c:	f7ff fb4a 	bl	80153d4 <dir_sdi>
 8015d40:	4603      	mov	r3, r0
 8015d42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8015d46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d132      	bne.n	8015db4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	3320      	adds	r3, #32
 8015d52:	4618      	mov	r0, r3
 8015d54:	f7ff fe8a 	bl	8015a6c <sum_sfn>
 8015d58:	4603      	mov	r3, r0
 8015d5a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	699b      	ldr	r3, [r3, #24]
 8015d60:	4619      	mov	r1, r3
 8015d62:	69f8      	ldr	r0, [r7, #28]
 8015d64:	f7fe ff54 	bl	8014c10 <move_window>
 8015d68:	4603      	mov	r3, r0
 8015d6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8015d6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d11d      	bne.n	8015db2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8015d76:	69fb      	ldr	r3, [r7, #28]
 8015d78:	6918      	ldr	r0, [r3, #16]
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	69d9      	ldr	r1, [r3, #28]
 8015d7e:	6a3b      	ldr	r3, [r7, #32]
 8015d80:	b2da      	uxtb	r2, r3
 8015d82:	7efb      	ldrb	r3, [r7, #27]
 8015d84:	f7ff fd7c 	bl	8015880 <put_lfn>
				fs->wflag = 1;
 8015d88:	69fb      	ldr	r3, [r7, #28]
 8015d8a:	2201      	movs	r2, #1
 8015d8c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8015d8e:	2100      	movs	r1, #0
 8015d90:	6878      	ldr	r0, [r7, #4]
 8015d92:	f7ff fba8 	bl	80154e6 <dir_next>
 8015d96:	4603      	mov	r3, r0
 8015d98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8015d9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d107      	bne.n	8015db4 <dir_register+0x184>
 8015da4:	6a3b      	ldr	r3, [r7, #32]
 8015da6:	3b01      	subs	r3, #1
 8015da8:	623b      	str	r3, [r7, #32]
 8015daa:	6a3b      	ldr	r3, [r7, #32]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d1d5      	bne.n	8015d5c <dir_register+0x12c>
 8015db0:	e000      	b.n	8015db4 <dir_register+0x184>
				if (res != FR_OK) break;
 8015db2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8015db4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	d128      	bne.n	8015e0e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	699b      	ldr	r3, [r3, #24]
 8015dc0:	4619      	mov	r1, r3
 8015dc2:	69f8      	ldr	r0, [r7, #28]
 8015dc4:	f7fe ff24 	bl	8014c10 <move_window>
 8015dc8:	4603      	mov	r3, r0
 8015dca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8015dce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d11b      	bne.n	8015e0e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	69db      	ldr	r3, [r3, #28]
 8015dda:	2220      	movs	r2, #32
 8015ddc:	2100      	movs	r1, #0
 8015dde:	4618      	mov	r0, r3
 8015de0:	f7fe fe75 	bl	8014ace <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	69d8      	ldr	r0, [r3, #28]
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	3320      	adds	r3, #32
 8015dec:	220b      	movs	r2, #11
 8015dee:	4619      	mov	r1, r3
 8015df0:	f7fe fe4c 	bl	8014a8c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	69db      	ldr	r3, [r3, #28]
 8015dfe:	330c      	adds	r3, #12
 8015e00:	f002 0218 	and.w	r2, r2, #24
 8015e04:	b2d2      	uxtb	r2, r2
 8015e06:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8015e08:	69fb      	ldr	r3, [r7, #28]
 8015e0a:	2201      	movs	r2, #1
 8015e0c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8015e0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8015e12:	4618      	mov	r0, r3
 8015e14:	3730      	adds	r7, #48	; 0x30
 8015e16:	46bd      	mov	sp, r7
 8015e18:	bd80      	pop	{r7, pc}
 8015e1a:	bf00      	nop
 8015e1c:	4ec4ec4f 	.word	0x4ec4ec4f

08015e20 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b08a      	sub	sp, #40	; 0x28
 8015e24:	af00      	add	r7, sp, #0
 8015e26:	6078      	str	r0, [r7, #4]
 8015e28:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8015e2a:	683b      	ldr	r3, [r7, #0]
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	613b      	str	r3, [r7, #16]
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	691b      	ldr	r3, [r3, #16]
 8015e36:	60fb      	str	r3, [r7, #12]
 8015e38:	2300      	movs	r3, #0
 8015e3a:	617b      	str	r3, [r7, #20]
 8015e3c:	697b      	ldr	r3, [r7, #20]
 8015e3e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8015e40:	69bb      	ldr	r3, [r7, #24]
 8015e42:	1c5a      	adds	r2, r3, #1
 8015e44:	61ba      	str	r2, [r7, #24]
 8015e46:	693a      	ldr	r2, [r7, #16]
 8015e48:	4413      	add	r3, r2
 8015e4a:	781b      	ldrb	r3, [r3, #0]
 8015e4c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8015e4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e50:	2b1f      	cmp	r3, #31
 8015e52:	d940      	bls.n	8015ed6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8015e54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e56:	2b2f      	cmp	r3, #47	; 0x2f
 8015e58:	d006      	beq.n	8015e68 <create_name+0x48>
 8015e5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e5c:	2b5c      	cmp	r3, #92	; 0x5c
 8015e5e:	d110      	bne.n	8015e82 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8015e60:	e002      	b.n	8015e68 <create_name+0x48>
 8015e62:	69bb      	ldr	r3, [r7, #24]
 8015e64:	3301      	adds	r3, #1
 8015e66:	61bb      	str	r3, [r7, #24]
 8015e68:	693a      	ldr	r2, [r7, #16]
 8015e6a:	69bb      	ldr	r3, [r7, #24]
 8015e6c:	4413      	add	r3, r2
 8015e6e:	781b      	ldrb	r3, [r3, #0]
 8015e70:	2b2f      	cmp	r3, #47	; 0x2f
 8015e72:	d0f6      	beq.n	8015e62 <create_name+0x42>
 8015e74:	693a      	ldr	r2, [r7, #16]
 8015e76:	69bb      	ldr	r3, [r7, #24]
 8015e78:	4413      	add	r3, r2
 8015e7a:	781b      	ldrb	r3, [r3, #0]
 8015e7c:	2b5c      	cmp	r3, #92	; 0x5c
 8015e7e:	d0f0      	beq.n	8015e62 <create_name+0x42>
			break;
 8015e80:	e02a      	b.n	8015ed8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8015e82:	697b      	ldr	r3, [r7, #20]
 8015e84:	2bfe      	cmp	r3, #254	; 0xfe
 8015e86:	d901      	bls.n	8015e8c <create_name+0x6c>
 8015e88:	2306      	movs	r3, #6
 8015e8a:	e17d      	b.n	8016188 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8015e8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e8e:	b2db      	uxtb	r3, r3
 8015e90:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8015e92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015e94:	2101      	movs	r1, #1
 8015e96:	4618      	mov	r0, r3
 8015e98:	f001 fb2e 	bl	80174f8 <ff_convert>
 8015e9c:	4603      	mov	r3, r0
 8015e9e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8015ea0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d101      	bne.n	8015eaa <create_name+0x8a>
 8015ea6:	2306      	movs	r3, #6
 8015ea8:	e16e      	b.n	8016188 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8015eaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015eac:	2b7f      	cmp	r3, #127	; 0x7f
 8015eae:	d809      	bhi.n	8015ec4 <create_name+0xa4>
 8015eb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015eb2:	4619      	mov	r1, r3
 8015eb4:	488d      	ldr	r0, [pc, #564]	; (80160ec <create_name+0x2cc>)
 8015eb6:	f7fe fe4c 	bl	8014b52 <chk_chr>
 8015eba:	4603      	mov	r3, r0
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d001      	beq.n	8015ec4 <create_name+0xa4>
 8015ec0:	2306      	movs	r3, #6
 8015ec2:	e161      	b.n	8016188 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8015ec4:	697b      	ldr	r3, [r7, #20]
 8015ec6:	1c5a      	adds	r2, r3, #1
 8015ec8:	617a      	str	r2, [r7, #20]
 8015eca:	005b      	lsls	r3, r3, #1
 8015ecc:	68fa      	ldr	r2, [r7, #12]
 8015ece:	4413      	add	r3, r2
 8015ed0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015ed2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8015ed4:	e7b4      	b.n	8015e40 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8015ed6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8015ed8:	693a      	ldr	r2, [r7, #16]
 8015eda:	69bb      	ldr	r3, [r7, #24]
 8015edc:	441a      	add	r2, r3
 8015ede:	683b      	ldr	r3, [r7, #0]
 8015ee0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8015ee2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015ee4:	2b1f      	cmp	r3, #31
 8015ee6:	d801      	bhi.n	8015eec <create_name+0xcc>
 8015ee8:	2304      	movs	r3, #4
 8015eea:	e000      	b.n	8015eee <create_name+0xce>
 8015eec:	2300      	movs	r3, #0
 8015eee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015ef2:	e011      	b.n	8015f18 <create_name+0xf8>
		w = lfn[di - 1];
 8015ef4:	697b      	ldr	r3, [r7, #20]
 8015ef6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015efa:	3b01      	subs	r3, #1
 8015efc:	005b      	lsls	r3, r3, #1
 8015efe:	68fa      	ldr	r2, [r7, #12]
 8015f00:	4413      	add	r3, r2
 8015f02:	881b      	ldrh	r3, [r3, #0]
 8015f04:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8015f06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015f08:	2b20      	cmp	r3, #32
 8015f0a:	d002      	beq.n	8015f12 <create_name+0xf2>
 8015f0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015f0e:	2b2e      	cmp	r3, #46	; 0x2e
 8015f10:	d106      	bne.n	8015f20 <create_name+0x100>
		di--;
 8015f12:	697b      	ldr	r3, [r7, #20]
 8015f14:	3b01      	subs	r3, #1
 8015f16:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8015f18:	697b      	ldr	r3, [r7, #20]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d1ea      	bne.n	8015ef4 <create_name+0xd4>
 8015f1e:	e000      	b.n	8015f22 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8015f20:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8015f22:	697b      	ldr	r3, [r7, #20]
 8015f24:	005b      	lsls	r3, r3, #1
 8015f26:	68fa      	ldr	r2, [r7, #12]
 8015f28:	4413      	add	r3, r2
 8015f2a:	2200      	movs	r2, #0
 8015f2c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8015f2e:	697b      	ldr	r3, [r7, #20]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d101      	bne.n	8015f38 <create_name+0x118>
 8015f34:	2306      	movs	r3, #6
 8015f36:	e127      	b.n	8016188 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	3320      	adds	r3, #32
 8015f3c:	220b      	movs	r2, #11
 8015f3e:	2120      	movs	r1, #32
 8015f40:	4618      	mov	r0, r3
 8015f42:	f7fe fdc4 	bl	8014ace <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8015f46:	2300      	movs	r3, #0
 8015f48:	61bb      	str	r3, [r7, #24]
 8015f4a:	e002      	b.n	8015f52 <create_name+0x132>
 8015f4c:	69bb      	ldr	r3, [r7, #24]
 8015f4e:	3301      	adds	r3, #1
 8015f50:	61bb      	str	r3, [r7, #24]
 8015f52:	69bb      	ldr	r3, [r7, #24]
 8015f54:	005b      	lsls	r3, r3, #1
 8015f56:	68fa      	ldr	r2, [r7, #12]
 8015f58:	4413      	add	r3, r2
 8015f5a:	881b      	ldrh	r3, [r3, #0]
 8015f5c:	2b20      	cmp	r3, #32
 8015f5e:	d0f5      	beq.n	8015f4c <create_name+0x12c>
 8015f60:	69bb      	ldr	r3, [r7, #24]
 8015f62:	005b      	lsls	r3, r3, #1
 8015f64:	68fa      	ldr	r2, [r7, #12]
 8015f66:	4413      	add	r3, r2
 8015f68:	881b      	ldrh	r3, [r3, #0]
 8015f6a:	2b2e      	cmp	r3, #46	; 0x2e
 8015f6c:	d0ee      	beq.n	8015f4c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8015f6e:	69bb      	ldr	r3, [r7, #24]
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d009      	beq.n	8015f88 <create_name+0x168>
 8015f74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015f78:	f043 0303 	orr.w	r3, r3, #3
 8015f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8015f80:	e002      	b.n	8015f88 <create_name+0x168>
 8015f82:	697b      	ldr	r3, [r7, #20]
 8015f84:	3b01      	subs	r3, #1
 8015f86:	617b      	str	r3, [r7, #20]
 8015f88:	697b      	ldr	r3, [r7, #20]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d009      	beq.n	8015fa2 <create_name+0x182>
 8015f8e:	697b      	ldr	r3, [r7, #20]
 8015f90:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015f94:	3b01      	subs	r3, #1
 8015f96:	005b      	lsls	r3, r3, #1
 8015f98:	68fa      	ldr	r2, [r7, #12]
 8015f9a:	4413      	add	r3, r2
 8015f9c:	881b      	ldrh	r3, [r3, #0]
 8015f9e:	2b2e      	cmp	r3, #46	; 0x2e
 8015fa0:	d1ef      	bne.n	8015f82 <create_name+0x162>

	i = b = 0; ni = 8;
 8015fa2:	2300      	movs	r3, #0
 8015fa4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015fa8:	2300      	movs	r3, #0
 8015faa:	623b      	str	r3, [r7, #32]
 8015fac:	2308      	movs	r3, #8
 8015fae:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8015fb0:	69bb      	ldr	r3, [r7, #24]
 8015fb2:	1c5a      	adds	r2, r3, #1
 8015fb4:	61ba      	str	r2, [r7, #24]
 8015fb6:	005b      	lsls	r3, r3, #1
 8015fb8:	68fa      	ldr	r2, [r7, #12]
 8015fba:	4413      	add	r3, r2
 8015fbc:	881b      	ldrh	r3, [r3, #0]
 8015fbe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8015fc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	f000 8090 	beq.w	80160e8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8015fc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015fca:	2b20      	cmp	r3, #32
 8015fcc:	d006      	beq.n	8015fdc <create_name+0x1bc>
 8015fce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015fd0:	2b2e      	cmp	r3, #46	; 0x2e
 8015fd2:	d10a      	bne.n	8015fea <create_name+0x1ca>
 8015fd4:	69ba      	ldr	r2, [r7, #24]
 8015fd6:	697b      	ldr	r3, [r7, #20]
 8015fd8:	429a      	cmp	r2, r3
 8015fda:	d006      	beq.n	8015fea <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8015fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015fe0:	f043 0303 	orr.w	r3, r3, #3
 8015fe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015fe8:	e07d      	b.n	80160e6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8015fea:	6a3a      	ldr	r2, [r7, #32]
 8015fec:	69fb      	ldr	r3, [r7, #28]
 8015fee:	429a      	cmp	r2, r3
 8015ff0:	d203      	bcs.n	8015ffa <create_name+0x1da>
 8015ff2:	69ba      	ldr	r2, [r7, #24]
 8015ff4:	697b      	ldr	r3, [r7, #20]
 8015ff6:	429a      	cmp	r2, r3
 8015ff8:	d123      	bne.n	8016042 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8015ffa:	69fb      	ldr	r3, [r7, #28]
 8015ffc:	2b0b      	cmp	r3, #11
 8015ffe:	d106      	bne.n	801600e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8016000:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016004:	f043 0303 	orr.w	r3, r3, #3
 8016008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801600c:	e075      	b.n	80160fa <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801600e:	69ba      	ldr	r2, [r7, #24]
 8016010:	697b      	ldr	r3, [r7, #20]
 8016012:	429a      	cmp	r2, r3
 8016014:	d005      	beq.n	8016022 <create_name+0x202>
 8016016:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801601a:	f043 0303 	orr.w	r3, r3, #3
 801601e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8016022:	69ba      	ldr	r2, [r7, #24]
 8016024:	697b      	ldr	r3, [r7, #20]
 8016026:	429a      	cmp	r2, r3
 8016028:	d866      	bhi.n	80160f8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801602a:	697b      	ldr	r3, [r7, #20]
 801602c:	61bb      	str	r3, [r7, #24]
 801602e:	2308      	movs	r3, #8
 8016030:	623b      	str	r3, [r7, #32]
 8016032:	230b      	movs	r3, #11
 8016034:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8016036:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801603a:	009b      	lsls	r3, r3, #2
 801603c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8016040:	e051      	b.n	80160e6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8016042:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016044:	2b7f      	cmp	r3, #127	; 0x7f
 8016046:	d914      	bls.n	8016072 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8016048:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801604a:	2100      	movs	r1, #0
 801604c:	4618      	mov	r0, r3
 801604e:	f001 fa53 	bl	80174f8 <ff_convert>
 8016052:	4603      	mov	r3, r0
 8016054:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8016056:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016058:	2b00      	cmp	r3, #0
 801605a:	d004      	beq.n	8016066 <create_name+0x246>
 801605c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801605e:	3b80      	subs	r3, #128	; 0x80
 8016060:	4a23      	ldr	r2, [pc, #140]	; (80160f0 <create_name+0x2d0>)
 8016062:	5cd3      	ldrb	r3, [r2, r3]
 8016064:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8016066:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801606a:	f043 0302 	orr.w	r3, r3, #2
 801606e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8016072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016074:	2b00      	cmp	r3, #0
 8016076:	d007      	beq.n	8016088 <create_name+0x268>
 8016078:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801607a:	4619      	mov	r1, r3
 801607c:	481d      	ldr	r0, [pc, #116]	; (80160f4 <create_name+0x2d4>)
 801607e:	f7fe fd68 	bl	8014b52 <chk_chr>
 8016082:	4603      	mov	r3, r0
 8016084:	2b00      	cmp	r3, #0
 8016086:	d008      	beq.n	801609a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8016088:	235f      	movs	r3, #95	; 0x5f
 801608a:	84bb      	strh	r3, [r7, #36]	; 0x24
 801608c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016090:	f043 0303 	orr.w	r3, r3, #3
 8016094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016098:	e01b      	b.n	80160d2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 801609a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801609c:	2b40      	cmp	r3, #64	; 0x40
 801609e:	d909      	bls.n	80160b4 <create_name+0x294>
 80160a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160a2:	2b5a      	cmp	r3, #90	; 0x5a
 80160a4:	d806      	bhi.n	80160b4 <create_name+0x294>
					b |= 2;
 80160a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80160aa:	f043 0302 	orr.w	r3, r3, #2
 80160ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80160b2:	e00e      	b.n	80160d2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80160b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160b6:	2b60      	cmp	r3, #96	; 0x60
 80160b8:	d90b      	bls.n	80160d2 <create_name+0x2b2>
 80160ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160bc:	2b7a      	cmp	r3, #122	; 0x7a
 80160be:	d808      	bhi.n	80160d2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80160c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80160c4:	f043 0301 	orr.w	r3, r3, #1
 80160c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80160cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160ce:	3b20      	subs	r3, #32
 80160d0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80160d2:	6a3b      	ldr	r3, [r7, #32]
 80160d4:	1c5a      	adds	r2, r3, #1
 80160d6:	623a      	str	r2, [r7, #32]
 80160d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80160da:	b2d1      	uxtb	r1, r2
 80160dc:	687a      	ldr	r2, [r7, #4]
 80160de:	4413      	add	r3, r2
 80160e0:	460a      	mov	r2, r1
 80160e2:	f883 2020 	strb.w	r2, [r3, #32]
		w = lfn[si++];					/* Get an LFN character */
 80160e6:	e763      	b.n	8015fb0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80160e8:	bf00      	nop
 80160ea:	e006      	b.n	80160fa <create_name+0x2da>
 80160ec:	08018ae0 	.word	0x08018ae0
 80160f0:	08018b9c 	.word	0x08018b9c
 80160f4:	08018aec 	.word	0x08018aec
			if (si > di) break;			/* No extension */
 80160f8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016100:	2be5      	cmp	r3, #229	; 0xe5
 8016102:	d103      	bne.n	801610c <create_name+0x2ec>
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	2205      	movs	r2, #5
 8016108:	f883 2020 	strb.w	r2, [r3, #32]

	if (ni == 8) b <<= 2;
 801610c:	69fb      	ldr	r3, [r7, #28]
 801610e:	2b08      	cmp	r3, #8
 8016110:	d104      	bne.n	801611c <create_name+0x2fc>
 8016112:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016116:	009b      	lsls	r3, r3, #2
 8016118:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801611c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016120:	f003 030c 	and.w	r3, r3, #12
 8016124:	2b0c      	cmp	r3, #12
 8016126:	d005      	beq.n	8016134 <create_name+0x314>
 8016128:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801612c:	f003 0303 	and.w	r3, r3, #3
 8016130:	2b03      	cmp	r3, #3
 8016132:	d105      	bne.n	8016140 <create_name+0x320>
 8016134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016138:	f043 0302 	orr.w	r3, r3, #2
 801613c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8016140:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016144:	f003 0302 	and.w	r3, r3, #2
 8016148:	2b00      	cmp	r3, #0
 801614a:	d117      	bne.n	801617c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801614c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016150:	f003 0303 	and.w	r3, r3, #3
 8016154:	2b01      	cmp	r3, #1
 8016156:	d105      	bne.n	8016164 <create_name+0x344>
 8016158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801615c:	f043 0310 	orr.w	r3, r3, #16
 8016160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8016164:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016168:	f003 030c 	and.w	r3, r3, #12
 801616c:	2b04      	cmp	r3, #4
 801616e:	d105      	bne.n	801617c <create_name+0x35c>
 8016170:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016174:	f043 0308 	orr.w	r3, r3, #8
 8016178:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016182:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	return FR_OK;
 8016186:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8016188:	4618      	mov	r0, r3
 801618a:	3728      	adds	r7, #40	; 0x28
 801618c:	46bd      	mov	sp, r7
 801618e:	bd80      	pop	{r7, pc}

08016190 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8016190:	b580      	push	{r7, lr}
 8016192:	b086      	sub	sp, #24
 8016194:	af00      	add	r7, sp, #0
 8016196:	6078      	str	r0, [r7, #4]
 8016198:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801619e:	693b      	ldr	r3, [r7, #16]
 80161a0:	681b      	ldr	r3, [r3, #0]
 80161a2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80161a4:	e002      	b.n	80161ac <follow_path+0x1c>
 80161a6:	683b      	ldr	r3, [r7, #0]
 80161a8:	3301      	adds	r3, #1
 80161aa:	603b      	str	r3, [r7, #0]
 80161ac:	683b      	ldr	r3, [r7, #0]
 80161ae:	781b      	ldrb	r3, [r3, #0]
 80161b0:	2b2f      	cmp	r3, #47	; 0x2f
 80161b2:	d0f8      	beq.n	80161a6 <follow_path+0x16>
 80161b4:	683b      	ldr	r3, [r7, #0]
 80161b6:	781b      	ldrb	r3, [r3, #0]
 80161b8:	2b5c      	cmp	r3, #92	; 0x5c
 80161ba:	d0f4      	beq.n	80161a6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80161bc:	693b      	ldr	r3, [r7, #16]
 80161be:	2200      	movs	r2, #0
 80161c0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80161c2:	683b      	ldr	r3, [r7, #0]
 80161c4:	781b      	ldrb	r3, [r3, #0]
 80161c6:	2b1f      	cmp	r3, #31
 80161c8:	d80a      	bhi.n	80161e0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	2280      	movs	r2, #128	; 0x80
 80161ce:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 80161d2:	2100      	movs	r1, #0
 80161d4:	6878      	ldr	r0, [r7, #4]
 80161d6:	f7ff f8fd 	bl	80153d4 <dir_sdi>
 80161da:	4603      	mov	r3, r0
 80161dc:	75fb      	strb	r3, [r7, #23]
 80161de:	e048      	b.n	8016272 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80161e0:	463b      	mov	r3, r7
 80161e2:	4619      	mov	r1, r3
 80161e4:	6878      	ldr	r0, [r7, #4]
 80161e6:	f7ff fe1b 	bl	8015e20 <create_name>
 80161ea:	4603      	mov	r3, r0
 80161ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80161ee:	7dfb      	ldrb	r3, [r7, #23]
 80161f0:	2b00      	cmp	r3, #0
 80161f2:	d139      	bne.n	8016268 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80161f4:	6878      	ldr	r0, [r7, #4]
 80161f6:	f7ff fc5a 	bl	8015aae <dir_find>
 80161fa:	4603      	mov	r3, r0
 80161fc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8016204:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8016206:	7dfb      	ldrb	r3, [r7, #23]
 8016208:	2b00      	cmp	r3, #0
 801620a:	d00a      	beq.n	8016222 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801620c:	7dfb      	ldrb	r3, [r7, #23]
 801620e:	2b04      	cmp	r3, #4
 8016210:	d12c      	bne.n	801626c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8016212:	7afb      	ldrb	r3, [r7, #11]
 8016214:	f003 0304 	and.w	r3, r3, #4
 8016218:	2b00      	cmp	r3, #0
 801621a:	d127      	bne.n	801626c <follow_path+0xdc>
 801621c:	2305      	movs	r3, #5
 801621e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8016220:	e024      	b.n	801626c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016222:	7afb      	ldrb	r3, [r7, #11]
 8016224:	f003 0304 	and.w	r3, r3, #4
 8016228:	2b00      	cmp	r3, #0
 801622a:	d121      	bne.n	8016270 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801622c:	693b      	ldr	r3, [r7, #16]
 801622e:	799b      	ldrb	r3, [r3, #6]
 8016230:	f003 0310 	and.w	r3, r3, #16
 8016234:	2b00      	cmp	r3, #0
 8016236:	d102      	bne.n	801623e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8016238:	2305      	movs	r3, #5
 801623a:	75fb      	strb	r3, [r7, #23]
 801623c:	e019      	b.n	8016272 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	691b      	ldr	r3, [r3, #16]
 8016248:	68fa      	ldr	r2, [r7, #12]
 801624a:	8992      	ldrh	r2, [r2, #12]
 801624c:	fbb3 f0f2 	udiv	r0, r3, r2
 8016250:	fb00 f202 	mul.w	r2, r0, r2
 8016254:	1a9b      	subs	r3, r3, r2
 8016256:	440b      	add	r3, r1
 8016258:	4619      	mov	r1, r3
 801625a:	68f8      	ldr	r0, [r7, #12]
 801625c:	f7ff fa60 	bl	8015720 <ld_clust>
 8016260:	4602      	mov	r2, r0
 8016262:	693b      	ldr	r3, [r7, #16]
 8016264:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016266:	e7bb      	b.n	80161e0 <follow_path+0x50>
			if (res != FR_OK) break;
 8016268:	bf00      	nop
 801626a:	e002      	b.n	8016272 <follow_path+0xe2>
				break;
 801626c:	bf00      	nop
 801626e:	e000      	b.n	8016272 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8016270:	bf00      	nop
			}
		}
	}

	return res;
 8016272:	7dfb      	ldrb	r3, [r7, #23]
}
 8016274:	4618      	mov	r0, r3
 8016276:	3718      	adds	r7, #24
 8016278:	46bd      	mov	sp, r7
 801627a:	bd80      	pop	{r7, pc}

0801627c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801627c:	b480      	push	{r7}
 801627e:	b087      	sub	sp, #28
 8016280:	af00      	add	r7, sp, #0
 8016282:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8016284:	f04f 33ff 	mov.w	r3, #4294967295
 8016288:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	681b      	ldr	r3, [r3, #0]
 801628e:	2b00      	cmp	r3, #0
 8016290:	d031      	beq.n	80162f6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	681b      	ldr	r3, [r3, #0]
 8016296:	617b      	str	r3, [r7, #20]
 8016298:	e002      	b.n	80162a0 <get_ldnumber+0x24>
 801629a:	697b      	ldr	r3, [r7, #20]
 801629c:	3301      	adds	r3, #1
 801629e:	617b      	str	r3, [r7, #20]
 80162a0:	697b      	ldr	r3, [r7, #20]
 80162a2:	781b      	ldrb	r3, [r3, #0]
 80162a4:	2b1f      	cmp	r3, #31
 80162a6:	d903      	bls.n	80162b0 <get_ldnumber+0x34>
 80162a8:	697b      	ldr	r3, [r7, #20]
 80162aa:	781b      	ldrb	r3, [r3, #0]
 80162ac:	2b3a      	cmp	r3, #58	; 0x3a
 80162ae:	d1f4      	bne.n	801629a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80162b0:	697b      	ldr	r3, [r7, #20]
 80162b2:	781b      	ldrb	r3, [r3, #0]
 80162b4:	2b3a      	cmp	r3, #58	; 0x3a
 80162b6:	d11c      	bne.n	80162f2 <get_ldnumber+0x76>
			tp = *path;
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	1c5a      	adds	r2, r3, #1
 80162c2:	60fa      	str	r2, [r7, #12]
 80162c4:	781b      	ldrb	r3, [r3, #0]
 80162c6:	3b30      	subs	r3, #48	; 0x30
 80162c8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80162ca:	68bb      	ldr	r3, [r7, #8]
 80162cc:	2b09      	cmp	r3, #9
 80162ce:	d80e      	bhi.n	80162ee <get_ldnumber+0x72>
 80162d0:	68fa      	ldr	r2, [r7, #12]
 80162d2:	697b      	ldr	r3, [r7, #20]
 80162d4:	429a      	cmp	r2, r3
 80162d6:	d10a      	bne.n	80162ee <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80162d8:	68bb      	ldr	r3, [r7, #8]
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d107      	bne.n	80162ee <get_ldnumber+0x72>
					vol = (int)i;
 80162de:	68bb      	ldr	r3, [r7, #8]
 80162e0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80162e2:	697b      	ldr	r3, [r7, #20]
 80162e4:	3301      	adds	r3, #1
 80162e6:	617b      	str	r3, [r7, #20]
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	697a      	ldr	r2, [r7, #20]
 80162ec:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80162ee:	693b      	ldr	r3, [r7, #16]
 80162f0:	e002      	b.n	80162f8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80162f2:	2300      	movs	r3, #0
 80162f4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80162f6:	693b      	ldr	r3, [r7, #16]
}
 80162f8:	4618      	mov	r0, r3
 80162fa:	371c      	adds	r7, #28
 80162fc:	46bd      	mov	sp, r7
 80162fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016302:	4770      	bx	lr

08016304 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8016304:	b580      	push	{r7, lr}
 8016306:	b082      	sub	sp, #8
 8016308:	af00      	add	r7, sp, #0
 801630a:	6078      	str	r0, [r7, #4]
 801630c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	2200      	movs	r2, #0
 8016312:	70da      	strb	r2, [r3, #3]
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	f04f 32ff 	mov.w	r2, #4294967295
 801631a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801631c:	6839      	ldr	r1, [r7, #0]
 801631e:	6878      	ldr	r0, [r7, #4]
 8016320:	f7fe fc76 	bl	8014c10 <move_window>
 8016324:	4603      	mov	r3, r0
 8016326:	2b00      	cmp	r3, #0
 8016328:	d001      	beq.n	801632e <check_fs+0x2a>
 801632a:	2304      	movs	r3, #4
 801632c:	e038      	b.n	80163a0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	3338      	adds	r3, #56	; 0x38
 8016332:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016336:	4618      	mov	r0, r3
 8016338:	f7fe fb26 	bl	8014988 <ld_word>
 801633c:	4603      	mov	r3, r0
 801633e:	461a      	mov	r2, r3
 8016340:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016344:	429a      	cmp	r2, r3
 8016346:	d001      	beq.n	801634c <check_fs+0x48>
 8016348:	2303      	movs	r3, #3
 801634a:	e029      	b.n	80163a0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 801634c:	687b      	ldr	r3, [r7, #4]
 801634e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016352:	2be9      	cmp	r3, #233	; 0xe9
 8016354:	d009      	beq.n	801636a <check_fs+0x66>
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801635c:	2beb      	cmp	r3, #235	; 0xeb
 801635e:	d11e      	bne.n	801639e <check_fs+0x9a>
 8016360:	687b      	ldr	r3, [r7, #4]
 8016362:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8016366:	2b90      	cmp	r3, #144	; 0x90
 8016368:	d119      	bne.n	801639e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	3338      	adds	r3, #56	; 0x38
 801636e:	3336      	adds	r3, #54	; 0x36
 8016370:	4618      	mov	r0, r3
 8016372:	f7fe fb21 	bl	80149b8 <ld_dword>
 8016376:	4603      	mov	r3, r0
 8016378:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801637c:	4a0a      	ldr	r2, [pc, #40]	; (80163a8 <check_fs+0xa4>)
 801637e:	4293      	cmp	r3, r2
 8016380:	d101      	bne.n	8016386 <check_fs+0x82>
 8016382:	2300      	movs	r3, #0
 8016384:	e00c      	b.n	80163a0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	3338      	adds	r3, #56	; 0x38
 801638a:	3352      	adds	r3, #82	; 0x52
 801638c:	4618      	mov	r0, r3
 801638e:	f7fe fb13 	bl	80149b8 <ld_dword>
 8016392:	4603      	mov	r3, r0
 8016394:	4a05      	ldr	r2, [pc, #20]	; (80163ac <check_fs+0xa8>)
 8016396:	4293      	cmp	r3, r2
 8016398:	d101      	bne.n	801639e <check_fs+0x9a>
 801639a:	2300      	movs	r3, #0
 801639c:	e000      	b.n	80163a0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801639e:	2302      	movs	r3, #2
}
 80163a0:	4618      	mov	r0, r3
 80163a2:	3708      	adds	r7, #8
 80163a4:	46bd      	mov	sp, r7
 80163a6:	bd80      	pop	{r7, pc}
 80163a8:	00544146 	.word	0x00544146
 80163ac:	33544146 	.word	0x33544146

080163b0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b096      	sub	sp, #88	; 0x58
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	60f8      	str	r0, [r7, #12]
 80163b8:	60b9      	str	r1, [r7, #8]
 80163ba:	4613      	mov	r3, r2
 80163bc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80163be:	68bb      	ldr	r3, [r7, #8]
 80163c0:	2200      	movs	r2, #0
 80163c2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80163c4:	68f8      	ldr	r0, [r7, #12]
 80163c6:	f7ff ff59 	bl	801627c <get_ldnumber>
 80163ca:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80163cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	da01      	bge.n	80163d6 <find_volume+0x26>
 80163d2:	230b      	movs	r3, #11
 80163d4:	e262      	b.n	801689c <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80163d6:	4a9f      	ldr	r2, [pc, #636]	; (8016654 <find_volume+0x2a4>)
 80163d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80163da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80163de:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80163e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d101      	bne.n	80163ea <find_volume+0x3a>
 80163e6:	230c      	movs	r3, #12
 80163e8:	e258      	b.n	801689c <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80163ea:	68bb      	ldr	r3, [r7, #8]
 80163ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80163ee:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80163f0:	79fb      	ldrb	r3, [r7, #7]
 80163f2:	f023 0301 	bic.w	r3, r3, #1
 80163f6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80163f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163fa:	781b      	ldrb	r3, [r3, #0]
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d01a      	beq.n	8016436 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8016400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016402:	785b      	ldrb	r3, [r3, #1]
 8016404:	4618      	mov	r0, r3
 8016406:	f7fe fa21 	bl	801484c <disk_status>
 801640a:	4603      	mov	r3, r0
 801640c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8016410:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016414:	f003 0301 	and.w	r3, r3, #1
 8016418:	2b00      	cmp	r3, #0
 801641a:	d10c      	bne.n	8016436 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801641c:	79fb      	ldrb	r3, [r7, #7]
 801641e:	2b00      	cmp	r3, #0
 8016420:	d007      	beq.n	8016432 <find_volume+0x82>
 8016422:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016426:	f003 0304 	and.w	r3, r3, #4
 801642a:	2b00      	cmp	r3, #0
 801642c:	d001      	beq.n	8016432 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801642e:	230a      	movs	r3, #10
 8016430:	e234      	b.n	801689c <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 8016432:	2300      	movs	r3, #0
 8016434:	e232      	b.n	801689c <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8016436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016438:	2200      	movs	r2, #0
 801643a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 801643c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801643e:	b2da      	uxtb	r2, r3
 8016440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016442:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8016444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016446:	785b      	ldrb	r3, [r3, #1]
 8016448:	4618      	mov	r0, r3
 801644a:	f7fe fa19 	bl	8014880 <disk_initialize>
 801644e:	4603      	mov	r3, r0
 8016450:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8016454:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016458:	f003 0301 	and.w	r3, r3, #1
 801645c:	2b00      	cmp	r3, #0
 801645e:	d001      	beq.n	8016464 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8016460:	2303      	movs	r3, #3
 8016462:	e21b      	b.n	801689c <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8016464:	79fb      	ldrb	r3, [r7, #7]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d007      	beq.n	801647a <find_volume+0xca>
 801646a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801646e:	f003 0304 	and.w	r3, r3, #4
 8016472:	2b00      	cmp	r3, #0
 8016474:	d001      	beq.n	801647a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8016476:	230a      	movs	r3, #10
 8016478:	e210      	b.n	801689c <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801647a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801647c:	7858      	ldrb	r0, [r3, #1]
 801647e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016480:	330c      	adds	r3, #12
 8016482:	461a      	mov	r2, r3
 8016484:	2102      	movs	r1, #2
 8016486:	f7fe fa61 	bl	801494c <disk_ioctl>
 801648a:	4603      	mov	r3, r0
 801648c:	2b00      	cmp	r3, #0
 801648e:	d001      	beq.n	8016494 <find_volume+0xe4>
 8016490:	2301      	movs	r3, #1
 8016492:	e203      	b.n	801689c <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8016494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016496:	899b      	ldrh	r3, [r3, #12]
 8016498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801649c:	d80d      	bhi.n	80164ba <find_volume+0x10a>
 801649e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164a0:	899b      	ldrh	r3, [r3, #12]
 80164a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80164a6:	d308      	bcc.n	80164ba <find_volume+0x10a>
 80164a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164aa:	899b      	ldrh	r3, [r3, #12]
 80164ac:	461a      	mov	r2, r3
 80164ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164b0:	899b      	ldrh	r3, [r3, #12]
 80164b2:	3b01      	subs	r3, #1
 80164b4:	4013      	ands	r3, r2
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d001      	beq.n	80164be <find_volume+0x10e>
 80164ba:	2301      	movs	r3, #1
 80164bc:	e1ee      	b.n	801689c <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80164be:	2300      	movs	r3, #0
 80164c0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80164c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80164c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80164c6:	f7ff ff1d 	bl	8016304 <check_fs>
 80164ca:	4603      	mov	r3, r0
 80164cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80164d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80164d4:	2b02      	cmp	r3, #2
 80164d6:	d149      	bne.n	801656c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80164d8:	2300      	movs	r3, #0
 80164da:	643b      	str	r3, [r7, #64]	; 0x40
 80164dc:	e01e      	b.n	801651c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80164de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164e0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80164e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80164e6:	011b      	lsls	r3, r3, #4
 80164e8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80164ec:	4413      	add	r3, r2
 80164ee:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80164f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164f2:	3304      	adds	r3, #4
 80164f4:	781b      	ldrb	r3, [r3, #0]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d006      	beq.n	8016508 <find_volume+0x158>
 80164fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164fc:	3308      	adds	r3, #8
 80164fe:	4618      	mov	r0, r3
 8016500:	f7fe fa5a 	bl	80149b8 <ld_dword>
 8016504:	4602      	mov	r2, r0
 8016506:	e000      	b.n	801650a <find_volume+0x15a>
 8016508:	2200      	movs	r2, #0
 801650a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801650c:	009b      	lsls	r3, r3, #2
 801650e:	3358      	adds	r3, #88	; 0x58
 8016510:	443b      	add	r3, r7
 8016512:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016516:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016518:	3301      	adds	r3, #1
 801651a:	643b      	str	r3, [r7, #64]	; 0x40
 801651c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801651e:	2b03      	cmp	r3, #3
 8016520:	d9dd      	bls.n	80164de <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8016522:	2300      	movs	r3, #0
 8016524:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8016526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016528:	2b00      	cmp	r3, #0
 801652a:	d002      	beq.n	8016532 <find_volume+0x182>
 801652c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801652e:	3b01      	subs	r3, #1
 8016530:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8016532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016534:	009b      	lsls	r3, r3, #2
 8016536:	3358      	adds	r3, #88	; 0x58
 8016538:	443b      	add	r3, r7
 801653a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801653e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8016540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016542:	2b00      	cmp	r3, #0
 8016544:	d005      	beq.n	8016552 <find_volume+0x1a2>
 8016546:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016548:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801654a:	f7ff fedb 	bl	8016304 <check_fs>
 801654e:	4603      	mov	r3, r0
 8016550:	e000      	b.n	8016554 <find_volume+0x1a4>
 8016552:	2303      	movs	r3, #3
 8016554:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8016558:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801655c:	2b01      	cmp	r3, #1
 801655e:	d905      	bls.n	801656c <find_volume+0x1bc>
 8016560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016562:	3301      	adds	r3, #1
 8016564:	643b      	str	r3, [r7, #64]	; 0x40
 8016566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016568:	2b03      	cmp	r3, #3
 801656a:	d9e2      	bls.n	8016532 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801656c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016570:	2b04      	cmp	r3, #4
 8016572:	d101      	bne.n	8016578 <find_volume+0x1c8>
 8016574:	2301      	movs	r3, #1
 8016576:	e191      	b.n	801689c <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8016578:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801657c:	2b01      	cmp	r3, #1
 801657e:	d901      	bls.n	8016584 <find_volume+0x1d4>
 8016580:	230d      	movs	r3, #13
 8016582:	e18b      	b.n	801689c <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8016584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016586:	3338      	adds	r3, #56	; 0x38
 8016588:	330b      	adds	r3, #11
 801658a:	4618      	mov	r0, r3
 801658c:	f7fe f9fc 	bl	8014988 <ld_word>
 8016590:	4603      	mov	r3, r0
 8016592:	461a      	mov	r2, r3
 8016594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016596:	899b      	ldrh	r3, [r3, #12]
 8016598:	429a      	cmp	r2, r3
 801659a:	d001      	beq.n	80165a0 <find_volume+0x1f0>
 801659c:	230d      	movs	r3, #13
 801659e:	e17d      	b.n	801689c <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80165a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165a2:	3338      	adds	r3, #56	; 0x38
 80165a4:	3316      	adds	r3, #22
 80165a6:	4618      	mov	r0, r3
 80165a8:	f7fe f9ee 	bl	8014988 <ld_word>
 80165ac:	4603      	mov	r3, r0
 80165ae:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80165b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d106      	bne.n	80165c4 <find_volume+0x214>
 80165b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165b8:	3338      	adds	r3, #56	; 0x38
 80165ba:	3324      	adds	r3, #36	; 0x24
 80165bc:	4618      	mov	r0, r3
 80165be:	f7fe f9fb 	bl	80149b8 <ld_dword>
 80165c2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80165c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80165c8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80165ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165cc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80165d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165d2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80165d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165d6:	789b      	ldrb	r3, [r3, #2]
 80165d8:	2b01      	cmp	r3, #1
 80165da:	d005      	beq.n	80165e8 <find_volume+0x238>
 80165dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165de:	789b      	ldrb	r3, [r3, #2]
 80165e0:	2b02      	cmp	r3, #2
 80165e2:	d001      	beq.n	80165e8 <find_volume+0x238>
 80165e4:	230d      	movs	r3, #13
 80165e6:	e159      	b.n	801689c <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80165e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165ea:	789b      	ldrb	r3, [r3, #2]
 80165ec:	461a      	mov	r2, r3
 80165ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80165f0:	fb02 f303 	mul.w	r3, r2, r3
 80165f4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80165f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80165fc:	b29a      	uxth	r2, r3
 80165fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016600:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8016602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016604:	895b      	ldrh	r3, [r3, #10]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d008      	beq.n	801661c <find_volume+0x26c>
 801660a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801660c:	895b      	ldrh	r3, [r3, #10]
 801660e:	461a      	mov	r2, r3
 8016610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016612:	895b      	ldrh	r3, [r3, #10]
 8016614:	3b01      	subs	r3, #1
 8016616:	4013      	ands	r3, r2
 8016618:	2b00      	cmp	r3, #0
 801661a:	d001      	beq.n	8016620 <find_volume+0x270>
 801661c:	230d      	movs	r3, #13
 801661e:	e13d      	b.n	801689c <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8016620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016622:	3338      	adds	r3, #56	; 0x38
 8016624:	3311      	adds	r3, #17
 8016626:	4618      	mov	r0, r3
 8016628:	f7fe f9ae 	bl	8014988 <ld_word>
 801662c:	4603      	mov	r3, r0
 801662e:	461a      	mov	r2, r3
 8016630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016632:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8016634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016636:	891b      	ldrh	r3, [r3, #8]
 8016638:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801663a:	8992      	ldrh	r2, [r2, #12]
 801663c:	0952      	lsrs	r2, r2, #5
 801663e:	b292      	uxth	r2, r2
 8016640:	fbb3 f1f2 	udiv	r1, r3, r2
 8016644:	fb01 f202 	mul.w	r2, r1, r2
 8016648:	1a9b      	subs	r3, r3, r2
 801664a:	b29b      	uxth	r3, r3
 801664c:	2b00      	cmp	r3, #0
 801664e:	d003      	beq.n	8016658 <find_volume+0x2a8>
 8016650:	230d      	movs	r3, #13
 8016652:	e123      	b.n	801689c <find_volume+0x4ec>
 8016654:	200026e4 	.word	0x200026e4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8016658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801665a:	3338      	adds	r3, #56	; 0x38
 801665c:	3313      	adds	r3, #19
 801665e:	4618      	mov	r0, r3
 8016660:	f7fe f992 	bl	8014988 <ld_word>
 8016664:	4603      	mov	r3, r0
 8016666:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8016668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801666a:	2b00      	cmp	r3, #0
 801666c:	d106      	bne.n	801667c <find_volume+0x2cc>
 801666e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016670:	3338      	adds	r3, #56	; 0x38
 8016672:	3320      	adds	r3, #32
 8016674:	4618      	mov	r0, r3
 8016676:	f7fe f99f 	bl	80149b8 <ld_dword>
 801667a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801667c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801667e:	3338      	adds	r3, #56	; 0x38
 8016680:	330e      	adds	r3, #14
 8016682:	4618      	mov	r0, r3
 8016684:	f7fe f980 	bl	8014988 <ld_word>
 8016688:	4603      	mov	r3, r0
 801668a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801668c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801668e:	2b00      	cmp	r3, #0
 8016690:	d101      	bne.n	8016696 <find_volume+0x2e6>
 8016692:	230d      	movs	r3, #13
 8016694:	e102      	b.n	801689c <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8016696:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801669a:	4413      	add	r3, r2
 801669c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801669e:	8911      	ldrh	r1, [r2, #8]
 80166a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80166a2:	8992      	ldrh	r2, [r2, #12]
 80166a4:	0952      	lsrs	r2, r2, #5
 80166a6:	b292      	uxth	r2, r2
 80166a8:	fbb1 f2f2 	udiv	r2, r1, r2
 80166ac:	b292      	uxth	r2, r2
 80166ae:	4413      	add	r3, r2
 80166b0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80166b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80166b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166b6:	429a      	cmp	r2, r3
 80166b8:	d201      	bcs.n	80166be <find_volume+0x30e>
 80166ba:	230d      	movs	r3, #13
 80166bc:	e0ee      	b.n	801689c <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80166be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80166c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166c2:	1ad3      	subs	r3, r2, r3
 80166c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80166c6:	8952      	ldrh	r2, [r2, #10]
 80166c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80166cc:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80166ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d101      	bne.n	80166d8 <find_volume+0x328>
 80166d4:	230d      	movs	r3, #13
 80166d6:	e0e1      	b.n	801689c <find_volume+0x4ec>
		fmt = FS_FAT32;
 80166d8:	2303      	movs	r3, #3
 80166da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80166de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166e0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80166e4:	4293      	cmp	r3, r2
 80166e6:	d802      	bhi.n	80166ee <find_volume+0x33e>
 80166e8:	2302      	movs	r3, #2
 80166ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80166ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166f0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80166f4:	4293      	cmp	r3, r2
 80166f6:	d802      	bhi.n	80166fe <find_volume+0x34e>
 80166f8:	2301      	movs	r3, #1
 80166fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80166fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016700:	1c9a      	adds	r2, r3, #2
 8016702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016704:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8016706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016708:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801670a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801670c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801670e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016710:	441a      	add	r2, r3
 8016712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016714:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8016716:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801671a:	441a      	add	r2, r3
 801671c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801671e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8016720:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016724:	2b03      	cmp	r3, #3
 8016726:	d11e      	bne.n	8016766 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8016728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801672a:	3338      	adds	r3, #56	; 0x38
 801672c:	332a      	adds	r3, #42	; 0x2a
 801672e:	4618      	mov	r0, r3
 8016730:	f7fe f92a 	bl	8014988 <ld_word>
 8016734:	4603      	mov	r3, r0
 8016736:	2b00      	cmp	r3, #0
 8016738:	d001      	beq.n	801673e <find_volume+0x38e>
 801673a:	230d      	movs	r3, #13
 801673c:	e0ae      	b.n	801689c <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801673e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016740:	891b      	ldrh	r3, [r3, #8]
 8016742:	2b00      	cmp	r3, #0
 8016744:	d001      	beq.n	801674a <find_volume+0x39a>
 8016746:	230d      	movs	r3, #13
 8016748:	e0a8      	b.n	801689c <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801674a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801674c:	3338      	adds	r3, #56	; 0x38
 801674e:	332c      	adds	r3, #44	; 0x2c
 8016750:	4618      	mov	r0, r3
 8016752:	f7fe f931 	bl	80149b8 <ld_dword>
 8016756:	4602      	mov	r2, r0
 8016758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801675a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801675c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801675e:	69db      	ldr	r3, [r3, #28]
 8016760:	009b      	lsls	r3, r3, #2
 8016762:	647b      	str	r3, [r7, #68]	; 0x44
 8016764:	e01f      	b.n	80167a6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8016766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016768:	891b      	ldrh	r3, [r3, #8]
 801676a:	2b00      	cmp	r3, #0
 801676c:	d101      	bne.n	8016772 <find_volume+0x3c2>
 801676e:	230d      	movs	r3, #13
 8016770:	e094      	b.n	801689c <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8016772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016778:	441a      	add	r2, r3
 801677a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801677c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801677e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016782:	2b02      	cmp	r3, #2
 8016784:	d103      	bne.n	801678e <find_volume+0x3de>
 8016786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016788:	69db      	ldr	r3, [r3, #28]
 801678a:	005b      	lsls	r3, r3, #1
 801678c:	e00a      	b.n	80167a4 <find_volume+0x3f4>
 801678e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016790:	69da      	ldr	r2, [r3, #28]
 8016792:	4613      	mov	r3, r2
 8016794:	005b      	lsls	r3, r3, #1
 8016796:	4413      	add	r3, r2
 8016798:	085a      	lsrs	r2, r3, #1
 801679a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801679c:	69db      	ldr	r3, [r3, #28]
 801679e:	f003 0301 	and.w	r3, r3, #1
 80167a2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80167a4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80167a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167a8:	6a1a      	ldr	r2, [r3, #32]
 80167aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167ac:	899b      	ldrh	r3, [r3, #12]
 80167ae:	4619      	mov	r1, r3
 80167b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80167b2:	440b      	add	r3, r1
 80167b4:	3b01      	subs	r3, #1
 80167b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80167b8:	8989      	ldrh	r1, [r1, #12]
 80167ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80167be:	429a      	cmp	r2, r3
 80167c0:	d201      	bcs.n	80167c6 <find_volume+0x416>
 80167c2:	230d      	movs	r3, #13
 80167c4:	e06a      	b.n	801689c <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80167c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167c8:	f04f 32ff 	mov.w	r2, #4294967295
 80167cc:	619a      	str	r2, [r3, #24]
 80167ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167d0:	699a      	ldr	r2, [r3, #24]
 80167d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167d4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80167d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167d8:	2280      	movs	r2, #128	; 0x80
 80167da:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80167dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80167e0:	2b03      	cmp	r3, #3
 80167e2:	d149      	bne.n	8016878 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80167e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167e6:	3338      	adds	r3, #56	; 0x38
 80167e8:	3330      	adds	r3, #48	; 0x30
 80167ea:	4618      	mov	r0, r3
 80167ec:	f7fe f8cc 	bl	8014988 <ld_word>
 80167f0:	4603      	mov	r3, r0
 80167f2:	2b01      	cmp	r3, #1
 80167f4:	d140      	bne.n	8016878 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80167f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80167f8:	3301      	adds	r3, #1
 80167fa:	4619      	mov	r1, r3
 80167fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80167fe:	f7fe fa07 	bl	8014c10 <move_window>
 8016802:	4603      	mov	r3, r0
 8016804:	2b00      	cmp	r3, #0
 8016806:	d137      	bne.n	8016878 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8016808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801680a:	2200      	movs	r2, #0
 801680c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801680e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016810:	3338      	adds	r3, #56	; 0x38
 8016812:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016816:	4618      	mov	r0, r3
 8016818:	f7fe f8b6 	bl	8014988 <ld_word>
 801681c:	4603      	mov	r3, r0
 801681e:	461a      	mov	r2, r3
 8016820:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016824:	429a      	cmp	r2, r3
 8016826:	d127      	bne.n	8016878 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8016828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801682a:	3338      	adds	r3, #56	; 0x38
 801682c:	4618      	mov	r0, r3
 801682e:	f7fe f8c3 	bl	80149b8 <ld_dword>
 8016832:	4603      	mov	r3, r0
 8016834:	4a1b      	ldr	r2, [pc, #108]	; (80168a4 <find_volume+0x4f4>)
 8016836:	4293      	cmp	r3, r2
 8016838:	d11e      	bne.n	8016878 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801683a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801683c:	3338      	adds	r3, #56	; 0x38
 801683e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016842:	4618      	mov	r0, r3
 8016844:	f7fe f8b8 	bl	80149b8 <ld_dword>
 8016848:	4603      	mov	r3, r0
 801684a:	4a17      	ldr	r2, [pc, #92]	; (80168a8 <find_volume+0x4f8>)
 801684c:	4293      	cmp	r3, r2
 801684e:	d113      	bne.n	8016878 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8016850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016852:	3338      	adds	r3, #56	; 0x38
 8016854:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8016858:	4618      	mov	r0, r3
 801685a:	f7fe f8ad 	bl	80149b8 <ld_dword>
 801685e:	4602      	mov	r2, r0
 8016860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016862:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8016864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016866:	3338      	adds	r3, #56	; 0x38
 8016868:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801686c:	4618      	mov	r0, r3
 801686e:	f7fe f8a3 	bl	80149b8 <ld_dword>
 8016872:	4602      	mov	r2, r0
 8016874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016876:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8016878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801687a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801687e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8016880:	4b0a      	ldr	r3, [pc, #40]	; (80168ac <find_volume+0x4fc>)
 8016882:	881b      	ldrh	r3, [r3, #0]
 8016884:	3301      	adds	r3, #1
 8016886:	b29a      	uxth	r2, r3
 8016888:	4b08      	ldr	r3, [pc, #32]	; (80168ac <find_volume+0x4fc>)
 801688a:	801a      	strh	r2, [r3, #0]
 801688c:	4b07      	ldr	r3, [pc, #28]	; (80168ac <find_volume+0x4fc>)
 801688e:	881a      	ldrh	r2, [r3, #0]
 8016890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016892:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8016894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016896:	4a06      	ldr	r2, [pc, #24]	; (80168b0 <find_volume+0x500>)
 8016898:	611a      	str	r2, [r3, #16]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 801689a:	2300      	movs	r3, #0
}
 801689c:	4618      	mov	r0, r3
 801689e:	3758      	adds	r7, #88	; 0x58
 80168a0:	46bd      	mov	sp, r7
 80168a2:	bd80      	pop	{r7, pc}
 80168a4:	41615252 	.word	0x41615252
 80168a8:	61417272 	.word	0x61417272
 80168ac:	200026e8 	.word	0x200026e8
 80168b0:	200026ec 	.word	0x200026ec

080168b4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80168b4:	b580      	push	{r7, lr}
 80168b6:	b084      	sub	sp, #16
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	6078      	str	r0, [r7, #4]
 80168bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80168be:	2309      	movs	r3, #9
 80168c0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d01c      	beq.n	8016902 <validate+0x4e>
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d018      	beq.n	8016902 <validate+0x4e>
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	781b      	ldrb	r3, [r3, #0]
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d013      	beq.n	8016902 <validate+0x4e>
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	889a      	ldrh	r2, [r3, #4]
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	88db      	ldrh	r3, [r3, #6]
 80168e4:	429a      	cmp	r2, r3
 80168e6:	d10c      	bne.n	8016902 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	785b      	ldrb	r3, [r3, #1]
 80168ee:	4618      	mov	r0, r3
 80168f0:	f7fd ffac 	bl	801484c <disk_status>
 80168f4:	4603      	mov	r3, r0
 80168f6:	f003 0301 	and.w	r3, r3, #1
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d101      	bne.n	8016902 <validate+0x4e>
			res = FR_OK;
 80168fe:	2300      	movs	r3, #0
 8016900:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8016902:	7bfb      	ldrb	r3, [r7, #15]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d102      	bne.n	801690e <validate+0x5a>
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	e000      	b.n	8016910 <validate+0x5c>
 801690e:	2300      	movs	r3, #0
 8016910:	683a      	ldr	r2, [r7, #0]
 8016912:	6013      	str	r3, [r2, #0]
	return res;
 8016914:	7bfb      	ldrb	r3, [r7, #15]
}
 8016916:	4618      	mov	r0, r3
 8016918:	3710      	adds	r7, #16
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}
	...

08016920 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8016920:	b580      	push	{r7, lr}
 8016922:	b088      	sub	sp, #32
 8016924:	af00      	add	r7, sp, #0
 8016926:	60f8      	str	r0, [r7, #12]
 8016928:	60b9      	str	r1, [r7, #8]
 801692a:	4613      	mov	r3, r2
 801692c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801692e:	68bb      	ldr	r3, [r7, #8]
 8016930:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8016932:	f107 0310 	add.w	r3, r7, #16
 8016936:	4618      	mov	r0, r3
 8016938:	f7ff fca0 	bl	801627c <get_ldnumber>
 801693c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801693e:	69fb      	ldr	r3, [r7, #28]
 8016940:	2b00      	cmp	r3, #0
 8016942:	da01      	bge.n	8016948 <f_mount+0x28>
 8016944:	230b      	movs	r3, #11
 8016946:	e028      	b.n	801699a <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8016948:	4a16      	ldr	r2, [pc, #88]	; (80169a4 <f_mount+0x84>)
 801694a:	69fb      	ldr	r3, [r7, #28]
 801694c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016950:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8016952:	69bb      	ldr	r3, [r7, #24]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d002      	beq.n	801695e <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8016958:	69bb      	ldr	r3, [r7, #24]
 801695a:	2200      	movs	r2, #0
 801695c:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	2b00      	cmp	r3, #0
 8016962:	d002      	beq.n	801696a <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	2200      	movs	r2, #0
 8016968:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801696a:	68fa      	ldr	r2, [r7, #12]
 801696c:	490d      	ldr	r1, [pc, #52]	; (80169a4 <f_mount+0x84>)
 801696e:	69fb      	ldr	r3, [r7, #28]
 8016970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	2b00      	cmp	r3, #0
 8016978:	d002      	beq.n	8016980 <f_mount+0x60>
 801697a:	79fb      	ldrb	r3, [r7, #7]
 801697c:	2b01      	cmp	r3, #1
 801697e:	d001      	beq.n	8016984 <f_mount+0x64>
 8016980:	2300      	movs	r3, #0
 8016982:	e00a      	b.n	801699a <f_mount+0x7a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8016984:	f107 010c 	add.w	r1, r7, #12
 8016988:	f107 0308 	add.w	r3, r7, #8
 801698c:	2200      	movs	r2, #0
 801698e:	4618      	mov	r0, r3
 8016990:	f7ff fd0e 	bl	80163b0 <find_volume>
 8016994:	4603      	mov	r3, r0
 8016996:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8016998:	7dfb      	ldrb	r3, [r7, #23]
}
 801699a:	4618      	mov	r0, r3
 801699c:	3720      	adds	r7, #32
 801699e:	46bd      	mov	sp, r7
 80169a0:	bd80      	pop	{r7, pc}
 80169a2:	bf00      	nop
 80169a4:	200026e4 	.word	0x200026e4

080169a8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80169a8:	b580      	push	{r7, lr}
 80169aa:	b098      	sub	sp, #96	; 0x60
 80169ac:	af00      	add	r7, sp, #0
 80169ae:	60f8      	str	r0, [r7, #12]
 80169b0:	60b9      	str	r1, [r7, #8]
 80169b2:	4613      	mov	r3, r2
 80169b4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80169b6:	68fb      	ldr	r3, [r7, #12]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d101      	bne.n	80169c0 <f_open+0x18>
 80169bc:	2309      	movs	r3, #9
 80169be:	e188      	b.n	8016cd2 <f_open+0x32a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80169c0:	79fb      	ldrb	r3, [r7, #7]
 80169c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80169c6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80169c8:	79fa      	ldrb	r2, [r7, #7]
 80169ca:	f107 0110 	add.w	r1, r7, #16
 80169ce:	f107 0308 	add.w	r3, r7, #8
 80169d2:	4618      	mov	r0, r3
 80169d4:	f7ff fcec 	bl	80163b0 <find_volume>
 80169d8:	4603      	mov	r3, r0
 80169da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80169de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	f040 816c 	bne.w	8016cc0 <f_open+0x318>
		dj.obj.fs = fs;
 80169e8:	693b      	ldr	r3, [r7, #16]
 80169ea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80169ec:	68ba      	ldr	r2, [r7, #8]
 80169ee:	f107 0314 	add.w	r3, r7, #20
 80169f2:	4611      	mov	r1, r2
 80169f4:	4618      	mov	r0, r3
 80169f6:	f7ff fbcb 	bl	8016190 <follow_path>
 80169fa:	4603      	mov	r3, r0
 80169fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8016a00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d107      	bne.n	8016a18 <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8016a08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016a0c:	b25b      	sxtb	r3, r3
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	da02      	bge.n	8016a18 <f_open+0x70>
				res = FR_INVALID_NAME;
 8016a12:	2306      	movs	r3, #6
 8016a14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016a18:	79fb      	ldrb	r3, [r7, #7]
 8016a1a:	f003 031c 	and.w	r3, r3, #28
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d078      	beq.n	8016b14 <f_open+0x16c>
			if (res != FR_OK) {					/* No file, create new */
 8016a22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d010      	beq.n	8016a4c <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8016a2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016a2e:	2b04      	cmp	r3, #4
 8016a30:	d107      	bne.n	8016a42 <f_open+0x9a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8016a32:	f107 0314 	add.w	r3, r7, #20
 8016a36:	4618      	mov	r0, r3
 8016a38:	f7ff f8fa 	bl	8015c30 <dir_register>
 8016a3c:	4603      	mov	r3, r0
 8016a3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8016a42:	79fb      	ldrb	r3, [r7, #7]
 8016a44:	f043 0308 	orr.w	r3, r3, #8
 8016a48:	71fb      	strb	r3, [r7, #7]
 8016a4a:	e010      	b.n	8016a6e <f_open+0xc6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8016a4c:	7ebb      	ldrb	r3, [r7, #26]
 8016a4e:	f003 0311 	and.w	r3, r3, #17
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d003      	beq.n	8016a5e <f_open+0xb6>
					res = FR_DENIED;
 8016a56:	2307      	movs	r3, #7
 8016a58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016a5c:	e007      	b.n	8016a6e <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8016a5e:	79fb      	ldrb	r3, [r7, #7]
 8016a60:	f003 0304 	and.w	r3, r3, #4
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d002      	beq.n	8016a6e <f_open+0xc6>
 8016a68:	2308      	movs	r3, #8
 8016a6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8016a6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d168      	bne.n	8016b48 <f_open+0x1a0>
 8016a76:	79fb      	ldrb	r3, [r7, #7]
 8016a78:	f003 0308 	and.w	r3, r3, #8
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d063      	beq.n	8016b48 <f_open+0x1a0>
				dw = GET_FATTIME();
 8016a80:	f7fa fa3a 	bl	8010ef8 <get_fattime>
 8016a84:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8016a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a88:	330e      	adds	r3, #14
 8016a8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016a8c:	4618      	mov	r0, r3
 8016a8e:	f7fd ffd1 	bl	8014a34 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8016a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a94:	3316      	adds	r3, #22
 8016a96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016a98:	4618      	mov	r0, r3
 8016a9a:	f7fd ffcb 	bl	8014a34 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8016a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016aa0:	330b      	adds	r3, #11
 8016aa2:	2220      	movs	r2, #32
 8016aa4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8016aa6:	693b      	ldr	r3, [r7, #16]
 8016aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016aaa:	4611      	mov	r1, r2
 8016aac:	4618      	mov	r0, r3
 8016aae:	f7fe fe37 	bl	8015720 <ld_clust>
 8016ab2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8016ab4:	693b      	ldr	r3, [r7, #16]
 8016ab6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016ab8:	2200      	movs	r2, #0
 8016aba:	4618      	mov	r0, r3
 8016abc:	f7fe fe4f 	bl	801575e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8016ac0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ac2:	331c      	adds	r3, #28
 8016ac4:	2100      	movs	r1, #0
 8016ac6:	4618      	mov	r0, r3
 8016ac8:	f7fd ffb4 	bl	8014a34 <st_dword>
					fs->wflag = 1;
 8016acc:	693b      	ldr	r3, [r7, #16]
 8016ace:	2201      	movs	r2, #1
 8016ad0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8016ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016ad4:	2b00      	cmp	r3, #0
 8016ad6:	d037      	beq.n	8016b48 <f_open+0x1a0>
						dw = fs->winsect;
 8016ad8:	693b      	ldr	r3, [r7, #16]
 8016ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016adc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8016ade:	f107 0314 	add.w	r3, r7, #20
 8016ae2:	2200      	movs	r2, #0
 8016ae4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8016ae6:	4618      	mov	r0, r3
 8016ae8:	f7fe fb3f 	bl	801516a <remove_chain>
 8016aec:	4603      	mov	r3, r0
 8016aee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8016af2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d126      	bne.n	8016b48 <f_open+0x1a0>
							res = move_window(fs, dw);
 8016afa:	693b      	ldr	r3, [r7, #16]
 8016afc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016afe:	4618      	mov	r0, r3
 8016b00:	f7fe f886 	bl	8014c10 <move_window>
 8016b04:	4603      	mov	r3, r0
 8016b06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8016b0a:	693b      	ldr	r3, [r7, #16]
 8016b0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016b0e:	3a01      	subs	r2, #1
 8016b10:	615a      	str	r2, [r3, #20]
 8016b12:	e019      	b.n	8016b48 <f_open+0x1a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8016b14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d115      	bne.n	8016b48 <f_open+0x1a0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8016b1c:	7ebb      	ldrb	r3, [r7, #26]
 8016b1e:	f003 0310 	and.w	r3, r3, #16
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d003      	beq.n	8016b2e <f_open+0x186>
					res = FR_NO_FILE;
 8016b26:	2304      	movs	r3, #4
 8016b28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016b2c:	e00c      	b.n	8016b48 <f_open+0x1a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8016b2e:	79fb      	ldrb	r3, [r7, #7]
 8016b30:	f003 0302 	and.w	r3, r3, #2
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d007      	beq.n	8016b48 <f_open+0x1a0>
 8016b38:	7ebb      	ldrb	r3, [r7, #26]
 8016b3a:	f003 0301 	and.w	r3, r3, #1
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d002      	beq.n	8016b48 <f_open+0x1a0>
						res = FR_DENIED;
 8016b42:	2307      	movs	r3, #7
 8016b44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8016b48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d10f      	bne.n	8016b70 <f_open+0x1c8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8016b50:	79fb      	ldrb	r3, [r7, #7]
 8016b52:	f003 0308 	and.w	r3, r3, #8
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d003      	beq.n	8016b62 <f_open+0x1ba>
				mode |= FA_MODIFIED;
 8016b5a:	79fb      	ldrb	r3, [r7, #7]
 8016b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016b60:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8016b62:	693b      	ldr	r3, [r7, #16]
 8016b64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016b66:	68fb      	ldr	r3, [r7, #12]
 8016b68:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8016b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8016b70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016b74:	2b00      	cmp	r3, #0
 8016b76:	f040 80a3 	bne.w	8016cc0 <f_open+0x318>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8016b7a:	693b      	ldr	r3, [r7, #16]
 8016b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016b7e:	4611      	mov	r1, r2
 8016b80:	4618      	mov	r0, r3
 8016b82:	f7fe fdcd 	bl	8015720 <ld_clust>
 8016b86:	4602      	mov	r2, r0
 8016b88:	68fb      	ldr	r3, [r7, #12]
 8016b8a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8016b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b8e:	331c      	adds	r3, #28
 8016b90:	4618      	mov	r0, r3
 8016b92:	f7fd ff11 	bl	80149b8 <ld_dword>
 8016b96:	4602      	mov	r2, r0
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	2200      	movs	r2, #0
 8016ba0:	629a      	str	r2, [r3, #40]	; 0x28
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8016ba2:	693a      	ldr	r2, [r7, #16]
 8016ba4:	68fb      	ldr	r3, [r7, #12]
 8016ba6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8016ba8:	693b      	ldr	r3, [r7, #16]
 8016baa:	88da      	ldrh	r2, [r3, #6]
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	79fa      	ldrb	r2, [r7, #7]
 8016bb4:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 8016bb6:	68fb      	ldr	r3, [r7, #12]
 8016bb8:	2200      	movs	r2, #0
 8016bba:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	2200      	movs	r2, #0
 8016bc0:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	2200      	movs	r2, #0
 8016bc6:	615a      	str	r2, [r3, #20]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	332c      	adds	r3, #44	; 0x2c
 8016bcc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016bd0:	2100      	movs	r1, #0
 8016bd2:	4618      	mov	r0, r3
 8016bd4:	f7fd ff7b 	bl	8014ace <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8016bd8:	79fb      	ldrb	r3, [r7, #7]
 8016bda:	f003 0320 	and.w	r3, r3, #32
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d06e      	beq.n	8016cc0 <f_open+0x318>
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	68db      	ldr	r3, [r3, #12]
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d06a      	beq.n	8016cc0 <f_open+0x318>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	68da      	ldr	r2, [r3, #12]
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8016bf2:	693b      	ldr	r3, [r7, #16]
 8016bf4:	895b      	ldrh	r3, [r3, #10]
 8016bf6:	461a      	mov	r2, r3
 8016bf8:	693b      	ldr	r3, [r7, #16]
 8016bfa:	899b      	ldrh	r3, [r3, #12]
 8016bfc:	fb02 f303 	mul.w	r3, r2, r3
 8016c00:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	689b      	ldr	r3, [r3, #8]
 8016c06:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016c08:	68fb      	ldr	r3, [r7, #12]
 8016c0a:	68db      	ldr	r3, [r3, #12]
 8016c0c:	657b      	str	r3, [r7, #84]	; 0x54
 8016c0e:	e016      	b.n	8016c3e <f_open+0x296>
					clst = get_fat(&fp->obj, clst);
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016c14:	4618      	mov	r0, r3
 8016c16:	f7fe f8b8 	bl	8014d8a <get_fat>
 8016c1a:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8016c1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016c1e:	2b01      	cmp	r3, #1
 8016c20:	d802      	bhi.n	8016c28 <f_open+0x280>
 8016c22:	2302      	movs	r3, #2
 8016c24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016c28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c2e:	d102      	bne.n	8016c36 <f_open+0x28e>
 8016c30:	2301      	movs	r3, #1
 8016c32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016c36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016c3a:	1ad3      	subs	r3, r2, r3
 8016c3c:	657b      	str	r3, [r7, #84]	; 0x54
 8016c3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016c42:	2b00      	cmp	r3, #0
 8016c44:	d103      	bne.n	8016c4e <f_open+0x2a6>
 8016c46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016c4a:	429a      	cmp	r2, r3
 8016c4c:	d8e0      	bhi.n	8016c10 <f_open+0x268>
				}
				fp->clust = clst;
 8016c4e:	68fb      	ldr	r3, [r7, #12]
 8016c50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016c52:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8016c54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d131      	bne.n	8016cc0 <f_open+0x318>
 8016c5c:	693b      	ldr	r3, [r7, #16]
 8016c5e:	899b      	ldrh	r3, [r3, #12]
 8016c60:	461a      	mov	r2, r3
 8016c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016c64:	fbb3 f1f2 	udiv	r1, r3, r2
 8016c68:	fb01 f202 	mul.w	r2, r1, r2
 8016c6c:	1a9b      	subs	r3, r3, r2
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d026      	beq.n	8016cc0 <f_open+0x318>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8016c72:	693b      	ldr	r3, [r7, #16]
 8016c74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016c76:	4618      	mov	r0, r3
 8016c78:	f7fe f868 	bl	8014d4c <clust2sect>
 8016c7c:	6478      	str	r0, [r7, #68]	; 0x44
 8016c7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	d103      	bne.n	8016c8c <f_open+0x2e4>
						res = FR_INT_ERR;
 8016c84:	2302      	movs	r3, #2
 8016c86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016c8a:	e019      	b.n	8016cc0 <f_open+0x318>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8016c8c:	693b      	ldr	r3, [r7, #16]
 8016c8e:	899b      	ldrh	r3, [r3, #12]
 8016c90:	461a      	mov	r2, r3
 8016c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016c94:	fbb3 f2f2 	udiv	r2, r3, r2
 8016c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016c9a:	441a      	add	r2, r3
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	61da      	str	r2, [r3, #28]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8016ca0:	693b      	ldr	r3, [r7, #16]
 8016ca2:	7858      	ldrb	r0, [r3, #1]
 8016ca4:	68fb      	ldr	r3, [r7, #12]
 8016ca6:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8016caa:	68fb      	ldr	r3, [r7, #12]
 8016cac:	69da      	ldr	r2, [r3, #28]
 8016cae:	2301      	movs	r3, #1
 8016cb0:	f7fd fe0c 	bl	80148cc <disk_read>
 8016cb4:	4603      	mov	r3, r0
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d002      	beq.n	8016cc0 <f_open+0x318>
 8016cba:	2301      	movs	r3, #1
 8016cbc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8016cc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d002      	beq.n	8016cce <f_open+0x326>
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	2200      	movs	r2, #0
 8016ccc:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8016cce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	3760      	adds	r7, #96	; 0x60
 8016cd6:	46bd      	mov	sp, r7
 8016cd8:	bd80      	pop	{r7, pc}

08016cda <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8016cda:	b580      	push	{r7, lr}
 8016cdc:	b08c      	sub	sp, #48	; 0x30
 8016cde:	af00      	add	r7, sp, #0
 8016ce0:	60f8      	str	r0, [r7, #12]
 8016ce2:	60b9      	str	r1, [r7, #8]
 8016ce4:	607a      	str	r2, [r7, #4]
 8016ce6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8016ce8:	68bb      	ldr	r3, [r7, #8]
 8016cea:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8016cec:	683b      	ldr	r3, [r7, #0]
 8016cee:	2200      	movs	r2, #0
 8016cf0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	f107 0210 	add.w	r2, r7, #16
 8016cf8:	4611      	mov	r1, r2
 8016cfa:	4618      	mov	r0, r3
 8016cfc:	f7ff fdda 	bl	80168b4 <validate>
 8016d00:	4603      	mov	r3, r0
 8016d02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8016d06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d107      	bne.n	8016d1e <f_write+0x44>
 8016d0e:	68fb      	ldr	r3, [r7, #12]
 8016d10:	7c5b      	ldrb	r3, [r3, #17]
 8016d12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8016d16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d002      	beq.n	8016d24 <f_write+0x4a>
 8016d1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016d22:	e16a      	b.n	8016ffa <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8016d24:	68fb      	ldr	r3, [r7, #12]
 8016d26:	7c1b      	ldrb	r3, [r3, #16]
 8016d28:	f003 0302 	and.w	r3, r3, #2
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d101      	bne.n	8016d34 <f_write+0x5a>
 8016d30:	2307      	movs	r3, #7
 8016d32:	e162      	b.n	8016ffa <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	695a      	ldr	r2, [r3, #20]
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	441a      	add	r2, r3
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	695b      	ldr	r3, [r3, #20]
 8016d40:	429a      	cmp	r2, r3
 8016d42:	f080 814c 	bcs.w	8016fde <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	695b      	ldr	r3, [r3, #20]
 8016d4a:	43db      	mvns	r3, r3
 8016d4c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8016d4e:	e146      	b.n	8016fde <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8016d50:	68fb      	ldr	r3, [r7, #12]
 8016d52:	695b      	ldr	r3, [r3, #20]
 8016d54:	693a      	ldr	r2, [r7, #16]
 8016d56:	8992      	ldrh	r2, [r2, #12]
 8016d58:	fbb3 f1f2 	udiv	r1, r3, r2
 8016d5c:	fb01 f202 	mul.w	r2, r1, r2
 8016d60:	1a9b      	subs	r3, r3, r2
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	f040 80f1 	bne.w	8016f4a <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	695b      	ldr	r3, [r3, #20]
 8016d6c:	693a      	ldr	r2, [r7, #16]
 8016d6e:	8992      	ldrh	r2, [r2, #12]
 8016d70:	fbb3 f3f2 	udiv	r3, r3, r2
 8016d74:	693a      	ldr	r2, [r7, #16]
 8016d76:	8952      	ldrh	r2, [r2, #10]
 8016d78:	3a01      	subs	r2, #1
 8016d7a:	4013      	ands	r3, r2
 8016d7c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8016d7e:	69bb      	ldr	r3, [r7, #24]
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d143      	bne.n	8016e0c <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	695b      	ldr	r3, [r3, #20]
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d10c      	bne.n	8016da6 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8016d8c:	68fb      	ldr	r3, [r7, #12]
 8016d8e:	689b      	ldr	r3, [r3, #8]
 8016d90:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8016d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d11a      	bne.n	8016dce <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8016d98:	68fb      	ldr	r3, [r7, #12]
 8016d9a:	2100      	movs	r1, #0
 8016d9c:	4618      	mov	r0, r3
 8016d9e:	f7fe fa49 	bl	8015234 <create_chain>
 8016da2:	62b8      	str	r0, [r7, #40]	; 0x28
 8016da4:	e013      	b.n	8016dce <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8016da6:	68fb      	ldr	r3, [r7, #12]
 8016da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d007      	beq.n	8016dbe <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	695b      	ldr	r3, [r3, #20]
 8016db2:	4619      	mov	r1, r3
 8016db4:	68f8      	ldr	r0, [r7, #12]
 8016db6:	f7fe fad5 	bl	8015364 <clmt_clust>
 8016dba:	62b8      	str	r0, [r7, #40]	; 0x28
 8016dbc:	e007      	b.n	8016dce <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8016dbe:	68fa      	ldr	r2, [r7, #12]
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	699b      	ldr	r3, [r3, #24]
 8016dc4:	4619      	mov	r1, r3
 8016dc6:	4610      	mov	r0, r2
 8016dc8:	f7fe fa34 	bl	8015234 <create_chain>
 8016dcc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	f000 8109 	beq.w	8016fe8 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8016dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dd8:	2b01      	cmp	r3, #1
 8016dda:	d104      	bne.n	8016de6 <f_write+0x10c>
 8016ddc:	68fb      	ldr	r3, [r7, #12]
 8016dde:	2202      	movs	r2, #2
 8016de0:	745a      	strb	r2, [r3, #17]
 8016de2:	2302      	movs	r3, #2
 8016de4:	e109      	b.n	8016ffa <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016dec:	d104      	bne.n	8016df8 <f_write+0x11e>
 8016dee:	68fb      	ldr	r3, [r7, #12]
 8016df0:	2201      	movs	r2, #1
 8016df2:	745a      	strb	r2, [r3, #17]
 8016df4:	2301      	movs	r3, #1
 8016df6:	e100      	b.n	8016ffa <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016dfc:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	689b      	ldr	r3, [r3, #8]
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d102      	bne.n	8016e0c <f_write+0x132>
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016e0a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	7c1b      	ldrb	r3, [r3, #16]
 8016e10:	b25b      	sxtb	r3, r3
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	da18      	bge.n	8016e48 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016e16:	693b      	ldr	r3, [r7, #16]
 8016e18:	7858      	ldrb	r0, [r3, #1]
 8016e1a:	68fb      	ldr	r3, [r7, #12]
 8016e1c:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8016e20:	68fb      	ldr	r3, [r7, #12]
 8016e22:	69da      	ldr	r2, [r3, #28]
 8016e24:	2301      	movs	r3, #1
 8016e26:	f7fd fd71 	bl	801490c <disk_write>
 8016e2a:	4603      	mov	r3, r0
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d004      	beq.n	8016e3a <f_write+0x160>
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	2201      	movs	r2, #1
 8016e34:	745a      	strb	r2, [r3, #17]
 8016e36:	2301      	movs	r3, #1
 8016e38:	e0df      	b.n	8016ffa <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8016e3a:	68fb      	ldr	r3, [r7, #12]
 8016e3c:	7c1b      	ldrb	r3, [r3, #16]
 8016e3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016e42:	b2da      	uxtb	r2, r3
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8016e48:	693a      	ldr	r2, [r7, #16]
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	699b      	ldr	r3, [r3, #24]
 8016e4e:	4619      	mov	r1, r3
 8016e50:	4610      	mov	r0, r2
 8016e52:	f7fd ff7b 	bl	8014d4c <clust2sect>
 8016e56:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8016e58:	697b      	ldr	r3, [r7, #20]
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d104      	bne.n	8016e68 <f_write+0x18e>
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	2202      	movs	r2, #2
 8016e62:	745a      	strb	r2, [r3, #17]
 8016e64:	2302      	movs	r3, #2
 8016e66:	e0c8      	b.n	8016ffa <f_write+0x320>
			sect += csect;
 8016e68:	697a      	ldr	r2, [r7, #20]
 8016e6a:	69bb      	ldr	r3, [r7, #24]
 8016e6c:	4413      	add	r3, r2
 8016e6e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8016e70:	693b      	ldr	r3, [r7, #16]
 8016e72:	899b      	ldrh	r3, [r3, #12]
 8016e74:	461a      	mov	r2, r3
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	fbb3 f3f2 	udiv	r3, r3, r2
 8016e7c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8016e7e:	6a3b      	ldr	r3, [r7, #32]
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d043      	beq.n	8016f0c <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8016e84:	69ba      	ldr	r2, [r7, #24]
 8016e86:	6a3b      	ldr	r3, [r7, #32]
 8016e88:	4413      	add	r3, r2
 8016e8a:	693a      	ldr	r2, [r7, #16]
 8016e8c:	8952      	ldrh	r2, [r2, #10]
 8016e8e:	4293      	cmp	r3, r2
 8016e90:	d905      	bls.n	8016e9e <f_write+0x1c4>
					cc = fs->csize - csect;
 8016e92:	693b      	ldr	r3, [r7, #16]
 8016e94:	895b      	ldrh	r3, [r3, #10]
 8016e96:	461a      	mov	r2, r3
 8016e98:	69bb      	ldr	r3, [r7, #24]
 8016e9a:	1ad3      	subs	r3, r2, r3
 8016e9c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016e9e:	693b      	ldr	r3, [r7, #16]
 8016ea0:	7858      	ldrb	r0, [r3, #1]
 8016ea2:	6a3b      	ldr	r3, [r7, #32]
 8016ea4:	697a      	ldr	r2, [r7, #20]
 8016ea6:	69f9      	ldr	r1, [r7, #28]
 8016ea8:	f7fd fd30 	bl	801490c <disk_write>
 8016eac:	4603      	mov	r3, r0
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d004      	beq.n	8016ebc <f_write+0x1e2>
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	2201      	movs	r2, #1
 8016eb6:	745a      	strb	r2, [r3, #17]
 8016eb8:	2301      	movs	r3, #1
 8016eba:	e09e      	b.n	8016ffa <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8016ebc:	68fb      	ldr	r3, [r7, #12]
 8016ebe:	69da      	ldr	r2, [r3, #28]
 8016ec0:	697b      	ldr	r3, [r7, #20]
 8016ec2:	1ad3      	subs	r3, r2, r3
 8016ec4:	6a3a      	ldr	r2, [r7, #32]
 8016ec6:	429a      	cmp	r2, r3
 8016ec8:	d918      	bls.n	8016efc <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8016eca:	68fb      	ldr	r3, [r7, #12]
 8016ecc:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	69da      	ldr	r2, [r3, #28]
 8016ed4:	697b      	ldr	r3, [r7, #20]
 8016ed6:	1ad3      	subs	r3, r2, r3
 8016ed8:	693a      	ldr	r2, [r7, #16]
 8016eda:	8992      	ldrh	r2, [r2, #12]
 8016edc:	fb02 f303 	mul.w	r3, r2, r3
 8016ee0:	69fa      	ldr	r2, [r7, #28]
 8016ee2:	18d1      	adds	r1, r2, r3
 8016ee4:	693b      	ldr	r3, [r7, #16]
 8016ee6:	899b      	ldrh	r3, [r3, #12]
 8016ee8:	461a      	mov	r2, r3
 8016eea:	f7fd fdcf 	bl	8014a8c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8016eee:	68fb      	ldr	r3, [r7, #12]
 8016ef0:	7c1b      	ldrb	r3, [r3, #16]
 8016ef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016ef6:	b2da      	uxtb	r2, r3
 8016ef8:	68fb      	ldr	r3, [r7, #12]
 8016efa:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8016efc:	693b      	ldr	r3, [r7, #16]
 8016efe:	899b      	ldrh	r3, [r3, #12]
 8016f00:	461a      	mov	r2, r3
 8016f02:	6a3b      	ldr	r3, [r7, #32]
 8016f04:	fb02 f303 	mul.w	r3, r2, r3
 8016f08:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8016f0a:	e04b      	b.n	8016fa4 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	69db      	ldr	r3, [r3, #28]
 8016f10:	697a      	ldr	r2, [r7, #20]
 8016f12:	429a      	cmp	r2, r3
 8016f14:	d016      	beq.n	8016f44 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8016f16:	68fb      	ldr	r3, [r7, #12]
 8016f18:	695a      	ldr	r2, [r3, #20]
 8016f1a:	68fb      	ldr	r3, [r7, #12]
 8016f1c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8016f1e:	429a      	cmp	r2, r3
 8016f20:	d210      	bcs.n	8016f44 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8016f22:	693b      	ldr	r3, [r7, #16]
 8016f24:	7858      	ldrb	r0, [r3, #1]
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8016f2c:	2301      	movs	r3, #1
 8016f2e:	697a      	ldr	r2, [r7, #20]
 8016f30:	f7fd fccc 	bl	80148cc <disk_read>
 8016f34:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d004      	beq.n	8016f44 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	2201      	movs	r2, #1
 8016f3e:	745a      	strb	r2, [r3, #17]
 8016f40:	2301      	movs	r3, #1
 8016f42:	e05a      	b.n	8016ffa <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	697a      	ldr	r2, [r7, #20]
 8016f48:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8016f4a:	693b      	ldr	r3, [r7, #16]
 8016f4c:	899b      	ldrh	r3, [r3, #12]
 8016f4e:	4618      	mov	r0, r3
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	695b      	ldr	r3, [r3, #20]
 8016f54:	693a      	ldr	r2, [r7, #16]
 8016f56:	8992      	ldrh	r2, [r2, #12]
 8016f58:	fbb3 f1f2 	udiv	r1, r3, r2
 8016f5c:	fb01 f202 	mul.w	r2, r1, r2
 8016f60:	1a9b      	subs	r3, r3, r2
 8016f62:	1ac3      	subs	r3, r0, r3
 8016f64:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8016f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	429a      	cmp	r2, r3
 8016f6c:	d901      	bls.n	8016f72 <f_write+0x298>
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8016f78:	68fb      	ldr	r3, [r7, #12]
 8016f7a:	695b      	ldr	r3, [r3, #20]
 8016f7c:	693a      	ldr	r2, [r7, #16]
 8016f7e:	8992      	ldrh	r2, [r2, #12]
 8016f80:	fbb3 f0f2 	udiv	r0, r3, r2
 8016f84:	fb00 f202 	mul.w	r2, r0, r2
 8016f88:	1a9b      	subs	r3, r3, r2
 8016f8a:	440b      	add	r3, r1
 8016f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f8e:	69f9      	ldr	r1, [r7, #28]
 8016f90:	4618      	mov	r0, r3
 8016f92:	f7fd fd7b 	bl	8014a8c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	7c1b      	ldrb	r3, [r3, #16]
 8016f9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016f9e:	b2da      	uxtb	r2, r3
 8016fa0:	68fb      	ldr	r3, [r7, #12]
 8016fa2:	741a      	strb	r2, [r3, #16]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8016fa4:	69fa      	ldr	r2, [r7, #28]
 8016fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fa8:	4413      	add	r3, r2
 8016faa:	61fb      	str	r3, [r7, #28]
 8016fac:	68fb      	ldr	r3, [r7, #12]
 8016fae:	695a      	ldr	r2, [r3, #20]
 8016fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fb2:	441a      	add	r2, r3
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	615a      	str	r2, [r3, #20]
 8016fb8:	68fb      	ldr	r3, [r7, #12]
 8016fba:	68da      	ldr	r2, [r3, #12]
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	695b      	ldr	r3, [r3, #20]
 8016fc0:	429a      	cmp	r2, r3
 8016fc2:	bf38      	it	cc
 8016fc4:	461a      	movcc	r2, r3
 8016fc6:	68fb      	ldr	r3, [r7, #12]
 8016fc8:	60da      	str	r2, [r3, #12]
 8016fca:	683b      	ldr	r3, [r7, #0]
 8016fcc:	681a      	ldr	r2, [r3, #0]
 8016fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fd0:	441a      	add	r2, r3
 8016fd2:	683b      	ldr	r3, [r7, #0]
 8016fd4:	601a      	str	r2, [r3, #0]
 8016fd6:	687a      	ldr	r2, [r7, #4]
 8016fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fda:	1ad3      	subs	r3, r2, r3
 8016fdc:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8016fde:	687b      	ldr	r3, [r7, #4]
 8016fe0:	2b00      	cmp	r3, #0
 8016fe2:	f47f aeb5 	bne.w	8016d50 <f_write+0x76>
 8016fe6:	e000      	b.n	8016fea <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016fe8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	7c1b      	ldrb	r3, [r3, #16]
 8016fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ff2:	b2da      	uxtb	r2, r3
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8016ff8:	2300      	movs	r3, #0
}
 8016ffa:	4618      	mov	r0, r3
 8016ffc:	3730      	adds	r7, #48	; 0x30
 8016ffe:	46bd      	mov	sp, r7
 8017000:	bd80      	pop	{r7, pc}

08017002 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8017002:	b580      	push	{r7, lr}
 8017004:	b086      	sub	sp, #24
 8017006:	af00      	add	r7, sp, #0
 8017008:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	f107 0208 	add.w	r2, r7, #8
 8017010:	4611      	mov	r1, r2
 8017012:	4618      	mov	r0, r3
 8017014:	f7ff fc4e 	bl	80168b4 <validate>
 8017018:	4603      	mov	r3, r0
 801701a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801701c:	7dfb      	ldrb	r3, [r7, #23]
 801701e:	2b00      	cmp	r3, #0
 8017020:	d168      	bne.n	80170f4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	7c1b      	ldrb	r3, [r3, #16]
 8017026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801702a:	2b00      	cmp	r3, #0
 801702c:	d062      	beq.n	80170f4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	7c1b      	ldrb	r3, [r3, #16]
 8017032:	b25b      	sxtb	r3, r3
 8017034:	2b00      	cmp	r3, #0
 8017036:	da15      	bge.n	8017064 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8017038:	68bb      	ldr	r3, [r7, #8]
 801703a:	7858      	ldrb	r0, [r3, #1]
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	69da      	ldr	r2, [r3, #28]
 8017046:	2301      	movs	r3, #1
 8017048:	f7fd fc60 	bl	801490c <disk_write>
 801704c:	4603      	mov	r3, r0
 801704e:	2b00      	cmp	r3, #0
 8017050:	d001      	beq.n	8017056 <f_sync+0x54>
 8017052:	2301      	movs	r3, #1
 8017054:	e04f      	b.n	80170f6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	7c1b      	ldrb	r3, [r3, #16]
 801705a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801705e:	b2da      	uxtb	r2, r3
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8017064:	f7f9 ff48 	bl	8010ef8 <get_fattime>
 8017068:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801706a:	68ba      	ldr	r2, [r7, #8]
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	6a1b      	ldr	r3, [r3, #32]
 8017070:	4619      	mov	r1, r3
 8017072:	4610      	mov	r0, r2
 8017074:	f7fd fdcc 	bl	8014c10 <move_window>
 8017078:	4603      	mov	r3, r0
 801707a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801707c:	7dfb      	ldrb	r3, [r7, #23]
 801707e:	2b00      	cmp	r3, #0
 8017080:	d138      	bne.n	80170f4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017086:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	330b      	adds	r3, #11
 801708c:	781a      	ldrb	r2, [r3, #0]
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	330b      	adds	r3, #11
 8017092:	f042 0220 	orr.w	r2, r2, #32
 8017096:	b2d2      	uxtb	r2, r2
 8017098:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801709a:	687b      	ldr	r3, [r7, #4]
 801709c:	6818      	ldr	r0, [r3, #0]
 801709e:	687b      	ldr	r3, [r7, #4]
 80170a0:	689b      	ldr	r3, [r3, #8]
 80170a2:	461a      	mov	r2, r3
 80170a4:	68f9      	ldr	r1, [r7, #12]
 80170a6:	f7fe fb5a 	bl	801575e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80170aa:	68fb      	ldr	r3, [r7, #12]
 80170ac:	f103 021c 	add.w	r2, r3, #28
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	68db      	ldr	r3, [r3, #12]
 80170b4:	4619      	mov	r1, r3
 80170b6:	4610      	mov	r0, r2
 80170b8:	f7fd fcbc 	bl	8014a34 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80170bc:	68fb      	ldr	r3, [r7, #12]
 80170be:	3316      	adds	r3, #22
 80170c0:	6939      	ldr	r1, [r7, #16]
 80170c2:	4618      	mov	r0, r3
 80170c4:	f7fd fcb6 	bl	8014a34 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80170c8:	68fb      	ldr	r3, [r7, #12]
 80170ca:	3312      	adds	r3, #18
 80170cc:	2100      	movs	r1, #0
 80170ce:	4618      	mov	r0, r3
 80170d0:	f7fd fc95 	bl	80149fe <st_word>
					fs->wflag = 1;
 80170d4:	68bb      	ldr	r3, [r7, #8]
 80170d6:	2201      	movs	r2, #1
 80170d8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80170da:	68bb      	ldr	r3, [r7, #8]
 80170dc:	4618      	mov	r0, r3
 80170de:	f7fd fdc5 	bl	8014c6c <sync_fs>
 80170e2:	4603      	mov	r3, r0
 80170e4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	7c1b      	ldrb	r3, [r3, #16]
 80170ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80170ee:	b2da      	uxtb	r2, r3
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80170f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80170f6:	4618      	mov	r0, r3
 80170f8:	3718      	adds	r7, #24
 80170fa:	46bd      	mov	sp, r7
 80170fc:	bd80      	pop	{r7, pc}

080170fe <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80170fe:	b580      	push	{r7, lr}
 8017100:	b084      	sub	sp, #16
 8017102:	af00      	add	r7, sp, #0
 8017104:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8017106:	6878      	ldr	r0, [r7, #4]
 8017108:	f7ff ff7b 	bl	8017002 <f_sync>
 801710c:	4603      	mov	r3, r0
 801710e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8017110:	7bfb      	ldrb	r3, [r7, #15]
 8017112:	2b00      	cmp	r3, #0
 8017114:	d10e      	bne.n	8017134 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	f107 0208 	add.w	r2, r7, #8
 801711c:	4611      	mov	r1, r2
 801711e:	4618      	mov	r0, r3
 8017120:	f7ff fbc8 	bl	80168b4 <validate>
 8017124:	4603      	mov	r3, r0
 8017126:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8017128:	7bfb      	ldrb	r3, [r7, #15]
 801712a:	2b00      	cmp	r3, #0
 801712c:	d102      	bne.n	8017134 <f_close+0x36>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801712e:	687b      	ldr	r3, [r7, #4]
 8017130:	2200      	movs	r2, #0
 8017132:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8017134:	7bfb      	ldrb	r3, [r7, #15]
}
 8017136:	4618      	mov	r0, r3
 8017138:	3710      	adds	r7, #16
 801713a:	46bd      	mov	sp, r7
 801713c:	bd80      	pop	{r7, pc}

0801713e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 801713e:	b580      	push	{r7, lr}
 8017140:	b086      	sub	sp, #24
 8017142:	af00      	add	r7, sp, #0
 8017144:	6078      	str	r0, [r7, #4]
 8017146:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	2b00      	cmp	r3, #0
 801714c:	d101      	bne.n	8017152 <f_opendir+0x14>
 801714e:	2309      	movs	r3, #9
 8017150:	e04c      	b.n	80171ec <f_opendir+0xae>

	/* Get logical drive */
	obj = &dp->obj;
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8017156:	f107 010c 	add.w	r1, r7, #12
 801715a:	463b      	mov	r3, r7
 801715c:	2200      	movs	r2, #0
 801715e:	4618      	mov	r0, r3
 8017160:	f7ff f926 	bl	80163b0 <find_volume>
 8017164:	4603      	mov	r3, r0
 8017166:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017168:	7dfb      	ldrb	r3, [r7, #23]
 801716a:	2b00      	cmp	r3, #0
 801716c:	d137      	bne.n	80171de <f_opendir+0xa0>
		obj->fs = fs;
 801716e:	68fa      	ldr	r2, [r7, #12]
 8017170:	693b      	ldr	r3, [r7, #16]
 8017172:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8017174:	683b      	ldr	r3, [r7, #0]
 8017176:	4619      	mov	r1, r3
 8017178:	6878      	ldr	r0, [r7, #4]
 801717a:	f7ff f809 	bl	8016190 <follow_path>
 801717e:	4603      	mov	r3, r0
 8017180:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8017182:	7dfb      	ldrb	r3, [r7, #23]
 8017184:	2b00      	cmp	r3, #0
 8017186:	d125      	bne.n	80171d4 <f_opendir+0x96>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801718e:	b25b      	sxtb	r3, r3
 8017190:	2b00      	cmp	r3, #0
 8017192:	db12      	blt.n	80171ba <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8017194:	693b      	ldr	r3, [r7, #16]
 8017196:	799b      	ldrb	r3, [r3, #6]
 8017198:	f003 0310 	and.w	r3, r3, #16
 801719c:	2b00      	cmp	r3, #0
 801719e:	d00a      	beq.n	80171b6 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80171a0:	68fa      	ldr	r2, [r7, #12]
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	69db      	ldr	r3, [r3, #28]
 80171a6:	4619      	mov	r1, r3
 80171a8:	4610      	mov	r0, r2
 80171aa:	f7fe fab9 	bl	8015720 <ld_clust>
 80171ae:	4602      	mov	r2, r0
 80171b0:	693b      	ldr	r3, [r7, #16]
 80171b2:	609a      	str	r2, [r3, #8]
 80171b4:	e001      	b.n	80171ba <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80171b6:	2305      	movs	r3, #5
 80171b8:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80171ba:	7dfb      	ldrb	r3, [r7, #23]
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d109      	bne.n	80171d4 <f_opendir+0x96>
				obj->id = fs->id;
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	88da      	ldrh	r2, [r3, #6]
 80171c4:	693b      	ldr	r3, [r7, #16]
 80171c6:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 80171c8:	2100      	movs	r1, #0
 80171ca:	6878      	ldr	r0, [r7, #4]
 80171cc:	f7fe f902 	bl	80153d4 <dir_sdi>
 80171d0:	4603      	mov	r3, r0
 80171d2:	75fb      	strb	r3, [r7, #23]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80171d4:	7dfb      	ldrb	r3, [r7, #23]
 80171d6:	2b04      	cmp	r3, #4
 80171d8:	d101      	bne.n	80171de <f_opendir+0xa0>
 80171da:	2305      	movs	r3, #5
 80171dc:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80171de:	7dfb      	ldrb	r3, [r7, #23]
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d002      	beq.n	80171ea <f_opendir+0xac>
 80171e4:	693b      	ldr	r3, [r7, #16]
 80171e6:	2200      	movs	r2, #0
 80171e8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80171ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80171ec:	4618      	mov	r0, r3
 80171ee:	3718      	adds	r7, #24
 80171f0:	46bd      	mov	sp, r7
 80171f2:	bd80      	pop	{r7, pc}

080171f4 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80171f4:	b580      	push	{r7, lr}
 80171f6:	b084      	sub	sp, #16
 80171f8:	af00      	add	r7, sp, #0
 80171fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	f107 0208 	add.w	r2, r7, #8
 8017202:	4611      	mov	r1, r2
 8017204:	4618      	mov	r0, r3
 8017206:	f7ff fb55 	bl	80168b4 <validate>
 801720a:	4603      	mov	r3, r0
 801720c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801720e:	7bfb      	ldrb	r3, [r7, #15]
 8017210:	2b00      	cmp	r3, #0
 8017212:	d102      	bne.n	801721a <f_closedir+0x26>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	2200      	movs	r2, #0
 8017218:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 801721a:	7bfb      	ldrb	r3, [r7, #15]
}
 801721c:	4618      	mov	r0, r3
 801721e:	3710      	adds	r7, #16
 8017220:	46bd      	mov	sp, r7
 8017222:	bd80      	pop	{r7, pc}

08017224 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8017224:	b580      	push	{r7, lr}
 8017226:	b096      	sub	sp, #88	; 0x58
 8017228:	af00      	add	r7, sp, #0
 801722a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801722c:	f107 0108 	add.w	r1, r7, #8
 8017230:	1d3b      	adds	r3, r7, #4
 8017232:	2202      	movs	r2, #2
 8017234:	4618      	mov	r0, r3
 8017236:	f7ff f8bb 	bl	80163b0 <find_volume>
 801723a:	4603      	mov	r3, r0
 801723c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8017240:	68bb      	ldr	r3, [r7, #8]
 8017242:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8017244:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017248:	2b00      	cmp	r3, #0
 801724a:	f040 80f2 	bne.w	8017432 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 801724e:	687a      	ldr	r2, [r7, #4]
 8017250:	f107 030c 	add.w	r3, r7, #12
 8017254:	4611      	mov	r1, r2
 8017256:	4618      	mov	r0, r3
 8017258:	f7fe ff9a 	bl	8016190 <follow_path>
 801725c:	4603      	mov	r3, r0
 801725e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8017262:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017266:	2b00      	cmp	r3, #0
 8017268:	d102      	bne.n	8017270 <f_mkdir+0x4c>
 801726a:	2308      	movs	r3, #8
 801726c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8017270:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017274:	2b04      	cmp	r3, #4
 8017276:	f040 80dc 	bne.w	8017432 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 801727a:	f107 030c 	add.w	r3, r7, #12
 801727e:	2100      	movs	r1, #0
 8017280:	4618      	mov	r0, r3
 8017282:	f7fd ffd7 	bl	8015234 <create_chain>
 8017286:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8017288:	68bb      	ldr	r3, [r7, #8]
 801728a:	895b      	ldrh	r3, [r3, #10]
 801728c:	461a      	mov	r2, r3
 801728e:	68bb      	ldr	r3, [r7, #8]
 8017290:	899b      	ldrh	r3, [r3, #12]
 8017292:	fb02 f303 	mul.w	r3, r2, r3
 8017296:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8017298:	2300      	movs	r3, #0
 801729a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 801729e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d102      	bne.n	80172aa <f_mkdir+0x86>
 80172a4:	2307      	movs	r3, #7
 80172a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 80172aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80172ac:	2b01      	cmp	r3, #1
 80172ae:	d102      	bne.n	80172b6 <f_mkdir+0x92>
 80172b0:	2302      	movs	r3, #2
 80172b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80172b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80172b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80172bc:	d102      	bne.n	80172c4 <f_mkdir+0xa0>
 80172be:	2301      	movs	r3, #1
 80172c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 80172c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d106      	bne.n	80172da <f_mkdir+0xb6>
 80172cc:	68bb      	ldr	r3, [r7, #8]
 80172ce:	4618      	mov	r0, r3
 80172d0:	f7fd fc5a 	bl	8014b88 <sync_window>
 80172d4:	4603      	mov	r3, r0
 80172d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 80172da:	f7f9 fe0d 	bl	8010ef8 <get_fattime>
 80172de:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 80172e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d16c      	bne.n	80173c2 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 80172e8:	68bb      	ldr	r3, [r7, #8]
 80172ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80172ec:	4618      	mov	r0, r3
 80172ee:	f7fd fd2d 	bl	8014d4c <clust2sect>
 80172f2:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 80172f4:	68bb      	ldr	r3, [r7, #8]
 80172f6:	3338      	adds	r3, #56	; 0x38
 80172f8:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 80172fa:	68bb      	ldr	r3, [r7, #8]
 80172fc:	899b      	ldrh	r3, [r3, #12]
 80172fe:	461a      	mov	r2, r3
 8017300:	2100      	movs	r1, #0
 8017302:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8017304:	f7fd fbe3 	bl	8014ace <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8017308:	220b      	movs	r2, #11
 801730a:	2120      	movs	r1, #32
 801730c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801730e:	f7fd fbde 	bl	8014ace <mem_set>
					dir[DIR_Name] = '.';
 8017312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017314:	222e      	movs	r2, #46	; 0x2e
 8017316:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8017318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801731a:	330b      	adds	r3, #11
 801731c:	2210      	movs	r2, #16
 801731e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8017320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017322:	3316      	adds	r3, #22
 8017324:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017326:	4618      	mov	r0, r3
 8017328:	f7fd fb84 	bl	8014a34 <st_dword>
					st_clust(fs, dir, dcl);
 801732c:	68bb      	ldr	r3, [r7, #8]
 801732e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017330:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017332:	4618      	mov	r0, r3
 8017334:	f7fe fa13 	bl	801575e <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8017338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801733a:	3320      	adds	r3, #32
 801733c:	2220      	movs	r2, #32
 801733e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017340:	4618      	mov	r0, r3
 8017342:	f7fd fba3 	bl	8014a8c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8017346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017348:	3321      	adds	r3, #33	; 0x21
 801734a:	222e      	movs	r2, #46	; 0x2e
 801734c:	701a      	strb	r2, [r3, #0]
 801734e:	697b      	ldr	r3, [r7, #20]
 8017350:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8017352:	68bb      	ldr	r3, [r7, #8]
 8017354:	781b      	ldrb	r3, [r3, #0]
 8017356:	2b03      	cmp	r3, #3
 8017358:	d106      	bne.n	8017368 <f_mkdir+0x144>
 801735a:	68bb      	ldr	r3, [r7, #8]
 801735c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801735e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017360:	429a      	cmp	r2, r3
 8017362:	d101      	bne.n	8017368 <f_mkdir+0x144>
 8017364:	2300      	movs	r3, #0
 8017366:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8017368:	68b8      	ldr	r0, [r7, #8]
 801736a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801736c:	3320      	adds	r3, #32
 801736e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017370:	4619      	mov	r1, r3
 8017372:	f7fe f9f4 	bl	801575e <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8017376:	68bb      	ldr	r3, [r7, #8]
 8017378:	895b      	ldrh	r3, [r3, #10]
 801737a:	653b      	str	r3, [r7, #80]	; 0x50
 801737c:	e01c      	b.n	80173b8 <f_mkdir+0x194>
					fs->winsect = dsc++;
 801737e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017380:	1c5a      	adds	r2, r3, #1
 8017382:	64fa      	str	r2, [r7, #76]	; 0x4c
 8017384:	68ba      	ldr	r2, [r7, #8]
 8017386:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8017388:	68bb      	ldr	r3, [r7, #8]
 801738a:	2201      	movs	r2, #1
 801738c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801738e:	68bb      	ldr	r3, [r7, #8]
 8017390:	4618      	mov	r0, r3
 8017392:	f7fd fbf9 	bl	8014b88 <sync_window>
 8017396:	4603      	mov	r3, r0
 8017398:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 801739c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d10d      	bne.n	80173c0 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 80173a4:	68bb      	ldr	r3, [r7, #8]
 80173a6:	899b      	ldrh	r3, [r3, #12]
 80173a8:	461a      	mov	r2, r3
 80173aa:	2100      	movs	r1, #0
 80173ac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80173ae:	f7fd fb8e 	bl	8014ace <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80173b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80173b4:	3b01      	subs	r3, #1
 80173b6:	653b      	str	r3, [r7, #80]	; 0x50
 80173b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d1df      	bne.n	801737e <f_mkdir+0x15a>
 80173be:	e000      	b.n	80173c2 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 80173c0:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80173c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d107      	bne.n	80173da <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80173ca:	f107 030c 	add.w	r3, r7, #12
 80173ce:	4618      	mov	r0, r3
 80173d0:	f7fe fc2e 	bl	8015c30 <dir_register>
 80173d4:	4603      	mov	r3, r0
 80173d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 80173da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d120      	bne.n	8017424 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 80173e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173e4:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80173e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80173e8:	3316      	adds	r3, #22
 80173ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80173ec:	4618      	mov	r0, r3
 80173ee:	f7fd fb21 	bl	8014a34 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80173f2:	68bb      	ldr	r3, [r7, #8]
 80173f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80173f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80173f8:	4618      	mov	r0, r3
 80173fa:	f7fe f9b0 	bl	801575e <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80173fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017400:	330b      	adds	r3, #11
 8017402:	2210      	movs	r2, #16
 8017404:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8017406:	68bb      	ldr	r3, [r7, #8]
 8017408:	2201      	movs	r2, #1
 801740a:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 801740c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017410:	2b00      	cmp	r3, #0
 8017412:	d10e      	bne.n	8017432 <f_mkdir+0x20e>
					res = sync_fs(fs);
 8017414:	68bb      	ldr	r3, [r7, #8]
 8017416:	4618      	mov	r0, r3
 8017418:	f7fd fc28 	bl	8014c6c <sync_fs>
 801741c:	4603      	mov	r3, r0
 801741e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8017422:	e006      	b.n	8017432 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8017424:	f107 030c 	add.w	r3, r7, #12
 8017428:	2200      	movs	r2, #0
 801742a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801742c:	4618      	mov	r0, r3
 801742e:	f7fd fe9c 	bl	801516a <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8017432:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8017436:	4618      	mov	r0, r3
 8017438:	3758      	adds	r7, #88	; 0x58
 801743a:	46bd      	mov	sp, r7
 801743c:	bd80      	pop	{r7, pc}
	...

08017440 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8017440:	b480      	push	{r7}
 8017442:	b087      	sub	sp, #28
 8017444:	af00      	add	r7, sp, #0
 8017446:	60f8      	str	r0, [r7, #12]
 8017448:	60b9      	str	r1, [r7, #8]
 801744a:	4613      	mov	r3, r2
 801744c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801744e:	2301      	movs	r3, #1
 8017450:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8017452:	2300      	movs	r3, #0
 8017454:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8017456:	4b1f      	ldr	r3, [pc, #124]	; (80174d4 <FATFS_LinkDriverEx+0x94>)
 8017458:	7a5b      	ldrb	r3, [r3, #9]
 801745a:	b2db      	uxtb	r3, r3
 801745c:	2b00      	cmp	r3, #0
 801745e:	d131      	bne.n	80174c4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8017460:	4b1c      	ldr	r3, [pc, #112]	; (80174d4 <FATFS_LinkDriverEx+0x94>)
 8017462:	7a5b      	ldrb	r3, [r3, #9]
 8017464:	b2db      	uxtb	r3, r3
 8017466:	461a      	mov	r2, r3
 8017468:	4b1a      	ldr	r3, [pc, #104]	; (80174d4 <FATFS_LinkDriverEx+0x94>)
 801746a:	2100      	movs	r1, #0
 801746c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801746e:	4b19      	ldr	r3, [pc, #100]	; (80174d4 <FATFS_LinkDriverEx+0x94>)
 8017470:	7a5b      	ldrb	r3, [r3, #9]
 8017472:	b2db      	uxtb	r3, r3
 8017474:	4a17      	ldr	r2, [pc, #92]	; (80174d4 <FATFS_LinkDriverEx+0x94>)
 8017476:	009b      	lsls	r3, r3, #2
 8017478:	4413      	add	r3, r2
 801747a:	68fa      	ldr	r2, [r7, #12]
 801747c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801747e:	4b15      	ldr	r3, [pc, #84]	; (80174d4 <FATFS_LinkDriverEx+0x94>)
 8017480:	7a5b      	ldrb	r3, [r3, #9]
 8017482:	b2db      	uxtb	r3, r3
 8017484:	461a      	mov	r2, r3
 8017486:	4b13      	ldr	r3, [pc, #76]	; (80174d4 <FATFS_LinkDriverEx+0x94>)
 8017488:	4413      	add	r3, r2
 801748a:	79fa      	ldrb	r2, [r7, #7]
 801748c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801748e:	4b11      	ldr	r3, [pc, #68]	; (80174d4 <FATFS_LinkDriverEx+0x94>)
 8017490:	7a5b      	ldrb	r3, [r3, #9]
 8017492:	b2db      	uxtb	r3, r3
 8017494:	1c5a      	adds	r2, r3, #1
 8017496:	b2d1      	uxtb	r1, r2
 8017498:	4a0e      	ldr	r2, [pc, #56]	; (80174d4 <FATFS_LinkDriverEx+0x94>)
 801749a:	7251      	strb	r1, [r2, #9]
 801749c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801749e:	7dbb      	ldrb	r3, [r7, #22]
 80174a0:	3330      	adds	r3, #48	; 0x30
 80174a2:	b2da      	uxtb	r2, r3
 80174a4:	68bb      	ldr	r3, [r7, #8]
 80174a6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80174a8:	68bb      	ldr	r3, [r7, #8]
 80174aa:	3301      	adds	r3, #1
 80174ac:	223a      	movs	r2, #58	; 0x3a
 80174ae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80174b0:	68bb      	ldr	r3, [r7, #8]
 80174b2:	3302      	adds	r3, #2
 80174b4:	222f      	movs	r2, #47	; 0x2f
 80174b6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80174b8:	68bb      	ldr	r3, [r7, #8]
 80174ba:	3303      	adds	r3, #3
 80174bc:	2200      	movs	r2, #0
 80174be:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80174c0:	2300      	movs	r3, #0
 80174c2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80174c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80174c6:	4618      	mov	r0, r3
 80174c8:	371c      	adds	r7, #28
 80174ca:	46bd      	mov	sp, r7
 80174cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174d0:	4770      	bx	lr
 80174d2:	bf00      	nop
 80174d4:	200028ec 	.word	0x200028ec

080174d8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80174d8:	b580      	push	{r7, lr}
 80174da:	b082      	sub	sp, #8
 80174dc:	af00      	add	r7, sp, #0
 80174de:	6078      	str	r0, [r7, #4]
 80174e0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80174e2:	2200      	movs	r2, #0
 80174e4:	6839      	ldr	r1, [r7, #0]
 80174e6:	6878      	ldr	r0, [r7, #4]
 80174e8:	f7ff ffaa 	bl	8017440 <FATFS_LinkDriverEx>
 80174ec:	4603      	mov	r3, r0
}
 80174ee:	4618      	mov	r0, r3
 80174f0:	3708      	adds	r7, #8
 80174f2:	46bd      	mov	sp, r7
 80174f4:	bd80      	pop	{r7, pc}
	...

080174f8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80174f8:	b480      	push	{r7}
 80174fa:	b085      	sub	sp, #20
 80174fc:	af00      	add	r7, sp, #0
 80174fe:	4603      	mov	r3, r0
 8017500:	6039      	str	r1, [r7, #0]
 8017502:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8017504:	88fb      	ldrh	r3, [r7, #6]
 8017506:	2b7f      	cmp	r3, #127	; 0x7f
 8017508:	d802      	bhi.n	8017510 <ff_convert+0x18>
		c = chr;
 801750a:	88fb      	ldrh	r3, [r7, #6]
 801750c:	81fb      	strh	r3, [r7, #14]
 801750e:	e025      	b.n	801755c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8017510:	683b      	ldr	r3, [r7, #0]
 8017512:	2b00      	cmp	r3, #0
 8017514:	d00b      	beq.n	801752e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8017516:	88fb      	ldrh	r3, [r7, #6]
 8017518:	2bff      	cmp	r3, #255	; 0xff
 801751a:	d805      	bhi.n	8017528 <ff_convert+0x30>
 801751c:	88fb      	ldrh	r3, [r7, #6]
 801751e:	3b80      	subs	r3, #128	; 0x80
 8017520:	4a12      	ldr	r2, [pc, #72]	; (801756c <ff_convert+0x74>)
 8017522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8017526:	e000      	b.n	801752a <ff_convert+0x32>
 8017528:	2300      	movs	r3, #0
 801752a:	81fb      	strh	r3, [r7, #14]
 801752c:	e016      	b.n	801755c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801752e:	2300      	movs	r3, #0
 8017530:	81fb      	strh	r3, [r7, #14]
 8017532:	e009      	b.n	8017548 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8017534:	89fb      	ldrh	r3, [r7, #14]
 8017536:	4a0d      	ldr	r2, [pc, #52]	; (801756c <ff_convert+0x74>)
 8017538:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801753c:	88fa      	ldrh	r2, [r7, #6]
 801753e:	429a      	cmp	r2, r3
 8017540:	d006      	beq.n	8017550 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8017542:	89fb      	ldrh	r3, [r7, #14]
 8017544:	3301      	adds	r3, #1
 8017546:	81fb      	strh	r3, [r7, #14]
 8017548:	89fb      	ldrh	r3, [r7, #14]
 801754a:	2b7f      	cmp	r3, #127	; 0x7f
 801754c:	d9f2      	bls.n	8017534 <ff_convert+0x3c>
 801754e:	e000      	b.n	8017552 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8017550:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8017552:	89fb      	ldrh	r3, [r7, #14]
 8017554:	3380      	adds	r3, #128	; 0x80
 8017556:	b29b      	uxth	r3, r3
 8017558:	b2db      	uxtb	r3, r3
 801755a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 801755c:	89fb      	ldrh	r3, [r7, #14]
}
 801755e:	4618      	mov	r0, r3
 8017560:	3714      	adds	r7, #20
 8017562:	46bd      	mov	sp, r7
 8017564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017568:	4770      	bx	lr
 801756a:	bf00      	nop
 801756c:	08018c2c 	.word	0x08018c2c

08017570 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8017570:	b480      	push	{r7}
 8017572:	b087      	sub	sp, #28
 8017574:	af00      	add	r7, sp, #0
 8017576:	4603      	mov	r3, r0
 8017578:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801757a:	88fb      	ldrh	r3, [r7, #6]
 801757c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017580:	d201      	bcs.n	8017586 <ff_wtoupper+0x16>
 8017582:	4b3e      	ldr	r3, [pc, #248]	; (801767c <ff_wtoupper+0x10c>)
 8017584:	e000      	b.n	8017588 <ff_wtoupper+0x18>
 8017586:	4b3e      	ldr	r3, [pc, #248]	; (8017680 <ff_wtoupper+0x110>)
 8017588:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801758a:	697b      	ldr	r3, [r7, #20]
 801758c:	1c9a      	adds	r2, r3, #2
 801758e:	617a      	str	r2, [r7, #20]
 8017590:	881b      	ldrh	r3, [r3, #0]
 8017592:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8017594:	8a7b      	ldrh	r3, [r7, #18]
 8017596:	2b00      	cmp	r3, #0
 8017598:	d068      	beq.n	801766c <ff_wtoupper+0xfc>
 801759a:	88fa      	ldrh	r2, [r7, #6]
 801759c:	8a7b      	ldrh	r3, [r7, #18]
 801759e:	429a      	cmp	r2, r3
 80175a0:	d364      	bcc.n	801766c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80175a2:	697b      	ldr	r3, [r7, #20]
 80175a4:	1c9a      	adds	r2, r3, #2
 80175a6:	617a      	str	r2, [r7, #20]
 80175a8:	881b      	ldrh	r3, [r3, #0]
 80175aa:	823b      	strh	r3, [r7, #16]
 80175ac:	8a3b      	ldrh	r3, [r7, #16]
 80175ae:	0a1b      	lsrs	r3, r3, #8
 80175b0:	81fb      	strh	r3, [r7, #14]
 80175b2:	8a3b      	ldrh	r3, [r7, #16]
 80175b4:	b2db      	uxtb	r3, r3
 80175b6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80175b8:	88fa      	ldrh	r2, [r7, #6]
 80175ba:	8a79      	ldrh	r1, [r7, #18]
 80175bc:	8a3b      	ldrh	r3, [r7, #16]
 80175be:	440b      	add	r3, r1
 80175c0:	429a      	cmp	r2, r3
 80175c2:	da49      	bge.n	8017658 <ff_wtoupper+0xe8>
			switch (cmd) {
 80175c4:	89fb      	ldrh	r3, [r7, #14]
 80175c6:	2b08      	cmp	r3, #8
 80175c8:	d84f      	bhi.n	801766a <ff_wtoupper+0xfa>
 80175ca:	a201      	add	r2, pc, #4	; (adr r2, 80175d0 <ff_wtoupper+0x60>)
 80175cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80175d0:	080175f5 	.word	0x080175f5
 80175d4:	08017607 	.word	0x08017607
 80175d8:	0801761d 	.word	0x0801761d
 80175dc:	08017625 	.word	0x08017625
 80175e0:	0801762d 	.word	0x0801762d
 80175e4:	08017635 	.word	0x08017635
 80175e8:	0801763d 	.word	0x0801763d
 80175ec:	08017645 	.word	0x08017645
 80175f0:	0801764d 	.word	0x0801764d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80175f4:	88fa      	ldrh	r2, [r7, #6]
 80175f6:	8a7b      	ldrh	r3, [r7, #18]
 80175f8:	1ad3      	subs	r3, r2, r3
 80175fa:	005b      	lsls	r3, r3, #1
 80175fc:	697a      	ldr	r2, [r7, #20]
 80175fe:	4413      	add	r3, r2
 8017600:	881b      	ldrh	r3, [r3, #0]
 8017602:	80fb      	strh	r3, [r7, #6]
 8017604:	e027      	b.n	8017656 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8017606:	88fa      	ldrh	r2, [r7, #6]
 8017608:	8a7b      	ldrh	r3, [r7, #18]
 801760a:	1ad3      	subs	r3, r2, r3
 801760c:	b29b      	uxth	r3, r3
 801760e:	f003 0301 	and.w	r3, r3, #1
 8017612:	b29b      	uxth	r3, r3
 8017614:	88fa      	ldrh	r2, [r7, #6]
 8017616:	1ad3      	subs	r3, r2, r3
 8017618:	80fb      	strh	r3, [r7, #6]
 801761a:	e01c      	b.n	8017656 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801761c:	88fb      	ldrh	r3, [r7, #6]
 801761e:	3b10      	subs	r3, #16
 8017620:	80fb      	strh	r3, [r7, #6]
 8017622:	e018      	b.n	8017656 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8017624:	88fb      	ldrh	r3, [r7, #6]
 8017626:	3b20      	subs	r3, #32
 8017628:	80fb      	strh	r3, [r7, #6]
 801762a:	e014      	b.n	8017656 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801762c:	88fb      	ldrh	r3, [r7, #6]
 801762e:	3b30      	subs	r3, #48	; 0x30
 8017630:	80fb      	strh	r3, [r7, #6]
 8017632:	e010      	b.n	8017656 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8017634:	88fb      	ldrh	r3, [r7, #6]
 8017636:	3b1a      	subs	r3, #26
 8017638:	80fb      	strh	r3, [r7, #6]
 801763a:	e00c      	b.n	8017656 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801763c:	88fb      	ldrh	r3, [r7, #6]
 801763e:	3308      	adds	r3, #8
 8017640:	80fb      	strh	r3, [r7, #6]
 8017642:	e008      	b.n	8017656 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8017644:	88fb      	ldrh	r3, [r7, #6]
 8017646:	3b50      	subs	r3, #80	; 0x50
 8017648:	80fb      	strh	r3, [r7, #6]
 801764a:	e004      	b.n	8017656 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801764c:	88fb      	ldrh	r3, [r7, #6]
 801764e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8017652:	80fb      	strh	r3, [r7, #6]
 8017654:	bf00      	nop
			}
			break;
 8017656:	e008      	b.n	801766a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8017658:	89fb      	ldrh	r3, [r7, #14]
 801765a:	2b00      	cmp	r3, #0
 801765c:	d195      	bne.n	801758a <ff_wtoupper+0x1a>
 801765e:	8a3b      	ldrh	r3, [r7, #16]
 8017660:	005b      	lsls	r3, r3, #1
 8017662:	697a      	ldr	r2, [r7, #20]
 8017664:	4413      	add	r3, r2
 8017666:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8017668:	e78f      	b.n	801758a <ff_wtoupper+0x1a>
			break;
 801766a:	bf00      	nop
	}

	return chr;
 801766c:	88fb      	ldrh	r3, [r7, #6]
}
 801766e:	4618      	mov	r0, r3
 8017670:	371c      	adds	r7, #28
 8017672:	46bd      	mov	sp, r7
 8017674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017678:	4770      	bx	lr
 801767a:	bf00      	nop
 801767c:	08018d2c 	.word	0x08018d2c
 8017680:	08018f20 	.word	0x08018f20

08017684 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017684:	b580      	push	{r7, lr}
 8017686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017688:	2200      	movs	r2, #0
 801768a:	4912      	ldr	r1, [pc, #72]	; (80176d4 <MX_USB_DEVICE_Init+0x50>)
 801768c:	4812      	ldr	r0, [pc, #72]	; (80176d8 <MX_USB_DEVICE_Init+0x54>)
 801768e:	f7fb fddc 	bl	801324a <USBD_Init>
 8017692:	4603      	mov	r3, r0
 8017694:	2b00      	cmp	r3, #0
 8017696:	d001      	beq.n	801769c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017698:	f7ea fa8e 	bl	8001bb8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 801769c:	490f      	ldr	r1, [pc, #60]	; (80176dc <MX_USB_DEVICE_Init+0x58>)
 801769e:	480e      	ldr	r0, [pc, #56]	; (80176d8 <MX_USB_DEVICE_Init+0x54>)
 80176a0:	f7fb fe03 	bl	80132aa <USBD_RegisterClass>
 80176a4:	4603      	mov	r3, r0
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d001      	beq.n	80176ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80176aa:	f7ea fa85 	bl	8001bb8 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80176ae:	490c      	ldr	r1, [pc, #48]	; (80176e0 <MX_USB_DEVICE_Init+0x5c>)
 80176b0:	4809      	ldr	r0, [pc, #36]	; (80176d8 <MX_USB_DEVICE_Init+0x54>)
 80176b2:	f7fa f8ad 	bl	8011810 <USBD_MSC_RegisterStorage>
 80176b6:	4603      	mov	r3, r0
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d001      	beq.n	80176c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80176bc:	f7ea fa7c 	bl	8001bb8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80176c0:	4805      	ldr	r0, [pc, #20]	; (80176d8 <MX_USB_DEVICE_Init+0x54>)
 80176c2:	f7fb fe28 	bl	8013316 <USBD_Start>
 80176c6:	4603      	mov	r3, r0
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d001      	beq.n	80176d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80176cc:	f7ea fa74 	bl	8001bb8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80176d0:	bf00      	nop
 80176d2:	bd80      	pop	{r7, pc}
 80176d4:	200000b4 	.word	0x200000b4
 80176d8:	200028f8 	.word	0x200028f8
 80176dc:	2000000c 	.word	0x2000000c
 80176e0:	20000114 	.word	0x20000114

080176e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80176e4:	b480      	push	{r7}
 80176e6:	b083      	sub	sp, #12
 80176e8:	af00      	add	r7, sp, #0
 80176ea:	4603      	mov	r3, r0
 80176ec:	6039      	str	r1, [r7, #0]
 80176ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80176f0:	683b      	ldr	r3, [r7, #0]
 80176f2:	2212      	movs	r2, #18
 80176f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80176f6:	4b03      	ldr	r3, [pc, #12]	; (8017704 <USBD_FS_DeviceDescriptor+0x20>)
}
 80176f8:	4618      	mov	r0, r3
 80176fa:	370c      	adds	r7, #12
 80176fc:	46bd      	mov	sp, r7
 80176fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017702:	4770      	bx	lr
 8017704:	200000d4 	.word	0x200000d4

08017708 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017708:	b480      	push	{r7}
 801770a:	b083      	sub	sp, #12
 801770c:	af00      	add	r7, sp, #0
 801770e:	4603      	mov	r3, r0
 8017710:	6039      	str	r1, [r7, #0]
 8017712:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017714:	683b      	ldr	r3, [r7, #0]
 8017716:	2204      	movs	r2, #4
 8017718:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801771a:	4b03      	ldr	r3, [pc, #12]	; (8017728 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801771c:	4618      	mov	r0, r3
 801771e:	370c      	adds	r7, #12
 8017720:	46bd      	mov	sp, r7
 8017722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017726:	4770      	bx	lr
 8017728:	200000f4 	.word	0x200000f4

0801772c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801772c:	b580      	push	{r7, lr}
 801772e:	b082      	sub	sp, #8
 8017730:	af00      	add	r7, sp, #0
 8017732:	4603      	mov	r3, r0
 8017734:	6039      	str	r1, [r7, #0]
 8017736:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017738:	79fb      	ldrb	r3, [r7, #7]
 801773a:	2b00      	cmp	r3, #0
 801773c:	d105      	bne.n	801774a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801773e:	683a      	ldr	r2, [r7, #0]
 8017740:	4907      	ldr	r1, [pc, #28]	; (8017760 <USBD_FS_ProductStrDescriptor+0x34>)
 8017742:	4808      	ldr	r0, [pc, #32]	; (8017764 <USBD_FS_ProductStrDescriptor+0x38>)
 8017744:	f7fc ffbe 	bl	80146c4 <USBD_GetString>
 8017748:	e004      	b.n	8017754 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801774a:	683a      	ldr	r2, [r7, #0]
 801774c:	4904      	ldr	r1, [pc, #16]	; (8017760 <USBD_FS_ProductStrDescriptor+0x34>)
 801774e:	4805      	ldr	r0, [pc, #20]	; (8017764 <USBD_FS_ProductStrDescriptor+0x38>)
 8017750:	f7fc ffb8 	bl	80146c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017754:	4b02      	ldr	r3, [pc, #8]	; (8017760 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8017756:	4618      	mov	r0, r3
 8017758:	3708      	adds	r7, #8
 801775a:	46bd      	mov	sp, r7
 801775c:	bd80      	pop	{r7, pc}
 801775e:	bf00      	nop
 8017760:	20002bd4 	.word	0x20002bd4
 8017764:	08018b28 	.word	0x08018b28

08017768 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017768:	b580      	push	{r7, lr}
 801776a:	b082      	sub	sp, #8
 801776c:	af00      	add	r7, sp, #0
 801776e:	4603      	mov	r3, r0
 8017770:	6039      	str	r1, [r7, #0]
 8017772:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017774:	683a      	ldr	r2, [r7, #0]
 8017776:	4904      	ldr	r1, [pc, #16]	; (8017788 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017778:	4804      	ldr	r0, [pc, #16]	; (801778c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801777a:	f7fc ffa3 	bl	80146c4 <USBD_GetString>
  return USBD_StrDesc;
 801777e:	4b02      	ldr	r3, [pc, #8]	; (8017788 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017780:	4618      	mov	r0, r3
 8017782:	3708      	adds	r7, #8
 8017784:	46bd      	mov	sp, r7
 8017786:	bd80      	pop	{r7, pc}
 8017788:	20002bd4 	.word	0x20002bd4
 801778c:	08018b38 	.word	0x08018b38

08017790 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017790:	b580      	push	{r7, lr}
 8017792:	b082      	sub	sp, #8
 8017794:	af00      	add	r7, sp, #0
 8017796:	4603      	mov	r3, r0
 8017798:	6039      	str	r1, [r7, #0]
 801779a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801779c:	683b      	ldr	r3, [r7, #0]
 801779e:	221a      	movs	r2, #26
 80177a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80177a2:	f000 f855 	bl	8017850 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80177a6:	4b02      	ldr	r3, [pc, #8]	; (80177b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80177a8:	4618      	mov	r0, r3
 80177aa:	3708      	adds	r7, #8
 80177ac:	46bd      	mov	sp, r7
 80177ae:	bd80      	pop	{r7, pc}
 80177b0:	200000f8 	.word	0x200000f8

080177b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80177b4:	b580      	push	{r7, lr}
 80177b6:	b082      	sub	sp, #8
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	4603      	mov	r3, r0
 80177bc:	6039      	str	r1, [r7, #0]
 80177be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80177c0:	79fb      	ldrb	r3, [r7, #7]
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d105      	bne.n	80177d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80177c6:	683a      	ldr	r2, [r7, #0]
 80177c8:	4907      	ldr	r1, [pc, #28]	; (80177e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80177ca:	4808      	ldr	r0, [pc, #32]	; (80177ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80177cc:	f7fc ff7a 	bl	80146c4 <USBD_GetString>
 80177d0:	e004      	b.n	80177dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80177d2:	683a      	ldr	r2, [r7, #0]
 80177d4:	4904      	ldr	r1, [pc, #16]	; (80177e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80177d6:	4805      	ldr	r0, [pc, #20]	; (80177ec <USBD_FS_ConfigStrDescriptor+0x38>)
 80177d8:	f7fc ff74 	bl	80146c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80177dc:	4b02      	ldr	r3, [pc, #8]	; (80177e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80177de:	4618      	mov	r0, r3
 80177e0:	3708      	adds	r7, #8
 80177e2:	46bd      	mov	sp, r7
 80177e4:	bd80      	pop	{r7, pc}
 80177e6:	bf00      	nop
 80177e8:	20002bd4 	.word	0x20002bd4
 80177ec:	08018b4c 	.word	0x08018b4c

080177f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80177f0:	b580      	push	{r7, lr}
 80177f2:	b082      	sub	sp, #8
 80177f4:	af00      	add	r7, sp, #0
 80177f6:	4603      	mov	r3, r0
 80177f8:	6039      	str	r1, [r7, #0]
 80177fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80177fc:	79fb      	ldrb	r3, [r7, #7]
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d105      	bne.n	801780e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017802:	683a      	ldr	r2, [r7, #0]
 8017804:	4907      	ldr	r1, [pc, #28]	; (8017824 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017806:	4808      	ldr	r0, [pc, #32]	; (8017828 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017808:	f7fc ff5c 	bl	80146c4 <USBD_GetString>
 801780c:	e004      	b.n	8017818 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801780e:	683a      	ldr	r2, [r7, #0]
 8017810:	4904      	ldr	r1, [pc, #16]	; (8017824 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017812:	4805      	ldr	r0, [pc, #20]	; (8017828 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017814:	f7fc ff56 	bl	80146c4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017818:	4b02      	ldr	r3, [pc, #8]	; (8017824 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801781a:	4618      	mov	r0, r3
 801781c:	3708      	adds	r7, #8
 801781e:	46bd      	mov	sp, r7
 8017820:	bd80      	pop	{r7, pc}
 8017822:	bf00      	nop
 8017824:	20002bd4 	.word	0x20002bd4
 8017828:	08018b58 	.word	0x08018b58

0801782c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801782c:	b480      	push	{r7}
 801782e:	b083      	sub	sp, #12
 8017830:	af00      	add	r7, sp, #0
 8017832:	4603      	mov	r3, r0
 8017834:	6039      	str	r1, [r7, #0]
 8017836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8017838:	683b      	ldr	r3, [r7, #0]
 801783a:	220c      	movs	r2, #12
 801783c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801783e:	4b03      	ldr	r3, [pc, #12]	; (801784c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8017840:	4618      	mov	r0, r3
 8017842:	370c      	adds	r7, #12
 8017844:	46bd      	mov	sp, r7
 8017846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801784a:	4770      	bx	lr
 801784c:	200000e8 	.word	0x200000e8

08017850 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017850:	b580      	push	{r7, lr}
 8017852:	b084      	sub	sp, #16
 8017854:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017856:	4b0f      	ldr	r3, [pc, #60]	; (8017894 <Get_SerialNum+0x44>)
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801785c:	4b0e      	ldr	r3, [pc, #56]	; (8017898 <Get_SerialNum+0x48>)
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017862:	4b0e      	ldr	r3, [pc, #56]	; (801789c <Get_SerialNum+0x4c>)
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017868:	68fa      	ldr	r2, [r7, #12]
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	4413      	add	r3, r2
 801786e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017870:	68fb      	ldr	r3, [r7, #12]
 8017872:	2b00      	cmp	r3, #0
 8017874:	d009      	beq.n	801788a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017876:	2208      	movs	r2, #8
 8017878:	4909      	ldr	r1, [pc, #36]	; (80178a0 <Get_SerialNum+0x50>)
 801787a:	68f8      	ldr	r0, [r7, #12]
 801787c:	f000 f814 	bl	80178a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017880:	2204      	movs	r2, #4
 8017882:	4908      	ldr	r1, [pc, #32]	; (80178a4 <Get_SerialNum+0x54>)
 8017884:	68b8      	ldr	r0, [r7, #8]
 8017886:	f000 f80f 	bl	80178a8 <IntToUnicode>
  }
}
 801788a:	bf00      	nop
 801788c:	3710      	adds	r7, #16
 801788e:	46bd      	mov	sp, r7
 8017890:	bd80      	pop	{r7, pc}
 8017892:	bf00      	nop
 8017894:	1fff7a10 	.word	0x1fff7a10
 8017898:	1fff7a14 	.word	0x1fff7a14
 801789c:	1fff7a18 	.word	0x1fff7a18
 80178a0:	200000fa 	.word	0x200000fa
 80178a4:	2000010a 	.word	0x2000010a

080178a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80178a8:	b480      	push	{r7}
 80178aa:	b087      	sub	sp, #28
 80178ac:	af00      	add	r7, sp, #0
 80178ae:	60f8      	str	r0, [r7, #12]
 80178b0:	60b9      	str	r1, [r7, #8]
 80178b2:	4613      	mov	r3, r2
 80178b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80178b6:	2300      	movs	r3, #0
 80178b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80178ba:	2300      	movs	r3, #0
 80178bc:	75fb      	strb	r3, [r7, #23]
 80178be:	e027      	b.n	8017910 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	0f1b      	lsrs	r3, r3, #28
 80178c4:	2b09      	cmp	r3, #9
 80178c6:	d80b      	bhi.n	80178e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80178c8:	68fb      	ldr	r3, [r7, #12]
 80178ca:	0f1b      	lsrs	r3, r3, #28
 80178cc:	b2da      	uxtb	r2, r3
 80178ce:	7dfb      	ldrb	r3, [r7, #23]
 80178d0:	005b      	lsls	r3, r3, #1
 80178d2:	4619      	mov	r1, r3
 80178d4:	68bb      	ldr	r3, [r7, #8]
 80178d6:	440b      	add	r3, r1
 80178d8:	3230      	adds	r2, #48	; 0x30
 80178da:	b2d2      	uxtb	r2, r2
 80178dc:	701a      	strb	r2, [r3, #0]
 80178de:	e00a      	b.n	80178f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80178e0:	68fb      	ldr	r3, [r7, #12]
 80178e2:	0f1b      	lsrs	r3, r3, #28
 80178e4:	b2da      	uxtb	r2, r3
 80178e6:	7dfb      	ldrb	r3, [r7, #23]
 80178e8:	005b      	lsls	r3, r3, #1
 80178ea:	4619      	mov	r1, r3
 80178ec:	68bb      	ldr	r3, [r7, #8]
 80178ee:	440b      	add	r3, r1
 80178f0:	3237      	adds	r2, #55	; 0x37
 80178f2:	b2d2      	uxtb	r2, r2
 80178f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80178f6:	68fb      	ldr	r3, [r7, #12]
 80178f8:	011b      	lsls	r3, r3, #4
 80178fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80178fc:	7dfb      	ldrb	r3, [r7, #23]
 80178fe:	005b      	lsls	r3, r3, #1
 8017900:	3301      	adds	r3, #1
 8017902:	68ba      	ldr	r2, [r7, #8]
 8017904:	4413      	add	r3, r2
 8017906:	2200      	movs	r2, #0
 8017908:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801790a:	7dfb      	ldrb	r3, [r7, #23]
 801790c:	3301      	adds	r3, #1
 801790e:	75fb      	strb	r3, [r7, #23]
 8017910:	7dfa      	ldrb	r2, [r7, #23]
 8017912:	79fb      	ldrb	r3, [r7, #7]
 8017914:	429a      	cmp	r2, r3
 8017916:	d3d3      	bcc.n	80178c0 <IntToUnicode+0x18>
  }
}
 8017918:	bf00      	nop
 801791a:	bf00      	nop
 801791c:	371c      	adds	r7, #28
 801791e:	46bd      	mov	sp, r7
 8017920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017924:	4770      	bx	lr

08017926 <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8017926:	b480      	push	{r7}
 8017928:	b083      	sub	sp, #12
 801792a:	af00      	add	r7, sp, #0
 801792c:	4603      	mov	r3, r0
 801792e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8017930:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8017932:	4618      	mov	r0, r3
 8017934:	370c      	adds	r7, #12
 8017936:	46bd      	mov	sp, r7
 8017938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801793c:	4770      	bx	lr
	...

08017940 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8017940:	b580      	push	{r7, lr}
 8017942:	b08c      	sub	sp, #48	; 0x30
 8017944:	af00      	add	r7, sp, #0
 8017946:	4603      	mov	r3, r0
 8017948:	60b9      	str	r1, [r7, #8]
 801794a:	607a      	str	r2, [r7, #4]
 801794c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  HAL_SD_CardInfoTypeDef info;

  HAL_SD_GetCardInfo(&hsd, &info);
 801794e:	f107 0310 	add.w	r3, r7, #16
 8017952:	4619      	mov	r1, r3
 8017954:	4807      	ldr	r0, [pc, #28]	; (8017974 <STORAGE_GetCapacity_FS+0x34>)
 8017956:	f7f6 f8fb 	bl	800db50 <HAL_SD_GetCardInfo>

  *block_num =  info.LogBlockNbr - 1;
 801795a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801795c:	1e5a      	subs	r2, r3, #1
 801795e:	68bb      	ldr	r3, [r7, #8]
 8017960:	601a      	str	r2, [r3, #0]
  *block_size = info.LogBlockSize;
 8017962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017964:	b29a      	uxth	r2, r3
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	801a      	strh	r2, [r3, #0]

  return (USBD_OK);
 801796a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801796c:	4618      	mov	r0, r3
 801796e:	3730      	adds	r7, #48	; 0x30
 8017970:	46bd      	mov	sp, r7
 8017972:	bd80      	pop	{r7, pc}
 8017974:	200003a0 	.word	0x200003a0

08017978 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8017978:	b480      	push	{r7}
 801797a:	b083      	sub	sp, #12
 801797c:	af00      	add	r7, sp, #0
 801797e:	4603      	mov	r3, r0
 8017980:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017982:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017984:	4618      	mov	r0, r3
 8017986:	370c      	adds	r7, #12
 8017988:	46bd      	mov	sp, r7
 801798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801798e:	4770      	bx	lr

08017990 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8017990:	b480      	push	{r7}
 8017992:	b083      	sub	sp, #12
 8017994:	af00      	add	r7, sp, #0
 8017996:	4603      	mov	r3, r0
 8017998:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 801799a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801799c:	4618      	mov	r0, r3
 801799e:	370c      	adds	r7, #12
 80179a0:	46bd      	mov	sp, r7
 80179a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179a6:	4770      	bx	lr

080179a8 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b086      	sub	sp, #24
 80179ac:	af02      	add	r7, sp, #8
 80179ae:	60b9      	str	r1, [r7, #8]
 80179b0:	607a      	str	r2, [r7, #4]
 80179b2:	461a      	mov	r2, r3
 80179b4:	4603      	mov	r3, r0
 80179b6:	73fb      	strb	r3, [r7, #15]
 80179b8:	4613      	mov	r3, r2
 80179ba:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 80179bc:	89bb      	ldrh	r3, [r7, #12]
 80179be:	f04f 32ff 	mov.w	r2, #4294967295
 80179c2:	9200      	str	r2, [sp, #0]
 80179c4:	687a      	ldr	r2, [r7, #4]
 80179c6:	68b9      	ldr	r1, [r7, #8]
 80179c8:	4807      	ldr	r0, [pc, #28]	; (80179e8 <STORAGE_Read_FS+0x40>)
 80179ca:	f7f5 fa39 	bl	800ce40 <HAL_SD_ReadBlocks>
//	HAL_SD_ReadBlocks_DMA(&hsd, buf, blk_addr, blk_len);

  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER);
 80179ce:	bf00      	nop
 80179d0:	4805      	ldr	r0, [pc, #20]	; (80179e8 <STORAGE_Read_FS+0x40>)
 80179d2:	f7f6 f983 	bl	800dcdc <HAL_SD_GetCardState>
 80179d6:	4603      	mov	r3, r0
 80179d8:	2b04      	cmp	r3, #4
 80179da:	d1f9      	bne.n	80179d0 <STORAGE_Read_FS+0x28>

  return (USBD_OK);
 80179dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80179de:	4618      	mov	r0, r3
 80179e0:	3710      	adds	r7, #16
 80179e2:	46bd      	mov	sp, r7
 80179e4:	bd80      	pop	{r7, pc}
 80179e6:	bf00      	nop
 80179e8:	200003a0 	.word	0x200003a0

080179ec <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80179ec:	b580      	push	{r7, lr}
 80179ee:	b086      	sub	sp, #24
 80179f0:	af02      	add	r7, sp, #8
 80179f2:	60b9      	str	r1, [r7, #8]
 80179f4:	607a      	str	r2, [r7, #4]
 80179f6:	461a      	mov	r2, r3
 80179f8:	4603      	mov	r3, r0
 80179fa:	73fb      	strb	r3, [r7, #15]
 80179fc:	4613      	mov	r3, r2
 80179fe:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017a00:	89bb      	ldrh	r3, [r7, #12]
 8017a02:	f04f 32ff 	mov.w	r2, #4294967295
 8017a06:	9200      	str	r2, [sp, #0]
 8017a08:	687a      	ldr	r2, [r7, #4]
 8017a0a:	68b9      	ldr	r1, [r7, #8]
 8017a0c:	4807      	ldr	r0, [pc, #28]	; (8017a2c <STORAGE_Write_FS+0x40>)
 8017a0e:	f7f5 fbf5 	bl	800d1fc <HAL_SD_WriteBlocks>
//	HAL_SD_WriteBlocks_DMA(&hsd, buf, blk_addr, blk_len);

  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER);
 8017a12:	bf00      	nop
 8017a14:	4805      	ldr	r0, [pc, #20]	; (8017a2c <STORAGE_Write_FS+0x40>)
 8017a16:	f7f6 f961 	bl	800dcdc <HAL_SD_GetCardState>
 8017a1a:	4603      	mov	r3, r0
 8017a1c:	2b04      	cmp	r3, #4
 8017a1e:	d1f9      	bne.n	8017a14 <STORAGE_Write_FS+0x28>

  return (USBD_OK);
 8017a20:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 8017a22:	4618      	mov	r0, r3
 8017a24:	3710      	adds	r7, #16
 8017a26:	46bd      	mov	sp, r7
 8017a28:	bd80      	pop	{r7, pc}
 8017a2a:	bf00      	nop
 8017a2c:	200003a0 	.word	0x200003a0

08017a30 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8017a30:	b480      	push	{r7}
 8017a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8017a34:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8017a36:	4618      	mov	r0, r3
 8017a38:	46bd      	mov	sp, r7
 8017a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a3e:	4770      	bx	lr

08017a40 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017a40:	b580      	push	{r7, lr}
 8017a42:	b08a      	sub	sp, #40	; 0x28
 8017a44:	af00      	add	r7, sp, #0
 8017a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017a48:	f107 0314 	add.w	r3, r7, #20
 8017a4c:	2200      	movs	r2, #0
 8017a4e:	601a      	str	r2, [r3, #0]
 8017a50:	605a      	str	r2, [r3, #4]
 8017a52:	609a      	str	r2, [r3, #8]
 8017a54:	60da      	str	r2, [r3, #12]
 8017a56:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017a60:	d147      	bne.n	8017af2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017a62:	2300      	movs	r3, #0
 8017a64:	613b      	str	r3, [r7, #16]
 8017a66:	4b25      	ldr	r3, [pc, #148]	; (8017afc <HAL_PCD_MspInit+0xbc>)
 8017a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a6a:	4a24      	ldr	r2, [pc, #144]	; (8017afc <HAL_PCD_MspInit+0xbc>)
 8017a6c:	f043 0301 	orr.w	r3, r3, #1
 8017a70:	6313      	str	r3, [r2, #48]	; 0x30
 8017a72:	4b22      	ldr	r3, [pc, #136]	; (8017afc <HAL_PCD_MspInit+0xbc>)
 8017a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a76:	f003 0301 	and.w	r3, r3, #1
 8017a7a:	613b      	str	r3, [r7, #16]
 8017a7c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8017a7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017a84:	2300      	movs	r3, #0
 8017a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017a88:	2300      	movs	r3, #0
 8017a8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017a8c:	f107 0314 	add.w	r3, r7, #20
 8017a90:	4619      	mov	r1, r3
 8017a92:	481b      	ldr	r0, [pc, #108]	; (8017b00 <HAL_PCD_MspInit+0xc0>)
 8017a94:	f7f1 f822 	bl	8008adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017a98:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8017a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017a9e:	2302      	movs	r3, #2
 8017aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017aa2:	2300      	movs	r3, #0
 8017aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017aa6:	2303      	movs	r3, #3
 8017aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017aaa:	230a      	movs	r3, #10
 8017aac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017aae:	f107 0314 	add.w	r3, r7, #20
 8017ab2:	4619      	mov	r1, r3
 8017ab4:	4812      	ldr	r0, [pc, #72]	; (8017b00 <HAL_PCD_MspInit+0xc0>)
 8017ab6:	f7f1 f811 	bl	8008adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017aba:	4b10      	ldr	r3, [pc, #64]	; (8017afc <HAL_PCD_MspInit+0xbc>)
 8017abc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017abe:	4a0f      	ldr	r2, [pc, #60]	; (8017afc <HAL_PCD_MspInit+0xbc>)
 8017ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017ac4:	6353      	str	r3, [r2, #52]	; 0x34
 8017ac6:	2300      	movs	r3, #0
 8017ac8:	60fb      	str	r3, [r7, #12]
 8017aca:	4b0c      	ldr	r3, [pc, #48]	; (8017afc <HAL_PCD_MspInit+0xbc>)
 8017acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ace:	4a0b      	ldr	r2, [pc, #44]	; (8017afc <HAL_PCD_MspInit+0xbc>)
 8017ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8017ad6:	4b09      	ldr	r3, [pc, #36]	; (8017afc <HAL_PCD_MspInit+0xbc>)
 8017ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017ade:	60fb      	str	r3, [r7, #12]
 8017ae0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8017ae2:	2200      	movs	r2, #0
 8017ae4:	2100      	movs	r1, #0
 8017ae6:	2043      	movs	r0, #67	; 0x43
 8017ae8:	f7f0 fc21 	bl	800832e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017aec:	2043      	movs	r0, #67	; 0x43
 8017aee:	f7f0 fc3a 	bl	8008366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017af2:	bf00      	nop
 8017af4:	3728      	adds	r7, #40	; 0x28
 8017af6:	46bd      	mov	sp, r7
 8017af8:	bd80      	pop	{r7, pc}
 8017afa:	bf00      	nop
 8017afc:	40023800 	.word	0x40023800
 8017b00:	40020000 	.word	0x40020000

08017b04 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017b04:	b580      	push	{r7, lr}
 8017b06:	b082      	sub	sp, #8
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8017b18:	4619      	mov	r1, r3
 8017b1a:	4610      	mov	r0, r2
 8017b1c:	f7fb fc48 	bl	80133b0 <USBD_LL_SetupStage>
}
 8017b20:	bf00      	nop
 8017b22:	3708      	adds	r7, #8
 8017b24:	46bd      	mov	sp, r7
 8017b26:	bd80      	pop	{r7, pc}

08017b28 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017b28:	b580      	push	{r7, lr}
 8017b2a:	b082      	sub	sp, #8
 8017b2c:	af00      	add	r7, sp, #0
 8017b2e:	6078      	str	r0, [r7, #4]
 8017b30:	460b      	mov	r3, r1
 8017b32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8017b3a:	78fa      	ldrb	r2, [r7, #3]
 8017b3c:	6879      	ldr	r1, [r7, #4]
 8017b3e:	4613      	mov	r3, r2
 8017b40:	00db      	lsls	r3, r3, #3
 8017b42:	4413      	add	r3, r2
 8017b44:	009b      	lsls	r3, r3, #2
 8017b46:	440b      	add	r3, r1
 8017b48:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8017b4c:	681a      	ldr	r2, [r3, #0]
 8017b4e:	78fb      	ldrb	r3, [r7, #3]
 8017b50:	4619      	mov	r1, r3
 8017b52:	f7fb fc82 	bl	801345a <USBD_LL_DataOutStage>
}
 8017b56:	bf00      	nop
 8017b58:	3708      	adds	r7, #8
 8017b5a:	46bd      	mov	sp, r7
 8017b5c:	bd80      	pop	{r7, pc}

08017b5e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017b5e:	b580      	push	{r7, lr}
 8017b60:	b082      	sub	sp, #8
 8017b62:	af00      	add	r7, sp, #0
 8017b64:	6078      	str	r0, [r7, #4]
 8017b66:	460b      	mov	r3, r1
 8017b68:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8017b70:	78fa      	ldrb	r2, [r7, #3]
 8017b72:	6879      	ldr	r1, [r7, #4]
 8017b74:	4613      	mov	r3, r2
 8017b76:	00db      	lsls	r3, r3, #3
 8017b78:	4413      	add	r3, r2
 8017b7a:	009b      	lsls	r3, r3, #2
 8017b7c:	440b      	add	r3, r1
 8017b7e:	334c      	adds	r3, #76	; 0x4c
 8017b80:	681a      	ldr	r2, [r3, #0]
 8017b82:	78fb      	ldrb	r3, [r7, #3]
 8017b84:	4619      	mov	r1, r3
 8017b86:	f7fb fd1b 	bl	80135c0 <USBD_LL_DataInStage>
}
 8017b8a:	bf00      	nop
 8017b8c:	3708      	adds	r7, #8
 8017b8e:	46bd      	mov	sp, r7
 8017b90:	bd80      	pop	{r7, pc}

08017b92 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017b92:	b580      	push	{r7, lr}
 8017b94:	b082      	sub	sp, #8
 8017b96:	af00      	add	r7, sp, #0
 8017b98:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017b9a:	687b      	ldr	r3, [r7, #4]
 8017b9c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017ba0:	4618      	mov	r0, r3
 8017ba2:	f7fb fe4f 	bl	8013844 <USBD_LL_SOF>
}
 8017ba6:	bf00      	nop
 8017ba8:	3708      	adds	r7, #8
 8017baa:	46bd      	mov	sp, r7
 8017bac:	bd80      	pop	{r7, pc}

08017bae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017bae:	b580      	push	{r7, lr}
 8017bb0:	b084      	sub	sp, #16
 8017bb2:	af00      	add	r7, sp, #0
 8017bb4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017bb6:	2301      	movs	r3, #1
 8017bb8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	68db      	ldr	r3, [r3, #12]
 8017bbe:	2b00      	cmp	r3, #0
 8017bc0:	d102      	bne.n	8017bc8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017bc2:	2300      	movs	r3, #0
 8017bc4:	73fb      	strb	r3, [r7, #15]
 8017bc6:	e008      	b.n	8017bda <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	68db      	ldr	r3, [r3, #12]
 8017bcc:	2b02      	cmp	r3, #2
 8017bce:	d102      	bne.n	8017bd6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017bd0:	2301      	movs	r3, #1
 8017bd2:	73fb      	strb	r3, [r7, #15]
 8017bd4:	e001      	b.n	8017bda <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017bd6:	f7e9 ffef 	bl	8001bb8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017be0:	7bfa      	ldrb	r2, [r7, #15]
 8017be2:	4611      	mov	r1, r2
 8017be4:	4618      	mov	r0, r3
 8017be6:	f7fb fdef 	bl	80137c8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017bf0:	4618      	mov	r0, r3
 8017bf2:	f7fb fd97 	bl	8013724 <USBD_LL_Reset>
}
 8017bf6:	bf00      	nop
 8017bf8:	3710      	adds	r7, #16
 8017bfa:	46bd      	mov	sp, r7
 8017bfc:	bd80      	pop	{r7, pc}
	...

08017c00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c00:	b580      	push	{r7, lr}
 8017c02:	b082      	sub	sp, #8
 8017c04:	af00      	add	r7, sp, #0
 8017c06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017c0e:	4618      	mov	r0, r3
 8017c10:	f7fb fdea 	bl	80137e8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017c1c:	681b      	ldr	r3, [r3, #0]
 8017c1e:	687a      	ldr	r2, [r7, #4]
 8017c20:	6812      	ldr	r2, [r2, #0]
 8017c22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017c26:	f043 0301 	orr.w	r3, r3, #1
 8017c2a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	6a1b      	ldr	r3, [r3, #32]
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d005      	beq.n	8017c40 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017c34:	4b04      	ldr	r3, [pc, #16]	; (8017c48 <HAL_PCD_SuspendCallback+0x48>)
 8017c36:	691b      	ldr	r3, [r3, #16]
 8017c38:	4a03      	ldr	r2, [pc, #12]	; (8017c48 <HAL_PCD_SuspendCallback+0x48>)
 8017c3a:	f043 0306 	orr.w	r3, r3, #6
 8017c3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017c40:	bf00      	nop
 8017c42:	3708      	adds	r7, #8
 8017c44:	46bd      	mov	sp, r7
 8017c46:	bd80      	pop	{r7, pc}
 8017c48:	e000ed00 	.word	0xe000ed00

08017c4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c4c:	b580      	push	{r7, lr}
 8017c4e:	b082      	sub	sp, #8
 8017c50:	af00      	add	r7, sp, #0
 8017c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017c5a:	4618      	mov	r0, r3
 8017c5c:	f7fb fdda 	bl	8013814 <USBD_LL_Resume>
}
 8017c60:	bf00      	nop
 8017c62:	3708      	adds	r7, #8
 8017c64:	46bd      	mov	sp, r7
 8017c66:	bd80      	pop	{r7, pc}

08017c68 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c68:	b580      	push	{r7, lr}
 8017c6a:	b082      	sub	sp, #8
 8017c6c:	af00      	add	r7, sp, #0
 8017c6e:	6078      	str	r0, [r7, #4]
 8017c70:	460b      	mov	r3, r1
 8017c72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017c7a:	78fa      	ldrb	r2, [r7, #3]
 8017c7c:	4611      	mov	r1, r2
 8017c7e:	4618      	mov	r0, r3
 8017c80:	f7fb fe32 	bl	80138e8 <USBD_LL_IsoOUTIncomplete>
}
 8017c84:	bf00      	nop
 8017c86:	3708      	adds	r7, #8
 8017c88:	46bd      	mov	sp, r7
 8017c8a:	bd80      	pop	{r7, pc}

08017c8c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017c8c:	b580      	push	{r7, lr}
 8017c8e:	b082      	sub	sp, #8
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	6078      	str	r0, [r7, #4]
 8017c94:	460b      	mov	r3, r1
 8017c96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017c9e:	78fa      	ldrb	r2, [r7, #3]
 8017ca0:	4611      	mov	r1, r2
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	f7fb fdee 	bl	8013884 <USBD_LL_IsoINIncomplete>
}
 8017ca8:	bf00      	nop
 8017caa:	3708      	adds	r7, #8
 8017cac:	46bd      	mov	sp, r7
 8017cae:	bd80      	pop	{r7, pc}

08017cb0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017cb0:	b580      	push	{r7, lr}
 8017cb2:	b082      	sub	sp, #8
 8017cb4:	af00      	add	r7, sp, #0
 8017cb6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017cbe:	4618      	mov	r0, r3
 8017cc0:	f7fb fe44 	bl	801394c <USBD_LL_DevConnected>
}
 8017cc4:	bf00      	nop
 8017cc6:	3708      	adds	r7, #8
 8017cc8:	46bd      	mov	sp, r7
 8017cca:	bd80      	pop	{r7, pc}

08017ccc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ccc:	b580      	push	{r7, lr}
 8017cce:	b082      	sub	sp, #8
 8017cd0:	af00      	add	r7, sp, #0
 8017cd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017cda:	4618      	mov	r0, r3
 8017cdc:	f7fb fe41 	bl	8013962 <USBD_LL_DevDisconnected>
}
 8017ce0:	bf00      	nop
 8017ce2:	3708      	adds	r7, #8
 8017ce4:	46bd      	mov	sp, r7
 8017ce6:	bd80      	pop	{r7, pc}

08017ce8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017ce8:	b580      	push	{r7, lr}
 8017cea:	b082      	sub	sp, #8
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	781b      	ldrb	r3, [r3, #0]
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d13c      	bne.n	8017d72 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017cf8:	4a20      	ldr	r2, [pc, #128]	; (8017d7c <USBD_LL_Init+0x94>)
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	4a1e      	ldr	r2, [pc, #120]	; (8017d7c <USBD_LL_Init+0x94>)
 8017d04:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017d08:	4b1c      	ldr	r3, [pc, #112]	; (8017d7c <USBD_LL_Init+0x94>)
 8017d0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8017d0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8017d10:	4b1a      	ldr	r3, [pc, #104]	; (8017d7c <USBD_LL_Init+0x94>)
 8017d12:	2206      	movs	r2, #6
 8017d14:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017d16:	4b19      	ldr	r3, [pc, #100]	; (8017d7c <USBD_LL_Init+0x94>)
 8017d18:	2202      	movs	r2, #2
 8017d1a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017d1c:	4b17      	ldr	r3, [pc, #92]	; (8017d7c <USBD_LL_Init+0x94>)
 8017d1e:	2200      	movs	r2, #0
 8017d20:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017d22:	4b16      	ldr	r3, [pc, #88]	; (8017d7c <USBD_LL_Init+0x94>)
 8017d24:	2202      	movs	r2, #2
 8017d26:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017d28:	4b14      	ldr	r3, [pc, #80]	; (8017d7c <USBD_LL_Init+0x94>)
 8017d2a:	2200      	movs	r2, #0
 8017d2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8017d2e:	4b13      	ldr	r3, [pc, #76]	; (8017d7c <USBD_LL_Init+0x94>)
 8017d30:	2200      	movs	r2, #0
 8017d32:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8017d34:	4b11      	ldr	r3, [pc, #68]	; (8017d7c <USBD_LL_Init+0x94>)
 8017d36:	2200      	movs	r2, #0
 8017d38:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8017d3a:	4b10      	ldr	r3, [pc, #64]	; (8017d7c <USBD_LL_Init+0x94>)
 8017d3c:	2201      	movs	r2, #1
 8017d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8017d40:	4b0e      	ldr	r3, [pc, #56]	; (8017d7c <USBD_LL_Init+0x94>)
 8017d42:	2200      	movs	r2, #0
 8017d44:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8017d46:	480d      	ldr	r0, [pc, #52]	; (8017d7c <USBD_LL_Init+0x94>)
 8017d48:	f7f2 f855 	bl	8009df6 <HAL_PCD_Init>
 8017d4c:	4603      	mov	r3, r0
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d001      	beq.n	8017d56 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8017d52:	f7e9 ff31 	bl	8001bb8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8017d56:	2180      	movs	r1, #128	; 0x80
 8017d58:	4808      	ldr	r0, [pc, #32]	; (8017d7c <USBD_LL_Init+0x94>)
 8017d5a:	f7f3 fb0e 	bl	800b37a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8017d5e:	2240      	movs	r2, #64	; 0x40
 8017d60:	2100      	movs	r1, #0
 8017d62:	4806      	ldr	r0, [pc, #24]	; (8017d7c <USBD_LL_Init+0x94>)
 8017d64:	f7f3 fac2 	bl	800b2ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8017d68:	2280      	movs	r2, #128	; 0x80
 8017d6a:	2101      	movs	r1, #1
 8017d6c:	4803      	ldr	r0, [pc, #12]	; (8017d7c <USBD_LL_Init+0x94>)
 8017d6e:	f7f3 fabd 	bl	800b2ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8017d72:	2300      	movs	r3, #0
}
 8017d74:	4618      	mov	r0, r3
 8017d76:	3708      	adds	r7, #8
 8017d78:	46bd      	mov	sp, r7
 8017d7a:	bd80      	pop	{r7, pc}
 8017d7c:	20002dd4 	.word	0x20002dd4

08017d80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017d80:	b580      	push	{r7, lr}
 8017d82:	b084      	sub	sp, #16
 8017d84:	af00      	add	r7, sp, #0
 8017d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d88:	2300      	movs	r3, #0
 8017d8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d8c:	2300      	movs	r3, #0
 8017d8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017d96:	4618      	mov	r0, r3
 8017d98:	f7f2 f951 	bl	800a03e <HAL_PCD_Start>
 8017d9c:	4603      	mov	r3, r0
 8017d9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017da0:	7bfb      	ldrb	r3, [r7, #15]
 8017da2:	4618      	mov	r0, r3
 8017da4:	f000 f9b0 	bl	8018108 <USBD_Get_USB_Status>
 8017da8:	4603      	mov	r3, r0
 8017daa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017dac:	7bbb      	ldrb	r3, [r7, #14]
}
 8017dae:	4618      	mov	r0, r3
 8017db0:	3710      	adds	r7, #16
 8017db2:	46bd      	mov	sp, r7
 8017db4:	bd80      	pop	{r7, pc}

08017db6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017db6:	b580      	push	{r7, lr}
 8017db8:	b084      	sub	sp, #16
 8017dba:	af00      	add	r7, sp, #0
 8017dbc:	6078      	str	r0, [r7, #4]
 8017dbe:	4608      	mov	r0, r1
 8017dc0:	4611      	mov	r1, r2
 8017dc2:	461a      	mov	r2, r3
 8017dc4:	4603      	mov	r3, r0
 8017dc6:	70fb      	strb	r3, [r7, #3]
 8017dc8:	460b      	mov	r3, r1
 8017dca:	70bb      	strb	r3, [r7, #2]
 8017dcc:	4613      	mov	r3, r2
 8017dce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017dd4:	2300      	movs	r3, #0
 8017dd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017dde:	78bb      	ldrb	r3, [r7, #2]
 8017de0:	883a      	ldrh	r2, [r7, #0]
 8017de2:	78f9      	ldrb	r1, [r7, #3]
 8017de4:	f7f2 fe4f 	bl	800aa86 <HAL_PCD_EP_Open>
 8017de8:	4603      	mov	r3, r0
 8017dea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017dec:	7bfb      	ldrb	r3, [r7, #15]
 8017dee:	4618      	mov	r0, r3
 8017df0:	f000 f98a 	bl	8018108 <USBD_Get_USB_Status>
 8017df4:	4603      	mov	r3, r0
 8017df6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017df8:	7bbb      	ldrb	r3, [r7, #14]
}
 8017dfa:	4618      	mov	r0, r3
 8017dfc:	3710      	adds	r7, #16
 8017dfe:	46bd      	mov	sp, r7
 8017e00:	bd80      	pop	{r7, pc}

08017e02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017e02:	b580      	push	{r7, lr}
 8017e04:	b084      	sub	sp, #16
 8017e06:	af00      	add	r7, sp, #0
 8017e08:	6078      	str	r0, [r7, #4]
 8017e0a:	460b      	mov	r3, r1
 8017e0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e0e:	2300      	movs	r3, #0
 8017e10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e12:	2300      	movs	r3, #0
 8017e14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017e16:	687b      	ldr	r3, [r7, #4]
 8017e18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017e1c:	78fa      	ldrb	r2, [r7, #3]
 8017e1e:	4611      	mov	r1, r2
 8017e20:	4618      	mov	r0, r3
 8017e22:	f7f2 fe98 	bl	800ab56 <HAL_PCD_EP_Close>
 8017e26:	4603      	mov	r3, r0
 8017e28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017e2a:	7bfb      	ldrb	r3, [r7, #15]
 8017e2c:	4618      	mov	r0, r3
 8017e2e:	f000 f96b 	bl	8018108 <USBD_Get_USB_Status>
 8017e32:	4603      	mov	r3, r0
 8017e34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017e36:	7bbb      	ldrb	r3, [r7, #14]
}
 8017e38:	4618      	mov	r0, r3
 8017e3a:	3710      	adds	r7, #16
 8017e3c:	46bd      	mov	sp, r7
 8017e3e:	bd80      	pop	{r7, pc}

08017e40 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017e40:	b580      	push	{r7, lr}
 8017e42:	b084      	sub	sp, #16
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	6078      	str	r0, [r7, #4]
 8017e48:	460b      	mov	r3, r1
 8017e4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e4c:	2300      	movs	r3, #0
 8017e4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e50:	2300      	movs	r3, #0
 8017e52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017e5a:	78fa      	ldrb	r2, [r7, #3]
 8017e5c:	4611      	mov	r1, r2
 8017e5e:	4618      	mov	r0, r3
 8017e60:	f7f3 f85b 	bl	800af1a <HAL_PCD_EP_Flush>
 8017e64:	4603      	mov	r3, r0
 8017e66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017e68:	7bfb      	ldrb	r3, [r7, #15]
 8017e6a:	4618      	mov	r0, r3
 8017e6c:	f000 f94c 	bl	8018108 <USBD_Get_USB_Status>
 8017e70:	4603      	mov	r3, r0
 8017e72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017e74:	7bbb      	ldrb	r3, [r7, #14]
}
 8017e76:	4618      	mov	r0, r3
 8017e78:	3710      	adds	r7, #16
 8017e7a:	46bd      	mov	sp, r7
 8017e7c:	bd80      	pop	{r7, pc}

08017e7e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017e7e:	b580      	push	{r7, lr}
 8017e80:	b084      	sub	sp, #16
 8017e82:	af00      	add	r7, sp, #0
 8017e84:	6078      	str	r0, [r7, #4]
 8017e86:	460b      	mov	r3, r1
 8017e88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e8a:	2300      	movs	r3, #0
 8017e8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e8e:	2300      	movs	r3, #0
 8017e90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017e98:	78fa      	ldrb	r2, [r7, #3]
 8017e9a:	4611      	mov	r1, r2
 8017e9c:	4618      	mov	r0, r3
 8017e9e:	f7f2 ff51 	bl	800ad44 <HAL_PCD_EP_SetStall>
 8017ea2:	4603      	mov	r3, r0
 8017ea4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017ea6:	7bfb      	ldrb	r3, [r7, #15]
 8017ea8:	4618      	mov	r0, r3
 8017eaa:	f000 f92d 	bl	8018108 <USBD_Get_USB_Status>
 8017eae:	4603      	mov	r3, r0
 8017eb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017eb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8017eb4:	4618      	mov	r0, r3
 8017eb6:	3710      	adds	r7, #16
 8017eb8:	46bd      	mov	sp, r7
 8017eba:	bd80      	pop	{r7, pc}

08017ebc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017ebc:	b580      	push	{r7, lr}
 8017ebe:	b084      	sub	sp, #16
 8017ec0:	af00      	add	r7, sp, #0
 8017ec2:	6078      	str	r0, [r7, #4]
 8017ec4:	460b      	mov	r3, r1
 8017ec6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017ec8:	2300      	movs	r3, #0
 8017eca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017ecc:	2300      	movs	r3, #0
 8017ece:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017ed6:	78fa      	ldrb	r2, [r7, #3]
 8017ed8:	4611      	mov	r1, r2
 8017eda:	4618      	mov	r0, r3
 8017edc:	f7f2 ff96 	bl	800ae0c <HAL_PCD_EP_ClrStall>
 8017ee0:	4603      	mov	r3, r0
 8017ee2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017ee4:	7bfb      	ldrb	r3, [r7, #15]
 8017ee6:	4618      	mov	r0, r3
 8017ee8:	f000 f90e 	bl	8018108 <USBD_Get_USB_Status>
 8017eec:	4603      	mov	r3, r0
 8017eee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017ef0:	7bbb      	ldrb	r3, [r7, #14]
}
 8017ef2:	4618      	mov	r0, r3
 8017ef4:	3710      	adds	r7, #16
 8017ef6:	46bd      	mov	sp, r7
 8017ef8:	bd80      	pop	{r7, pc}

08017efa <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017efa:	b480      	push	{r7}
 8017efc:	b085      	sub	sp, #20
 8017efe:	af00      	add	r7, sp, #0
 8017f00:	6078      	str	r0, [r7, #4]
 8017f02:	460b      	mov	r3, r1
 8017f04:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017f0c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017f12:	2b00      	cmp	r3, #0
 8017f14:	da0b      	bge.n	8017f2e <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017f16:	78fb      	ldrb	r3, [r7, #3]
 8017f18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017f1c:	68f9      	ldr	r1, [r7, #12]
 8017f1e:	4613      	mov	r3, r2
 8017f20:	00db      	lsls	r3, r3, #3
 8017f22:	4413      	add	r3, r2
 8017f24:	009b      	lsls	r3, r3, #2
 8017f26:	440b      	add	r3, r1
 8017f28:	333e      	adds	r3, #62	; 0x3e
 8017f2a:	781b      	ldrb	r3, [r3, #0]
 8017f2c:	e00b      	b.n	8017f46 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017f2e:	78fb      	ldrb	r3, [r7, #3]
 8017f30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017f34:	68f9      	ldr	r1, [r7, #12]
 8017f36:	4613      	mov	r3, r2
 8017f38:	00db      	lsls	r3, r3, #3
 8017f3a:	4413      	add	r3, r2
 8017f3c:	009b      	lsls	r3, r3, #2
 8017f3e:	440b      	add	r3, r1
 8017f40:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8017f44:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017f46:	4618      	mov	r0, r3
 8017f48:	3714      	adds	r7, #20
 8017f4a:	46bd      	mov	sp, r7
 8017f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f50:	4770      	bx	lr

08017f52 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017f52:	b580      	push	{r7, lr}
 8017f54:	b084      	sub	sp, #16
 8017f56:	af00      	add	r7, sp, #0
 8017f58:	6078      	str	r0, [r7, #4]
 8017f5a:	460b      	mov	r3, r1
 8017f5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017f5e:	2300      	movs	r3, #0
 8017f60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017f62:	2300      	movs	r3, #0
 8017f64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017f6c:	78fa      	ldrb	r2, [r7, #3]
 8017f6e:	4611      	mov	r1, r2
 8017f70:	4618      	mov	r0, r3
 8017f72:	f7f2 fd63 	bl	800aa3c <HAL_PCD_SetAddress>
 8017f76:	4603      	mov	r3, r0
 8017f78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017f7a:	7bfb      	ldrb	r3, [r7, #15]
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	f000 f8c3 	bl	8018108 <USBD_Get_USB_Status>
 8017f82:	4603      	mov	r3, r0
 8017f84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017f86:	7bbb      	ldrb	r3, [r7, #14]
}
 8017f88:	4618      	mov	r0, r3
 8017f8a:	3710      	adds	r7, #16
 8017f8c:	46bd      	mov	sp, r7
 8017f8e:	bd80      	pop	{r7, pc}

08017f90 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017f90:	b580      	push	{r7, lr}
 8017f92:	b086      	sub	sp, #24
 8017f94:	af00      	add	r7, sp, #0
 8017f96:	60f8      	str	r0, [r7, #12]
 8017f98:	607a      	str	r2, [r7, #4]
 8017f9a:	603b      	str	r3, [r7, #0]
 8017f9c:	460b      	mov	r3, r1
 8017f9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017fa0:	2300      	movs	r3, #0
 8017fa2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017fa4:	2300      	movs	r3, #0
 8017fa6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017fa8:	68fb      	ldr	r3, [r7, #12]
 8017faa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017fae:	7af9      	ldrb	r1, [r7, #11]
 8017fb0:	683b      	ldr	r3, [r7, #0]
 8017fb2:	687a      	ldr	r2, [r7, #4]
 8017fb4:	f7f2 fe7c 	bl	800acb0 <HAL_PCD_EP_Transmit>
 8017fb8:	4603      	mov	r3, r0
 8017fba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017fbc:	7dfb      	ldrb	r3, [r7, #23]
 8017fbe:	4618      	mov	r0, r3
 8017fc0:	f000 f8a2 	bl	8018108 <USBD_Get_USB_Status>
 8017fc4:	4603      	mov	r3, r0
 8017fc6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017fc8:	7dbb      	ldrb	r3, [r7, #22]
}
 8017fca:	4618      	mov	r0, r3
 8017fcc:	3718      	adds	r7, #24
 8017fce:	46bd      	mov	sp, r7
 8017fd0:	bd80      	pop	{r7, pc}

08017fd2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017fd2:	b580      	push	{r7, lr}
 8017fd4:	b086      	sub	sp, #24
 8017fd6:	af00      	add	r7, sp, #0
 8017fd8:	60f8      	str	r0, [r7, #12]
 8017fda:	607a      	str	r2, [r7, #4]
 8017fdc:	603b      	str	r3, [r7, #0]
 8017fde:	460b      	mov	r3, r1
 8017fe0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017fe2:	2300      	movs	r3, #0
 8017fe4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017fe6:	2300      	movs	r3, #0
 8017fe8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017fea:	68fb      	ldr	r3, [r7, #12]
 8017fec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017ff0:	7af9      	ldrb	r1, [r7, #11]
 8017ff2:	683b      	ldr	r3, [r7, #0]
 8017ff4:	687a      	ldr	r2, [r7, #4]
 8017ff6:	f7f2 fdf8 	bl	800abea <HAL_PCD_EP_Receive>
 8017ffa:	4603      	mov	r3, r0
 8017ffc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017ffe:	7dfb      	ldrb	r3, [r7, #23]
 8018000:	4618      	mov	r0, r3
 8018002:	f000 f881 	bl	8018108 <USBD_Get_USB_Status>
 8018006:	4603      	mov	r3, r0
 8018008:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801800a:	7dbb      	ldrb	r3, [r7, #22]
}
 801800c:	4618      	mov	r0, r3
 801800e:	3718      	adds	r7, #24
 8018010:	46bd      	mov	sp, r7
 8018012:	bd80      	pop	{r7, pc}

08018014 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018014:	b580      	push	{r7, lr}
 8018016:	b082      	sub	sp, #8
 8018018:	af00      	add	r7, sp, #0
 801801a:	6078      	str	r0, [r7, #4]
 801801c:	460b      	mov	r3, r1
 801801e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8018026:	78fa      	ldrb	r2, [r7, #3]
 8018028:	4611      	mov	r1, r2
 801802a:	4618      	mov	r0, r3
 801802c:	f7f2 fe28 	bl	800ac80 <HAL_PCD_EP_GetRxCount>
 8018030:	4603      	mov	r3, r0
}
 8018032:	4618      	mov	r0, r3
 8018034:	3708      	adds	r7, #8
 8018036:	46bd      	mov	sp, r7
 8018038:	bd80      	pop	{r7, pc}
	...

0801803c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801803c:	b580      	push	{r7, lr}
 801803e:	b082      	sub	sp, #8
 8018040:	af00      	add	r7, sp, #0
 8018042:	6078      	str	r0, [r7, #4]
 8018044:	460b      	mov	r3, r1
 8018046:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8018048:	78fb      	ldrb	r3, [r7, #3]
 801804a:	2b00      	cmp	r3, #0
 801804c:	d002      	beq.n	8018054 <HAL_PCDEx_LPM_Callback+0x18>
 801804e:	2b01      	cmp	r3, #1
 8018050:	d01f      	beq.n	8018092 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8018052:	e03b      	b.n	80180cc <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	6a1b      	ldr	r3, [r3, #32]
 8018058:	2b00      	cmp	r3, #0
 801805a:	d007      	beq.n	801806c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 801805c:	f7e9 fa24 	bl	80014a8 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018060:	4b1c      	ldr	r3, [pc, #112]	; (80180d4 <HAL_PCDEx_LPM_Callback+0x98>)
 8018062:	691b      	ldr	r3, [r3, #16]
 8018064:	4a1b      	ldr	r2, [pc, #108]	; (80180d4 <HAL_PCDEx_LPM_Callback+0x98>)
 8018066:	f023 0306 	bic.w	r3, r3, #6
 801806a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018074:	681b      	ldr	r3, [r3, #0]
 8018076:	687a      	ldr	r2, [r7, #4]
 8018078:	6812      	ldr	r2, [r2, #0]
 801807a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801807e:	f023 0301 	bic.w	r3, r3, #1
 8018082:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801808a:	4618      	mov	r0, r3
 801808c:	f7fb fbc2 	bl	8013814 <USBD_LL_Resume>
    break;
 8018090:	e01c      	b.n	80180cc <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	681b      	ldr	r3, [r3, #0]
 8018096:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	687a      	ldr	r2, [r7, #4]
 801809e:	6812      	ldr	r2, [r2, #0]
 80180a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80180a4:	f043 0301 	orr.w	r3, r3, #1
 80180a8:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80180b0:	4618      	mov	r0, r3
 80180b2:	f7fb fb99 	bl	80137e8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	6a1b      	ldr	r3, [r3, #32]
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d005      	beq.n	80180ca <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80180be:	4b05      	ldr	r3, [pc, #20]	; (80180d4 <HAL_PCDEx_LPM_Callback+0x98>)
 80180c0:	691b      	ldr	r3, [r3, #16]
 80180c2:	4a04      	ldr	r2, [pc, #16]	; (80180d4 <HAL_PCDEx_LPM_Callback+0x98>)
 80180c4:	f043 0306 	orr.w	r3, r3, #6
 80180c8:	6113      	str	r3, [r2, #16]
    break;
 80180ca:	bf00      	nop
}
 80180cc:	bf00      	nop
 80180ce:	3708      	adds	r7, #8
 80180d0:	46bd      	mov	sp, r7
 80180d2:	bd80      	pop	{r7, pc}
 80180d4:	e000ed00 	.word	0xe000ed00

080180d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80180d8:	b480      	push	{r7}
 80180da:	b083      	sub	sp, #12
 80180dc:	af00      	add	r7, sp, #0
 80180de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80180e0:	4b03      	ldr	r3, [pc, #12]	; (80180f0 <USBD_static_malloc+0x18>)
}
 80180e2:	4618      	mov	r0, r3
 80180e4:	370c      	adds	r7, #12
 80180e6:	46bd      	mov	sp, r7
 80180e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180ec:	4770      	bx	lr
 80180ee:	bf00      	nop
 80180f0:	200032e0 	.word	0x200032e0

080180f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80180f4:	b480      	push	{r7}
 80180f6:	b083      	sub	sp, #12
 80180f8:	af00      	add	r7, sp, #0
 80180fa:	6078      	str	r0, [r7, #4]

}
 80180fc:	bf00      	nop
 80180fe:	370c      	adds	r7, #12
 8018100:	46bd      	mov	sp, r7
 8018102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018106:	4770      	bx	lr

08018108 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018108:	b480      	push	{r7}
 801810a:	b085      	sub	sp, #20
 801810c:	af00      	add	r7, sp, #0
 801810e:	4603      	mov	r3, r0
 8018110:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018112:	2300      	movs	r3, #0
 8018114:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018116:	79fb      	ldrb	r3, [r7, #7]
 8018118:	2b03      	cmp	r3, #3
 801811a:	d817      	bhi.n	801814c <USBD_Get_USB_Status+0x44>
 801811c:	a201      	add	r2, pc, #4	; (adr r2, 8018124 <USBD_Get_USB_Status+0x1c>)
 801811e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018122:	bf00      	nop
 8018124:	08018135 	.word	0x08018135
 8018128:	0801813b 	.word	0x0801813b
 801812c:	08018141 	.word	0x08018141
 8018130:	08018147 	.word	0x08018147
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018134:	2300      	movs	r3, #0
 8018136:	73fb      	strb	r3, [r7, #15]
    break;
 8018138:	e00b      	b.n	8018152 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801813a:	2303      	movs	r3, #3
 801813c:	73fb      	strb	r3, [r7, #15]
    break;
 801813e:	e008      	b.n	8018152 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8018140:	2301      	movs	r3, #1
 8018142:	73fb      	strb	r3, [r7, #15]
    break;
 8018144:	e005      	b.n	8018152 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018146:	2303      	movs	r3, #3
 8018148:	73fb      	strb	r3, [r7, #15]
    break;
 801814a:	e002      	b.n	8018152 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801814c:	2303      	movs	r3, #3
 801814e:	73fb      	strb	r3, [r7, #15]
    break;
 8018150:	bf00      	nop
  }
  return usb_status;
 8018152:	7bfb      	ldrb	r3, [r7, #15]
}
 8018154:	4618      	mov	r0, r3
 8018156:	3714      	adds	r7, #20
 8018158:	46bd      	mov	sp, r7
 801815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801815e:	4770      	bx	lr

08018160 <__errno>:
 8018160:	4b01      	ldr	r3, [pc, #4]	; (8018168 <__errno+0x8>)
 8018162:	6818      	ldr	r0, [r3, #0]
 8018164:	4770      	bx	lr
 8018166:	bf00      	nop
 8018168:	20000134 	.word	0x20000134

0801816c <__libc_init_array>:
 801816c:	b570      	push	{r4, r5, r6, lr}
 801816e:	4d0d      	ldr	r5, [pc, #52]	; (80181a4 <__libc_init_array+0x38>)
 8018170:	4c0d      	ldr	r4, [pc, #52]	; (80181a8 <__libc_init_array+0x3c>)
 8018172:	1b64      	subs	r4, r4, r5
 8018174:	10a4      	asrs	r4, r4, #2
 8018176:	2600      	movs	r6, #0
 8018178:	42a6      	cmp	r6, r4
 801817a:	d109      	bne.n	8018190 <__libc_init_array+0x24>
 801817c:	4d0b      	ldr	r5, [pc, #44]	; (80181ac <__libc_init_array+0x40>)
 801817e:	4c0c      	ldr	r4, [pc, #48]	; (80181b0 <__libc_init_array+0x44>)
 8018180:	f000 fc8e 	bl	8018aa0 <_init>
 8018184:	1b64      	subs	r4, r4, r5
 8018186:	10a4      	asrs	r4, r4, #2
 8018188:	2600      	movs	r6, #0
 801818a:	42a6      	cmp	r6, r4
 801818c:	d105      	bne.n	801819a <__libc_init_array+0x2e>
 801818e:	bd70      	pop	{r4, r5, r6, pc}
 8018190:	f855 3b04 	ldr.w	r3, [r5], #4
 8018194:	4798      	blx	r3
 8018196:	3601      	adds	r6, #1
 8018198:	e7ee      	b.n	8018178 <__libc_init_array+0xc>
 801819a:	f855 3b04 	ldr.w	r3, [r5], #4
 801819e:	4798      	blx	r3
 80181a0:	3601      	adds	r6, #1
 80181a2:	e7f2      	b.n	801818a <__libc_init_array+0x1e>
 80181a4:	0801903c 	.word	0x0801903c
 80181a8:	0801903c 	.word	0x0801903c
 80181ac:	0801903c 	.word	0x0801903c
 80181b0:	08019040 	.word	0x08019040

080181b4 <memset>:
 80181b4:	4402      	add	r2, r0
 80181b6:	4603      	mov	r3, r0
 80181b8:	4293      	cmp	r3, r2
 80181ba:	d100      	bne.n	80181be <memset+0xa>
 80181bc:	4770      	bx	lr
 80181be:	f803 1b01 	strb.w	r1, [r3], #1
 80181c2:	e7f9      	b.n	80181b8 <memset+0x4>

080181c4 <siprintf>:
 80181c4:	b40e      	push	{r1, r2, r3}
 80181c6:	b500      	push	{lr}
 80181c8:	b09c      	sub	sp, #112	; 0x70
 80181ca:	ab1d      	add	r3, sp, #116	; 0x74
 80181cc:	9002      	str	r0, [sp, #8]
 80181ce:	9006      	str	r0, [sp, #24]
 80181d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80181d4:	4809      	ldr	r0, [pc, #36]	; (80181fc <siprintf+0x38>)
 80181d6:	9107      	str	r1, [sp, #28]
 80181d8:	9104      	str	r1, [sp, #16]
 80181da:	4909      	ldr	r1, [pc, #36]	; (8018200 <siprintf+0x3c>)
 80181dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80181e0:	9105      	str	r1, [sp, #20]
 80181e2:	6800      	ldr	r0, [r0, #0]
 80181e4:	9301      	str	r3, [sp, #4]
 80181e6:	a902      	add	r1, sp, #8
 80181e8:	f000 f868 	bl	80182bc <_svfiprintf_r>
 80181ec:	9b02      	ldr	r3, [sp, #8]
 80181ee:	2200      	movs	r2, #0
 80181f0:	701a      	strb	r2, [r3, #0]
 80181f2:	b01c      	add	sp, #112	; 0x70
 80181f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80181f8:	b003      	add	sp, #12
 80181fa:	4770      	bx	lr
 80181fc:	20000134 	.word	0x20000134
 8018200:	ffff0208 	.word	0xffff0208

08018204 <__ssputs_r>:
 8018204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018208:	688e      	ldr	r6, [r1, #8]
 801820a:	429e      	cmp	r6, r3
 801820c:	4682      	mov	sl, r0
 801820e:	460c      	mov	r4, r1
 8018210:	4690      	mov	r8, r2
 8018212:	461f      	mov	r7, r3
 8018214:	d838      	bhi.n	8018288 <__ssputs_r+0x84>
 8018216:	898a      	ldrh	r2, [r1, #12]
 8018218:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801821c:	d032      	beq.n	8018284 <__ssputs_r+0x80>
 801821e:	6825      	ldr	r5, [r4, #0]
 8018220:	6909      	ldr	r1, [r1, #16]
 8018222:	eba5 0901 	sub.w	r9, r5, r1
 8018226:	6965      	ldr	r5, [r4, #20]
 8018228:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801822c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018230:	3301      	adds	r3, #1
 8018232:	444b      	add	r3, r9
 8018234:	106d      	asrs	r5, r5, #1
 8018236:	429d      	cmp	r5, r3
 8018238:	bf38      	it	cc
 801823a:	461d      	movcc	r5, r3
 801823c:	0553      	lsls	r3, r2, #21
 801823e:	d531      	bpl.n	80182a4 <__ssputs_r+0xa0>
 8018240:	4629      	mov	r1, r5
 8018242:	f000 fb63 	bl	801890c <_malloc_r>
 8018246:	4606      	mov	r6, r0
 8018248:	b950      	cbnz	r0, 8018260 <__ssputs_r+0x5c>
 801824a:	230c      	movs	r3, #12
 801824c:	f8ca 3000 	str.w	r3, [sl]
 8018250:	89a3      	ldrh	r3, [r4, #12]
 8018252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018256:	81a3      	strh	r3, [r4, #12]
 8018258:	f04f 30ff 	mov.w	r0, #4294967295
 801825c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018260:	6921      	ldr	r1, [r4, #16]
 8018262:	464a      	mov	r2, r9
 8018264:	f000 fabe 	bl	80187e4 <memcpy>
 8018268:	89a3      	ldrh	r3, [r4, #12]
 801826a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801826e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018272:	81a3      	strh	r3, [r4, #12]
 8018274:	6126      	str	r6, [r4, #16]
 8018276:	6165      	str	r5, [r4, #20]
 8018278:	444e      	add	r6, r9
 801827a:	eba5 0509 	sub.w	r5, r5, r9
 801827e:	6026      	str	r6, [r4, #0]
 8018280:	60a5      	str	r5, [r4, #8]
 8018282:	463e      	mov	r6, r7
 8018284:	42be      	cmp	r6, r7
 8018286:	d900      	bls.n	801828a <__ssputs_r+0x86>
 8018288:	463e      	mov	r6, r7
 801828a:	6820      	ldr	r0, [r4, #0]
 801828c:	4632      	mov	r2, r6
 801828e:	4641      	mov	r1, r8
 8018290:	f000 fab6 	bl	8018800 <memmove>
 8018294:	68a3      	ldr	r3, [r4, #8]
 8018296:	1b9b      	subs	r3, r3, r6
 8018298:	60a3      	str	r3, [r4, #8]
 801829a:	6823      	ldr	r3, [r4, #0]
 801829c:	4433      	add	r3, r6
 801829e:	6023      	str	r3, [r4, #0]
 80182a0:	2000      	movs	r0, #0
 80182a2:	e7db      	b.n	801825c <__ssputs_r+0x58>
 80182a4:	462a      	mov	r2, r5
 80182a6:	f000 fba5 	bl	80189f4 <_realloc_r>
 80182aa:	4606      	mov	r6, r0
 80182ac:	2800      	cmp	r0, #0
 80182ae:	d1e1      	bne.n	8018274 <__ssputs_r+0x70>
 80182b0:	6921      	ldr	r1, [r4, #16]
 80182b2:	4650      	mov	r0, sl
 80182b4:	f000 fabe 	bl	8018834 <_free_r>
 80182b8:	e7c7      	b.n	801824a <__ssputs_r+0x46>
	...

080182bc <_svfiprintf_r>:
 80182bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182c0:	4698      	mov	r8, r3
 80182c2:	898b      	ldrh	r3, [r1, #12]
 80182c4:	061b      	lsls	r3, r3, #24
 80182c6:	b09d      	sub	sp, #116	; 0x74
 80182c8:	4607      	mov	r7, r0
 80182ca:	460d      	mov	r5, r1
 80182cc:	4614      	mov	r4, r2
 80182ce:	d50e      	bpl.n	80182ee <_svfiprintf_r+0x32>
 80182d0:	690b      	ldr	r3, [r1, #16]
 80182d2:	b963      	cbnz	r3, 80182ee <_svfiprintf_r+0x32>
 80182d4:	2140      	movs	r1, #64	; 0x40
 80182d6:	f000 fb19 	bl	801890c <_malloc_r>
 80182da:	6028      	str	r0, [r5, #0]
 80182dc:	6128      	str	r0, [r5, #16]
 80182de:	b920      	cbnz	r0, 80182ea <_svfiprintf_r+0x2e>
 80182e0:	230c      	movs	r3, #12
 80182e2:	603b      	str	r3, [r7, #0]
 80182e4:	f04f 30ff 	mov.w	r0, #4294967295
 80182e8:	e0d1      	b.n	801848e <_svfiprintf_r+0x1d2>
 80182ea:	2340      	movs	r3, #64	; 0x40
 80182ec:	616b      	str	r3, [r5, #20]
 80182ee:	2300      	movs	r3, #0
 80182f0:	9309      	str	r3, [sp, #36]	; 0x24
 80182f2:	2320      	movs	r3, #32
 80182f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80182f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80182fc:	2330      	movs	r3, #48	; 0x30
 80182fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80184a8 <_svfiprintf_r+0x1ec>
 8018302:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018306:	f04f 0901 	mov.w	r9, #1
 801830a:	4623      	mov	r3, r4
 801830c:	469a      	mov	sl, r3
 801830e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018312:	b10a      	cbz	r2, 8018318 <_svfiprintf_r+0x5c>
 8018314:	2a25      	cmp	r2, #37	; 0x25
 8018316:	d1f9      	bne.n	801830c <_svfiprintf_r+0x50>
 8018318:	ebba 0b04 	subs.w	fp, sl, r4
 801831c:	d00b      	beq.n	8018336 <_svfiprintf_r+0x7a>
 801831e:	465b      	mov	r3, fp
 8018320:	4622      	mov	r2, r4
 8018322:	4629      	mov	r1, r5
 8018324:	4638      	mov	r0, r7
 8018326:	f7ff ff6d 	bl	8018204 <__ssputs_r>
 801832a:	3001      	adds	r0, #1
 801832c:	f000 80aa 	beq.w	8018484 <_svfiprintf_r+0x1c8>
 8018330:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018332:	445a      	add	r2, fp
 8018334:	9209      	str	r2, [sp, #36]	; 0x24
 8018336:	f89a 3000 	ldrb.w	r3, [sl]
 801833a:	2b00      	cmp	r3, #0
 801833c:	f000 80a2 	beq.w	8018484 <_svfiprintf_r+0x1c8>
 8018340:	2300      	movs	r3, #0
 8018342:	f04f 32ff 	mov.w	r2, #4294967295
 8018346:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801834a:	f10a 0a01 	add.w	sl, sl, #1
 801834e:	9304      	str	r3, [sp, #16]
 8018350:	9307      	str	r3, [sp, #28]
 8018352:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018356:	931a      	str	r3, [sp, #104]	; 0x68
 8018358:	4654      	mov	r4, sl
 801835a:	2205      	movs	r2, #5
 801835c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018360:	4851      	ldr	r0, [pc, #324]	; (80184a8 <_svfiprintf_r+0x1ec>)
 8018362:	f7e7 ff55 	bl	8000210 <memchr>
 8018366:	9a04      	ldr	r2, [sp, #16]
 8018368:	b9d8      	cbnz	r0, 80183a2 <_svfiprintf_r+0xe6>
 801836a:	06d0      	lsls	r0, r2, #27
 801836c:	bf44      	itt	mi
 801836e:	2320      	movmi	r3, #32
 8018370:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018374:	0711      	lsls	r1, r2, #28
 8018376:	bf44      	itt	mi
 8018378:	232b      	movmi	r3, #43	; 0x2b
 801837a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801837e:	f89a 3000 	ldrb.w	r3, [sl]
 8018382:	2b2a      	cmp	r3, #42	; 0x2a
 8018384:	d015      	beq.n	80183b2 <_svfiprintf_r+0xf6>
 8018386:	9a07      	ldr	r2, [sp, #28]
 8018388:	4654      	mov	r4, sl
 801838a:	2000      	movs	r0, #0
 801838c:	f04f 0c0a 	mov.w	ip, #10
 8018390:	4621      	mov	r1, r4
 8018392:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018396:	3b30      	subs	r3, #48	; 0x30
 8018398:	2b09      	cmp	r3, #9
 801839a:	d94e      	bls.n	801843a <_svfiprintf_r+0x17e>
 801839c:	b1b0      	cbz	r0, 80183cc <_svfiprintf_r+0x110>
 801839e:	9207      	str	r2, [sp, #28]
 80183a0:	e014      	b.n	80183cc <_svfiprintf_r+0x110>
 80183a2:	eba0 0308 	sub.w	r3, r0, r8
 80183a6:	fa09 f303 	lsl.w	r3, r9, r3
 80183aa:	4313      	orrs	r3, r2
 80183ac:	9304      	str	r3, [sp, #16]
 80183ae:	46a2      	mov	sl, r4
 80183b0:	e7d2      	b.n	8018358 <_svfiprintf_r+0x9c>
 80183b2:	9b03      	ldr	r3, [sp, #12]
 80183b4:	1d19      	adds	r1, r3, #4
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	9103      	str	r1, [sp, #12]
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	bfbb      	ittet	lt
 80183be:	425b      	neglt	r3, r3
 80183c0:	f042 0202 	orrlt.w	r2, r2, #2
 80183c4:	9307      	strge	r3, [sp, #28]
 80183c6:	9307      	strlt	r3, [sp, #28]
 80183c8:	bfb8      	it	lt
 80183ca:	9204      	strlt	r2, [sp, #16]
 80183cc:	7823      	ldrb	r3, [r4, #0]
 80183ce:	2b2e      	cmp	r3, #46	; 0x2e
 80183d0:	d10c      	bne.n	80183ec <_svfiprintf_r+0x130>
 80183d2:	7863      	ldrb	r3, [r4, #1]
 80183d4:	2b2a      	cmp	r3, #42	; 0x2a
 80183d6:	d135      	bne.n	8018444 <_svfiprintf_r+0x188>
 80183d8:	9b03      	ldr	r3, [sp, #12]
 80183da:	1d1a      	adds	r2, r3, #4
 80183dc:	681b      	ldr	r3, [r3, #0]
 80183de:	9203      	str	r2, [sp, #12]
 80183e0:	2b00      	cmp	r3, #0
 80183e2:	bfb8      	it	lt
 80183e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80183e8:	3402      	adds	r4, #2
 80183ea:	9305      	str	r3, [sp, #20]
 80183ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80184b8 <_svfiprintf_r+0x1fc>
 80183f0:	7821      	ldrb	r1, [r4, #0]
 80183f2:	2203      	movs	r2, #3
 80183f4:	4650      	mov	r0, sl
 80183f6:	f7e7 ff0b 	bl	8000210 <memchr>
 80183fa:	b140      	cbz	r0, 801840e <_svfiprintf_r+0x152>
 80183fc:	2340      	movs	r3, #64	; 0x40
 80183fe:	eba0 000a 	sub.w	r0, r0, sl
 8018402:	fa03 f000 	lsl.w	r0, r3, r0
 8018406:	9b04      	ldr	r3, [sp, #16]
 8018408:	4303      	orrs	r3, r0
 801840a:	3401      	adds	r4, #1
 801840c:	9304      	str	r3, [sp, #16]
 801840e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018412:	4826      	ldr	r0, [pc, #152]	; (80184ac <_svfiprintf_r+0x1f0>)
 8018414:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018418:	2206      	movs	r2, #6
 801841a:	f7e7 fef9 	bl	8000210 <memchr>
 801841e:	2800      	cmp	r0, #0
 8018420:	d038      	beq.n	8018494 <_svfiprintf_r+0x1d8>
 8018422:	4b23      	ldr	r3, [pc, #140]	; (80184b0 <_svfiprintf_r+0x1f4>)
 8018424:	bb1b      	cbnz	r3, 801846e <_svfiprintf_r+0x1b2>
 8018426:	9b03      	ldr	r3, [sp, #12]
 8018428:	3307      	adds	r3, #7
 801842a:	f023 0307 	bic.w	r3, r3, #7
 801842e:	3308      	adds	r3, #8
 8018430:	9303      	str	r3, [sp, #12]
 8018432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018434:	4433      	add	r3, r6
 8018436:	9309      	str	r3, [sp, #36]	; 0x24
 8018438:	e767      	b.n	801830a <_svfiprintf_r+0x4e>
 801843a:	fb0c 3202 	mla	r2, ip, r2, r3
 801843e:	460c      	mov	r4, r1
 8018440:	2001      	movs	r0, #1
 8018442:	e7a5      	b.n	8018390 <_svfiprintf_r+0xd4>
 8018444:	2300      	movs	r3, #0
 8018446:	3401      	adds	r4, #1
 8018448:	9305      	str	r3, [sp, #20]
 801844a:	4619      	mov	r1, r3
 801844c:	f04f 0c0a 	mov.w	ip, #10
 8018450:	4620      	mov	r0, r4
 8018452:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018456:	3a30      	subs	r2, #48	; 0x30
 8018458:	2a09      	cmp	r2, #9
 801845a:	d903      	bls.n	8018464 <_svfiprintf_r+0x1a8>
 801845c:	2b00      	cmp	r3, #0
 801845e:	d0c5      	beq.n	80183ec <_svfiprintf_r+0x130>
 8018460:	9105      	str	r1, [sp, #20]
 8018462:	e7c3      	b.n	80183ec <_svfiprintf_r+0x130>
 8018464:	fb0c 2101 	mla	r1, ip, r1, r2
 8018468:	4604      	mov	r4, r0
 801846a:	2301      	movs	r3, #1
 801846c:	e7f0      	b.n	8018450 <_svfiprintf_r+0x194>
 801846e:	ab03      	add	r3, sp, #12
 8018470:	9300      	str	r3, [sp, #0]
 8018472:	462a      	mov	r2, r5
 8018474:	4b0f      	ldr	r3, [pc, #60]	; (80184b4 <_svfiprintf_r+0x1f8>)
 8018476:	a904      	add	r1, sp, #16
 8018478:	4638      	mov	r0, r7
 801847a:	f3af 8000 	nop.w
 801847e:	1c42      	adds	r2, r0, #1
 8018480:	4606      	mov	r6, r0
 8018482:	d1d6      	bne.n	8018432 <_svfiprintf_r+0x176>
 8018484:	89ab      	ldrh	r3, [r5, #12]
 8018486:	065b      	lsls	r3, r3, #25
 8018488:	f53f af2c 	bmi.w	80182e4 <_svfiprintf_r+0x28>
 801848c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801848e:	b01d      	add	sp, #116	; 0x74
 8018490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018494:	ab03      	add	r3, sp, #12
 8018496:	9300      	str	r3, [sp, #0]
 8018498:	462a      	mov	r2, r5
 801849a:	4b06      	ldr	r3, [pc, #24]	; (80184b4 <_svfiprintf_r+0x1f8>)
 801849c:	a904      	add	r1, sp, #16
 801849e:	4638      	mov	r0, r7
 80184a0:	f000 f87a 	bl	8018598 <_printf_i>
 80184a4:	e7eb      	b.n	801847e <_svfiprintf_r+0x1c2>
 80184a6:	bf00      	nop
 80184a8:	08019000 	.word	0x08019000
 80184ac:	0801900a 	.word	0x0801900a
 80184b0:	00000000 	.word	0x00000000
 80184b4:	08018205 	.word	0x08018205
 80184b8:	08019006 	.word	0x08019006

080184bc <_printf_common>:
 80184bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80184c0:	4616      	mov	r6, r2
 80184c2:	4699      	mov	r9, r3
 80184c4:	688a      	ldr	r2, [r1, #8]
 80184c6:	690b      	ldr	r3, [r1, #16]
 80184c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80184cc:	4293      	cmp	r3, r2
 80184ce:	bfb8      	it	lt
 80184d0:	4613      	movlt	r3, r2
 80184d2:	6033      	str	r3, [r6, #0]
 80184d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80184d8:	4607      	mov	r7, r0
 80184da:	460c      	mov	r4, r1
 80184dc:	b10a      	cbz	r2, 80184e2 <_printf_common+0x26>
 80184de:	3301      	adds	r3, #1
 80184e0:	6033      	str	r3, [r6, #0]
 80184e2:	6823      	ldr	r3, [r4, #0]
 80184e4:	0699      	lsls	r1, r3, #26
 80184e6:	bf42      	ittt	mi
 80184e8:	6833      	ldrmi	r3, [r6, #0]
 80184ea:	3302      	addmi	r3, #2
 80184ec:	6033      	strmi	r3, [r6, #0]
 80184ee:	6825      	ldr	r5, [r4, #0]
 80184f0:	f015 0506 	ands.w	r5, r5, #6
 80184f4:	d106      	bne.n	8018504 <_printf_common+0x48>
 80184f6:	f104 0a19 	add.w	sl, r4, #25
 80184fa:	68e3      	ldr	r3, [r4, #12]
 80184fc:	6832      	ldr	r2, [r6, #0]
 80184fe:	1a9b      	subs	r3, r3, r2
 8018500:	42ab      	cmp	r3, r5
 8018502:	dc26      	bgt.n	8018552 <_printf_common+0x96>
 8018504:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8018508:	1e13      	subs	r3, r2, #0
 801850a:	6822      	ldr	r2, [r4, #0]
 801850c:	bf18      	it	ne
 801850e:	2301      	movne	r3, #1
 8018510:	0692      	lsls	r2, r2, #26
 8018512:	d42b      	bmi.n	801856c <_printf_common+0xb0>
 8018514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018518:	4649      	mov	r1, r9
 801851a:	4638      	mov	r0, r7
 801851c:	47c0      	blx	r8
 801851e:	3001      	adds	r0, #1
 8018520:	d01e      	beq.n	8018560 <_printf_common+0xa4>
 8018522:	6823      	ldr	r3, [r4, #0]
 8018524:	68e5      	ldr	r5, [r4, #12]
 8018526:	6832      	ldr	r2, [r6, #0]
 8018528:	f003 0306 	and.w	r3, r3, #6
 801852c:	2b04      	cmp	r3, #4
 801852e:	bf08      	it	eq
 8018530:	1aad      	subeq	r5, r5, r2
 8018532:	68a3      	ldr	r3, [r4, #8]
 8018534:	6922      	ldr	r2, [r4, #16]
 8018536:	bf0c      	ite	eq
 8018538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801853c:	2500      	movne	r5, #0
 801853e:	4293      	cmp	r3, r2
 8018540:	bfc4      	itt	gt
 8018542:	1a9b      	subgt	r3, r3, r2
 8018544:	18ed      	addgt	r5, r5, r3
 8018546:	2600      	movs	r6, #0
 8018548:	341a      	adds	r4, #26
 801854a:	42b5      	cmp	r5, r6
 801854c:	d11a      	bne.n	8018584 <_printf_common+0xc8>
 801854e:	2000      	movs	r0, #0
 8018550:	e008      	b.n	8018564 <_printf_common+0xa8>
 8018552:	2301      	movs	r3, #1
 8018554:	4652      	mov	r2, sl
 8018556:	4649      	mov	r1, r9
 8018558:	4638      	mov	r0, r7
 801855a:	47c0      	blx	r8
 801855c:	3001      	adds	r0, #1
 801855e:	d103      	bne.n	8018568 <_printf_common+0xac>
 8018560:	f04f 30ff 	mov.w	r0, #4294967295
 8018564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018568:	3501      	adds	r5, #1
 801856a:	e7c6      	b.n	80184fa <_printf_common+0x3e>
 801856c:	18e1      	adds	r1, r4, r3
 801856e:	1c5a      	adds	r2, r3, #1
 8018570:	2030      	movs	r0, #48	; 0x30
 8018572:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018576:	4422      	add	r2, r4
 8018578:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801857c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018580:	3302      	adds	r3, #2
 8018582:	e7c7      	b.n	8018514 <_printf_common+0x58>
 8018584:	2301      	movs	r3, #1
 8018586:	4622      	mov	r2, r4
 8018588:	4649      	mov	r1, r9
 801858a:	4638      	mov	r0, r7
 801858c:	47c0      	blx	r8
 801858e:	3001      	adds	r0, #1
 8018590:	d0e6      	beq.n	8018560 <_printf_common+0xa4>
 8018592:	3601      	adds	r6, #1
 8018594:	e7d9      	b.n	801854a <_printf_common+0x8e>
	...

08018598 <_printf_i>:
 8018598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801859c:	7e0f      	ldrb	r7, [r1, #24]
 801859e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80185a0:	2f78      	cmp	r7, #120	; 0x78
 80185a2:	4691      	mov	r9, r2
 80185a4:	4680      	mov	r8, r0
 80185a6:	460c      	mov	r4, r1
 80185a8:	469a      	mov	sl, r3
 80185aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80185ae:	d807      	bhi.n	80185c0 <_printf_i+0x28>
 80185b0:	2f62      	cmp	r7, #98	; 0x62
 80185b2:	d80a      	bhi.n	80185ca <_printf_i+0x32>
 80185b4:	2f00      	cmp	r7, #0
 80185b6:	f000 80d8 	beq.w	801876a <_printf_i+0x1d2>
 80185ba:	2f58      	cmp	r7, #88	; 0x58
 80185bc:	f000 80a3 	beq.w	8018706 <_printf_i+0x16e>
 80185c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80185c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80185c8:	e03a      	b.n	8018640 <_printf_i+0xa8>
 80185ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80185ce:	2b15      	cmp	r3, #21
 80185d0:	d8f6      	bhi.n	80185c0 <_printf_i+0x28>
 80185d2:	a101      	add	r1, pc, #4	; (adr r1, 80185d8 <_printf_i+0x40>)
 80185d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80185d8:	08018631 	.word	0x08018631
 80185dc:	08018645 	.word	0x08018645
 80185e0:	080185c1 	.word	0x080185c1
 80185e4:	080185c1 	.word	0x080185c1
 80185e8:	080185c1 	.word	0x080185c1
 80185ec:	080185c1 	.word	0x080185c1
 80185f0:	08018645 	.word	0x08018645
 80185f4:	080185c1 	.word	0x080185c1
 80185f8:	080185c1 	.word	0x080185c1
 80185fc:	080185c1 	.word	0x080185c1
 8018600:	080185c1 	.word	0x080185c1
 8018604:	08018751 	.word	0x08018751
 8018608:	08018675 	.word	0x08018675
 801860c:	08018733 	.word	0x08018733
 8018610:	080185c1 	.word	0x080185c1
 8018614:	080185c1 	.word	0x080185c1
 8018618:	08018773 	.word	0x08018773
 801861c:	080185c1 	.word	0x080185c1
 8018620:	08018675 	.word	0x08018675
 8018624:	080185c1 	.word	0x080185c1
 8018628:	080185c1 	.word	0x080185c1
 801862c:	0801873b 	.word	0x0801873b
 8018630:	682b      	ldr	r3, [r5, #0]
 8018632:	1d1a      	adds	r2, r3, #4
 8018634:	681b      	ldr	r3, [r3, #0]
 8018636:	602a      	str	r2, [r5, #0]
 8018638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801863c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018640:	2301      	movs	r3, #1
 8018642:	e0a3      	b.n	801878c <_printf_i+0x1f4>
 8018644:	6820      	ldr	r0, [r4, #0]
 8018646:	6829      	ldr	r1, [r5, #0]
 8018648:	0606      	lsls	r6, r0, #24
 801864a:	f101 0304 	add.w	r3, r1, #4
 801864e:	d50a      	bpl.n	8018666 <_printf_i+0xce>
 8018650:	680e      	ldr	r6, [r1, #0]
 8018652:	602b      	str	r3, [r5, #0]
 8018654:	2e00      	cmp	r6, #0
 8018656:	da03      	bge.n	8018660 <_printf_i+0xc8>
 8018658:	232d      	movs	r3, #45	; 0x2d
 801865a:	4276      	negs	r6, r6
 801865c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018660:	485e      	ldr	r0, [pc, #376]	; (80187dc <_printf_i+0x244>)
 8018662:	230a      	movs	r3, #10
 8018664:	e019      	b.n	801869a <_printf_i+0x102>
 8018666:	680e      	ldr	r6, [r1, #0]
 8018668:	602b      	str	r3, [r5, #0]
 801866a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801866e:	bf18      	it	ne
 8018670:	b236      	sxthne	r6, r6
 8018672:	e7ef      	b.n	8018654 <_printf_i+0xbc>
 8018674:	682b      	ldr	r3, [r5, #0]
 8018676:	6820      	ldr	r0, [r4, #0]
 8018678:	1d19      	adds	r1, r3, #4
 801867a:	6029      	str	r1, [r5, #0]
 801867c:	0601      	lsls	r1, r0, #24
 801867e:	d501      	bpl.n	8018684 <_printf_i+0xec>
 8018680:	681e      	ldr	r6, [r3, #0]
 8018682:	e002      	b.n	801868a <_printf_i+0xf2>
 8018684:	0646      	lsls	r6, r0, #25
 8018686:	d5fb      	bpl.n	8018680 <_printf_i+0xe8>
 8018688:	881e      	ldrh	r6, [r3, #0]
 801868a:	4854      	ldr	r0, [pc, #336]	; (80187dc <_printf_i+0x244>)
 801868c:	2f6f      	cmp	r7, #111	; 0x6f
 801868e:	bf0c      	ite	eq
 8018690:	2308      	moveq	r3, #8
 8018692:	230a      	movne	r3, #10
 8018694:	2100      	movs	r1, #0
 8018696:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801869a:	6865      	ldr	r5, [r4, #4]
 801869c:	60a5      	str	r5, [r4, #8]
 801869e:	2d00      	cmp	r5, #0
 80186a0:	bfa2      	ittt	ge
 80186a2:	6821      	ldrge	r1, [r4, #0]
 80186a4:	f021 0104 	bicge.w	r1, r1, #4
 80186a8:	6021      	strge	r1, [r4, #0]
 80186aa:	b90e      	cbnz	r6, 80186b0 <_printf_i+0x118>
 80186ac:	2d00      	cmp	r5, #0
 80186ae:	d04d      	beq.n	801874c <_printf_i+0x1b4>
 80186b0:	4615      	mov	r5, r2
 80186b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80186b6:	fb03 6711 	mls	r7, r3, r1, r6
 80186ba:	5dc7      	ldrb	r7, [r0, r7]
 80186bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80186c0:	4637      	mov	r7, r6
 80186c2:	42bb      	cmp	r3, r7
 80186c4:	460e      	mov	r6, r1
 80186c6:	d9f4      	bls.n	80186b2 <_printf_i+0x11a>
 80186c8:	2b08      	cmp	r3, #8
 80186ca:	d10b      	bne.n	80186e4 <_printf_i+0x14c>
 80186cc:	6823      	ldr	r3, [r4, #0]
 80186ce:	07de      	lsls	r6, r3, #31
 80186d0:	d508      	bpl.n	80186e4 <_printf_i+0x14c>
 80186d2:	6923      	ldr	r3, [r4, #16]
 80186d4:	6861      	ldr	r1, [r4, #4]
 80186d6:	4299      	cmp	r1, r3
 80186d8:	bfde      	ittt	le
 80186da:	2330      	movle	r3, #48	; 0x30
 80186dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80186e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80186e4:	1b52      	subs	r2, r2, r5
 80186e6:	6122      	str	r2, [r4, #16]
 80186e8:	f8cd a000 	str.w	sl, [sp]
 80186ec:	464b      	mov	r3, r9
 80186ee:	aa03      	add	r2, sp, #12
 80186f0:	4621      	mov	r1, r4
 80186f2:	4640      	mov	r0, r8
 80186f4:	f7ff fee2 	bl	80184bc <_printf_common>
 80186f8:	3001      	adds	r0, #1
 80186fa:	d14c      	bne.n	8018796 <_printf_i+0x1fe>
 80186fc:	f04f 30ff 	mov.w	r0, #4294967295
 8018700:	b004      	add	sp, #16
 8018702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018706:	4835      	ldr	r0, [pc, #212]	; (80187dc <_printf_i+0x244>)
 8018708:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801870c:	6829      	ldr	r1, [r5, #0]
 801870e:	6823      	ldr	r3, [r4, #0]
 8018710:	f851 6b04 	ldr.w	r6, [r1], #4
 8018714:	6029      	str	r1, [r5, #0]
 8018716:	061d      	lsls	r5, r3, #24
 8018718:	d514      	bpl.n	8018744 <_printf_i+0x1ac>
 801871a:	07df      	lsls	r7, r3, #31
 801871c:	bf44      	itt	mi
 801871e:	f043 0320 	orrmi.w	r3, r3, #32
 8018722:	6023      	strmi	r3, [r4, #0]
 8018724:	b91e      	cbnz	r6, 801872e <_printf_i+0x196>
 8018726:	6823      	ldr	r3, [r4, #0]
 8018728:	f023 0320 	bic.w	r3, r3, #32
 801872c:	6023      	str	r3, [r4, #0]
 801872e:	2310      	movs	r3, #16
 8018730:	e7b0      	b.n	8018694 <_printf_i+0xfc>
 8018732:	6823      	ldr	r3, [r4, #0]
 8018734:	f043 0320 	orr.w	r3, r3, #32
 8018738:	6023      	str	r3, [r4, #0]
 801873a:	2378      	movs	r3, #120	; 0x78
 801873c:	4828      	ldr	r0, [pc, #160]	; (80187e0 <_printf_i+0x248>)
 801873e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018742:	e7e3      	b.n	801870c <_printf_i+0x174>
 8018744:	0659      	lsls	r1, r3, #25
 8018746:	bf48      	it	mi
 8018748:	b2b6      	uxthmi	r6, r6
 801874a:	e7e6      	b.n	801871a <_printf_i+0x182>
 801874c:	4615      	mov	r5, r2
 801874e:	e7bb      	b.n	80186c8 <_printf_i+0x130>
 8018750:	682b      	ldr	r3, [r5, #0]
 8018752:	6826      	ldr	r6, [r4, #0]
 8018754:	6961      	ldr	r1, [r4, #20]
 8018756:	1d18      	adds	r0, r3, #4
 8018758:	6028      	str	r0, [r5, #0]
 801875a:	0635      	lsls	r5, r6, #24
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	d501      	bpl.n	8018764 <_printf_i+0x1cc>
 8018760:	6019      	str	r1, [r3, #0]
 8018762:	e002      	b.n	801876a <_printf_i+0x1d2>
 8018764:	0670      	lsls	r0, r6, #25
 8018766:	d5fb      	bpl.n	8018760 <_printf_i+0x1c8>
 8018768:	8019      	strh	r1, [r3, #0]
 801876a:	2300      	movs	r3, #0
 801876c:	6123      	str	r3, [r4, #16]
 801876e:	4615      	mov	r5, r2
 8018770:	e7ba      	b.n	80186e8 <_printf_i+0x150>
 8018772:	682b      	ldr	r3, [r5, #0]
 8018774:	1d1a      	adds	r2, r3, #4
 8018776:	602a      	str	r2, [r5, #0]
 8018778:	681d      	ldr	r5, [r3, #0]
 801877a:	6862      	ldr	r2, [r4, #4]
 801877c:	2100      	movs	r1, #0
 801877e:	4628      	mov	r0, r5
 8018780:	f7e7 fd46 	bl	8000210 <memchr>
 8018784:	b108      	cbz	r0, 801878a <_printf_i+0x1f2>
 8018786:	1b40      	subs	r0, r0, r5
 8018788:	6060      	str	r0, [r4, #4]
 801878a:	6863      	ldr	r3, [r4, #4]
 801878c:	6123      	str	r3, [r4, #16]
 801878e:	2300      	movs	r3, #0
 8018790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018794:	e7a8      	b.n	80186e8 <_printf_i+0x150>
 8018796:	6923      	ldr	r3, [r4, #16]
 8018798:	462a      	mov	r2, r5
 801879a:	4649      	mov	r1, r9
 801879c:	4640      	mov	r0, r8
 801879e:	47d0      	blx	sl
 80187a0:	3001      	adds	r0, #1
 80187a2:	d0ab      	beq.n	80186fc <_printf_i+0x164>
 80187a4:	6823      	ldr	r3, [r4, #0]
 80187a6:	079b      	lsls	r3, r3, #30
 80187a8:	d413      	bmi.n	80187d2 <_printf_i+0x23a>
 80187aa:	68e0      	ldr	r0, [r4, #12]
 80187ac:	9b03      	ldr	r3, [sp, #12]
 80187ae:	4298      	cmp	r0, r3
 80187b0:	bfb8      	it	lt
 80187b2:	4618      	movlt	r0, r3
 80187b4:	e7a4      	b.n	8018700 <_printf_i+0x168>
 80187b6:	2301      	movs	r3, #1
 80187b8:	4632      	mov	r2, r6
 80187ba:	4649      	mov	r1, r9
 80187bc:	4640      	mov	r0, r8
 80187be:	47d0      	blx	sl
 80187c0:	3001      	adds	r0, #1
 80187c2:	d09b      	beq.n	80186fc <_printf_i+0x164>
 80187c4:	3501      	adds	r5, #1
 80187c6:	68e3      	ldr	r3, [r4, #12]
 80187c8:	9903      	ldr	r1, [sp, #12]
 80187ca:	1a5b      	subs	r3, r3, r1
 80187cc:	42ab      	cmp	r3, r5
 80187ce:	dcf2      	bgt.n	80187b6 <_printf_i+0x21e>
 80187d0:	e7eb      	b.n	80187aa <_printf_i+0x212>
 80187d2:	2500      	movs	r5, #0
 80187d4:	f104 0619 	add.w	r6, r4, #25
 80187d8:	e7f5      	b.n	80187c6 <_printf_i+0x22e>
 80187da:	bf00      	nop
 80187dc:	08019011 	.word	0x08019011
 80187e0:	08019022 	.word	0x08019022

080187e4 <memcpy>:
 80187e4:	440a      	add	r2, r1
 80187e6:	4291      	cmp	r1, r2
 80187e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80187ec:	d100      	bne.n	80187f0 <memcpy+0xc>
 80187ee:	4770      	bx	lr
 80187f0:	b510      	push	{r4, lr}
 80187f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80187f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80187fa:	4291      	cmp	r1, r2
 80187fc:	d1f9      	bne.n	80187f2 <memcpy+0xe>
 80187fe:	bd10      	pop	{r4, pc}

08018800 <memmove>:
 8018800:	4288      	cmp	r0, r1
 8018802:	b510      	push	{r4, lr}
 8018804:	eb01 0402 	add.w	r4, r1, r2
 8018808:	d902      	bls.n	8018810 <memmove+0x10>
 801880a:	4284      	cmp	r4, r0
 801880c:	4623      	mov	r3, r4
 801880e:	d807      	bhi.n	8018820 <memmove+0x20>
 8018810:	1e43      	subs	r3, r0, #1
 8018812:	42a1      	cmp	r1, r4
 8018814:	d008      	beq.n	8018828 <memmove+0x28>
 8018816:	f811 2b01 	ldrb.w	r2, [r1], #1
 801881a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801881e:	e7f8      	b.n	8018812 <memmove+0x12>
 8018820:	4402      	add	r2, r0
 8018822:	4601      	mov	r1, r0
 8018824:	428a      	cmp	r2, r1
 8018826:	d100      	bne.n	801882a <memmove+0x2a>
 8018828:	bd10      	pop	{r4, pc}
 801882a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801882e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018832:	e7f7      	b.n	8018824 <memmove+0x24>

08018834 <_free_r>:
 8018834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018836:	2900      	cmp	r1, #0
 8018838:	d044      	beq.n	80188c4 <_free_r+0x90>
 801883a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801883e:	9001      	str	r0, [sp, #4]
 8018840:	2b00      	cmp	r3, #0
 8018842:	f1a1 0404 	sub.w	r4, r1, #4
 8018846:	bfb8      	it	lt
 8018848:	18e4      	addlt	r4, r4, r3
 801884a:	f000 f913 	bl	8018a74 <__malloc_lock>
 801884e:	4a1e      	ldr	r2, [pc, #120]	; (80188c8 <_free_r+0x94>)
 8018850:	9801      	ldr	r0, [sp, #4]
 8018852:	6813      	ldr	r3, [r2, #0]
 8018854:	b933      	cbnz	r3, 8018864 <_free_r+0x30>
 8018856:	6063      	str	r3, [r4, #4]
 8018858:	6014      	str	r4, [r2, #0]
 801885a:	b003      	add	sp, #12
 801885c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018860:	f000 b90e 	b.w	8018a80 <__malloc_unlock>
 8018864:	42a3      	cmp	r3, r4
 8018866:	d908      	bls.n	801887a <_free_r+0x46>
 8018868:	6825      	ldr	r5, [r4, #0]
 801886a:	1961      	adds	r1, r4, r5
 801886c:	428b      	cmp	r3, r1
 801886e:	bf01      	itttt	eq
 8018870:	6819      	ldreq	r1, [r3, #0]
 8018872:	685b      	ldreq	r3, [r3, #4]
 8018874:	1949      	addeq	r1, r1, r5
 8018876:	6021      	streq	r1, [r4, #0]
 8018878:	e7ed      	b.n	8018856 <_free_r+0x22>
 801887a:	461a      	mov	r2, r3
 801887c:	685b      	ldr	r3, [r3, #4]
 801887e:	b10b      	cbz	r3, 8018884 <_free_r+0x50>
 8018880:	42a3      	cmp	r3, r4
 8018882:	d9fa      	bls.n	801887a <_free_r+0x46>
 8018884:	6811      	ldr	r1, [r2, #0]
 8018886:	1855      	adds	r5, r2, r1
 8018888:	42a5      	cmp	r5, r4
 801888a:	d10b      	bne.n	80188a4 <_free_r+0x70>
 801888c:	6824      	ldr	r4, [r4, #0]
 801888e:	4421      	add	r1, r4
 8018890:	1854      	adds	r4, r2, r1
 8018892:	42a3      	cmp	r3, r4
 8018894:	6011      	str	r1, [r2, #0]
 8018896:	d1e0      	bne.n	801885a <_free_r+0x26>
 8018898:	681c      	ldr	r4, [r3, #0]
 801889a:	685b      	ldr	r3, [r3, #4]
 801889c:	6053      	str	r3, [r2, #4]
 801889e:	4421      	add	r1, r4
 80188a0:	6011      	str	r1, [r2, #0]
 80188a2:	e7da      	b.n	801885a <_free_r+0x26>
 80188a4:	d902      	bls.n	80188ac <_free_r+0x78>
 80188a6:	230c      	movs	r3, #12
 80188a8:	6003      	str	r3, [r0, #0]
 80188aa:	e7d6      	b.n	801885a <_free_r+0x26>
 80188ac:	6825      	ldr	r5, [r4, #0]
 80188ae:	1961      	adds	r1, r4, r5
 80188b0:	428b      	cmp	r3, r1
 80188b2:	bf04      	itt	eq
 80188b4:	6819      	ldreq	r1, [r3, #0]
 80188b6:	685b      	ldreq	r3, [r3, #4]
 80188b8:	6063      	str	r3, [r4, #4]
 80188ba:	bf04      	itt	eq
 80188bc:	1949      	addeq	r1, r1, r5
 80188be:	6021      	streq	r1, [r4, #0]
 80188c0:	6054      	str	r4, [r2, #4]
 80188c2:	e7ca      	b.n	801885a <_free_r+0x26>
 80188c4:	b003      	add	sp, #12
 80188c6:	bd30      	pop	{r4, r5, pc}
 80188c8:	20003558 	.word	0x20003558

080188cc <sbrk_aligned>:
 80188cc:	b570      	push	{r4, r5, r6, lr}
 80188ce:	4e0e      	ldr	r6, [pc, #56]	; (8018908 <sbrk_aligned+0x3c>)
 80188d0:	460c      	mov	r4, r1
 80188d2:	6831      	ldr	r1, [r6, #0]
 80188d4:	4605      	mov	r5, r0
 80188d6:	b911      	cbnz	r1, 80188de <sbrk_aligned+0x12>
 80188d8:	f000 f8bc 	bl	8018a54 <_sbrk_r>
 80188dc:	6030      	str	r0, [r6, #0]
 80188de:	4621      	mov	r1, r4
 80188e0:	4628      	mov	r0, r5
 80188e2:	f000 f8b7 	bl	8018a54 <_sbrk_r>
 80188e6:	1c43      	adds	r3, r0, #1
 80188e8:	d00a      	beq.n	8018900 <sbrk_aligned+0x34>
 80188ea:	1cc4      	adds	r4, r0, #3
 80188ec:	f024 0403 	bic.w	r4, r4, #3
 80188f0:	42a0      	cmp	r0, r4
 80188f2:	d007      	beq.n	8018904 <sbrk_aligned+0x38>
 80188f4:	1a21      	subs	r1, r4, r0
 80188f6:	4628      	mov	r0, r5
 80188f8:	f000 f8ac 	bl	8018a54 <_sbrk_r>
 80188fc:	3001      	adds	r0, #1
 80188fe:	d101      	bne.n	8018904 <sbrk_aligned+0x38>
 8018900:	f04f 34ff 	mov.w	r4, #4294967295
 8018904:	4620      	mov	r0, r4
 8018906:	bd70      	pop	{r4, r5, r6, pc}
 8018908:	2000355c 	.word	0x2000355c

0801890c <_malloc_r>:
 801890c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018910:	1ccd      	adds	r5, r1, #3
 8018912:	f025 0503 	bic.w	r5, r5, #3
 8018916:	3508      	adds	r5, #8
 8018918:	2d0c      	cmp	r5, #12
 801891a:	bf38      	it	cc
 801891c:	250c      	movcc	r5, #12
 801891e:	2d00      	cmp	r5, #0
 8018920:	4607      	mov	r7, r0
 8018922:	db01      	blt.n	8018928 <_malloc_r+0x1c>
 8018924:	42a9      	cmp	r1, r5
 8018926:	d905      	bls.n	8018934 <_malloc_r+0x28>
 8018928:	230c      	movs	r3, #12
 801892a:	603b      	str	r3, [r7, #0]
 801892c:	2600      	movs	r6, #0
 801892e:	4630      	mov	r0, r6
 8018930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018934:	4e2e      	ldr	r6, [pc, #184]	; (80189f0 <_malloc_r+0xe4>)
 8018936:	f000 f89d 	bl	8018a74 <__malloc_lock>
 801893a:	6833      	ldr	r3, [r6, #0]
 801893c:	461c      	mov	r4, r3
 801893e:	bb34      	cbnz	r4, 801898e <_malloc_r+0x82>
 8018940:	4629      	mov	r1, r5
 8018942:	4638      	mov	r0, r7
 8018944:	f7ff ffc2 	bl	80188cc <sbrk_aligned>
 8018948:	1c43      	adds	r3, r0, #1
 801894a:	4604      	mov	r4, r0
 801894c:	d14d      	bne.n	80189ea <_malloc_r+0xde>
 801894e:	6834      	ldr	r4, [r6, #0]
 8018950:	4626      	mov	r6, r4
 8018952:	2e00      	cmp	r6, #0
 8018954:	d140      	bne.n	80189d8 <_malloc_r+0xcc>
 8018956:	6823      	ldr	r3, [r4, #0]
 8018958:	4631      	mov	r1, r6
 801895a:	4638      	mov	r0, r7
 801895c:	eb04 0803 	add.w	r8, r4, r3
 8018960:	f000 f878 	bl	8018a54 <_sbrk_r>
 8018964:	4580      	cmp	r8, r0
 8018966:	d13a      	bne.n	80189de <_malloc_r+0xd2>
 8018968:	6821      	ldr	r1, [r4, #0]
 801896a:	3503      	adds	r5, #3
 801896c:	1a6d      	subs	r5, r5, r1
 801896e:	f025 0503 	bic.w	r5, r5, #3
 8018972:	3508      	adds	r5, #8
 8018974:	2d0c      	cmp	r5, #12
 8018976:	bf38      	it	cc
 8018978:	250c      	movcc	r5, #12
 801897a:	4629      	mov	r1, r5
 801897c:	4638      	mov	r0, r7
 801897e:	f7ff ffa5 	bl	80188cc <sbrk_aligned>
 8018982:	3001      	adds	r0, #1
 8018984:	d02b      	beq.n	80189de <_malloc_r+0xd2>
 8018986:	6823      	ldr	r3, [r4, #0]
 8018988:	442b      	add	r3, r5
 801898a:	6023      	str	r3, [r4, #0]
 801898c:	e00e      	b.n	80189ac <_malloc_r+0xa0>
 801898e:	6822      	ldr	r2, [r4, #0]
 8018990:	1b52      	subs	r2, r2, r5
 8018992:	d41e      	bmi.n	80189d2 <_malloc_r+0xc6>
 8018994:	2a0b      	cmp	r2, #11
 8018996:	d916      	bls.n	80189c6 <_malloc_r+0xba>
 8018998:	1961      	adds	r1, r4, r5
 801899a:	42a3      	cmp	r3, r4
 801899c:	6025      	str	r5, [r4, #0]
 801899e:	bf18      	it	ne
 80189a0:	6059      	strne	r1, [r3, #4]
 80189a2:	6863      	ldr	r3, [r4, #4]
 80189a4:	bf08      	it	eq
 80189a6:	6031      	streq	r1, [r6, #0]
 80189a8:	5162      	str	r2, [r4, r5]
 80189aa:	604b      	str	r3, [r1, #4]
 80189ac:	4638      	mov	r0, r7
 80189ae:	f104 060b 	add.w	r6, r4, #11
 80189b2:	f000 f865 	bl	8018a80 <__malloc_unlock>
 80189b6:	f026 0607 	bic.w	r6, r6, #7
 80189ba:	1d23      	adds	r3, r4, #4
 80189bc:	1af2      	subs	r2, r6, r3
 80189be:	d0b6      	beq.n	801892e <_malloc_r+0x22>
 80189c0:	1b9b      	subs	r3, r3, r6
 80189c2:	50a3      	str	r3, [r4, r2]
 80189c4:	e7b3      	b.n	801892e <_malloc_r+0x22>
 80189c6:	6862      	ldr	r2, [r4, #4]
 80189c8:	42a3      	cmp	r3, r4
 80189ca:	bf0c      	ite	eq
 80189cc:	6032      	streq	r2, [r6, #0]
 80189ce:	605a      	strne	r2, [r3, #4]
 80189d0:	e7ec      	b.n	80189ac <_malloc_r+0xa0>
 80189d2:	4623      	mov	r3, r4
 80189d4:	6864      	ldr	r4, [r4, #4]
 80189d6:	e7b2      	b.n	801893e <_malloc_r+0x32>
 80189d8:	4634      	mov	r4, r6
 80189da:	6876      	ldr	r6, [r6, #4]
 80189dc:	e7b9      	b.n	8018952 <_malloc_r+0x46>
 80189de:	230c      	movs	r3, #12
 80189e0:	603b      	str	r3, [r7, #0]
 80189e2:	4638      	mov	r0, r7
 80189e4:	f000 f84c 	bl	8018a80 <__malloc_unlock>
 80189e8:	e7a1      	b.n	801892e <_malloc_r+0x22>
 80189ea:	6025      	str	r5, [r4, #0]
 80189ec:	e7de      	b.n	80189ac <_malloc_r+0xa0>
 80189ee:	bf00      	nop
 80189f0:	20003558 	.word	0x20003558

080189f4 <_realloc_r>:
 80189f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189f8:	4680      	mov	r8, r0
 80189fa:	4614      	mov	r4, r2
 80189fc:	460e      	mov	r6, r1
 80189fe:	b921      	cbnz	r1, 8018a0a <_realloc_r+0x16>
 8018a00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018a04:	4611      	mov	r1, r2
 8018a06:	f7ff bf81 	b.w	801890c <_malloc_r>
 8018a0a:	b92a      	cbnz	r2, 8018a18 <_realloc_r+0x24>
 8018a0c:	f7ff ff12 	bl	8018834 <_free_r>
 8018a10:	4625      	mov	r5, r4
 8018a12:	4628      	mov	r0, r5
 8018a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a18:	f000 f838 	bl	8018a8c <_malloc_usable_size_r>
 8018a1c:	4284      	cmp	r4, r0
 8018a1e:	4607      	mov	r7, r0
 8018a20:	d802      	bhi.n	8018a28 <_realloc_r+0x34>
 8018a22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018a26:	d812      	bhi.n	8018a4e <_realloc_r+0x5a>
 8018a28:	4621      	mov	r1, r4
 8018a2a:	4640      	mov	r0, r8
 8018a2c:	f7ff ff6e 	bl	801890c <_malloc_r>
 8018a30:	4605      	mov	r5, r0
 8018a32:	2800      	cmp	r0, #0
 8018a34:	d0ed      	beq.n	8018a12 <_realloc_r+0x1e>
 8018a36:	42bc      	cmp	r4, r7
 8018a38:	4622      	mov	r2, r4
 8018a3a:	4631      	mov	r1, r6
 8018a3c:	bf28      	it	cs
 8018a3e:	463a      	movcs	r2, r7
 8018a40:	f7ff fed0 	bl	80187e4 <memcpy>
 8018a44:	4631      	mov	r1, r6
 8018a46:	4640      	mov	r0, r8
 8018a48:	f7ff fef4 	bl	8018834 <_free_r>
 8018a4c:	e7e1      	b.n	8018a12 <_realloc_r+0x1e>
 8018a4e:	4635      	mov	r5, r6
 8018a50:	e7df      	b.n	8018a12 <_realloc_r+0x1e>
	...

08018a54 <_sbrk_r>:
 8018a54:	b538      	push	{r3, r4, r5, lr}
 8018a56:	4d06      	ldr	r5, [pc, #24]	; (8018a70 <_sbrk_r+0x1c>)
 8018a58:	2300      	movs	r3, #0
 8018a5a:	4604      	mov	r4, r0
 8018a5c:	4608      	mov	r0, r1
 8018a5e:	602b      	str	r3, [r5, #0]
 8018a60:	f7ed ffa4 	bl	80069ac <_sbrk>
 8018a64:	1c43      	adds	r3, r0, #1
 8018a66:	d102      	bne.n	8018a6e <_sbrk_r+0x1a>
 8018a68:	682b      	ldr	r3, [r5, #0]
 8018a6a:	b103      	cbz	r3, 8018a6e <_sbrk_r+0x1a>
 8018a6c:	6023      	str	r3, [r4, #0]
 8018a6e:	bd38      	pop	{r3, r4, r5, pc}
 8018a70:	20003560 	.word	0x20003560

08018a74 <__malloc_lock>:
 8018a74:	4801      	ldr	r0, [pc, #4]	; (8018a7c <__malloc_lock+0x8>)
 8018a76:	f000 b811 	b.w	8018a9c <__retarget_lock_acquire_recursive>
 8018a7a:	bf00      	nop
 8018a7c:	20003564 	.word	0x20003564

08018a80 <__malloc_unlock>:
 8018a80:	4801      	ldr	r0, [pc, #4]	; (8018a88 <__malloc_unlock+0x8>)
 8018a82:	f000 b80c 	b.w	8018a9e <__retarget_lock_release_recursive>
 8018a86:	bf00      	nop
 8018a88:	20003564 	.word	0x20003564

08018a8c <_malloc_usable_size_r>:
 8018a8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018a90:	1f18      	subs	r0, r3, #4
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	bfbc      	itt	lt
 8018a96:	580b      	ldrlt	r3, [r1, r0]
 8018a98:	18c0      	addlt	r0, r0, r3
 8018a9a:	4770      	bx	lr

08018a9c <__retarget_lock_acquire_recursive>:
 8018a9c:	4770      	bx	lr

08018a9e <__retarget_lock_release_recursive>:
 8018a9e:	4770      	bx	lr

08018aa0 <_init>:
 8018aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018aa2:	bf00      	nop
 8018aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018aa6:	bc08      	pop	{r3}
 8018aa8:	469e      	mov	lr, r3
 8018aaa:	4770      	bx	lr

08018aac <_fini>:
 8018aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018aae:	bf00      	nop
 8018ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018ab2:	bc08      	pop	{r3}
 8018ab4:	469e      	mov	lr, r3
 8018ab6:	4770      	bx	lr
